{"version":3,"file":"react-split-text.cjs.development.js","sources":["../src/components/Wrappers.tsx","../src/components/SplitTextInner.tsx","../src/utils.ts","../src/components/SplitText.tsx"],"sourcesContent":["import React from 'react';\n\nexport interface LineWrapperProp<T = any> {\n  /**\n   * The current index of the line.\n   */\n  lineIndex: number;\n  /**\n   * Extra props forwarded from SplitText.\n   */\n  extraProps?: T;\n}\n\nexport const LineWrapper: React.FC<LineWrapperProp> = ({ children }) => (\n  <div>{children}</div>\n);\n\nexport interface WordWrapperProp<T = any> {\n  /**\n   * The current line index where the word wrapper lives.\n   */\n  lineIndex: number;\n  /**\n   * The current index of the word.\n   */\n  wordIndex: number;\n  /**\n   * The current index of the total wrapped words inside <SplitText />.\n   */\n  countIndex: number;\n  /**\n   * Extra props forwarded from SplitText.\n   */\n  extraProps?: T;\n}\n\nexport const WordWrapper: React.FC<WordWrapperProp> = ({ children }) => (\n  <span style={{ whiteSpace: 'pre' }}>{children}</span>\n);\n\nexport interface LetterWrapperProp<T = any> {\n  /**\n   * The current line index where the letter wrapper lives.\n   */\n  lineIndex: number;\n  /**\n   * The current word index where the letter wrapper lives.\n   */\n  wordIndex: number;\n  /**\n   * The current index of the letter.\n   */\n  letterIndex: number;\n  /**\n   * The current index of the total wrapped letters inside <SplitText />.\n   */\n  countIndex: number;\n  /**\n   * Extra props forwarded from SplitText.\n   */\n  extraProps?: T;\n}\n\nexport const LetterWrapper: React.FC<LetterWrapperProp> = ({ children }) => (\n  <span>{children}</span>\n);\n","import React, {\n  useRef,\n  useLayoutEffect,\n  useState,\n  memo,\n  FC,\n  forwardRef,\n  MutableRefObject,\n} from 'react';\nimport { LineWrapper, WordWrapper, LetterWrapper } from './Wrappers';\nimport { SplitTextProps } from './SplitText';\n\nconst DefaultLineWrapper = memo(LineWrapper);\nconst DefaultWordWrapper = memo(WordWrapper);\nconst DefaultLetterWrapper = memo(LetterWrapper);\n\nexport const SplitTextInner: FC<SplitTextProps> = forwardRef(\n  function SplitTextInner(\n    {\n      children,\n      className,\n      style,\n      LineWrapper = DefaultLineWrapper,\n      WordWrapper = DefaultWordWrapper,\n      LetterWrapper = DefaultLetterWrapper,\n      extraProps,\n    },\n    ref\n  ) {\n    let text = '';\n    React.Children.map(children, child => {\n      if (typeof child === 'string' || typeof child === 'number') {\n        text += String(child);\n      } else {\n        throw new Error(`SplitText expect a text as children`);\n      }\n    });\n\n    const elRef = useRef<HTMLDivElement | null>(null);\n    const [lines, setLines] = useState<string[]>([]);\n    const maxCharPerLine = useRef<number>(0);\n\n    function makeLines() {\n      const el = elRef.current;\n      if (!el) return;\n\n      if (lines.length > 0) {\n        return refreshLines(lines, text);\n      }\n\n      let lastY;\n      let newLines: string[] = [];\n      let words: string[] = [];\n      for (const child of Array.from(el.children)) {\n        const y = child.getBoundingClientRect().top;\n        if (lastY == null) lastY = y;\n        if (y !== lastY) {\n          newLines.push(words.join(' '));\n          words = [];\n        }\n        lastY = y;\n        words.push((child.textContent || '').trim());\n      }\n      newLines.push(words.join(' '));\n      setLines(newLines);\n    }\n\n    function refreshLines(previous: string[], newText: string) {\n      const charPerLine =\n        maxCharPerLine.current ||\n        previous.map(line => line.length).sort((a, b) => b - a)[0];\n      const lines: string[] = [];\n      let line: string = '';\n      let charCount = 0;\n      const words = newText.split(' ');\n      for (const [i, word] of words.entries()) {\n        charCount += word.length + 1;\n        if (charCount > charPerLine + 1) {\n          lines.push(line);\n          line = '';\n          charCount = 0;\n        }\n        line += word.trim() + ' ';\n      }\n      lines.push(line);\n      setLines(lines.map(line => line.trim()));\n      if (charPerLine > maxCharPerLine.current) {\n        maxCharPerLine.current = charPerLine;\n      }\n    }\n\n    useLayoutEffect(() => makeLines(), [text]);\n\n    let wordCount = 0;\n    let letterCount = 0;\n\n    return lines.length ? (\n      <div\n        className={className}\n        ref={div => {\n          elRef.current = div;\n          if (typeof ref == 'function') {\n            ref(div);\n          } else if (ref) {\n            (ref as MutableRefObject<HTMLDivElement | null>).current = div;\n          }\n        }}\n        style={style}\n      >\n        {lines.map((line, i) => {\n          let words = line.split(' ');\n          words = words.map((word, i) =>\n            i === words.length - 1 ? word : word + ' '\n          );\n          return (\n            <LineWrapper key={i} lineIndex={i} extraProps={extraProps}>\n              {words.map((word, j) => {\n                const letters = word.split('');\n                return (\n                  <WordWrapper\n                    key={j}\n                    lineIndex={i}\n                    wordIndex={j}\n                    countIndex={wordCount++}\n                    extraProps={extraProps}\n                  >\n                    {letters.map((char, k) => (\n                      <LetterWrapper\n                        key={k}\n                        lineIndex={i}\n                        wordIndex={j}\n                        letterIndex={k}\n                        countIndex={letterCount++}\n                        extraProps={extraProps}\n                      >\n                        {char}\n                      </LetterWrapper>\n                    ))}\n                  </WordWrapper>\n                );\n              })}\n            </LineWrapper>\n          );\n        })}\n      </div>\n    ) : (\n      <div className={className} ref={elRef} style={style}>\n        {text.split(' ').map((word, i) => (\n          <span key={i}>{word} </span>\n        ))}\n      </div>\n    );\n  }\n);\n","export function debounce(callback: Function, wait: number, immediate = false) {\n  let timeout: NodeJS.Timeout;\n\n  return function(this: any, ...args: any[]) {\n    const callNow = immediate && !timeout;\n    const next = () => callback.apply(this, args);\n\n    clearTimeout(timeout);\n    timeout = setTimeout(next, wait);\n\n    if (callNow) {\n      next();\n    }\n  };\n}\n","import React, {\n  useState,\n  ComponentType,\n  CSSProperties,\n  FC,\n  useEffect,\n  forwardRef,\n  useCallback,\n} from 'react';\nimport {\n  LineWrapperProp,\n  WordWrapperProp,\n  LetterWrapperProp,\n} from './Wrappers';\nimport { SplitTextInner } from './SplitTextInner';\nimport { debounce } from '../utils';\n\nexport interface SplitTextProps<T = any> {\n  /**\n   * className to forward to the container.\n   * @type string\n   */\n  className?: string;\n  /**\n   * A style object to forward to the container.\n   * @type CSSProperties\n   */\n  style?: CSSProperties;\n  /**\n   * A React ref to forward to the container.\n   * @type A React ref\n   */\n  ref?: ((instance: unknown) => void) | React.MutableRefObject<unknown> | null;\n  /**\n   * A custom component to wrap each split line.\n   * @type ComponentType<LineWrapperProp>\n   */\n  LineWrapper?: ComponentType<LineWrapperProp>;\n  /**\n   * A custom component to wrap each split word.\n   * @type ComponentType<WordWrapperProp>\n   */\n  WordWrapper?: ComponentType<WordWrapperProp>;\n  /**\n   * A custom component to wrap each split letter.\n   * @type ComponentType<LetterWrapperProp>\n   */\n  LetterWrapper?: ComponentType<LetterWrapperProp>;\n  /**\n   * An extra value that will be forwarded to each wrappers.\n   * @type T = any\n   */\n  extraProps?: T;\n}\n\nexport const SplitText: FC<SplitTextProps> = forwardRef(function SplitText(\n  { children, ...props },\n  ref\n) {\n  const [key, setKey] = useState(0);\n\n  const onResize = debounce(() => setKey(v => v + 1), 300);\n\n  useEffect(() => {\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n\n  return (\n    <SplitTextInner key={key} {...props} ref={ref}>\n      {children}\n    </SplitTextInner>\n  );\n});\n"],"names":["LineWrapper","children","React","WordWrapper","style","whiteSpace","LetterWrapper","DefaultLineWrapper","memo","DefaultWordWrapper","DefaultLetterWrapper","SplitTextInner","forwardRef","ref","className","extraProps","text","Children","map","child","String","Error","elRef","useRef","useState","lines","setLines","maxCharPerLine","makeLines","el","current","length","refreshLines","lastY","newLines","words","Array","from","y","getBoundingClientRect","top","push","join","textContent","trim","previous","newText","charPerLine","line","sort","a","b","charCount","split","entries","i","word","useLayoutEffect","wordCount","letterCount","div","key","lineIndex","j","letters","wordIndex","countIndex","char","k","letterIndex","debounce","callback","wait","immediate","timeout","args","callNow","next","apply","clearTimeout","setTimeout","SplitText","props","setKey","onResize","v","useEffect","window","addEventListener","removeEventListener"],"mappings":"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"}