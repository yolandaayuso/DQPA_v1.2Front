import { ReactNode, SVGAttributes } from 'react';
import { SankeyExtraProperties, SankeyGraph, SankeyLink, SankeyNode } from 'd3-sankey';
import { Link } from 'd3-shape';
declare type NodeProps = Pick<SVGAttributes<SVGRectElement>, 'stroke' | 'strokeOpacity' | 'strokeWidth' | 'fill' | 'fillOpacity'>;
declare type LinkProps = Pick<SVGAttributes<SVGPathElement>, 'fill' | 'fillOpacity' | 'stroke' | 'strokeOpacity' | 'strokeWidth' | 'strokeDasharray' | 'strokeDashoffset'>;
declare type CreatePath<NodeDatum extends SankeyExtraProperties, LinkDatum extends SankeyExtraProperties> = Link<any, SankeyLink<NodeDatum, LinkDatum>, [number, number]>;
declare type NodeIdAccessor<NodeDatum extends SankeyExtraProperties, LinkDatum extends SankeyExtraProperties> = (node: SankeyNode<NodeDatum, LinkDatum>) => string | number;
declare type SourceAccessor<NodeDatum extends SankeyExtraProperties, LinkDatum extends SankeyExtraProperties> = Exclude<Parameters<CreatePath<NodeDatum, LinkDatum>['source']>, undefined>[0];
declare type TargetAccessor<NodeDatum extends SankeyExtraProperties, LinkDatum extends SankeyExtraProperties> = Exclude<Parameters<CreatePath<NodeDatum, LinkDatum>['target']>, undefined>[0];
declare type NodeAlignment<NodeDatum extends SankeyExtraProperties, LinkDatum extends SankeyExtraProperties> = (node: SankeyNode<NodeDatum, LinkDatum>, n: number) => number;
declare type SankeyChildrenFunction<NodeDatum extends SankeyExtraProperties, LinkDatum extends SankeyExtraProperties> = (args: {
    graph: SankeyGraph<NodeDatum, LinkDatum>;
    createPath: CreatePath<NodeDatum, LinkDatum>;
}) => ReactNode;
export declare type SankeyProps<NodeDatum extends SankeyExtraProperties, LinkDatum extends SankeyExtraProperties> = {
    /** The root data from which to derive the sankey layout. */
    root: SankeyGraph<NodeDatum, LinkDatum>;
    /** The class name(s) applied to the g element container. */
    className?: string;
    /** Render override function which is passed the computed sankey data graph */
    children?: SankeyChildrenFunction<NodeDatum, LinkDatum>;
    /** Sets the node id accessor. */
    nodeId?: NodeIdAccessor<NodeDatum, LinkDatum>;
    /** Sets the node width. */
    nodeWidth?: number;
    /** Sets the node padding. */
    nodePadding?: number;
    /** Sets the node alignment function. */
    nodeAlign?: NodeAlignment<NodeDatum, LinkDatum>;
    /** Sets the extent of the sankey layout. */
    extent?: [[number, number], [number, number]];
    /** Sets the size of the layout. A convenience method equivalent to using an extent of [[0, 0], [width, height]] */
    size?: [number, number];
    /** Sets the number of relaxation iterations. */
    iterations?: number;
    /** Sets the node comparison function. */
    nodeSort?: (a: SankeyNode<NodeDatum, LinkDatum>, b: SankeyNode<NodeDatum, LinkDatum>) => number | undefined | null;
    /** Sets the link comparison function */
    linkSort?: (a: SankeyLink<NodeDatum, LinkDatum>, b: SankeyLink<NodeDatum, LinkDatum>) => number | undefined | null;
    /** Sets the props for the default rendered node rect. Ignored when children is defined. */
    nodeProps?: NodeProps;
    /** Sets the props for the default rendered link path. Ignored when children is defined. */
    linkProps?: LinkProps;
    /** Sets the source accessor for determining the link path. */
    sourceAccessor?: SourceAccessor<NodeDatum, LinkDatum>;
    /** Sets the target accessor for determining the link path. */
    targetAccessor?: TargetAccessor<NodeDatum, LinkDatum>;
};
/**
 * Exposes d3-sankey as a React component.
 */
export default function Sankey<NodeDatum extends SankeyExtraProperties, LinkDatum extends SankeyExtraProperties>({ root, className, children, nodeId, nodeWidth, nodePadding, nodeAlign, extent, size, iterations, nodeSort, linkSort, nodeProps, linkProps, sourceAccessor, targetAccessor, }: SankeyProps<NodeDatum, LinkDatum>): JSX.Element;
export {};
//# sourceMappingURL=Sankey.d.ts.map