{"ast":null,"code":"'use strict';\n\nvar Mexp = require('./math_function.js');\nfunction inc(arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] += val;\n  }\n  return arr;\n}\nvar tokens = [{\n  token: 'sin',\n  show: 'sin',\n  type: 0,\n  value: Mexp.math.sin\n}, {\n  token: 'cos',\n  show: 'cos',\n  type: 0,\n  value: Mexp.math.cos\n}, {\n  token: 'tan',\n  show: 'tan',\n  type: 0,\n  value: Mexp.math.tan\n}, {\n  token: 'pi',\n  show: '&pi;',\n  type: 3,\n  value: 'PI'\n}, {\n  token: '(',\n  show: '(',\n  type: 4,\n  value: '('\n}, {\n  token: ')',\n  show: ')',\n  type: 5,\n  value: ')'\n}, {\n  token: 'P',\n  show: 'P',\n  type: 10,\n  value: Mexp.math.P\n}, {\n  token: 'C',\n  show: 'C',\n  type: 10,\n  value: Mexp.math.C\n}, {\n  token: ' ',\n  show: ' ',\n  type: 14,\n  value: ' '.anchor\n}, {\n  token: 'asin',\n  show: 'asin',\n  type: 0,\n  value: Mexp.math.asin\n}, {\n  token: 'acos',\n  show: 'acos',\n  type: 0,\n  value: Mexp.math.acos\n}, {\n  token: 'atan',\n  show: 'atan',\n  type: 0,\n  value: Mexp.math.atan\n}, {\n  token: '7',\n  show: '7',\n  type: 1,\n  value: '7'\n}, {\n  token: '8',\n  show: '8',\n  type: 1,\n  value: '8'\n}, {\n  token: '9',\n  show: '9',\n  type: 1,\n  value: '9'\n}, {\n  token: 'int',\n  show: 'Int',\n  type: 0,\n  value: Math.floor\n}, {\n  token: 'cosh',\n  show: 'cosh',\n  type: 0,\n  value: Mexp.math.cosh\n}, {\n  token: 'acosh',\n  show: 'acosh',\n  type: 0,\n  value: Mexp.math.acosh\n}, {\n  token: 'ln',\n  show: ' ln',\n  type: 0,\n  value: Math.log\n}, {\n  token: '^',\n  show: '^',\n  type: 10,\n  value: Math.pow\n}, {\n  token: 'root',\n  show: 'root',\n  type: 0,\n  value: Math.sqrt\n}, {\n  token: '4',\n  show: '4',\n  type: 1,\n  value: '4'\n}, {\n  token: '5',\n  show: '5',\n  type: 1,\n  value: '5'\n}, {\n  token: '6',\n  show: '6',\n  type: 1,\n  value: '6'\n}, {\n  token: '/',\n  show: '&divide;',\n  type: 2,\n  value: Mexp.math.div\n}, {\n  token: '!',\n  show: '!',\n  type: 7,\n  value: Mexp.math.fact\n}, {\n  token: 'tanh',\n  show: 'tanh',\n  type: 0,\n  value: Mexp.math.tanh\n}, {\n  token: 'atanh',\n  show: 'atanh',\n  type: 0,\n  value: Mexp.math.atanh\n}, {\n  token: 'Mod',\n  show: ' Mod ',\n  type: 2,\n  value: Mexp.math.mod\n}, {\n  token: '1',\n  show: '1',\n  type: 1,\n  value: '1'\n}, {\n  token: '2',\n  show: '2',\n  type: 1,\n  value: '2'\n}, {\n  token: '3',\n  show: '3',\n  type: 1,\n  value: '3'\n}, {\n  token: '*',\n  show: '&times;',\n  type: 2,\n  value: Mexp.math.mul\n}, {\n  token: 'sinh',\n  show: 'sinh',\n  type: 0,\n  value: Mexp.math.sinh\n}, {\n  token: 'asinh',\n  show: 'asinh',\n  type: 0,\n  value: Mexp.math.asinh\n}, {\n  token: 'e',\n  show: 'e',\n  type: 3,\n  value: 'E'\n}, {\n  token: 'log',\n  show: ' log',\n  type: 0,\n  value: Mexp.math.log\n}, {\n  token: '0',\n  show: '0',\n  type: 1,\n  value: '0'\n}, {\n  token: '.',\n  show: '.',\n  type: 6,\n  value: '.'\n}, {\n  token: '+',\n  show: '+',\n  type: 9,\n  value: Mexp.math.add\n}, {\n  token: '-',\n  show: '-',\n  type: 9,\n  value: Mexp.math.sub\n}, {\n  token: ',',\n  show: ',',\n  type: 11,\n  value: ','\n}, {\n  token: 'Sigma',\n  show: '&Sigma;',\n  type: 12,\n  value: Mexp.math.sigma\n}, {\n  token: 'n',\n  show: 'n',\n  type: 13,\n  value: 'n'\n}, {\n  token: 'Pi',\n  show: '&Pi;',\n  type: 12,\n  value: Mexp.math.Pi\n}, {\n  token: 'pow',\n  show: 'pow',\n  type: 8,\n  value: Math.pow,\n  numberOfArguments: 2\n}, {\n  token: '&',\n  show: '&',\n  type: 9,\n  value: Mexp.math.and\n}];\nvar preced = {\n  0: 11,\n  1: 0,\n  2: 3,\n  3: 0,\n  4: 0,\n  5: 0,\n  6: 0,\n  7: 11,\n  8: 11,\n  9: 1,\n  10: 10,\n  11: 0,\n  12: 11,\n  13: 0,\n  14: -1,\n  15: 11 // will be filtered after lexer\n}; // stores precedence by types\nfor (var i = 0; i < tokens.length; i++) {\n  tokens[i].precedence = preced[tokens[i].type];\n}\nvar type0 = {\n  0: true,\n  1: true,\n  3: true,\n  4: true,\n  6: true,\n  8: true,\n  9: true,\n  12: true,\n  13: true,\n  14: true,\n  15: true\n}; // type2:true,type4:true,type9:true,type11:true,type21:true,type22\nvar type1 = {\n  0: true,\n  1: true,\n  2: true,\n  3: true,\n  4: true,\n  5: true,\n  6: true,\n  7: true,\n  8: true,\n  9: true,\n  10: true,\n  11: true,\n  12: true,\n  13: true,\n  15: true\n}; // type3:true,type5:true,type7:true,type23\nvar type1Asterick = {\n  0: true,\n  3: true,\n  4: true,\n  8: true,\n  12: true,\n  13: true,\n  15: true\n};\nvar empty = {};\nvar type3Asterick = {\n  0: true,\n  1: true,\n  3: true,\n  4: true,\n  6: true,\n  8: true,\n  12: true,\n  13: true,\n  15: true\n}; // type_5:true,type_7:true,type_23\nvar type6 = {\n  1: true\n};\nvar newAr = [[], ['1', '2', '3', '7', '8', '9', '4', '5', '6', '+', '-', '*', '/', '(', ')', '^', '!', 'P', 'C', 'e', '0', '.', ',', 'n', ' ', '&'], ['pi', 'ln', 'Pi'], ['sin', 'cos', 'tan', 'Del', 'int', 'Mod', 'log', 'pow'], ['asin', 'acos', 'atan', 'cosh', 'root', 'tanh', 'sinh'], ['acosh', 'atanh', 'asinh', 'Sigma']];\nfunction match(str1, str2, i, x) {\n  for (var f = 0; f < x; f++) {\n    if (str1[i + f] !== str2[f]) {\n      return false;\n    }\n  }\n  return true;\n}\nMexp.tokenTypes = {\n  FUNCTION_WITH_ONE_ARG: 0,\n  NUMBER: 1,\n  BINARY_OPERATOR_HIGH_PRECENDENCE: 2,\n  CONSTANT: 3,\n  OPENING_PARENTHESIS: 4,\n  CLOSING_PARENTHESIS: 5,\n  DECIMAL: 6,\n  POSTFIX_FUNCTION_WITH_ONE_ARG: 7,\n  FUNCTION_WITH_N_ARGS: 8,\n  BINARY_OPERATOR_LOW_PRECENDENCE: 9,\n  BINARY_OPERATOR_PERMUTATION: 10,\n  COMMA: 11,\n  EVALUATED_FUNCTION: 12,\n  EVALUATED_FUNCTION_PARAMETER: 13,\n  SPACE: 14\n};\n/**\r\n  \r\n  0 : function with syntax function_name(Maths_exp)\r\n  1 : numbers\r\n  2 : binary operators like * / Mod left associate and same precedence\r\n  3 : Math constant values like e,pi,Cruncher ans\r\n  4 : opening bracket\r\n  5 : closing bracket\r\n  6 : decimal\r\n  7 : function with syntax (Math_exp)function_name\r\n  8: function with syntax function_name(Math_exp1,Math_exp2)\r\n  9 : binary operator like +,-\r\n  10: binary operator like P C or ^\r\n  11: ,\r\n  12: function with , seperated three parameters and third parameter is a string that will be mexp string\r\n  13: variable of Sigma function\r\n */\nMexp.addToken = function (newTokens) {\n  for (var i = 0; i < newTokens.length; i++) {\n    var x = newTokens[i].token.length;\n    var temp = -1;\n    if (newTokens[i].type === Mexp.tokenTypes.FUNCTION_WITH_N_ARGS && newTokens[i].numberOfArguments === undefined) {\n      newTokens[i].numberOfArguments = 2;\n    }\n\n    // newAr is a specially designed data structure index of 1d array = length of tokens\n    newAr[x] = newAr[x] || [];\n    for (var y = 0; y < newAr[x].length; y++) {\n      if (newTokens[i].token === newAr[x][y]) {\n        temp = indexOfToken(newAr[x][y], tokens);\n        break;\n      }\n    }\n    if (temp === -1) {\n      tokens.push(newTokens[i]);\n      newTokens[i].precedence = preced[newTokens[i].type];\n      if (newAr.length <= newTokens[i].token.length) {\n        newAr[newTokens[i].token.length] = [];\n      }\n      newAr[newTokens[i].token.length].push(newTokens[i].token);\n    } else {\n      // overwrite\n      tokens[temp] = newTokens[i];\n      newTokens[i].precedence = preced[newTokens[i].type];\n    }\n  }\n};\nfunction indexOfToken(key, tokens) {\n  for (var search = 0; search < tokens.length; search++) {\n    if (tokens[search].token === key) return search;\n  }\n  return -1;\n}\nfunction tokenize(string) {\n  var nodes = [];\n  var length = string.length;\n  var key, x, y;\n  for (var i = 0; i < length; i++) {\n    if (i < length - 1 && string[i] === ' ' && string[i + 1] === ' ') {\n      continue;\n    }\n    key = '';\n    for (x = string.length - i > newAr.length - 2 ? newAr.length - 1 : string.length - i; x > 0; x--) {\n      if (newAr[x] === undefined) continue;\n      for (y = 0; y < newAr[x].length; y++) {\n        if (match(string, newAr[x][y], i, x)) {\n          key = newAr[x][y];\n          y = newAr[x].length;\n          x = 0;\n        }\n      }\n    }\n    i += key.length - 1;\n    if (key === '') {\n      throw new Mexp.Exception(\"Can't understand after \" + string.slice(i));\n    }\n    nodes.push(tokens[indexOfToken(key, tokens)]);\n  }\n  return nodes;\n}\nvar changeSignObj = {\n  value: Mexp.math.changeSign,\n  type: 0,\n  pre: 21,\n  show: '-'\n};\nvar closingParObj = {\n  value: ')',\n  show: ')',\n  type: 5,\n  pre: 0\n};\nvar openingParObj = {\n  value: '(',\n  type: 4,\n  pre: 0,\n  show: '('\n};\nMexp.lex = function (inp, tokens) {\n  'use strict';\n\n  var str = [openingParObj];\n  var ptc = []; // Parenthesis to close at the beginning is after one token\n  var inpStr = inp;\n  var allowed = type0;\n  var bracToClose = 0;\n  var asterick = empty;\n  var prevKey = '';\n  var i;\n  if (typeof tokens !== 'undefined') {\n    Mexp.addToken(tokens);\n  }\n  var obj = {};\n  var nodes = tokenize(inpStr);\n  for (i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (node.type === 14) {\n      if (i > 0 && i < nodes.length - 1 && nodes[i + 1].type === 1 && (nodes[i - 1].type === 1 || nodes[i - 1].type === 6)) {\n        throw new Mexp.Exception('Unexpected Space');\n      }\n      continue;\n    }\n    var cToken = node.token;\n    var cType = node.type;\n    var cEv = node.value;\n    var cPre = node.precedence;\n    var cShow = node.show;\n    var pre = str[str.length - 1];\n    var j;\n    for (j = ptc.length; j--;) {\n      // loop over ptc\n      if (ptc[j] === 0) {\n        if ([0, 2, 3, 4, 5, 9, 11, 12, 13].indexOf(cType) !== -1) {\n          if (allowed[cType] !== true) {\n            throw new Mexp.Exception(cToken + ' is not allowed after ' + prevKey);\n          }\n          str.push(closingParObj);\n          allowed = type1;\n          asterick = type3Asterick;\n          ptc.pop();\n        }\n      } else break;\n    }\n    if (allowed[cType] !== true) {\n      throw new Mexp.Exception(cToken + ' is not allowed after ' + prevKey);\n    }\n    if (asterick[cType] === true) {\n      cType = 2;\n      cEv = Mexp.math.mul;\n      cShow = '&times;';\n      cPre = 3;\n      i = i - 1;\n    }\n    obj = {\n      value: cEv,\n      type: cType,\n      pre: cPre,\n      show: cShow,\n      numberOfArguments: node.numberOfArguments\n    };\n    if (cType === 0) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n      if (nodes[i + 1].type !== 4) {\n        str.push(openingParObj);\n        ptc.push(2);\n      }\n      // bracToClose++\n    } else if (cType === 1) {\n      if (pre.type === 1) {\n        pre.value += cEv;\n        inc(ptc, 1);\n      } else {\n        str.push(obj);\n      }\n      allowed = type1;\n      asterick = type1Asterick;\n    } else if (cType === 2) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n    } else if (cType === 3) {\n      // constant\n      str.push(obj);\n      allowed = type1;\n      asterick = type3Asterick;\n    } else if (cType === 4) {\n      inc(ptc, 1);\n      bracToClose++;\n      allowed = type0;\n      asterick = empty;\n      str.push(obj);\n    } else if (cType === 5) {\n      if (!bracToClose) {\n        throw new Mexp.Exception('Closing parenthesis are more than opening one, wait What!!!');\n      }\n      bracToClose--;\n      allowed = type1;\n      asterick = type3Asterick;\n      str.push(obj);\n      inc(ptc, 1);\n    } else if (cType === 6) {\n      if (pre.hasDec) {\n        throw new Mexp.Exception('Two decimals are not allowed in one number');\n      }\n      if (pre.type !== 1) {\n        pre = {\n          value: 0,\n          type: 1,\n          pre: 0\n        }; // pre needs to be changed as it will the last value now to be safe in later code\n        str.push(pre);\n        // inc(ptc, 1)\n      }\n      allowed = type6;\n      inc(ptc, 1);\n      asterick = empty;\n      pre.value += cEv;\n      pre.hasDec = true;\n    } else if (cType === 7) {\n      allowed = type1;\n      asterick = type3Asterick;\n      inc(ptc, 1);\n      str.push(obj);\n    }\n    if (cType === 8) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, node.numberOfArguments + 2);\n      str.push(obj);\n      // str.push(openingParObj)\n      if (nodes[i + 1].type !== 4) {\n        str.push(openingParObj);\n        ptc.push(node.numberOfArguments + 2);\n      }\n    } else if (cType === 9) {\n      if (pre.type === 9) {\n        if (pre.value === Mexp.math.add) {\n          pre.value = cEv;\n          pre.show = cShow;\n          inc(ptc, 1);\n        } else if (pre.value === Mexp.math.sub && cShow === '-') {\n          pre.value = Mexp.math.add;\n          pre.show = '+';\n          inc(ptc, 1);\n        }\n      } else if (pre.type !== 5 && pre.type !== 7 && pre.type !== 1 && pre.type !== 3 && pre.type !== 13) {\n        // changesign only when negative is found\n        if (cToken === '-') {\n          // do nothing for + token\n          // don't add with the above if statement as that will run the else statement of parent if on Ctoken +\n          allowed = type0;\n          asterick = empty;\n          inc(ptc, 2).push(2);\n          str.push(changeSignObj);\n          str.push(openingParObj);\n        }\n      } else {\n        str.push(obj);\n        inc(ptc, 2);\n      }\n      allowed = type0;\n      asterick = empty;\n    } else if (cType === 10) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n    } else if (cType === 11) {\n      allowed = type0;\n      asterick = empty;\n      str.push(obj);\n    } else if (cType === 12) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 6);\n      str.push(obj);\n      if (nodes[i + 1].type !== 4) {\n        str.push(openingParObj);\n        ptc.push(6);\n      }\n    } else if (cType === 13) {\n      allowed = type1;\n      asterick = type3Asterick;\n      str.push(obj);\n    }\n    inc(ptc, -1);\n    prevKey = cToken;\n  }\n  for (j = ptc.length; j--;) {\n    // loop over ptc\n    str.push(closingParObj);\n  }\n  if (allowed[5] !== true) {\n    throw new Mexp.Exception('complete the expression');\n  }\n  while (bracToClose--) {\n    str.push(closingParObj);\n  }\n  str.push(closingParObj);\n  //        console.log(str);\n  return new Mexp(str);\n};\nmodule.exports = Mexp;","map":{"version":3,"names":["Mexp","require","inc","arr","val","i","length","tokens","token","show","type","value","math","sin","cos","tan","P","C","anchor","asin","acos","atan","Math","floor","cosh","acosh","log","pow","sqrt","div","fact","tanh","atanh","mod","mul","sinh","asinh","add","sub","sigma","Pi","numberOfArguments","and","preced","precedence","type0","type1","type1Asterick","empty","type3Asterick","type6","newAr","match","str1","str2","x","f","tokenTypes","FUNCTION_WITH_ONE_ARG","NUMBER","BINARY_OPERATOR_HIGH_PRECENDENCE","CONSTANT","OPENING_PARENTHESIS","CLOSING_PARENTHESIS","DECIMAL","POSTFIX_FUNCTION_WITH_ONE_ARG","FUNCTION_WITH_N_ARGS","BINARY_OPERATOR_LOW_PRECENDENCE","BINARY_OPERATOR_PERMUTATION","COMMA","EVALUATED_FUNCTION","EVALUATED_FUNCTION_PARAMETER","SPACE","addToken","newTokens","temp","undefined","y","indexOfToken","push","key","search","tokenize","string","nodes","Exception","slice","changeSignObj","changeSign","pre","closingParObj","openingParObj","lex","inp","str","ptc","inpStr","allowed","bracToClose","asterick","prevKey","obj","node","cToken","cType","cEv","cPre","cShow","j","indexOf","pop","hasDec","module","exports"],"sources":["C:/Users/Yolanda Ayuso/Desktop/frontDespliegueDef/DQPA_v1.2Front/dqpa/node_modules/math-expression-evaluator/src/lexer.js"],"sourcesContent":["'use strict'\r\nvar Mexp = require('./math_function.js')\r\nfunction inc(arr, val) {\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tarr[i] += val\r\n\t}\r\n\treturn arr\r\n}\r\nvar tokens = [\r\n\t{ token: 'sin', show: 'sin', type: 0, value: Mexp.math.sin },\r\n\t{ token: 'cos', show: 'cos', type: 0, value: Mexp.math.cos },\r\n\t{ token: 'tan', show: 'tan', type: 0, value: Mexp.math.tan },\r\n\t{ token: 'pi', show: '&pi;', type: 3, value: 'PI' },\r\n\t{ token: '(', show: '(', type: 4, value: '(' },\r\n\t{ token: ')', show: ')', type: 5, value: ')' },\r\n\t{ token: 'P', show: 'P', type: 10, value: Mexp.math.P },\r\n\t{ token: 'C', show: 'C', type: 10, value: Mexp.math.C },\r\n\t{ token: ' ', show: ' ', type: 14, value: ' '.anchor },\r\n\t{ token: 'asin', show: 'asin', type: 0, value: Mexp.math.asin },\r\n\t{ token: 'acos', show: 'acos', type: 0, value: Mexp.math.acos },\r\n\t{ token: 'atan', show: 'atan', type: 0, value: Mexp.math.atan },\r\n\t{ token: '7', show: '7', type: 1, value: '7' },\r\n\t{ token: '8', show: '8', type: 1, value: '8' },\r\n\t{ token: '9', show: '9', type: 1, value: '9' },\r\n\t{ token: 'int', show: 'Int', type: 0, value: Math.floor },\r\n\t{ token: 'cosh', show: 'cosh', type: 0, value: Mexp.math.cosh },\r\n\t{ token: 'acosh', show: 'acosh', type: 0, value: Mexp.math.acosh },\r\n\t{ token: 'ln', show: ' ln', type: 0, value: Math.log },\r\n\t{ token: '^', show: '^', type: 10, value: Math.pow },\r\n\t{ token: 'root', show: 'root', type: 0, value: Math.sqrt },\r\n\t{ token: '4', show: '4', type: 1, value: '4' },\r\n\t{ token: '5', show: '5', type: 1, value: '5' },\r\n\t{ token: '6', show: '6', type: 1, value: '6' },\r\n\t{ token: '/', show: '&divide;', type: 2, value: Mexp.math.div },\r\n\t{ token: '!', show: '!', type: 7, value: Mexp.math.fact },\r\n\t{ token: 'tanh', show: 'tanh', type: 0, value: Mexp.math.tanh },\r\n\t{ token: 'atanh', show: 'atanh', type: 0, value: Mexp.math.atanh },\r\n\t{ token: 'Mod', show: ' Mod ', type: 2, value: Mexp.math.mod },\r\n\t{ token: '1', show: '1', type: 1, value: '1' },\r\n\t{ token: '2', show: '2', type: 1, value: '2' },\r\n\t{ token: '3', show: '3', type: 1, value: '3' },\r\n\t{ token: '*', show: '&times;', type: 2, value: Mexp.math.mul },\r\n\t{ token: 'sinh', show: 'sinh', type: 0, value: Mexp.math.sinh },\r\n\t{ token: 'asinh', show: 'asinh', type: 0, value: Mexp.math.asinh },\r\n\t{ token: 'e', show: 'e', type: 3, value: 'E' },\r\n\t{ token: 'log', show: ' log', type: 0, value: Mexp.math.log },\r\n\t{ token: '0', show: '0', type: 1, value: '0' },\r\n\t{ token: '.', show: '.', type: 6, value: '.' },\r\n\t{ token: '+', show: '+', type: 9, value: Mexp.math.add },\r\n\t{ token: '-', show: '-', type: 9, value: Mexp.math.sub },\r\n\t{ token: ',', show: ',', type: 11, value: ',' },\r\n\t{ token: 'Sigma', show: '&Sigma;', type: 12, value: Mexp.math.sigma },\r\n\t{ token: 'n', show: 'n', type: 13, value: 'n' },\r\n\t{ token: 'Pi', show: '&Pi;', type: 12, value: Mexp.math.Pi },\r\n\t{ token: 'pow', show: 'pow', type: 8, value: Math.pow, numberOfArguments: 2 },\r\n\t{ token: '&', show: '&', type: 9, value: Mexp.math.and },\r\n]\r\nvar preced = {\r\n\t0: 11,\r\n\t1: 0,\r\n\t2: 3,\r\n\t3: 0,\r\n\t4: 0,\r\n\t5: 0,\r\n\t6: 0,\r\n\t7: 11,\r\n\t8: 11,\r\n\t9: 1,\r\n\t10: 10,\r\n\t11: 0,\r\n\t12: 11,\r\n\t13: 0,\r\n\t14: -1,\r\n\t15: 11, // will be filtered after lexer\r\n} // stores precedence by types\r\nfor (var i = 0; i < tokens.length; i++) {\r\n\ttokens[i].precedence = preced[tokens[i].type]\r\n}\r\nvar type0 = {\r\n\t0: true,\r\n\t1: true,\r\n\t3: true,\r\n\t4: true,\r\n\t6: true,\r\n\t8: true,\r\n\t9: true,\r\n\t12: true,\r\n\t13: true,\r\n\t14: true,\r\n\t15: true,\r\n} // type2:true,type4:true,type9:true,type11:true,type21:true,type22\r\nvar type1 = {\r\n\t0: true,\r\n\t1: true,\r\n\t2: true,\r\n\t3: true,\r\n\t4: true,\r\n\t5: true,\r\n\t6: true,\r\n\t7: true,\r\n\t8: true,\r\n\t9: true,\r\n\t10: true,\r\n\t11: true,\r\n\t12: true,\r\n\t13: true,\r\n\t15: true,\r\n} // type3:true,type5:true,type7:true,type23\r\nvar type1Asterick = {\r\n\t0: true,\r\n\t3: true,\r\n\t4: true,\r\n\t8: true,\r\n\t12: true,\r\n\t13: true,\r\n\t15: true,\r\n}\r\nvar empty = {}\r\nvar type3Asterick = {\r\n\t0: true,\r\n\t1: true,\r\n\t3: true,\r\n\t4: true,\r\n\t6: true,\r\n\t8: true,\r\n\t12: true,\r\n\t13: true,\r\n\t15: true,\r\n} // type_5:true,type_7:true,type_23\r\nvar type6 = {\r\n\t1: true,\r\n}\r\nvar newAr = [\r\n\t[],\r\n\t[\r\n\t\t'1',\r\n\t\t'2',\r\n\t\t'3',\r\n\t\t'7',\r\n\t\t'8',\r\n\t\t'9',\r\n\t\t'4',\r\n\t\t'5',\r\n\t\t'6',\r\n\t\t'+',\r\n\t\t'-',\r\n\t\t'*',\r\n\t\t'/',\r\n\t\t'(',\r\n\t\t')',\r\n\t\t'^',\r\n\t\t'!',\r\n\t\t'P',\r\n\t\t'C',\r\n\t\t'e',\r\n\t\t'0',\r\n\t\t'.',\r\n\t\t',',\r\n\t\t'n',\r\n\t\t' ',\r\n\t\t'&',\r\n\t],\r\n\t['pi', 'ln', 'Pi'],\r\n\t['sin', 'cos', 'tan', 'Del', 'int', 'Mod', 'log', 'pow'],\r\n\t['asin', 'acos', 'atan', 'cosh', 'root', 'tanh', 'sinh'],\r\n\t['acosh', 'atanh', 'asinh', 'Sigma'],\r\n]\r\n\r\nfunction match(str1, str2, i, x) {\r\n\tfor (var f = 0; f < x; f++) {\r\n\t\tif (str1[i + f] !== str2[f]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\treturn true\r\n}\r\nMexp.tokenTypes = {\r\n\tFUNCTION_WITH_ONE_ARG: 0,\r\n\tNUMBER: 1,\r\n\tBINARY_OPERATOR_HIGH_PRECENDENCE: 2,\r\n\tCONSTANT: 3,\r\n\tOPENING_PARENTHESIS: 4,\r\n\tCLOSING_PARENTHESIS: 5,\r\n\tDECIMAL: 6,\r\n\tPOSTFIX_FUNCTION_WITH_ONE_ARG: 7,\r\n\tFUNCTION_WITH_N_ARGS: 8,\r\n\tBINARY_OPERATOR_LOW_PRECENDENCE: 9,\r\n\tBINARY_OPERATOR_PERMUTATION: 10,\r\n\tCOMMA: 11,\r\n\tEVALUATED_FUNCTION: 12,\r\n\tEVALUATED_FUNCTION_PARAMETER: 13,\r\n\tSPACE: 14,\r\n}\r\n/**\r\n  \r\n  0 : function with syntax function_name(Maths_exp)\r\n  1 : numbers\r\n  2 : binary operators like * / Mod left associate and same precedence\r\n  3 : Math constant values like e,pi,Cruncher ans\r\n  4 : opening bracket\r\n  5 : closing bracket\r\n  6 : decimal\r\n  7 : function with syntax (Math_exp)function_name\r\n  8: function with syntax function_name(Math_exp1,Math_exp2)\r\n  9 : binary operator like +,-\r\n  10: binary operator like P C or ^\r\n  11: ,\r\n  12: function with , seperated three parameters and third parameter is a string that will be mexp string\r\n  13: variable of Sigma function\r\n */\r\nMexp.addToken = function (newTokens) {\r\n\tfor (var i = 0; i < newTokens.length; i++) {\r\n\t\tvar x = newTokens[i].token.length\r\n\t\tvar temp = -1\r\n\t\tif (newTokens[i].type === Mexp.tokenTypes.FUNCTION_WITH_N_ARGS && newTokens[i].numberOfArguments === undefined) {\r\n\t\t\tnewTokens[i].numberOfArguments = 2\r\n\t\t}\r\n\r\n\t\t// newAr is a specially designed data structure index of 1d array = length of tokens\r\n\t\tnewAr[x] = newAr[x] || []\r\n\t\tfor (var y = 0; y < newAr[x].length; y++) {\r\n\t\t\tif (newTokens[i].token === newAr[x][y]) {\r\n\t\t\t\ttemp = indexOfToken(newAr[x][y], tokens)\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (temp === -1) {\r\n\t\t\ttokens.push(newTokens[i])\r\n\t\t\tnewTokens[i].precedence = preced[newTokens[i].type]\r\n\t\t\tif (newAr.length <= newTokens[i].token.length) {\r\n\t\t\t\tnewAr[newTokens[i].token.length] = []\r\n\t\t\t}\r\n\t\t\tnewAr[newTokens[i].token.length].push(newTokens[i].token)\r\n\t\t} else {\r\n\t\t\t// overwrite\r\n\t\t\ttokens[temp] = newTokens[i]\r\n\t\t\tnewTokens[i].precedence = preced[newTokens[i].type]\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction indexOfToken(key, tokens) {\r\n\tfor (var search = 0; search < tokens.length; search++) {\r\n\t\tif (tokens[search].token === key) return search\r\n\t}\r\n\treturn -1\r\n}\r\nfunction tokenize(string) {\r\n\tvar nodes = []\r\n\tvar length = string.length\r\n\tvar key, x, y\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tif (i < length - 1 && string[i] === ' ' && string[i + 1] === ' ') {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tkey = ''\r\n\t\tfor (x = string.length - i > newAr.length - 2 ? newAr.length - 1 : string.length - i; x > 0; x--) {\r\n\t\t\tif (newAr[x] === undefined) continue\r\n\t\t\tfor (y = 0; y < newAr[x].length; y++) {\r\n\t\t\t\tif (match(string, newAr[x][y], i, x)) {\r\n\t\t\t\t\tkey = newAr[x][y]\r\n\t\t\t\t\ty = newAr[x].length\r\n\t\t\t\t\tx = 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\ti += key.length - 1\r\n\t\tif (key === '') {\r\n\t\t\tthrow new Mexp.Exception(\"Can't understand after \" + string.slice(i))\r\n\t\t}\r\n\t\tnodes.push(tokens[indexOfToken(key, tokens)])\r\n\t}\r\n\treturn nodes\r\n}\r\n\r\nvar changeSignObj = {\r\n\tvalue: Mexp.math.changeSign,\r\n\ttype: 0,\r\n\tpre: 21,\r\n\tshow: '-',\r\n}\r\nvar closingParObj = {\r\n\tvalue: ')',\r\n\tshow: ')',\r\n\ttype: 5,\r\n\tpre: 0,\r\n}\r\nvar openingParObj = {\r\n\tvalue: '(',\r\n\ttype: 4,\r\n\tpre: 0,\r\n\tshow: '(',\r\n}\r\nMexp.lex = function (inp, tokens) {\r\n\t'use strict'\r\n\r\n\tvar str = [openingParObj]\r\n\r\n\tvar ptc = [] // Parenthesis to close at the beginning is after one token\r\n\tvar inpStr = inp\r\n\tvar allowed = type0\r\n\tvar bracToClose = 0\r\n\tvar asterick = empty\r\n\tvar prevKey = ''\r\n\tvar i\r\n\tif (typeof tokens !== 'undefined') {\r\n\t\tMexp.addToken(tokens)\r\n\t}\r\n\tvar obj = {}\r\n\tvar nodes = tokenize(inpStr)\r\n\tfor (i = 0; i < nodes.length; i++) {\r\n\t\tvar node = nodes[i]\r\n\t\tif (node.type === 14) {\r\n\t\t\tif (\r\n\t\t\t\ti > 0 &&\r\n\t\t\t\ti < nodes.length - 1 &&\r\n\t\t\t\tnodes[i + 1].type === 1 &&\r\n\t\t\t\t(nodes[i - 1].type === 1 || nodes[i - 1].type === 6)\r\n\t\t\t) {\r\n\t\t\t\tthrow new Mexp.Exception('Unexpected Space')\r\n\t\t\t}\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tvar cToken = node.token\r\n\t\tvar cType = node.type\r\n\t\tvar cEv = node.value\r\n\t\tvar cPre = node.precedence\r\n\t\tvar cShow = node.show\r\n\t\tvar pre = str[str.length - 1]\r\n\t\tvar j\r\n\t\tfor (j = ptc.length; j--; ) {\r\n\t\t\t// loop over ptc\r\n\t\t\tif (ptc[j] === 0) {\r\n\t\t\t\tif ([0, 2, 3, 4, 5, 9, 11, 12, 13].indexOf(cType) !== -1) {\r\n\t\t\t\t\tif (allowed[cType] !== true) {\r\n\t\t\t\t\t\tthrow new Mexp.Exception(cToken + ' is not allowed after ' + prevKey)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstr.push(closingParObj)\r\n\t\t\t\t\tallowed = type1\r\n\t\t\t\t\tasterick = type3Asterick\r\n\t\t\t\t\tptc.pop()\r\n\t\t\t\t}\r\n\t\t\t} else break\r\n\t\t}\r\n\t\tif (allowed[cType] !== true) {\r\n\t\t\tthrow new Mexp.Exception(cToken + ' is not allowed after ' + prevKey)\r\n\t\t}\r\n\t\tif (asterick[cType] === true) {\r\n\t\t\tcType = 2\r\n\t\t\tcEv = Mexp.math.mul\r\n\t\t\tcShow = '&times;'\r\n\t\t\tcPre = 3\r\n\t\t\ti = i - 1\r\n\t\t}\r\n\t\tobj = {\r\n\t\t\tvalue: cEv,\r\n\t\t\ttype: cType,\r\n\t\t\tpre: cPre,\r\n\t\t\tshow: cShow,\r\n\t\t\tnumberOfArguments: node.numberOfArguments,\r\n\t\t}\r\n\t\tif (cType === 0) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tinc(ptc, 2)\r\n\t\t\tstr.push(obj)\r\n\t\t\tif (nodes[i + 1].type !== 4) {\r\n\t\t\t\tstr.push(openingParObj)\r\n\t\t\t\tptc.push(2)\r\n\t\t\t}\r\n\t\t\t// bracToClose++\r\n\t\t} else if (cType === 1) {\r\n\t\t\tif (pre.type === 1) {\r\n\t\t\t\tpre.value += cEv\r\n\t\t\t\tinc(ptc, 1)\r\n\t\t\t} else {\r\n\t\t\t\tstr.push(obj)\r\n\t\t\t}\r\n\t\t\tallowed = type1\r\n\t\t\tasterick = type1Asterick\r\n\t\t} else if (cType === 2) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tinc(ptc, 2)\r\n\t\t\tstr.push(obj)\r\n\t\t} else if (cType === 3) {\r\n\t\t\t// constant\r\n\t\t\tstr.push(obj)\r\n\t\t\tallowed = type1\r\n\t\t\tasterick = type3Asterick\r\n\t\t} else if (cType === 4) {\r\n\t\t\tinc(ptc, 1)\r\n\t\t\tbracToClose++\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tstr.push(obj)\r\n\t\t} else if (cType === 5) {\r\n\t\t\tif (!bracToClose) {\r\n\t\t\t\tthrow new Mexp.Exception('Closing parenthesis are more than opening one, wait What!!!')\r\n\t\t\t}\r\n\t\t\tbracToClose--\r\n\t\t\tallowed = type1\r\n\t\t\tasterick = type3Asterick\r\n\t\t\tstr.push(obj)\r\n\t\t\tinc(ptc, 1)\r\n\t\t} else if (cType === 6) {\r\n\t\t\tif (pre.hasDec) {\r\n\t\t\t\tthrow new Mexp.Exception('Two decimals are not allowed in one number')\r\n\t\t\t}\r\n\t\t\tif (pre.type !== 1) {\r\n\t\t\t\tpre = {\r\n\t\t\t\t\tvalue: 0,\r\n\t\t\t\t\ttype: 1,\r\n\t\t\t\t\tpre: 0,\r\n\t\t\t\t} // pre needs to be changed as it will the last value now to be safe in later code\r\n\t\t\t\tstr.push(pre)\r\n\t\t\t\t// inc(ptc, 1)\r\n\t\t\t}\r\n\t\t\tallowed = type6\r\n\t\t\tinc(ptc, 1)\r\n\t\t\tasterick = empty\r\n\t\t\tpre.value += cEv\r\n\t\t\tpre.hasDec = true\r\n\t\t} else if (cType === 7) {\r\n\t\t\tallowed = type1\r\n\t\t\tasterick = type3Asterick\r\n\t\t\tinc(ptc, 1)\r\n\t\t\tstr.push(obj)\r\n\t\t}\r\n\t\tif (cType === 8) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tinc(ptc, node.numberOfArguments + 2)\r\n\t\t\tstr.push(obj)\r\n\t\t\t// str.push(openingParObj)\r\n\t\t\tif (nodes[i + 1].type !== 4) {\r\n\t\t\t\tstr.push(openingParObj)\r\n\t\t\t\tptc.push(node.numberOfArguments + 2)\r\n\t\t\t}\r\n\t\t} else if (cType === 9) {\r\n\t\t\tif (pre.type === 9) {\r\n\t\t\t\tif (pre.value === Mexp.math.add) {\r\n\t\t\t\t\tpre.value = cEv\r\n\t\t\t\t\tpre.show = cShow\r\n\t\t\t\t\tinc(ptc, 1)\r\n\t\t\t\t} else if (pre.value === Mexp.math.sub && cShow === '-') {\r\n\t\t\t\t\tpre.value = Mexp.math.add\r\n\t\t\t\t\tpre.show = '+'\r\n\t\t\t\t\tinc(ptc, 1)\r\n\t\t\t\t}\r\n\t\t\t} else if (pre.type !== 5 && pre.type !== 7 && pre.type !== 1 && pre.type !== 3 && pre.type !== 13) {\r\n\t\t\t\t// changesign only when negative is found\r\n\t\t\t\tif (cToken === '-') {\r\n\t\t\t\t\t// do nothing for + token\r\n\t\t\t\t\t// don't add with the above if statement as that will run the else statement of parent if on Ctoken +\r\n\t\t\t\t\tallowed = type0\r\n\t\t\t\t\tasterick = empty\r\n\t\t\t\t\tinc(ptc, 2).push(2)\r\n\t\t\t\t\tstr.push(changeSignObj)\r\n\t\t\t\t\tstr.push(openingParObj)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tstr.push(obj)\r\n\t\t\t\tinc(ptc, 2)\r\n\t\t\t}\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t} else if (cType === 10) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tinc(ptc, 2)\r\n\t\t\tstr.push(obj)\r\n\t\t} else if (cType === 11) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tstr.push(obj)\r\n\t\t} else if (cType === 12) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tinc(ptc, 6)\r\n\t\t\tstr.push(obj)\r\n\t\t\tif (nodes[i + 1].type !== 4) {\r\n\t\t\t\tstr.push(openingParObj)\r\n\t\t\t\tptc.push(6)\r\n\t\t\t}\r\n\t\t} else if (cType === 13) {\r\n\t\t\tallowed = type1\r\n\t\t\tasterick = type3Asterick\r\n\t\t\tstr.push(obj)\r\n\t\t}\r\n\r\n\t\tinc(ptc, -1)\r\n\t\tprevKey = cToken\r\n\t}\r\n\tfor (j = ptc.length; j--; ) {\r\n\t\t// loop over ptc\r\n\t\tstr.push(closingParObj)\r\n\t}\r\n\tif (allowed[5] !== true) {\r\n\t\tthrow new Mexp.Exception('complete the expression')\r\n\t}\r\n\twhile (bracToClose--) {\r\n\t\tstr.push(closingParObj)\r\n\t}\r\n\r\n\tstr.push(closingParObj)\r\n\t//        console.log(str);\r\n\treturn new Mexp(str)\r\n}\r\nmodule.exports = Mexp\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}