{"ast":null,"code":"/*!\r\n * Chart.js v4.4.6\r\n * https://www.chartjs.org\r\n * (c) 2024 Chart.js Contributors\r\n * Released under the MIT License\r\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  if (!found && !options.all) {\n    return 0;\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n  const {\n    iScale,\n    vScale\n  } = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n    const skipNull = meta => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\r\n * @namespace Chart._adapters\r\n * @since 2.8.0\r\n * @private\r\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\r\n * Date adapter (current used by the time scale)\r\n * @namespace Chart._adapters._date\r\n * @memberof Chart._adapters\r\n * @private\r\n */\nclass DateAdapterBase {\n  /**\r\n  * Override default date adapter methods.\r\n  * Accepts type parameter to define options type.\r\n  * @example\r\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\r\n  *   init() {\r\n  *     console.log(this.options.myAdapterOption);\r\n  *   }\r\n  * })\r\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  options;\n  constructor(options) {\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  static defaults = {};\n  static defaultRoutes = (() => undefined)();\n  x;\n  y;\n  active = false;\n  options;\n  $animations;\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n          case 'inner':\n            if (i === ilen - 1) {\n              left -= width;\n            } else if (i > 0) {\n              left -= width / 2;\n            }\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._each('register', args);\n  }\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._each('unregister', args);\n  }\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._each('register', args, this.controllers);\n  }\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    this._each('register', args, this.elements);\n  }\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    this._each('register', args, this.plugins);\n  }\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (var _len11 = arguments.length, scaleOptions = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    scaleOptions[_key11 - 1] = arguments[_key11];\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).some(key => isFunction(value[key]));\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.4.6\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\nclass Chart {\n  static defaults = (() => defaults)();\n  static instances = (() => instances)();\n  static overrides = (() => overrides)();\n  static registry = (() => registry)();\n  static version = (() => version)();\n  static getChart = (() => getChart)();\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\r\n * Parse border radius from the provided options\r\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\r\n * Convert (r, 𝜃) to (x, y)\r\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\r\n * Path the arc, respecting border radius by separating into left and right halves.\r\n *\r\n *   Start      End\r\n *\r\n *    1--->a--->2    Outer\r\n *   /           \\\r\n *   8           3\r\n *   |           |\r\n *   |           |\r\n *   7           4\r\n *   \\           /\r\n *    6<---b<---5    Inner\r\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = (() => ({\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  }))();\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash'\n  };\n  circumference;\n  endAngle;\n  fullCircles;\n  innerRadius;\n  outerRadius;\n  pixelMargin;\n  startAngle;\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  static id = 'point';\n  parsed;\n  skip;\n  stop;\n  /**\r\n  * @type {any}\r\n  */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\r\n  * @type {any}\r\n  */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = (() => ({\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  }))();\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  static positioners = (() => positioners)();\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive.filter(i => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = (() => ({\n    ticks: {\n      callback: _getLabelForValue\n    }\n  }))();\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = (() => ({\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  }))();\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = (() => ({\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  }))();\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = (() => ({\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n      callback(label) {\n        return label;\n      },\n      padding: 5,\n      centerPointLabels: false\n    }\n  }))();\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || index === 0 && this.min < 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && this.min >= 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = (() => TimeScale.defaults)();\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","arguments","length","Date","now","remaining","running","items","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","found","isNumberFinite","sign","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","_ref","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","callback","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_len","_key","_each","_len2","_key2","addControllers","_len3","_key3","_len4","_key4","addPlugins","_len5","_key5","addScales","_len6","_key6","getController","_get","getPlugin","getScale","removeControllers","_len7","_key7","removeElements","_len8","_key8","removePlugins","_len9","_key9","removeScales","_len10","_key10","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","_ref2","pluginOpts","_ref3","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","_len11","scaleOptions","_key11","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_ref4","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius$1","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","inRange$1","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","parseBorderRadius","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","containsDefaultColorsDefenitions","plugin_colors","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_ref5","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","_ref6","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","_ref7","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","_ref8","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\Yolanda Ayuso\\Desktop\\frontDespliegueDef\\DQPA_v1.2Front\\dqpa\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = (meta) => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      // Unset pending resize request now to avoid possible recursion within _resize\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the event inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController, defaults} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    const containsColorDefenition = (\n      containsColorsDefinitions(datasets) ||\n      containsColorsDefinition(chartOptions) ||\n      (elements && containsColorsDefinitions(elements)) ||\n      containsDefaultColorsDefenitions());\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    // No visible items where found, return false so we don't have to divide by 0 which reduces in NaN\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}