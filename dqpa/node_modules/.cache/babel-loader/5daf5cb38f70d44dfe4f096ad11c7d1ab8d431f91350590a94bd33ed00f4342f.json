{"ast":null,"code":"/*\n * Module dependencies\n */\nvar balanced = require(\"balanced-match\");\n\n/**\n * Expose `reduceFunctionCall`\n *\n * @type {Function}\n */\nmodule.exports = reduceFunctionCall;\n\n/**\n * Walkthrough all expressions, evaluate them and insert them into the declaration\n *\n * @param {Array} expressions\n * @param {Object} declaration\n */\n\nfunction reduceFunctionCall(string, functionRE, callback) {\n  var call = string;\n  return getFunctionCalls(string, functionRE).reduce(function (string, obj) {\n    return string.replace(obj.functionIdentifier + \"(\" + obj.matches.body + \")\", evalFunctionCall(obj.matches.body, obj.functionIdentifier, callback, call, functionRE));\n  }, string);\n}\n\n/**\n * Parses expressions in a value\n *\n * @param {String} value\n * @returns {Array}\n * @api private\n */\n\nfunction getFunctionCalls(call, functionRE) {\n  var expressions = [];\n  var fnRE = typeof functionRE === \"string\" ? new RegExp(\"\\\\b(\" + functionRE + \")\\\\(\") : functionRE;\n  do {\n    var searchMatch = fnRE.exec(call);\n    if (!searchMatch) {\n      return expressions;\n    }\n    if (searchMatch[1] === undefined) {\n      throw new Error(\"Missing the first couple of parenthesis to get the function identifier in \" + functionRE);\n    }\n    var fn = searchMatch[1];\n    var startIndex = searchMatch.index;\n    var matches = balanced(\"(\", \")\", call.substring(startIndex));\n    if (!matches || matches.start !== searchMatch[0].length - 1) {\n      throw new SyntaxError(fn + \"(): missing closing ')' in the value '\" + call + \"'\");\n    }\n    expressions.push({\n      matches: matches,\n      functionIdentifier: fn\n    });\n    call = matches.post;\n  } while (fnRE.test(call));\n  return expressions;\n}\n\n/**\n * Evaluates an expression\n *\n * @param {String} expression\n * @returns {String}\n * @api private\n */\n\nfunction evalFunctionCall(string, functionIdentifier, callback, call, functionRE) {\n  // allow recursivity\n  return callback(reduceFunctionCall(string, functionRE, callback), functionIdentifier, call);\n}","map":{"version":3,"names":["balanced","require","module","exports","reduceFunctionCall","string","functionRE","callback","call","getFunctionCalls","reduce","obj","replace","functionIdentifier","matches","body","evalFunctionCall","expressions","fnRE","RegExp","searchMatch","exec","undefined","Error","fn","startIndex","index","substring","start","length","SyntaxError","push","post","test"],"sources":["C:/Users/Yolanda Ayuso/Desktop/frontDespliegueDef/DQPA_v1.2Front/dqpa/node_modules/reduce-function-call/index.js"],"sourcesContent":["/*\n * Module dependencies\n */\nvar balanced = require(\"balanced-match\")\n\n/**\n * Expose `reduceFunctionCall`\n *\n * @type {Function}\n */\nmodule.exports = reduceFunctionCall\n\n/**\n * Walkthrough all expressions, evaluate them and insert them into the declaration\n *\n * @param {Array} expressions\n * @param {Object} declaration\n */\n\nfunction reduceFunctionCall(string, functionRE, callback) {\n  var call = string\n  return getFunctionCalls(string, functionRE).reduce(function(string, obj) {\n    return string.replace(obj.functionIdentifier + \"(\" + obj.matches.body + \")\", evalFunctionCall(obj.matches.body, obj.functionIdentifier, callback, call, functionRE))\n  }, string)\n}\n\n/**\n * Parses expressions in a value\n *\n * @param {String} value\n * @returns {Array}\n * @api private\n */\n\nfunction getFunctionCalls(call, functionRE) {\n  var expressions = []\n\n  var fnRE = typeof functionRE === \"string\" ? new RegExp(\"\\\\b(\" + functionRE + \")\\\\(\") : functionRE\n  do {\n    var searchMatch = fnRE.exec(call)\n    if (!searchMatch) {\n      return expressions\n    }\n    if (searchMatch[1] === undefined) {\n      throw new Error(\"Missing the first couple of parenthesis to get the function identifier in \" + functionRE)\n    }\n    var fn = searchMatch[1]\n    var startIndex = searchMatch.index\n    var matches = balanced(\"(\", \")\", call.substring(startIndex))\n\n    if (!matches || matches.start !== searchMatch[0].length - 1) {\n      throw new SyntaxError(fn + \"(): missing closing ')' in the value '\" + call + \"'\")\n    }\n\n    expressions.push({matches: matches, functionIdentifier: fn})\n    call = matches.post\n  }\n  while (fnRE.test(call))\n\n  return expressions\n}\n\n/**\n * Evaluates an expression\n *\n * @param {String} expression\n * @returns {String}\n * @api private\n */\n\nfunction evalFunctionCall (string, functionIdentifier, callback, call, functionRE) {\n  // allow recursivity\n  return callback(reduceFunctionCall(string, functionRE, callback), functionIdentifier, call)\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAgB,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAGC,kBAAkB;;AAEnC;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,kBAAkBA,CAACC,MAAM,EAAEC,UAAU,EAAEC,QAAQ,EAAE;EACxD,IAAIC,IAAI,GAAGH,MAAM;EACjB,OAAOI,gBAAgB,CAACJ,MAAM,EAAEC,UAAU,CAAC,CAACI,MAAM,CAAC,UAASL,MAAM,EAAEM,GAAG,EAAE;IACvE,OAAON,MAAM,CAACO,OAAO,CAACD,GAAG,CAACE,kBAAkB,GAAG,GAAG,GAAGF,GAAG,CAACG,OAAO,CAACC,IAAI,GAAG,GAAG,EAAEC,gBAAgB,CAACL,GAAG,CAACG,OAAO,CAACC,IAAI,EAAEJ,GAAG,CAACE,kBAAkB,EAAEN,QAAQ,EAAEC,IAAI,EAAEF,UAAU,CAAC,CAAC;EACtK,CAAC,EAAED,MAAM,CAAC;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,gBAAgBA,CAACD,IAAI,EAAEF,UAAU,EAAE;EAC1C,IAAIW,WAAW,GAAG,EAAE;EAEpB,IAAIC,IAAI,GAAG,OAAOZ,UAAU,KAAK,QAAQ,GAAG,IAAIa,MAAM,CAAC,MAAM,GAAGb,UAAU,GAAG,MAAM,CAAC,GAAGA,UAAU;EACjG,GAAG;IACD,IAAIc,WAAW,GAAGF,IAAI,CAACG,IAAI,CAACb,IAAI,CAAC;IACjC,IAAI,CAACY,WAAW,EAAE;MAChB,OAAOH,WAAW;IACpB;IACA,IAAIG,WAAW,CAAC,CAAC,CAAC,KAAKE,SAAS,EAAE;MAChC,MAAM,IAAIC,KAAK,CAAC,4EAA4E,GAAGjB,UAAU,CAAC;IAC5G;IACA,IAAIkB,EAAE,GAAGJ,WAAW,CAAC,CAAC,CAAC;IACvB,IAAIK,UAAU,GAAGL,WAAW,CAACM,KAAK;IAClC,IAAIZ,OAAO,GAAGd,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAEQ,IAAI,CAACmB,SAAS,CAACF,UAAU,CAAC,CAAC;IAE5D,IAAI,CAACX,OAAO,IAAIA,OAAO,CAACc,KAAK,KAAKR,WAAW,CAAC,CAAC,CAAC,CAACS,MAAM,GAAG,CAAC,EAAE;MAC3D,MAAM,IAAIC,WAAW,CAACN,EAAE,GAAG,wCAAwC,GAAGhB,IAAI,GAAG,GAAG,CAAC;IACnF;IAEAS,WAAW,CAACc,IAAI,CAAC;MAACjB,OAAO,EAAEA,OAAO;MAAED,kBAAkB,EAAEW;IAAE,CAAC,CAAC;IAC5DhB,IAAI,GAAGM,OAAO,CAACkB,IAAI;EACrB,CAAC,QACMd,IAAI,CAACe,IAAI,CAACzB,IAAI,CAAC;EAEtB,OAAOS,WAAW;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,gBAAgBA,CAAEX,MAAM,EAAEQ,kBAAkB,EAAEN,QAAQ,EAAEC,IAAI,EAAEF,UAAU,EAAE;EACjF;EACA,OAAOC,QAAQ,CAACH,kBAAkB,CAACC,MAAM,EAAEC,UAAU,EAAEC,QAAQ,CAAC,EAAEM,kBAAkB,EAAEL,IAAI,CAAC;AAC7F","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}