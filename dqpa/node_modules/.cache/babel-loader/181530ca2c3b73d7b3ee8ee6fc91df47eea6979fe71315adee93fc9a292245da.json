{"ast":null,"code":"/**\r\n * Module dependencies\r\n */\nvar balanced = require(\"balanced-match\");\nvar reduceFunctionCall = require(\"reduce-function-call\");\nvar mexp = require(\"math-expression-evaluator\");\n\n/**\r\n * Constantes\r\n */\nvar MAX_STACK = 100; // should be enough for a single calc()...\nvar NESTED_CALC_RE = /(\\+|\\-|\\*|\\\\|[^a-z]|)(\\s*)(\\()/g;\n\n/**\r\n * Global variables\r\n */\nvar stack;\n\n/**\r\n * Expose reduceCSSCalc plugin\r\n *\r\n * @type {Function}\r\n */\nmodule.exports = reduceCSSCalc;\n\n/**\r\n * Reduce CSS calc() in a string, whenever it's possible\r\n *\r\n * @param {String} value css input\r\n */\nfunction reduceCSSCalc(value, decimalPrecision) {\n  stack = 0;\n  decimalPrecision = Math.pow(10, decimalPrecision === undefined ? 5 : decimalPrecision);\n\n  // Allow calc() on multiple lines\n  value = value.replace(/\\n+/g, \" \");\n\n  /**\r\n   * Evaluates an expression\r\n   *\r\n   * @param {String} expression\r\n   * @returns {String}\r\n   */\n  function evaluateExpression(expression, functionIdentifier, call) {\n    if (stack++ > MAX_STACK) {\n      stack = 0;\n      throw new Error(\"Call stack overflow for \" + call);\n    }\n    if (expression === \"\") {\n      throw new Error(functionIdentifier + \"(): '\" + call + \"' must contain a non-whitespace string\");\n    }\n    expression = evaluateNestedExpression(expression, call);\n    var units = getUnitsInExpression(expression);\n\n    // If the expression contains multiple units or CSS variables,\n    // then let the expression be (i.e. browser calc())\n    if (units.length > 1 || expression.indexOf(\"var(\") > -1) {\n      return functionIdentifier + \"(\" + expression + \")\";\n    }\n    var unit = units[0] || \"\";\n    if (unit === \"%\") {\n      // Convert percentages to numbers, to handle expressions like: 50% * 50% (will become: 25%):\n      // console.log(expression)\n      expression = expression.replace(/\\b[0-9\\.]+%/g, function (percent) {\n        return parseFloat(percent.slice(0, -1)) * 0.01;\n      });\n    }\n\n    // Remove units in expression:\n    var toEvaluate = expression.replace(new RegExp(unit, \"gi\"), \"\");\n    var result;\n    try {\n      result = mexp.eval(toEvaluate);\n    } catch (e) {\n      return functionIdentifier + \"(\" + expression + \")\";\n    }\n\n    // Transform back to a percentage result:\n    if (unit === \"%\") {\n      result *= 100;\n    }\n\n    // adjust rounding shit\n    // (0.1 * 0.2 === 0.020000000000000004)\n    if (functionIdentifier.length || unit === \"%\") {\n      result = Math.round(result * decimalPrecision) / decimalPrecision;\n    }\n\n    // Add unit\n    result += unit;\n    return result;\n  }\n\n  /**\r\n   * Evaluates nested expressions\r\n   *\r\n   * @param {String} expression\r\n   * @returns {String}\r\n   */\n  function evaluateNestedExpression(expression, call) {\n    // Remove the calc part from nested expressions to ensure\n    // better browser compatibility\n    expression = expression.replace(/((?:\\-[a-z]+\\-)?calc)/g, \"\");\n    var evaluatedPart = \"\";\n    var nonEvaluatedPart = expression;\n    var matches;\n    while (matches = NESTED_CALC_RE.exec(nonEvaluatedPart)) {\n      if (matches[0].index > 0) {\n        evaluatedPart += nonEvaluatedPart.substring(0, matches[0].index);\n      }\n      var balancedExpr = balanced(\"(\", \")\", nonEvaluatedPart.substring([0].index));\n      if (balancedExpr.body === \"\") {\n        throw new Error(\"'\" + expression + \"' must contain a non-whitespace string\");\n      }\n      var evaluated = evaluateExpression(balancedExpr.body, \"\", call);\n      evaluatedPart += balancedExpr.pre + evaluated;\n      nonEvaluatedPart = balancedExpr.post;\n    }\n    return evaluatedPart + nonEvaluatedPart;\n  }\n  return reduceFunctionCall(value, /((?:\\-[a-z]+\\-)?calc)\\(/, evaluateExpression);\n}\n\n/**\r\n * Checks what units are used in an expression\r\n *\r\n * @param {String} expression\r\n * @returns {Array}\r\n */\n\nfunction getUnitsInExpression(expression) {\n  var uniqueUnits = [];\n  var uniqueLowerCaseUnits = [];\n  var unitRegEx = /[\\.0-9]([%a-z]+)/gi;\n  var matches = unitRegEx.exec(expression);\n  while (matches) {\n    if (!matches || !matches[1]) {\n      continue;\n    }\n    if (uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase()) === -1) {\n      uniqueUnits.push(matches[1]);\n      uniqueLowerCaseUnits.push(matches[1].toLowerCase());\n    }\n    matches = unitRegEx.exec(expression);\n  }\n  return uniqueUnits;\n}","map":{"version":3,"names":["balanced","require","reduceFunctionCall","mexp","MAX_STACK","NESTED_CALC_RE","stack","module","exports","reduceCSSCalc","value","decimalPrecision","Math","pow","undefined","replace","evaluateExpression","expression","functionIdentifier","call","Error","evaluateNestedExpression","units","getUnitsInExpression","length","indexOf","unit","percent","parseFloat","slice","toEvaluate","RegExp","result","eval","e","round","evaluatedPart","nonEvaluatedPart","matches","exec","index","substring","balancedExpr","body","evaluated","pre","post","uniqueUnits","uniqueLowerCaseUnits","unitRegEx","toLowerCase","push"],"sources":["C:/Users/Yolanda Ayuso/Desktop/frontDespliegueDef/DQPA_v1.2Front/dqpa/node_modules/reduce-css-calc/index.js"],"sourcesContent":["/**\r\n * Module dependencies\r\n */\r\nvar balanced = require(\"balanced-match\")\r\nvar reduceFunctionCall = require(\"reduce-function-call\")\r\nvar mexp = require(\"math-expression-evaluator\")\r\n\r\n/**\r\n * Constantes\r\n */\r\nvar MAX_STACK = 100 // should be enough for a single calc()...\r\nvar NESTED_CALC_RE = /(\\+|\\-|\\*|\\\\|[^a-z]|)(\\s*)(\\()/g\r\n\r\n/**\r\n * Global variables\r\n */\r\nvar stack\r\n\r\n/**\r\n * Expose reduceCSSCalc plugin\r\n *\r\n * @type {Function}\r\n */\r\nmodule.exports = reduceCSSCalc\r\n\r\n/**\r\n * Reduce CSS calc() in a string, whenever it's possible\r\n *\r\n * @param {String} value css input\r\n */\r\nfunction reduceCSSCalc(value, decimalPrecision) {\r\n  stack = 0\r\n  decimalPrecision = Math.pow(10, decimalPrecision === undefined ? 5 : decimalPrecision)\r\n\r\n  // Allow calc() on multiple lines\r\n  value = value.replace(/\\n+/g, \" \")\r\n\r\n  /**\r\n   * Evaluates an expression\r\n   *\r\n   * @param {String} expression\r\n   * @returns {String}\r\n   */\r\n  function evaluateExpression (expression, functionIdentifier, call) {\r\n    if (stack++ > MAX_STACK) {\r\n      stack = 0\r\n      throw new Error(\"Call stack overflow for \" + call)\r\n    }\r\n\r\n    if (expression === \"\") {\r\n      throw new Error(functionIdentifier + \"(): '\" + call + \"' must contain a non-whitespace string\")\r\n    }\r\n\r\n    expression = evaluateNestedExpression(expression, call)\r\n\r\n    var units = getUnitsInExpression(expression)\r\n\r\n    // If the expression contains multiple units or CSS variables,\r\n    // then let the expression be (i.e. browser calc())\r\n    if (units.length > 1 || expression.indexOf(\"var(\") > -1) {\r\n      return functionIdentifier + \"(\" + expression + \")\"\r\n    }\r\n\r\n    var unit = units[0] || \"\"\r\n\r\n    if (unit === \"%\") {\r\n      // Convert percentages to numbers, to handle expressions like: 50% * 50% (will become: 25%):\r\n      // console.log(expression)\r\n      expression = expression.replace(/\\b[0-9\\.]+%/g, function(percent) {\r\n        return parseFloat(percent.slice(0, -1)) * 0.01\r\n      })\r\n    }\r\n\r\n    // Remove units in expression:\r\n    var toEvaluate = expression.replace(new RegExp(unit, \"gi\"), \"\")\r\n    var result\r\n\r\n    try {\r\n      result = mexp.eval(toEvaluate)\r\n    }\r\n    catch (e) {\r\n      return functionIdentifier + \"(\" + expression + \")\"\r\n    }\r\n\r\n    // Transform back to a percentage result:\r\n    if (unit === \"%\") {\r\n      result *= 100\r\n    }\r\n\r\n    // adjust rounding shit\r\n    // (0.1 * 0.2 === 0.020000000000000004)\r\n    if (functionIdentifier.length || unit === \"%\") {\r\n      result = Math.round(result * decimalPrecision) / decimalPrecision\r\n    }\r\n\r\n    // Add unit\r\n    result += unit\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Evaluates nested expressions\r\n   *\r\n   * @param {String} expression\r\n   * @returns {String}\r\n   */\r\n  function evaluateNestedExpression(expression, call) {\r\n    // Remove the calc part from nested expressions to ensure\r\n    // better browser compatibility\r\n    expression = expression.replace(/((?:\\-[a-z]+\\-)?calc)/g, \"\")\r\n    var evaluatedPart = \"\"\r\n    var nonEvaluatedPart = expression\r\n    var matches\r\n    while ((matches = NESTED_CALC_RE.exec(nonEvaluatedPart))) {\r\n      if (matches[0].index > 0) {\r\n        evaluatedPart += nonEvaluatedPart.substring(0, matches[0].index)\r\n      }\r\n\r\n      var balancedExpr = balanced(\"(\", \")\", nonEvaluatedPart.substring([0].index))\r\n      if (balancedExpr.body === \"\") {\r\n        throw new Error(\"'\" + expression + \"' must contain a non-whitespace string\")\r\n      }\r\n\r\n      var evaluated = evaluateExpression(balancedExpr.body, \"\", call)\r\n\r\n      evaluatedPart += balancedExpr.pre + evaluated\r\n      nonEvaluatedPart = balancedExpr.post\r\n    }\r\n\r\n    return evaluatedPart + nonEvaluatedPart\r\n  }\r\n\r\n  return reduceFunctionCall(value, /((?:\\-[a-z]+\\-)?calc)\\(/, evaluateExpression)\r\n}\r\n\r\n/**\r\n * Checks what units are used in an expression\r\n *\r\n * @param {String} expression\r\n * @returns {Array}\r\n */\r\n\r\nfunction getUnitsInExpression(expression) {\r\n  var uniqueUnits = []\r\n  var uniqueLowerCaseUnits = []\r\n  var unitRegEx = /[\\.0-9]([%a-z]+)/gi\r\n  var matches = unitRegEx.exec(expression)\r\n\r\n  while (matches) {\r\n    if (!matches || !matches[1]) {\r\n      continue\r\n    }\r\n\r\n    if (uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase()) === -1) {\r\n      uniqueUnits.push(matches[1])\r\n      uniqueLowerCaseUnits.push(matches[1].toLowerCase())\r\n    }\r\n\r\n    matches = unitRegEx.exec(expression)\r\n  }\r\n\r\n  return uniqueUnits\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}