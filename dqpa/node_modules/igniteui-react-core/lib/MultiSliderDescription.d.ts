import { Description } from "./Description";
import { MultiSliderThumbDescription } from "./MultiSliderThumbDescription";
import { RectDescription } from "./RectDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class MultiSliderDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private h;
    get thumbs(): MultiSliderThumbDescription[];
    set thumbs(a: MultiSliderThumbDescription[]);
    private t;
    get min(): number;
    set min(a: number);
    private s;
    get max(): number;
    set max(a: number);
    private x;
    get step(): number;
    set step(a: number);
    private ae;
    get yMax(): number;
    set yMax(a: number);
    private af;
    get yMin(): number;
    set yMin(a: number);
    private ag;
    get yStep(): number;
    set yStep(a: number);
    private u;
    get pixelScalingRatio(): number;
    set pixelScalingRatio(a: number);
    private n;
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(a: number);
    private j;
    get windowRect(): RectDescription;
    set windowRect(a: RectDescription);
    private aj;
    get yValue(): number;
    set yValue(a: number);
    private w;
    get startInset(): number;
    set startInset(a: number);
    private r;
    get endInset(): number;
    set endInset(a: number);
    private ad;
    get trackStartInset(): number;
    set trackStartInset(a: number);
    private ac;
    get trackEndInset(): number;
    set trackEndInset(a: number);
    private ai;
    get yTrackStartInset(): number;
    set yTrackStartInset(a: number);
    private ah;
    get yTrackEndInset(): number;
    set yTrackEndInset(a: number);
    private o;
    get barExtent(): number;
    set barExtent(a: number);
    private bc;
    get orientation(): string;
    set orientation(a: string);
    private bh;
    get thumbBrush(): string;
    set thumbBrush(a: string);
    private aa;
    get thumbStrokeThickness(): number;
    set thumbStrokeThickness(a: number);
    private bl;
    get thumbOutline(): string;
    set thumbOutline(a: string);
    private ab;
    get thumbWidth(): number;
    set thumbWidth(a: number);
    private z;
    get thumbHeight(): number;
    set thumbHeight(a: number);
    private a7;
    get barBrush(): string;
    set barBrush(a: string);
    private a8;
    get barOutline(): string;
    set barOutline(a: string);
    private p;
    get barStrokeThickness(): number;
    set barStrokeThickness(a: number);
    private bd;
    get rangeThumbBrush(): string;
    set rangeThumbBrush(a: string);
    private be;
    get rangeThumbOutline(): string;
    set rangeThumbOutline(a: string);
    private v;
    get rangeThumbStrokeThickness(): number;
    set rangeThumbStrokeThickness(a: number);
    private bf;
    get rangeThumbRidgesBrush(): string;
    set rangeThumbRidgesBrush(a: string);
    private bm;
    get thumbRidgesBrush(): string;
    set thumbRidgesBrush(a: string);
    private a9;
    get calloutBrush(): string;
    set calloutBrush(a: string);
    private bb;
    get calloutTextColor(): string;
    set calloutTextColor(a: string);
    private ba;
    get calloutOutline(): string;
    set calloutOutline(a: string);
    private q;
    get calloutStrokeThickness(): number;
    set calloutStrokeThickness(a: number);
    private l;
    get areThumbCalloutsEnabled(): boolean;
    set areThumbCalloutsEnabled(a: boolean);
    private bi;
    get thumbCalloutFontFamily(): string;
    set thumbCalloutFontFamily(a: string);
    private y;
    get thumbCalloutFontSize(): number;
    set thumbCalloutFontSize(a: number);
    private bj;
    get thumbCalloutFontStyle(): string;
    set thumbCalloutFontStyle(a: string);
    private bk;
    get thumbCalloutFontWeight(): string;
    set thumbCalloutFontWeight(a: string);
    private bg;
    get resolvingToolTipValueRef(): string;
    set resolvingToolTipValueRef(a: string);
    private bo;
    get thumbValueChangingRef(): string;
    set thumbValueChangingRef(a: string);
    private bn;
    get thumbValueChangedRef(): string;
    set thumbValueChangedRef(a: string);
    private bq;
    get yValueChangingRef(): string;
    set yValueChangingRef(a: string);
    private bp;
    get yValueChangedRef(): string;
    set yValueChangedRef(a: string);
}
