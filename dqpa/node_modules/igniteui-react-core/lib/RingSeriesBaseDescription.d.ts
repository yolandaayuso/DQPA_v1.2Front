import { Description } from "./Description";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class RingSeriesBaseDescription extends Description {
    static $t: Type;
    private bk;
    get tooltipTemplateRef(): string;
    set tooltipTemplateRef(a: string);
    private au;
    get fontFamily(): string;
    set fontFamily(a: string);
    private v;
    get fontSize(): number;
    set fontSize(a: number);
    private aw;
    get fontWeight(): string;
    set fontWeight(a: string);
    private av;
    get fontStyle(): string;
    set fontStyle(a: string);
    protected get_type(): string;
    get type(): string;
    constructor();
    private at;
    get dataSourceRef(): string;
    set dataSourceRef(a: string);
    private bl;
    get valueMemberPath(): string;
    set valueMemberPath(a: string);
    private a1;
    get labelMemberPath(): string;
    set labelMemberPath(a: string);
    private a9;
    get legendLabelMemberPath(): string;
    set legendLabelMemberPath(a: string);
    private a3;
    get labelsPosition(): string;
    set labelsPosition(a: string);
    private a7;
    get leaderLineVisibility(): string;
    set leaderLineVisibility(a: string);
    private a4;
    get leaderLineFill(): string;
    set leaderLineFill(a: string);
    private a5;
    get leaderLineStroke(): string;
    set leaderLineStroke(a: string);
    private z;
    get leaderLineStrokeThickness(): number;
    set leaderLineStrokeThickness(a: number);
    private y;
    get leaderLineOpacity(): number;
    set leaderLineOpacity(a: number);
    private a6;
    get leaderLineType(): string;
    set leaderLineType(a: string);
    private x;
    get leaderLineMargin(): number;
    set leaderLineMargin(a: number);
    private ac;
    get othersCategoryThreshold(): number;
    set othersCategoryThreshold(a: number);
    private bf;
    get othersCategoryType(): string;
    set othersCategoryType(a: string);
    private be;
    get othersCategoryText(): string;
    set othersCategoryText(a: string);
    private bb;
    get legendRef(): string;
    set legendRef(a: string);
    private ax;
    get formatLabelRef(): string;
    set formatLabelRef(a: string);
    private ay;
    get formatLegendLabelRef(): string;
    set formatLegendLabelRef(a: string);
    private az;
    get labelFormat(): string;
    set labelFormat(a: string);
    private i;
    get labelFormatSpecifiers(): FormatSpecifierDescription[];
    set labelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private bg;
    get othersLabelFormat(): string;
    set othersLabelFormat(a: string);
    private l;
    get othersLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set othersLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private a8;
    get legendLabelFormat(): string;
    set legendLabelFormat(a: string);
    private j;
    get legendLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set legendLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private ba;
    get legendOthersLabelFormat(): string;
    set legendOthersLabelFormat(a: string);
    private k;
    get legendOthersLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set legendOthersLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private w;
    get labelExtent(): number;
    set labelExtent(a: number);
    private ag;
    get startAngle(): number;
    set startAngle(a: number);
    private bc;
    get othersCategoryFill(): string;
    set othersCategoryFill(a: string);
    private bd;
    get othersCategoryStroke(): string;
    set othersCategoryStroke(a: string);
    private ab;
    get othersCategoryStrokeThickness(): number;
    set othersCategoryStrokeThickness(a: number);
    private aa;
    get othersCategoryOpacity(): number;
    set othersCategoryOpacity(a: number);
    private bi;
    get selectedSliceFill(): string;
    set selectedSliceFill(a: string);
    private bj;
    get selectedSliceStroke(): string;
    set selectedSliceStroke(a: string);
    private af;
    get selectedSliceStrokeThickness(): number;
    set selectedSliceStrokeThickness(a: number);
    private ae;
    get selectedSliceOpacity(): number;
    set selectedSliceOpacity(a: number);
    private h;
    get brushes(): string[];
    set brushes(a: string[]);
    private m;
    get outlines(): string[];
    set outlines(a: string[]);
    private a2;
    get labelOuterColor(): string;
    set labelOuterColor(a: string);
    private a0;
    get labelInnerColor(): string;
    set labelInnerColor(a: string);
    private t;
    get isSurfaceInteractionDisabled(): boolean;
    set isSurfaceInteractionDisabled(a: boolean);
    private ad;
    get radiusFactor(): number;
    set radiusFactor(a: number);
    private bh;
    get propertyUpdatedRef(): string;
    set propertyUpdatedRef(a: string);
}
