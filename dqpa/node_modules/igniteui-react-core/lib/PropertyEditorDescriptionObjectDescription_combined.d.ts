import { Description } from "./Description";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class PropertyEditorDescriptionObjectDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private j;
    get descriptionType(): string;
    set descriptionType(a: string);
    private h;
    get properties(): PropertyEditorPropertyDescriptionDescription[];
    set properties(a: PropertyEditorPropertyDescriptionDescription[]);
}
/**
 * @hidden
 */
export declare class PropertyEditorPropertyDescriptionDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private au;
    get propertyPath(): string;
    set propertyPath(a: string);
    private as;
    get label(): string;
    set label(a: string);
    private av;
    get subtitle(): string;
    set subtitle(a: string);
    private ax;
    get valueType(): string;
    set valueType(a: string);
    private ap;
    get coercedValueType(): string;
    set coercedValueType(a: string);
    private at;
    get propertyDescriptionType(): string;
    set propertyDescriptionType(a: string);
    private v;
    get shouldOverrideDefaultEditor(): boolean;
    set shouldOverrideDefaultEditor(a: boolean);
    private ar;
    get elementDescriptionType(): string;
    set elementDescriptionType(a: string);
    private j;
    get dropDownNames(): string[];
    set dropDownNames(a: string[]);
    private k;
    get dropDownValues(): string[];
    set dropDownValues(a: string[]);
    private ak;
    get primitiveValue(): any;
    set primitiveValue(a: any);
    private aj;
    get coercedPrimitiveValue(): any;
    set coercedPrimitiveValue(a: any);
    private ac;
    get min(): number;
    set min(a: number);
    private z;
    get editorWidth(): number;
    set editorWidth(a: number);
    private aa;
    get labelWidth(): number;
    set labelWidth(a: number);
    private ab;
    get max(): number;
    set max(a: number);
    private ad;
    get step(): number;
    set step(a: number);
    private s;
    get complexValue(): PropertyEditorDescriptionObjectDescription;
    set complexValue(a: PropertyEditorDescriptionObjectDescription);
    private r;
    get coercedComplexValue(): PropertyEditorDescriptionObjectDescription;
    set coercedComplexValue(a: PropertyEditorDescriptionObjectDescription);
    private i;
    get complexValues(): PropertyEditorDescriptionObjectDescription[];
    set complexValues(a: PropertyEditorDescriptionObjectDescription[]);
    private h;
    get coercedComplexValues(): PropertyEditorDescriptionObjectDescription[];
    set coercedComplexValues(a: PropertyEditorDescriptionObjectDescription[]);
    private w;
    get useCoercedValue(): boolean;
    set useCoercedValue(a: boolean);
    private l;
    get properties(): PropertyEditorPropertyDescriptionDescription[];
    set properties(a: PropertyEditorPropertyDescriptionDescription[]);
    private an;
    get buttonClickedRef(): string;
    set buttonClickedRef(a: string);
    private ao;
    get changedRef(): string;
    set changedRef(a: string);
    private aw;
    get targetPropertyUpdatingRef(): string;
    set targetPropertyUpdatingRef(a: string);
    private aq;
    get coercingValueRef(): string;
    set coercingValueRef(a: string);
}
