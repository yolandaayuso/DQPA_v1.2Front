export declare class PromiseWrapper {
    private _promise;
    private _state;
    private _resolvedValue;
    private _rejectedError;
    private _then;
    private _fail;
    private _always;
    constructor(inner: Promise<any>);
    state(): string;
    then(pass: (v: any) => void, fail: (e: any) => void): PromiseWrapper;
    done(continuation: (v: any) => void): PromiseWrapper;
    fail(continuation: (v: any) => void): PromiseWrapper;
    always(continuation: (v: any) => void): PromiseWrapper;
}
export declare class PromiseFactory {
    private _promise;
    private _resolve;
    private _reject;
    private _wrapper;
    resolve(result?: any): void;
    reject(error: any): void;
    promise(): PromiseWrapper;
}
