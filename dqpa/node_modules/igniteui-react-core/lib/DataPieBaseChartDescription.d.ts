import { RadialBaseChartDescription } from "./RadialBaseChartDescription";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class DataPieBaseChartDescription extends RadialBaseChartDescription {
    static $t: Type;
    protected get_type(): string;
    constructor();
    private xn;
    get sliceLabelFormat(): string;
    set sliceLabelFormat(a: string);
    private wa;
    get sliceLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set sliceLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private xf;
    get legendSliceLabelFormat(): string;
    set legendSliceLabelFormat(a: string);
    private v8;
    get legendSliceLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set legendSliceLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private xk;
    get othersSliceLabelFormat(): string;
    set othersSliceLabelFormat(a: string);
    private v9;
    get othersSliceLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set othersSliceLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private xd;
    get legendOthersSliceLabelFormat(): string;
    set legendOthersSliceLabelFormat(a: string);
    private v7;
    get legendOthersSliceLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set legendOthersSliceLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private wp;
    get innerExtent(): number;
    set innerExtent(a: number);
    private xp;
    get sweepDirection(): string;
    set sweepDirection(a: string);
    private xo;
    get sliceLabelPositionMode(): string;
    set sliceLabelPositionMode(a: string);
    private xg;
    get lightSliceLabelColor(): string;
    set lightSliceLabelColor(a: string);
    private w9;
    get darkSliceLabelColor(): string;
    set darkSliceLabelColor(a: string);
    private xr;
    get valueMemberPath(): string;
    set valueMemberPath(a: string);
    private xc;
    get legendLabelMemberPath(): string;
    set legendLabelMemberPath(a: string);
    private xb;
    get legendEmptyValuesMode(): string;
    set legendEmptyValuesMode(a: string);
    private xj;
    get othersCategoryType(): string;
    set othersCategoryType(a: string);
    private wq;
    get othersCategoryThreshold(): number;
    set othersCategoryThreshold(a: number);
    private xi;
    get othersCategoryText(): string;
    set othersCategoryText(a: string);
    private xa;
    get labelMemberPath(): string;
    set labelMemberPath(a: string);
    private wh;
    get valueAxisFavorLabellingScaleEnd(): boolean;
    set valueAxisFavorLabellingScaleEnd(a: boolean);
    private xq;
    get valueAxisAutoRangeBufferMode(): string;
    set valueAxisAutoRangeBufferMode(a: string);
    private wn;
    get angleAxisInterval(): number;
    set angleAxisInterval(a: number);
    private wo;
    get angleAxisMinorInterval(): number;
    set angleAxisMinorInterval(a: number);
    private wt;
    get valueAxisInterval(): number;
    set valueAxisInterval(a: number);
    private wi;
    get valueAxisIsLogarithmic(): boolean;
    set valueAxisIsLogarithmic(a: boolean);
    private w7;
    get valueAxisLogarithmBase(): number;
    set valueAxisLogarithmBase(a: number);
    private wv;
    get valueAxisMinimumValue(): number;
    set valueAxisMinimumValue(a: number);
    private wu;
    get valueAxisMaximumValue(): number;
    set valueAxisMaximumValue(a: number);
    private ww;
    get valueAxisMinorInterval(): number;
    set valueAxisMinorInterval(a: number);
    private wr;
    get radiusExtent(): number;
    set radiusExtent(a: number);
    private ws;
    get startAngle(): number;
    set startAngle(a: number);
    private xm;
    get sliceLabelContentSeparator(): string;
    set sliceLabelContentSeparator(a: string);
    private xl;
    get sliceLabelContentMode(): string;
    set sliceLabelContentMode(a: string);
    private xe;
    get legendSliceLabelContentMode(): string;
    set legendSliceLabelContentMode(a: string);
    private wf;
    get angleAxisFavorLabellingScaleEnd(): boolean;
    set angleAxisFavorLabellingScaleEnd(a: boolean);
    private wg;
    get valueAxisAbbreviateLargeNumbers(): boolean;
    set valueAxisAbbreviateLargeNumbers(a: boolean);
    private xh;
    get markerCollision(): string;
    set markerCollision(a: string);
}
