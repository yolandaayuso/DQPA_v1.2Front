import { Base, IList, Type } from "./type";
import { ISupportsDataChangeNotifications } from "./ISupportsDataChangeNotifications";
import { ISummaryResult } from "./ISummaryResult";
import { List$1 } from "./List$1";
import { IDataSource } from "./IDataSource";
import { DataSourcePropertiesComparer } from "./DataSourcePropertiesComparer";
import { IComparer$1 } from "./IComparer$1";
import { ISupportsExpansionChangeNotifications } from "./ISupportsExpansionChangeNotifications";
import { SortDescriptionCollection } from "./SortDescriptionCollection";
import { SummaryDescriptionCollection } from "./SummaryDescriptionCollection";
import { DataSourceSummaryScope } from "./DataSourceSummaryScope";
import { DataSourceSectionHeaderDisplayMode } from "./DataSourceSectionHeaderDisplayMode";
import { SectionData } from "./SectionData";
import { DataSourceRootSummariesChangedEventArgs } from "./DataSourceRootSummariesChangedEventArgs";
import { IDataSourceSupportsIndexedAccess } from "./IDataSourceSupportsIndexedAccess";
/**
 * @hidden
 */
export declare class RearrangedListView extends Base implements ISupportsDataChangeNotifications {
    static $t: Type;
    private o;
    private a6;
    private aa;
    private e;
    private a;
    private b;
    private c;
    private d;
    private ba;
    private a9;
    get bm(): number;
    get i(): ISummaryResult[];
    get a8(): IList;
    rootSummariesChanged: (sender: any, args: DataSourceRootSummariesChangedEventArgs) => void;
    an: boolean;
    at: boolean;
    get ar(): boolean;
    constructor(a: IDataSourceSupportsIndexedAccess);
    x(a: number): SectionData;
    w(): SectionData;
    private p;
    get q(): DataSourcePropertiesComparer;
    set q(a: DataSourcePropertiesComparer);
    private a2;
    get a4(): IComparer$1<any>;
    set a4(a: IComparer$1<any>);
    private a1;
    get a3(): IComparer$1<any>;
    set a3(a: IComparer$1<any>);
    private t;
    get u(): (item: any) => boolean;
    set u(a: (item: any) => boolean);
    private ab;
    get ac(): ISupportsDataChangeNotifications;
    set ac(a: ISupportsDataChangeNotifications);
    private ad;
    get ae(): ISupportsExpansionChangeNotifications;
    set ae(a: ISupportsExpansionChangeNotifications);
    n: IDataSource;
    af: SortDescriptionCollection;
    ag: SortDescriptionCollection;
    ah: SummaryDescriptionCollection;
    aq: boolean;
    private l;
    get m(): DataSourceSummaryScope;
    set m(a: DataSourceSummaryScope);
    k: DataSourceSectionHeaderDisplayMode;
    private get as();
    b9(): void;
    private bn;
    get a7(): List$1<SectionData>;
    aw: boolean;
    av: boolean;
    ax: boolean;
    ay: boolean;
    private ai;
    private b3;
    private bu;
    bc(): number;
    private bf;
    private be;
    private ap;
    private ao;
    private bd;
    private bx;
    private r;
    private s;
    private bh;
    private bi;
    private bj;
    private bk;
    private bl;
    private by;
    private bz;
    private b1;
    private bg;
    private b0;
    private f;
    private g;
    private bv;
    private y;
    ce(a: List$1<any[]>): void;
    private b4;
    notifySetItem(a: number, b: any, c: any): void;
    private br;
    private b5;
    private b2;
    private ch;
    private cp;
    private ca;
    private aj;
    private h;
    private au;
    private bb;
    private cc;
    private b6;
    private z;
    private ak;
    private bq;
    private a5;
    b8(a: any[]): void;
    cf(a: any[]): void;
    private v;
    private cb;
    private az;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
    private a0;
    cd(a: number, b: boolean): void;
    al(a: number): boolean;
    private am;
    private bo;
    private bp;
    private bt;
    private bw;
    private bs;
    private cj;
    private ci;
    cl(a: number, b: any, c: boolean, d: SectionData): void;
    co(a: number, b: number, c: any, d: boolean, e: SectionData): void;
    private cm;
    private cn;
    private b7;
    private ck;
    private cg;
}
