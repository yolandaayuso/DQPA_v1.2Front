import { FormatSpecifier } from "./FormatSpecifier";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class NumberFormatSpecifier extends FormatSpecifier {
    static $t: Type;
    constructor();
    private g;
    private z;
    toIntl(): any;
    private aa;
    c(): any;
    private _locale;
    get locale(): string;
    set locale(a: string);
    private _compactDisplay;
    get compactDisplay(): string;
    set compactDisplay(a: string);
    private _currency;
    get currency(): string;
    set currency(a: string);
    private _currencyDisplay;
    get currencyDisplay(): string;
    set currencyDisplay(a: string);
    private _currencySign;
    get currencySign(): string;
    set currencySign(a: string);
    private _currencyCode;
    get currencyCode(): string;
    set currencyCode(a: string);
    private _localeMatcher;
    get localeMatcher(): string;
    set localeMatcher(a: string);
    private _notation;
    get notation(): string;
    set notation(a: string);
    private _numberingSystem;
    get numberingSystem(): string;
    set numberingSystem(a: string);
    private _signDisplay;
    get signDisplay(): string;
    set signDisplay(a: string);
    private _style;
    get style(): string;
    set style(a: string);
    private _unit;
    get unit(): string;
    set unit(a: string);
    private _unitDisplay;
    get unitDisplay(): string;
    set unitDisplay(a: string);
    private _useGrouping;
    get useGrouping(): boolean;
    set useGrouping(a: boolean);
    private _minimumIntegerDigits;
    get minimumIntegerDigits(): number;
    set minimumIntegerDigits(a: number);
    private _minimumFractionDigits;
    get minimumFractionDigits(): number;
    set minimumFractionDigits(a: number);
    private _maximumFractionDigits;
    get maximumFractionDigits(): number;
    set maximumFractionDigits(a: number);
    private _minimumSignificantDigits;
    get minimumSignificantDigits(): number;
    set minimumSignificantDigits(a: number);
    private _maximumSignificantDigits;
    get maximumSignificantDigits(): number;
    set maximumSignificantDigits(a: number);
}
