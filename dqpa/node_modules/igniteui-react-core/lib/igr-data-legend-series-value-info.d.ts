import { DataLegendSeriesValueType } from "./DataLegendSeriesValueType";
import { DataLegendSeriesValueInfo as DataLegendSeriesValueInfo_internal } from "./DataLegendSeriesValueInfo";
import { ContentChildrenManager } from "./ContentChildrenManager";
/**
 * Represent info about series values
*/
export declare class IgrDataLegendSeriesValueInfo {
    protected createImplementation(): DataLegendSeriesValueInfo_internal;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): DataLegendSeriesValueInfo_internal;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * Gets value of series
    */
    get value(): number;
    set value(v: number);
    /**
     * Gets or sets prefix for negative value
    */
    get valueNegativePrefix(): string;
    set valueNegativePrefix(v: string);
    /**
     * Gets or sets suffix for negative value
    */
    get valueNegativeSuffix(): string;
    set valueNegativeSuffix(v: string);
    /**
     * Gets or sets prefix for positive value
    */
    get valuePositivePrefix(): string;
    set valuePositivePrefix(v: string);
    /**
     * Gets or sets suffix for positive value
    */
    get valuePositiveSuffix(): string;
    set valuePositiveSuffix(v: string);
    /**
     * Gets value color used by the series
    */
    get formatWithSeriesColor(): string;
    set formatWithSeriesColor(v: string);
    /**
     * Gets or sets minimum digits used for displaying faction of the value
    */
    get formatMinFractions(): number;
    set formatMinFractions(v: number);
    /**
     * Gets or sets maximum digits used for displaying faction of the value
    */
    get formatMaxFractions(): number;
    set formatMaxFractions(v: number);
    /**
     * Gets or sets whether or not use conditional color
    */
    get formatUsePositiveColor(): boolean;
    set formatUsePositiveColor(v: boolean);
    /**
     * Gets or sets whether or not use conditional color
    */
    get formatUseNegativeColor(): boolean;
    set formatUseNegativeColor(v: boolean);
    /**
     * Gets or sets whether or not allow displaying value as currency
    */
    get formatAllowCurrency(): boolean;
    set formatAllowCurrency(v: boolean);
    /**
     * Gets or sets whether or not allow displaying value as percentage
    */
    get formatAllowPercent(): boolean;
    set formatAllowPercent(v: boolean);
    /**
     * Gets or sets whether or not allow displaying value as decimal
    */
    get formatAllowDecimal(): boolean;
    set formatAllowDecimal(v: boolean);
    /**
     * Gets or sets whether or not allow displaying value as integer
    */
    get formatAllowInteger(): boolean;
    set formatAllowInteger(v: boolean);
    /**
     * Gets or sets whether or not allow displaying value with abbreviation
    */
    get formatAllowAbbreviation(): boolean;
    set formatAllowAbbreviation(v: boolean);
    /**
     * Gets or sets type of value
    */
    get valueType(): DataLegendSeriesValueType;
    set valueType(v: DataLegendSeriesValueType);
    /**
     * Gets the index of series
    */
    get index(): number;
    set index(v: number);
    get orderIndex(): number;
    set orderIndex(v: number);
    /**
     * Gets or sets whether this value is excluded/hidden by default in Data Legend
    */
    get isExcludeByDefault(): boolean;
    set isExcludeByDefault(v: boolean);
    /**
     * Gets or sets whether the unit text is allowed by the series, e.g. "Hz"
    */
    get allowUnits(): boolean;
    set allowUnits(v: boolean);
    /**
     * Gets or sets whether the label text is allowed by the series, e.g. "H:"
    */
    get allowLabels(): boolean;
    set allowLabels(v: boolean);
    /**
     * Gets or sets member path for the series value, e.g. "HighPrice"
    */
    get memberPath(): string;
    set memberPath(v: string);
    /**
     * Gets or sets member path for the series value, e.g. "High"
    */
    get memberLabel(): string;
    set memberLabel(v: string);
    /**
     * Gets or sets label for the series value, e.g. "H:"
    */
    get memberSymbol(): string;
    set memberSymbol(v: string);
    /**
     * Gets or sets unit text for the value, e.g. "Hz"
    */
    get memberUnit(): string;
    set memberUnit(v: string);
    findByName(name: string): any;
    /**
     * Converts this object to a string
    
    */
    toString(): string;
}
