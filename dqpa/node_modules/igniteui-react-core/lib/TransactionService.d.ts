import { BaseTransactionService } from "./BaseTransactionService";
import { IEqualityComparer$1, Type } from "./type";
import { Transaction } from "./Transaction";
import { TransactionCommit } from "./TransactionCommit";
import { Dictionary$2 } from "./Dictionary$2";
import { TransactionState } from "./TransactionState";
/**
 * @hidden
 */
export declare class TransactionService extends BaseTransactionService {
    static $t: Type;
    private static ao;
    private am;
    private ak;
    private ai;
    private an;
    private al;
    private aj;
    constructor(a: (arg1: any, arg2: any) => void, b: (arg1: any) => any, c: IEqualityComparer$1<any>);
    protected get_l(): boolean;
    protected set_l(a: boolean): void;
    protected get_k(): boolean;
    protected get_j(): boolean;
    protected af(a: Dictionary$2<any, TransactionState>, b: Transaction): void;
    protected aq(a: Dictionary$2<any, TransactionState>, b: Transaction): void;
    protected z(a: string, b: any, c: any): void;
    v(a: Transaction, b?: boolean): void;
    w(a: boolean, b?: any): void;
    g(a: any): TransactionState;
    ah(a: any): TransactionState;
    ag(a: any): TransactionState;
    y(a: boolean): void;
    ap(a: number): void;
    s(a: boolean, b: boolean): number;
    u(a: number): void;
    ac(a: number): void;
    ae(): void;
    ab(): void;
    a(a?: number): TransactionState[];
    e(a: number): TransactionCommit;
    c(a?: any): Transaction[];
}
