import { Base, Type } from "./type";
import { HeatTileScaler } from "./HeatTileScaler";
import { Color } from "./Color";
import { Rect } from "./Rect";
/**
 * @hidden
 */
export declare class TileWorkSettings extends Base {
    static $t: Type;
    private _scaler;
    get scaler(): HeatTileScaler;
    set scaler(a: HeatTileScaler);
    private _blurRadius;
    get blurRadius(): number;
    set blurRadius(a: number);
    private _maxBlurRadius;
    get maxBlurRadius(): number;
    set maxBlurRadius(a: number);
    private _useBlurRadiusAdjustedForZoom;
    get useBlurRadiusAdjustedForZoom(): boolean;
    set useBlurRadiusAdjustedForZoom(a: boolean);
    private _minimumColor;
    get minimumColor(): Color;
    set minimumColor(a: Color);
    private _maximumColor;
    get maximumColor(): Color;
    set maximumColor(a: Color);
    private _tileViewport;
    get tileViewport(): Rect;
    set tileViewport(a: Rect);
    private _yValues;
    get yValues(): number[];
    set yValues(a: number[]);
    private _xValues;
    get xValues(): number[];
    set xValues(a: number[]);
    private _values;
    get values(): number[];
    set values(a: number[]);
    private _isNewData;
    get isNewData(): boolean;
    set isNewData(a: boolean);
    private _minimumVisibleLatitude;
    get minimumVisibleLatitude(): number;
    set minimumVisibleLatitude(a: number);
    private _maximumVisibleLatitude;
    get maximumVisibleLatitude(): number;
    set maximumVisibleLatitude(a: number);
    private _minimumVisibleLongitude;
    get minimumVisibleLongitude(): number;
    set minimumVisibleLongitude(a: number);
    private _maximumVisibleLongitude;
    get maximumVisibleLongitude(): number;
    set maximumVisibleLongitude(a: number);
    private _z;
    get z(): number;
    set z(a: number);
    private _x;
    get x(): number;
    set x(a: number);
    private _y;
    get y(): number;
    set y(a: number);
    private _window;
    get window(): Rect;
    set window(a: Rect);
    private _testRun;
    get testRun(): boolean;
    set testRun(a: boolean);
    private _globalMinimum;
    get globalMinimum(): number;
    set globalMinimum(a: number);
    private _globalMaximum;
    get globalMaximum(): number;
    set globalMaximum(a: number);
    private _useGlobalMinMax;
    get useGlobalMinMax(): boolean;
    set useGlobalMinMax(a: boolean);
    private _minimumValue;
    get minimumValue(): number;
    set minimumValue(a: number);
    private _maximumValue;
    get maximumValue(): number;
    set maximumValue(a: number);
    private _scaleColors;
    get scaleColors(): Color[];
    set scaleColors(a: Color[]);
    private _scaleColorOffsets;
    get scaleColorOffsets(): number[];
    set scaleColorOffsets(a: number[]);
    private _useLogarithmicScale;
    get useLogarithmicScale(): boolean;
    set useLogarithmicScale(a: boolean);
    private _logarithmBase;
    get logarithmBase(): number;
    set logarithmBase(a: number);
    private _image;
    get image(): any;
    set image(a: any);
    flatten(): any;
}
