import { TileGeneratorDescription } from "./TileGeneratorDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class HeatTileGeneratorDescription extends TileGeneratorDescription {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private m;
    get yValues(): number[];
    set yValues(a: number[]);
    private l;
    get xValues(): number[];
    set xValues(a: number[]);
    private k;
    get values(): number[];
    set values(a: number[]);
    private an;
    get minimumColor(): string;
    set minimumColor(a: string);
    private am;
    get maximumColor(): string;
    set maximumColor(a: string);
    private j;
    get scaleColors(): string[];
    set scaleColors(a: string[]);
    private i;
    get scaleColorOffsets(): number[];
    set scaleColorOffsets(a: number[]);
    private ac;
    get blurRadius(): number;
    set blurRadius(a: number);
    private ae;
    get maxBlurRadius(): number;
    set maxBlurRadius(a: number);
    private s;
    get useBlurRadiusAdjustedForZoom(): boolean;
    set useBlurRadiusAdjustedForZoom(a: boolean);
    private t;
    get useGlobalMinMax(): boolean;
    set useGlobalMinMax(a: boolean);
    private u;
    get useGlobalMinMaxAdjustedForZoom(): boolean;
    set useGlobalMinMaxAdjustedForZoom(a: boolean);
    private ag;
    get minimumValue(): number;
    set minimumValue(a: number);
    private af;
    get maximumValue(): number;
    set maximumValue(a: number);
    private ad;
    get logarithmBase(): number;
    set logarithmBase(a: number);
    private v;
    get useLogarithmicScale(): boolean;
    set useLogarithmicScale(a: boolean);
    private w;
    get useWebWorkers(): boolean;
    set useWebWorkers(a: boolean);
    private ap;
    get webWorkerScriptPath(): string;
    set webWorkerScriptPath(a: string);
    private ao;
    get webWorkerInstanceRef(): string;
    set webWorkerInstanceRef(a: string);
}
