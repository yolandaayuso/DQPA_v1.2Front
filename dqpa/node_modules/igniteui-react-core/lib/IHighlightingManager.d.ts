import { List$1 } from "./List$1";
import { Type } from "./type";
import { IExecutionContext } from "./IExecutionContext";
import { HighlightingInfo } from "./HighlightingInfo";
import { IFastItemsSource } from "./IFastItemsSource";
/**
 * @hidden
 */
export interface IHighlightingManager {
    startHighlight(a: HighlightingInfo): void;
    endHighlight(a: HighlightingInfo): void;
    clear(): void;
    getHighlightingInfo(a: any, b: IFastItemsSource, c: number, d: number, e: boolean): HighlightingInfo;
    tick(a: number): boolean;
    inProgress: boolean;
    readonly dirtyContexts: List$1<any>;
    readonly allDirty: boolean;
    isCrossContextHighlight(a: any): boolean;
    isContextValid(a: any): boolean;
    executionContext: IExecutionContext;
    ensureAnimator: () => void;
    maxHighlightingProgress: number;
    sumHighlightingProgress: number;
    maxMarkerHighlightingProgress: number;
    sumMarkerHighlightingProgress: number;
    totalHighWaterMark: number;
    totalHighlightingProgress: number;
    retainMainShapes: boolean;
    isExclusiveHighlight: boolean;
}
/**
 * @hidden
 */
export declare let IHighlightingManager_$type: Type;
