import { Base, IEqualityComparer$1, Type } from "./type";
import { List$1 } from "./List$1";
import { Transaction } from "./Transaction";
import { Dictionary$2 } from "./Dictionary$2";
import { TransactionState } from "./TransactionState";
import { TransactionEvent } from "./TransactionEvent";
import { TransactionCommit } from "./TransactionCommit";
/**
 * @hidden
 */
export declare abstract class BaseTransactionService extends Base {
    static $t: Type;
    constructor(a: (arg1: any, arg2: any) => void, b: (arg1: any) => any, c: IEqualityComparer$1<any>);
    private i;
    protected get m(): boolean;
    protected set m(a: boolean);
    private p;
    protected get q(): List$1<Transaction>;
    private n;
    protected get o(): Dictionary$2<any, TransactionState>;
    protected get_l(): boolean;
    protected set_l(a: boolean): void;
    get l(): boolean;
    set l(a: boolean);
    protected get_k(): boolean;
    get k(): boolean;
    protected get_j(): boolean;
    get j(): boolean;
    h: (arg1: any, arg2: any) => void;
    r: (arg1: any) => any;
    stateChanged: (eventType: TransactionEvent, eventData: any) => void;
    protected af(a: Dictionary$2<any, TransactionState>, b: Transaction): void;
    protected aa(a: TransactionEvent, b: any): void;
    protected z(a: string, b: any, c: any): void;
    v(a: Transaction, b?: boolean): void;
    w(a: boolean, b?: any): void;
    g(a: any): TransactionState;
    ad(): void;
    y(a: boolean): void;
    x(a?: number): void;
    d(a: number): Transaction;
    e(a: number): TransactionCommit;
    s(a: boolean, b: boolean): number;
    u(a: number): void;
    ac(a: number): void;
    ae(): void;
    ab(): void;
    a(a?: number): TransactionState[];
    c(a?: any): Transaction[];
    b(): Transaction[];
}
