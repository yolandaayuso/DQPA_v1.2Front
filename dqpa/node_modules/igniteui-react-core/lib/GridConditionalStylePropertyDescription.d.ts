import { Description } from "./Description";
import { FilterExpressionDescription } from "./FilterExpressionDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class GridConditionalStylePropertyDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private am;
    get stylingType(): string;
    set stylingType(a: string);
    private ak;
    get minimumType(): string;
    set minimumType(a: string);
    private ag;
    get maximumType(): string;
    set maximumType(a: string);
    private al;
    get propertyName(): string;
    set propertyName(a: string);
    private n;
    get inputValueExpression(): FilterExpressionDescription;
    set inputValueExpression(a: FilterExpressionDescription);
    private ac;
    get inputValueExpressionString(): string;
    set inputValueExpressionString(a: string);
    private j;
    get actualInputValueExpression(): FilterExpressionDescription;
    set actualInputValueExpression(a: FilterExpressionDescription);
    private p;
    get minimumInputValueExpression(): FilterExpressionDescription;
    set minimumInputValueExpression(a: FilterExpressionDescription);
    private ai;
    get minimumInputValueExpressionString(): string;
    set minimumInputValueExpressionString(a: string);
    private l;
    get actualMinimumInputValueExpression(): FilterExpressionDescription;
    set actualMinimumInputValueExpression(a: FilterExpressionDescription);
    private o;
    get maximumInputValueExpression(): FilterExpressionDescription;
    set maximumInputValueExpression(a: FilterExpressionDescription);
    private ae;
    get maximumInputValueExpressionString(): string;
    set maximumInputValueExpressionString(a: string);
    private k;
    get actualMaximumInputValueExpression(): FilterExpressionDescription;
    set actualMaximumInputValueExpression(a: FilterExpressionDescription);
    private q;
    get sumInputValueExpression(): FilterExpressionDescription;
    set sumInputValueExpression(a: FilterExpressionDescription);
    private an;
    get sumInputValueExpressionString(): string;
    set sumInputValueExpressionString(a: string);
    private m;
    get actualSumInputValueExpression(): FilterExpressionDescription;
    set actualSumInputValueExpression(a: FilterExpressionDescription);
    private aq;
    get valueRef(): string;
    set valueRef(a: string);
    private z;
    get shouldSetValue(): boolean;
    set shouldSetValue(a: boolean);
    private ah;
    get minimumColor(): string;
    set minimumColor(a: string);
    private ad;
    get maximumColor(): string;
    set maximumColor(a: string);
    private aj;
    get minimumInputValueRef(): string;
    set minimumInputValueRef(a: string);
    private af;
    get maximumInputValueRef(): string;
    set maximumInputValueRef(a: string);
    private ao;
    get sumInputValueRef(): string;
    set sumInputValueRef(a: string);
    private h;
    get colorCollection(): string[];
    set colorCollection(a: string[]);
    private ap;
    get valueCollectionRef(): string;
    set valueCollectionRef(a: string);
    private ab;
    get filterStringErrorsParsingRef(): string;
    set filterStringErrorsParsingRef(a: string);
}
