import { Description } from "./Description";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class ColorEditorDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private an;
    get value(): string;
    set value(a: string);
    private ad;
    get label(): string;
    set label(a: string);
    private ah;
    get labelTextColor(): string;
    set labelTextColor(a: string);
    private ae;
    get labelFontFamily(): string;
    set labelFontFamily(a: string);
    private v;
    get labelFontSize(): number;
    set labelFontSize(a: number);
    private af;
    get labelFontStyle(): string;
    set labelFontStyle(a: string);
    private ag;
    get labelFontWeight(): string;
    set labelFontWeight(a: string);
    private aa;
    get density(): string;
    set density(a: string);
    private z;
    get baseTheme(): string;
    set baseTheme(a: string);
    private ak;
    get textFontFamily(): string;
    set textFontFamily(a: string);
    private w;
    get textFontSize(): number;
    set textFontSize(a: number);
    private al;
    get textFontStyle(): string;
    set textFontStyle(a: string);
    private am;
    get textFontWeight(): string;
    set textFontWeight(a: string);
    private aj;
    get textColor(): string;
    set textColor(a: string);
    private ac;
    get iconColor(): string;
    set iconColor(a: string);
    private m;
    get showClearButton(): boolean;
    set showClearButton(a: boolean);
    private h;
    get allowTextInput(): boolean;
    set allowTextInput(a: boolean);
    private l;
    get openOnFocus(): boolean;
    set openOnFocus(a: boolean);
    private i;
    get isDisabled(): boolean;
    set isDisabled(a: boolean);
    private j;
    get isFixed(): boolean;
    set isFixed(a: boolean);
    private k;
    get openAsChild(): boolean;
    set openAsChild(a: boolean);
    private n;
    get useTopLayer(): boolean;
    set useTopLayer(a: boolean);
    private ao;
    get valueChangedRef(): string;
    set valueChangedRef(a: string);
    private ap;
    get valueChangingRef(): string;
    set valueChangingRef(a: string);
    private ab;
    get gotFocusRef(): string;
    set gotFocusRef(a: string);
    private ai;
    get lostFocusRef(): string;
    set lostFocusRef(a: string);
}
