import { PriorityDataRule } from "./PriorityDataRule";
import { DataSeriesAdapterRunContext } from "./DataSeriesAdapterRunContext";
import { ShapeDataInfo } from "./ShapeDataInfo";
import { ScatterDataInfo } from "./ScatterDataInfo";
import { List$1 } from "./List$1";
import { Type } from "./type";
import { IDataSourceLocalDataProvider } from "./IDataSourceLocalDataProvider";
/**
 * @hidden
 */
export declare class ScatterDataRule extends PriorityDataRule {
    static $t: Type;
    constructor();
    private _supportGeographicSeries;
    get supportGeographicSeries(): boolean;
    set supportGeographicSeries(a: boolean);
    private _geographicShapeCheckThreshold;
    get geographicShapeCheckThreshold(): number;
    set geographicShapeCheckThreshold(a: number);
    private _geographicPointCheckThreshold;
    get geographicPointCheckThreshold(): number;
    set geographicPointCheckThreshold(a: number);
    private _monotonicCheckAmount;
    get monotonicCheckAmount(): number;
    set monotonicCheckAmount(a: number);
    private _smallDataSourceThreshold;
    get smallDataSourceThreshold(): number;
    set smallDataSourceThreshold(a: number);
    private _hugeDataSourceThreshold;
    get hugeDataSourceThreshold(): number;
    set hugeDataSourceThreshold(a: number);
    evaluate(a: DataSeriesAdapterRunContext): void;
    m(a: DataSeriesAdapterRunContext, b: string): string;
    l(a: DataSeriesAdapterRunContext, b: string, c: string): string;
    n(a: DataSeriesAdapterRunContext, b: ShapeDataInfo): void;
    getAdditionalValuePropertyStrings(a: DataSeriesAdapterRunContext): string[];
    b(a: DataSeriesAdapterRunContext): ShapeDataInfo;
    c(a: DataSeriesAdapterRunContext, b: IDataSourceLocalDataProvider, c: ScatterDataInfo, d: string): boolean;
    o(a: DataSeriesAdapterRunContext, b: IDataSourceLocalDataProvider, c: ScatterDataInfo): void;
    p(a: DataSeriesAdapterRunContext, b: IDataSourceLocalDataProvider, c: ScatterDataInfo, d: List$1<string>, e: string): void;
    private e;
    private d;
    private q;
}
