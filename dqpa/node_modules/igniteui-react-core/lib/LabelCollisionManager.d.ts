import { Base, Point, Type } from "./type";
import { List$1 } from "./List$1";
import { LabelCollisionPlacementPositions } from "./LabelCollisionPlacementPositions";
import { LabelCollisionManagerCollisionMode } from "./LabelCollisionManagerCollisionMode";
import { IExecutionContext } from "./IExecutionContext";
import { Rect } from "./Rect";
import { LabelCollisionInfo } from "./LabelCollisionInfo";
import { QuadTreeBoundingBox } from "./QuadTreeBoundingBox";
import { PieSliceCollisionGeometry } from "./PieSliceCollisionGeometry";
/**
 * @hidden
 */
export declare class LabelCollisionManager extends Base {
    static $t: Type;
    private r;
    private a;
    constructor(a: number, b: number, c: Rect, d: IExecutionContext, e: number, f: LabelCollisionManagerCollisionMode, g: LabelCollisionPlacementPositions[], h: number, i: number, j: boolean, k: LabelCollisionPlacementPositions[]);
    private h;
    private g;
    o(a: LabelCollisionInfo, b: LabelCollisionPlacementPositions, c: number, d: number, e: boolean): QuadTreeBoundingBox;
    ab(a: QuadTreeBoundingBox): boolean;
    as(a: QuadTreeBoundingBox): number;
    at(a: QuadTreeBoundingBox): number;
    an: List$1<LabelCollisionPlacementPositions>;
    labelsMoved: (movedLabels: List$1<LabelCollisionInfo>) => void;
    p: () => void;
    private k;
    j: LabelCollisionManagerCollisionMode;
    private e;
    am: List$1<LabelCollisionPlacementPositions>;
    a0: number;
    a8: number;
    a7: number;
    b0: Rect;
    a2: number;
    az: number;
    v: boolean;
    private ak;
    private a4;
    be(a: LabelCollisionInfo): void;
    br(a: LabelCollisionInfo): void;
    bo(a: LabelCollisionInfo): void;
    bn(a: LabelCollisionInfo): void;
    bv(): void;
    private al;
    private t;
    private s;
    bg(): void;
    bf(): void;
    private bk;
    private bi;
    private static bc;
    private a6;
    private a3;
    private ao;
    private ap;
    private f;
    private bj;
    private a5;
    private u;
    private q;
    private b;
    private z;
    private aa;
    private ay;
    private w;
    get a9(): number;
    bd: string;
    bb: any;
    private aq;
    private ar;
    bs(a: number, b: number, c: Rect): void;
    af(): boolean;
    x(): boolean;
    ba(): number;
    private bp;
    private bq;
    private bw;
    private bh;
    private n;
    private bm;
    private bl;
    private m;
    private l;
    private static av;
    private static bx;
    private static aw;
    private static by;
    private static au;
    bu(a: List$1<LabelCollisionInfo>): void;
    bt(a: List$1<LabelCollisionInfo>): void;
    private ax;
    static a1(a: number): number;
    private ag;
    ae(a: PieSliceCollisionGeometry, b: Rect, c: LabelCollisionInfo, d: Point): boolean;
    bz(a: PieSliceCollisionGeometry): Point;
    private ah;
    ad(a: LabelCollisionInfo, b: boolean): boolean;
    private aj;
    private ai;
    private y;
    private c;
    i(a: Point, b: boolean): LabelCollisionInfo;
    ac(): boolean;
}
