import { DefinitionBaseDescription } from "./DefinitionBaseDescription";
import { GridColumnAnimationSettingsDescription } from "./GridColumnAnimationSettingsDescription";
import { ColumnWidthDescription } from "./ColumnWidthDescription";
import { ColumnFilterConditionDescription } from "./ColumnFilterConditionDescription";
import { FilterExpressionDescription } from "./FilterExpressionDescription";
import { HeaderDescription } from "./HeaderDescription";
import { FilterOperandDescription } from "./FilterOperandDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class DataGridColumnDescription extends DefinitionBaseDescription {
    static $t: Type;
    protected get_type(): string;
    private static __canMarshalByValue;
    private static __marshalByValueAlias;
    constructor();
    private d5;
    get paddingLeft(): number;
    set paddingLeft(a: number);
    private d7;
    get paddingTop(): number;
    set paddingTop(a: number);
    private d6;
    get paddingRight(): number;
    set paddingRight(a: number);
    private d4;
    get paddingBottom(): number;
    set paddingBottom(a: number);
    private e3;
    get name(): string;
    set name(a: string);
    private ex;
    get field(): string;
    set field(a: string);
    private ez;
    get headerText(): string;
    set headerText(a: string);
    private el;
    get actualHeaderText(): string;
    set actualHeaderText(a: string);
    private e7;
    get selectedBackground(): string;
    set selectedBackground(a: string);
    private ep;
    get actualSelectedBackground(): string;
    set actualSelectedBackground(a: string);
    private e5;
    get rowHoverBackground(): string;
    set rowHoverBackground(a: string);
    private en;
    get actualHoverBackground(): string;
    set actualHoverBackground(a: string);
    private e6;
    get rowHoverTextColor(): string;
    set rowHoverTextColor(a: string);
    private eo;
    get actualRowHoverTextColor(): string;
    set actualRowHoverTextColor(a: string);
    private cw;
    get animationSettings(): GridColumnAnimationSettingsDescription;
    set animationSettings(a: GridColumnAnimationSettingsDescription);
    private cs;
    get width(): ColumnWidthDescription;
    set width(a: ColumnWidthDescription);
    private dv;
    get minWidth(): number;
    set minWidth(a: number);
    private da;
    get isFromMarkup(): boolean;
    set isFromMarkup(a: boolean);
    private c4;
    get isAutoGenerated(): boolean;
    set isAutoGenerated(a: boolean);
    private cq;
    get filter(): ColumnFilterConditionDescription;
    set filter(a: ColumnFilterConditionDescription);
    private cu;
    get filterExpression(): FilterExpressionDescription;
    set filterExpression(a: FilterExpressionDescription);
    private cy;
    get header(): HeaderDescription;
    set header(a: HeaderDescription);
    private c9;
    get isFilteringEnabled(): boolean;
    set isFilteringEnabled(a: boolean);
    private dc;
    get isResizingEnabled(): boolean;
    set isResizingEnabled(a: boolean);
    private db;
    get isHidden(): boolean;
    set isHidden(a: boolean);
    private dd;
    get shouldRemoveWhenHidden(): boolean;
    set shouldRemoveWhenHidden(a: boolean);
    private e8;
    get sortDirection(): string;
    set sortDirection(a: string);
    private e4;
    get pinned(): string;
    set pinned(a: string);
    private eh;
    get actualColumnOptionsIconAlignment(): string;
    set actualColumnOptionsIconAlignment(a: string);
    private eq;
    get columnOptionsIconAlignment(): string;
    set columnOptionsIconAlignment(a: string);
    private ej;
    get actualColumnOptionsIconColor(): string;
    set actualColumnOptionsIconColor(a: string);
    private es;
    get columnOptionsIconColor(): string;
    set columnOptionsIconColor(a: string);
    private er;
    get columnOptionsIconBehavior(): string;
    set columnOptionsIconBehavior(a: string);
    private ei;
    get actualColumnOptionsIconBehavior(): string;
    set actualColumnOptionsIconBehavior(a: string);
    private c1;
    get actualIsColumnOptionsEnabled(): boolean;
    set actualIsColumnOptionsEnabled(a: boolean);
    private c5;
    get isColumnOptionsEnabled(): boolean;
    set isColumnOptionsEnabled(a: boolean);
    private c3;
    get actualIsColumnOptionsSummariesEnabled(): boolean;
    set actualIsColumnOptionsSummariesEnabled(a: boolean);
    private c7;
    get isColumnOptionsSummariesEnabled(): boolean;
    set isColumnOptionsSummariesEnabled(a: boolean);
    private c2;
    get actualIsColumnOptionsGroupingEnabled(): boolean;
    set actualIsColumnOptionsGroupingEnabled(a: boolean);
    private c6;
    get isColumnOptionsGroupingEnabled(): boolean;
    set isColumnOptionsGroupingEnabled(a: boolean);
    private c8;
    get isEditable(): boolean;
    set isEditable(a: boolean);
    private et;
    get deletedTextColor(): string;
    set deletedTextColor(a: string);
    private ek;
    get actualDeletedTextColor(): string;
    set actualDeletedTextColor(a: string);
    private du;
    get editOpacity(): number;
    set editOpacity(a: number);
    private ds;
    get actualEditOpacity(): number;
    set actualEditOpacity(a: number);
    private eu;
    get editFontFamily(): string;
    set editFontFamily(a: string);
    private dt;
    get editFontSize(): number;
    set editFontSize(a: number);
    private ev;
    get editFontStyle(): string;
    set editFontStyle(a: string);
    private ew;
    get editFontWeight(): string;
    set editFontWeight(a: string);
    private e1;
    get mergedCellMode(): string;
    set mergedCellMode(a: string);
    private e0;
    get mergedCellEvaluationCriteria(): string;
    set mergedCellEvaluationCriteria(a: string);
    private e2;
    get mergedCellVerticalAlignment(): string;
    set mergedCellVerticalAlignment(a: string);
    private d1;
    get mergedCellPaddingLeft(): number;
    set mergedCellPaddingLeft(a: number);
    private d3;
    get mergedCellPaddingTop(): number;
    set mergedCellPaddingTop(a: number);
    private d2;
    get mergedCellPaddingRight(): number;
    set mergedCellPaddingRight(a: number);
    private d0;
    get mergedCellPaddingBottom(): number;
    set mergedCellPaddingBottom(a: number);
    private ey;
    get filterComparisonType(): string;
    set filterComparisonType(a: string);
    private co;
    get filterOperands(): FilterOperandDescription[];
    set filterOperands(a: FilterOperandDescription[]);
    private em;
    get actualHeaderTextChangeRef(): string;
    set actualHeaderTextChangeRef(a: string);
}
