import { TransactionType } from "./TransactionType";
import { TransactionState as TransactionState_internal } from "./TransactionState";
import { ContentChildrenManager } from "./ContentChildrenManager";
/**
 * Represents the final state of items with all transactions combined.
*/
export declare class IgrTransactionState {
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): TransactionState_internal;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * Gets or sets the ID for the state.  I.e. an items primary key.
    */
    get id(): any;
    set id(v: any);
    /**
     * Gets or sets how this state was created.
    */
    get transactionType(): TransactionType;
    set transactionType(v: TransactionType);
    /**
     * Gets or sets the final value with all transaction deltas combined.
    */
    get value(): any;
    set value(v: any);
    /**
     * Gets or sets the version data for this item. Used for concurrency.
    */
    get version(): any;
    set version(v: any);
    findByName(name: string): any;
}
