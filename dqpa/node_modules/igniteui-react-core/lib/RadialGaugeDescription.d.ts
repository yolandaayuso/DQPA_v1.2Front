import { Description } from "./Description";
import { RadialGaugeRangeDescription } from "./RadialGaugeRangeDescription";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class RadialGaugeDescription extends Description {
    static $t: Type;
    private eg;
    get fontFamily(): string;
    set fontFamily(a: string);
    private a2;
    get fontSize(): number;
    set fontSize(a: number);
    private ei;
    get fontWeight(): string;
    set fontWeight(a: string);
    private eh;
    get fontStyle(): string;
    set fontStyle(a: string);
    private fm;
    get width(): string;
    set width(a: string);
    private en;
    get height(): string;
    set height(a: string);
    private d9;
    get background(): string;
    set background(a: string);
    protected get_type(): string;
    get type(): string;
    constructor();
    private j;
    get rangeBrushes(): string[];
    set rangeBrushes(a: string[]);
    private k;
    get rangeOutlines(): string[];
    set rangeOutlines(a: string[]);
    private bc;
    get minimumValue(): number;
    set minimumValue(a: number);
    private at;
    get actualMinimumValue(): number;
    set actualMinimumValue(a: number);
    private bb;
    get maximumValue(): number;
    set maximumValue(a: number);
    private as;
    get actualMaximumValue(): number;
    set actualMaximumValue(a: number);
    private a8;
    get interval(): number;
    set interval(a: number);
    private a0;
    get centerX(): number;
    set centerX(a: number);
    private a1;
    get centerY(): number;
    set centerY(a: number);
    private cc;
    get value(): number;
    set value(a: number);
    private a6;
    get highlightValue(): number;
    set highlightValue(a: number);
    private ar;
    get actualHighlightValueOpacity(): number;
    set actualHighlightValueOpacity(a: number);
    private a7;
    get highlightValueOpacity(): number;
    set highlightValueOpacity(a: number);
    private d2;
    get actualHighlightValueDisplayMode(): string;
    set actualHighlightValueDisplayMode(a: string);
    private ev;
    get highlightValueDisplayMode(): string;
    set highlightValueDisplayMode(a: string);
    private b0;
    get scaleStartAngle(): number;
    set scaleStartAngle(a: number);
    private bx;
    get scaleEndAngle(): number;
    set scaleEndAngle(a: number);
    private e6;
    get scaleSweepDirection(): string;
    set scaleSweepDirection(a: string);
    private d0;
    get transitionDuration(): number;
    set transitionDuration(a: number);
    private fk;
    get transitionEasingFunctionRef(): string;
    set transitionEasingFunctionRef(a: string);
    private ey;
    get needleBrush(): string;
    set needleBrush(a: string);
    private ez;
    get needleOutline(): string;
    set needleOutline(a: string);
    private bq;
    get needleStartExtent(): number;
    set needleStartExtent(a: number);
    private bj;
    get needleEndExtent(): number;
    set needleEndExtent(a: number);
    private e3;
    get needleShape(): string;
    set needleShape(a: string);
    private br;
    get needleStartWidthRatio(): number;
    set needleStartWidthRatio(a: number);
    private bk;
    get needleEndWidthRatio(): number;
    set needleEndWidthRatio(a: number);
    private bi;
    get needleBaseFeatureWidthRatio(): number;
    set needleBaseFeatureWidthRatio(a: number);
    private bh;
    get needleBaseFeatureExtent(): number;
    set needleBaseFeatureExtent(a: number);
    private bp;
    get needlePointFeatureWidthRatio(): number;
    set needlePointFeatureWidthRatio(a: number);
    private bo;
    get needlePointFeatureExtent(): number;
    set needlePointFeatureExtent(a: number);
    private bn;
    get needlePivotWidthRatio(): number;
    set needlePivotWidthRatio(a: number);
    private bl;
    get needlePivotInnerWidthRatio(): number;
    set needlePivotInnerWidthRatio(a: number);
    private e2;
    get needlePivotShape(): string;
    set needlePivotShape(a: string);
    private b1;
    get scaleStartExtent(): number;
    set scaleStartExtent(a: number);
    private e0;
    get needlePivotBrush(): string;
    set needlePivotBrush(a: string);
    private e1;
    get needlePivotOutline(): string;
    set needlePivotOutline(a: string);
    private bs;
    get needleStrokeThickness(): number;
    set needleStrokeThickness(a: number);
    private bm;
    get needlePivotStrokeThickness(): number;
    set needlePivotStrokeThickness(a: number);
    private by;
    get scaleEndExtent(): number;
    set scaleEndExtent(a: number);
    private a9;
    get labelExtent(): number;
    set labelExtent(a: number);
    private ba;
    get labelInterval(): number;
    set labelInterval(a: number);
    private b6;
    get tickStartExtent(): number;
    set tickStartExtent(a: number);
    private b5;
    get tickEndExtent(): number;
    set tickEndExtent(a: number);
    private b7;
    get tickStrokeThickness(): number;
    set tickStrokeThickness(a: number);
    private fd;
    get tickBrush(): string;
    set tickBrush(a: string);
    private ef;
    get fontBrush(): string;
    set fontBrush(a: string);
    private bf;
    get minorTickStartExtent(): number;
    set minorTickStartExtent(a: number);
    private be;
    get minorTickEndExtent(): number;
    set minorTickEndExtent(a: number);
    private bg;
    get minorTickStrokeThickness(): number;
    set minorTickStrokeThickness(a: number);
    private ex;
    get minorTickBrush(): string;
    set minorTickBrush(a: string);
    private bd;
    get minorTickCount(): number;
    set minorTickCount(a: number);
    private e4;
    get scaleBrush(): string;
    set scaleBrush(a: string);
    private ea;
    get backingBrush(): string;
    set backingBrush(a: string);
    private eb;
    get backingOutline(): string;
    set backingOutline(a: string);
    private az;
    get backingStrokeThickness(): number;
    set backingStrokeThickness(a: number);
    private ax;
    get backingOuterExtent(): number;
    set backingOuterExtent(a: number);
    private ay;
    get backingOversweep(): number;
    set backingOversweep(a: number);
    private bz;
    get scaleOversweep(): number;
    set scaleOversweep(a: number);
    private e5;
    get scaleOversweepShape(): string;
    set scaleOversweepShape(a: string);
    private av;
    get backingCornerRadius(): number;
    set backingCornerRadius(a: number);
    private aw;
    get backingInnerExtent(): number;
    set backingInnerExtent(a: number);
    private ec;
    get backingShape(): string;
    set backingShape(a: string);
    private l;
    get ranges(): RadialGaugeRangeDescription[];
    set ranges(a: RadialGaugeRangeDescription[]);
    private bw;
    get radiusMultiplier(): number;
    set radiusMultiplier(a: number);
    private ed;
    get duplicateLabelOmissionStrategy(): string;
    set duplicateLabelOmissionStrategy(a: string);
    private aa;
    get isNeedleDraggingEnabled(): boolean;
    set isNeedleDraggingEnabled(a: boolean);
    private z;
    get isNeedleDraggingConstrained(): boolean;
    set isNeedleDraggingConstrained(a: boolean);
    private y;
    get isHighlightNeedleDraggingEnabled(): boolean;
    set isHighlightNeedleDraggingEnabled(a: boolean);
    private x;
    get isHighlightNeedleDraggingConstrained(): boolean;
    set isHighlightNeedleDraggingConstrained(a: boolean);
    private ee;
    get font(): string;
    set font(a: string);
    private ew;
    get labelFormat(): string;
    set labelFormat(a: string);
    private i;
    get labelFormatSpecifiers(): FormatSpecifierDescription[];
    set labelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private cb;
    get transitionProgress(): number;
    set transitionProgress(a: number);
    private bv;
    get pixelScalingRatio(): number;
    set pixelScalingRatio(a: number);
    private au;
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(a: number);
    private bt;
    get opticalScalingRatio(): number;
    set opticalScalingRatio(a: number);
    private ab;
    get opticalScalingEnabled(): boolean;
    set opticalScalingEnabled(a: boolean);
    private bu;
    get opticalScalingSize(): number;
    set opticalScalingSize(a: number);
    private fj;
    get titleText(): string;
    set titleText(a: string);
    private fc;
    get subtitleText(): string;
    set subtitleText(a: string);
    private b8;
    get titleAngle(): number;
    set titleAngle(a: number);
    private b2;
    get subtitleAngle(): number;
    set subtitleAngle(a: number);
    private b9;
    get titleExtent(): number;
    set titleExtent(a: number);
    private b3;
    get subtitleExtent(): number;
    set subtitleExtent(a: number);
    private fe;
    get titleBrush(): string;
    set titleBrush(a: string);
    private e7;
    get subtitleBrush(): string;
    set subtitleBrush(a: string);
    private ae;
    get titleDisplaysValue(): boolean;
    set titleDisplaysValue(a: boolean);
    private ac;
    get subtitleDisplaysValue(): boolean;
    set subtitleDisplaysValue(a: boolean);
    private af;
    get titleSnapsToNeedlePivot(): boolean;
    set titleSnapsToNeedlePivot(a: boolean);
    private ad;
    get subtitleSnapsToNeedlePivot(): boolean;
    set subtitleSnapsToNeedlePivot(a: boolean);
    private fb;
    get subtitleFormat(): string;
    set subtitleFormat(a: string);
    private m;
    get subtitleFormatSpecifiers(): FormatSpecifierDescription[];
    set subtitleFormatSpecifiers(a: FormatSpecifierDescription[]);
    private fi;
    get titleFormat(): string;
    set titleFormat(a: string);
    private n;
    get titleFormatSpecifiers(): FormatSpecifierDescription[];
    set titleFormatSpecifiers(a: FormatSpecifierDescription[]);
    private et;
    get highlightLabelText(): string;
    set highlightLabelText(a: string);
    private a3;
    get highlightLabelAngle(): number;
    set highlightLabelAngle(a: number);
    private a4;
    get highlightLabelExtent(): number;
    set highlightLabelExtent(a: number);
    private eo;
    get highlightLabelBrush(): string;
    set highlightLabelBrush(a: string);
    private v;
    get highlightLabelDisplaysValue(): boolean;
    set highlightLabelDisplaysValue(a: boolean);
    private w;
    get highlightLabelSnapsToNeedlePivot(): boolean;
    set highlightLabelSnapsToNeedlePivot(a: boolean);
    private es;
    get highlightLabelFormat(): string;
    set highlightLabelFormat(a: string);
    private h;
    get highlightLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set highlightLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private ep;
    get highlightLabelFontFamily(): string;
    set highlightLabelFontFamily(a: string);
    private a5;
    get highlightLabelFontSize(): number;
    set highlightLabelFontSize(a: number);
    private eq;
    get highlightLabelFontStyle(): string;
    set highlightLabelFontStyle(a: string);
    private er;
    get highlightLabelFontWeight(): string;
    set highlightLabelFontWeight(a: string);
    private e8;
    get subtitleFontFamily(): string;
    set subtitleFontFamily(a: string);
    private b4;
    get subtitleFontSize(): number;
    set subtitleFontSize(a: number);
    private e9;
    get subtitleFontStyle(): string;
    set subtitleFontStyle(a: string);
    private fa;
    get subtitleFontWeight(): string;
    set subtitleFontWeight(a: string);
    private ff;
    get titleFontFamily(): string;
    set titleFontFamily(a: string);
    private ca;
    get titleFontSize(): number;
    set titleFontSize(a: number);
    private fg;
    get titleFontStyle(): string;
    set titleFontStyle(a: string);
    private fh;
    get titleFontWeight(): string;
    set titleFontWeight(a: string);
    private d8;
    get alignTitleRef(): string;
    set alignTitleRef(a: string);
    private d7;
    get alignSubtitleRef(): string;
    set alignSubtitleRef(a: string);
    private d5;
    get alignHighlightLabelRef(): string;
    set alignHighlightLabelRef(a: string);
    private em;
    get formatTitleRef(): string;
    set formatTitleRef(a: string);
    private el;
    get formatSubtitleRef(): string;
    set formatSubtitleRef(a: string);
    private ej;
    get formatHighlightLabelRef(): string;
    set formatHighlightLabelRef(a: string);
    private ek;
    get formatLabelRef(): string;
    set formatLabelRef(a: string);
    private d6;
    get alignLabelRef(): string;
    set alignLabelRef(a: string);
    private fl;
    get valueChangedRef(): string;
    set valueChangedRef(a: string);
    private eu;
    get highlightValueChangedRef(): string;
    set highlightValueChangedRef(a: string);
    private d4;
    get actualMinimumValueChangeRef(): string;
    set actualMinimumValueChangeRef(a: string);
    private d3;
    get actualMaximumValueChangeRef(): string;
    set actualMaximumValueChangeRef(a: string);
}
