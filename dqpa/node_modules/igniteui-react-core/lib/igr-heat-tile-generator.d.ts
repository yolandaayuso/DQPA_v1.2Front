import { HeatTileGenerator as HeatTileGenerator_internal } from "./HeatTileGenerator";
import { TileImageCreatedEventArgs } from './TileImageCreatedEventArgs';
import { TileImageZoomChangingEventArgs } from './TileImageZoomChangingEventArgs';
import { ITileGenerator } from './ITileGenerator';
export declare class IgrHeatTileGenerator implements ITileGenerator {
    protected createImplementation(): HeatTileGenerator_internal;
    protected _implementation: any;
    /**
     * @hidden
     */
    get i(): HeatTileGenerator_internal;
    private onImplementationCreated;
    constructor();
    protected _provideImplementation(i: any): void;
    get scaleColors(): string[];
    set scaleColors(v: string[]);
    get yValues(): number[];
    set yValues(v: number[]);
    get xValues(): number[];
    set xValues(v: number[]);
    get values(): number[];
    set values(v: number[]);
    get minimumColor(): string;
    set minimumColor(v: string);
    get maximumColor(): string;
    set maximumColor(v: string);
    get scaleColorOffsets(): number[];
    set scaleColorOffsets(v: number[]);
    get blurRadius(): number;
    set blurRadius(v: number);
    get maxBlurRadius(): number;
    set maxBlurRadius(v: number);
    get useBlurRadiusAdjustedForZoom(): boolean;
    set useBlurRadiusAdjustedForZoom(v: boolean);
    get useGlobalMinMax(): boolean;
    set useGlobalMinMax(v: boolean);
    get useGlobalMinMaxAdjustedForZoom(): boolean;
    set useGlobalMinMaxAdjustedForZoom(v: boolean);
    get minimumValue(): number;
    set minimumValue(v: number);
    get maximumValue(): number;
    set maximumValue(v: number);
    get logarithmBase(): number;
    set logarithmBase(v: number);
    get useLogarithmicScale(): boolean;
    set useLogarithmicScale(v: boolean);
    get useWebWorkers(): boolean;
    set useWebWorkers(v: boolean);
    get webWorkerScriptPath(): string;
    set webWorkerScriptPath(v: string);
    get webWorkerInstance(): any;
    set webWorkerInstance(v: any);
    findByName(name: string): any;
    destroy(): void;
    getTile(z: number, x: number, y: number, onCreated: (sender: any, eventArgs: TileImageCreatedEventArgs) => void, onCreating: (sender: any, eventArgs: TileImageCreatedEventArgs) => void, zoomChanging: (sender: any, eventArgs: TileImageZoomChangingEventArgs) => void, existingImage: HTMLImageElement): void;
    cancelTile(z: number, x: number, y: number): void;
}
