import { Description } from "./Description";
import { DashboardTileCustomizationDescription } from "./DashboardTileCustomizationDescription";
import { DashboardTileSortDescriptionDescription } from "./DashboardTileSortDescriptionDescription";
import { FilterExpressionDescription } from "./FilterExpressionDescription";
import { DashboardTileSummaryDescriptionDescription } from "./DashboardTileSummaryDescriptionDescription";
import { BaseDataSourceDescription } from "./BaseDataSourceDescription";
import { ChartSelectionDescription } from "./ChartSelectionDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class DashboardTileDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private k;
    get customizations(): DashboardTileCustomizationDescription[];
    set customizations(a: DashboardTileCustomizationDescription[]);
    private b0;
    get tileTitle(): string;
    set tileTitle(a: string);
    private v;
    get initialSortDescriptions(): DashboardTileSortDescriptionDescription[];
    set initialSortDescriptions(a: DashboardTileSortDescriptionDescription[]);
    private t;
    get initialGroupSortDescriptions(): DashboardTileSortDescriptionDescription[];
    set initialGroupSortDescriptions(a: DashboardTileSortDescriptionDescription[]);
    private s;
    get initialGroupDescriptions(): DashboardTileSortDescriptionDescription[];
    set initialGroupDescriptions(a: DashboardTileSortDescriptionDescription[]);
    private r;
    get initialFilterExpressions(): FilterExpressionDescription[];
    set initialFilterExpressions(a: FilterExpressionDescription[]);
    private u;
    get initialHighlightFilterExpressions(): FilterExpressionDescription[];
    set initialHighlightFilterExpressions(a: FilterExpressionDescription[]);
    private w;
    get initialSummaryDescriptions(): DashboardTileSummaryDescriptionDescription[];
    set initialSummaryDescriptions(a: DashboardTileSummaryDescriptionDescription[]);
    private by;
    get initialSorts(): string;
    set initialSorts(a: string);
    private br;
    get groupSorts(): string;
    set groupSorts(a: string);
    private bw;
    get initialGroups(): string;
    set initialGroups(a: string);
    private bv;
    get initialFilter(): string;
    set initialFilter(a: string);
    private bx;
    get initialHighlightFilter(): string;
    set initialHighlightFilter(a: string);
    private bz;
    get initialSummaries(): string;
    set initialSummaries(a: string);
    private z;
    get sortDescriptions(): DashboardTileSortDescriptionDescription[];
    set sortDescriptions(a: DashboardTileSortDescriptionDescription[]);
    private o;
    get groupSortDescriptions(): DashboardTileSortDescriptionDescription[];
    set groupSortDescriptions(a: DashboardTileSortDescriptionDescription[]);
    private n;
    get groupDescriptions(): DashboardTileSortDescriptionDescription[];
    set groupDescriptions(a: DashboardTileSortDescriptionDescription[]);
    private m;
    get filterExpressions(): FilterExpressionDescription[];
    set filterExpressions(a: FilterExpressionDescription[]);
    private p;
    get highlightFilterExpressions(): FilterExpressionDescription[];
    set highlightFilterExpressions(a: FilterExpressionDescription[]);
    private aa;
    get summaryDescriptions(): DashboardTileSummaryDescriptionDescription[];
    set summaryDescriptions(a: DashboardTileSummaryDescriptionDescription[]);
    private bo;
    get dataSourceRef(): string;
    set dataSourceRef(a: string);
    private a1;
    get dataSource(): BaseDataSourceDescription;
    set dataSource(a: BaseDataSourceDescription);
    private bt;
    get highlightedDataSourceRef(): string;
    set highlightedDataSourceRef(a: string);
    private a2;
    get highlightedDataSource(): BaseDataSourceDescription;
    set highlightedDataSource(a: BaseDataSourceDescription);
    private a9;
    get shouldDisplayMockData(): boolean;
    set shouldDisplayMockData(a: boolean);
    private a8;
    get shouldAvoidAxisAnnotationCollisions(): boolean;
    set shouldAvoidAxisAnnotationCollisions(a: boolean);
    private b1;
    get trendLineType(): string;
    set trendLineType(a: string);
    private ba;
    get shouldUseSkeletonStyleForMockData(): boolean;
    set shouldUseSkeletonStyleForMockData(a: boolean);
    private bu;
    get highlightedValuesDisplayMode(): string;
    set highlightedValuesDisplayMode(a: string);
    private q;
    get includedProperties(): string[];
    set includedProperties(a: string[]);
    private ab;
    get validVisualizationTypes(): string[];
    set validVisualizationTypes(a: string[]);
    private l;
    get excludedProperties(): string[];
    set excludedProperties(a: string[]);
    private j;
    get brushes(): string[];
    set brushes(a: string[]);
    private x;
    get outlines(): string[];
    set outlines(a: string[]);
    private y;
    get selectedSeriesItems(): ChartSelectionDescription[];
    set selectedSeriesItems(a: ChartSelectionDescription[]);
    private h;
    get actualBrushes(): string[];
    set actualBrushes(a: string[]);
    private i;
    get actualOutlines(): string[];
    set actualOutlines(a: string[]);
    private bl;
    get categoryAxisMajorStroke(): string;
    set categoryAxisMajorStroke(a: string);
    private ac;
    get valueLines(): string[];
    set valueLines(a: string[]);
    private ad;
    get valueLinesBrushes(): string[];
    set valueLinesBrushes(a: string[]);
    private a5;
    get autoCalloutsVisible(): boolean;
    set autoCalloutsVisible(a: boolean);
    private a6;
    get crosshairsAnnotationEnabled(): boolean;
    set crosshairsAnnotationEnabled(a: boolean);
    private a7;
    get finalValueAnnotationsVisible(): boolean;
    set finalValueAnnotationsVisible(a: boolean);
    private bn;
    get crosshairsDisplayMode(): string;
    set crosshairsDisplayMode(a: string);
    private b2;
    get visualizationType(): string;
    set visualizationType(a: string);
    private bh;
    get validVisualizationTypePriorityThreshold(): number;
    set validVisualizationTypePriorityThreshold(a: number);
    private bk;
    get baseTheme(): string;
    set baseTheme(a: string);
    private bp;
    get density(): string;
    set density(a: string);
    private bj;
    get backgroundColor(): string;
    set backgroundColor(a: string);
    private bm;
    get changingContentRef(): string;
    set changingContentRef(a: string);
    private bq;
    get filterStringErrorsParsingRef(): string;
    set filterStringErrorsParsingRef(a: string);
    private b3;
    get width(): string;
    set width(a: string);
    private bs;
    get height(): string;
    set height(a: string);
}
