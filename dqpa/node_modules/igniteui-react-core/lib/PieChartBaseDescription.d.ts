import { Description } from "./Description";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class PieChartBaseDescription extends Description {
    static $t: Type;
    private cm;
    get tooltipTemplateRef(): string;
    set tooltipTemplateRef(a: string);
    private bk;
    get fontFamily(): string;
    set fontFamily(a: string);
    private ap;
    get fontSize(): number;
    set fontSize(a: number);
    private bm;
    get fontWeight(): string;
    set fontWeight(a: string);
    private bl;
    get fontStyle(): string;
    set fontStyle(a: string);
    protected get_type(): string;
    get type(): string;
    constructor();
    private bj;
    get dataSourceRef(): string;
    set dataSourceRef(a: string);
    private aq;
    get innerExtent(): number;
    set innerExtent(a: number);
    private cn;
    get valueMemberPath(): string;
    set valueMemberPath(a: string);
    private bs;
    get labelMemberPath(): string;
    set labelMemberPath(a: string);
    private b1;
    get legendLabelMemberPath(): string;
    set legendLabelMemberPath(a: string);
    private bu;
    get labelsPosition(): string;
    set labelsPosition(a: string);
    private bt;
    get labelOuterColor(): string;
    set labelOuterColor(a: string);
    private br;
    get labelInnerColor(): string;
    set labelInnerColor(a: string);
    private bi;
    get actualLabelOuterColor(): string;
    set actualLabelOuterColor(a: string);
    private bh;
    get actualLabelInnerColor(): string;
    set actualLabelInnerColor(a: string);
    private bw;
    get leaderLineVisibility(): string;
    set leaderLineVisibility(a: string);
    private bv;
    get leaderLineType(): string;
    set leaderLineType(a: string);
    private as;
    get leaderLineMargin(): number;
    set leaderLineMargin(a: number);
    private av;
    get othersCategoryThreshold(): number;
    set othersCategoryThreshold(a: number);
    private b7;
    get othersCategoryType(): string;
    set othersCategoryType(a: string);
    private b6;
    get othersCategoryText(): string;
    set othersCategoryText(a: string);
    private ao;
    get explodedRadius(): number;
    set explodedRadius(a: number);
    private ax;
    get radiusFactor(): number;
    set radiusFactor(a: number);
    private ac;
    get allowSliceSelection(): boolean;
    set allowSliceSelection(a: boolean);
    private ab;
    get allowSliceExplosion(): boolean;
    set allowSliceExplosion(a: boolean);
    private k;
    get explodedSlices(): number[];
    set explodedSlices(a: number[]);
    private b3;
    get legendRef(): string;
    set legendRef(a: string);
    private ar;
    get labelExtent(): number;
    set labelExtent(a: number);
    private a0;
    get startAngle(): number;
    set startAngle(a: number);
    private ck;
    get sweepDirection(): string;
    set sweepDirection(a: string);
    private b4;
    get othersCategoryFill(): string;
    set othersCategoryFill(a: string);
    private b5;
    get othersCategoryStroke(): string;
    set othersCategoryStroke(a: string);
    private au;
    get othersCategoryStrokeThickness(): number;
    set othersCategoryStrokeThickness(a: number);
    private at;
    get othersCategoryOpacity(): number;
    set othersCategoryOpacity(a: number);
    private cd;
    get selectedSliceFill(): string;
    set selectedSliceFill(a: string);
    private ce;
    get selectedSliceStroke(): string;
    set selectedSliceStroke(a: string);
    private az;
    get selectedSliceStrokeThickness(): number;
    set selectedSliceStrokeThickness(a: number);
    private ay;
    get selectedSliceOpacity(): number;
    set selectedSliceOpacity(a: number);
    private j;
    get brushes(): string[];
    set brushes(a: string[]);
    private h;
    get actualBrushes(): string[];
    set actualBrushes(a: string[]);
    private p;
    get outlines(): string[];
    set outlines(a: string[]);
    private i;
    get actualOutlines(): string[];
    set actualOutlines(a: string[]);
    private bq;
    get labelFormat(): string;
    set labelFormat(a: string);
    private l;
    get labelFormatSpecifiers(): FormatSpecifierDescription[];
    set labelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private b8;
    get othersLabelFormat(): string;
    set othersLabelFormat(a: string);
    private o;
    get othersLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set othersLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private b0;
    get legendLabelFormat(): string;
    set legendLabelFormat(a: string);
    private m;
    get legendLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set legendLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private b2;
    get legendOthersLabelFormat(): string;
    set legendOthersLabelFormat(a: string);
    private n;
    get legendOthersLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set legendOthersLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private bz;
    get legendItemTemplateRef(): string;
    set legendItemTemplateRef(a: string);
    private by;
    get legendItemBadgeTemplateRef(): string;
    set legendItemBadgeTemplateRef(a: string);
    private ad;
    get isDragInteractionEnabled(): boolean;
    set isDragInteractionEnabled(a: boolean);
    private ae;
    get isSurfaceInteractionDisabled(): boolean;
    set isSurfaceInteractionDisabled(a: boolean);
    private af;
    get shouldDisplayMockData(): boolean;
    set shouldDisplayMockData(a: boolean);
    private ag;
    get shouldUseSkeletonStyleForMockData(): boolean;
    set shouldUseSkeletonStyleForMockData(a: boolean);
    private bx;
    get legendEmptyValuesMode(): string;
    set legendEmptyValuesMode(a: string);
    private bn;
    get formatLabelRef(): string;
    set formatLabelRef(a: string);
    private bo;
    get formatLegendLabelRef(): string;
    set formatLegendLabelRef(a: string);
    private aw;
    get pixelScalingRatio(): number;
    set pixelScalingRatio(a: number);
    private an;
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(a: number);
    private cf;
    get selectionMode(): string;
    set selectionMode(a: string);
    private bf;
    get selectedItem(): any;
    set selectedItem(a: any);
    private q;
    get selectedItems(): any[];
    set selectedItems(a: any[]);
    private cl;
    get textStyle(): string;
    set textStyle(a: string);
    private bp;
    get labelClickRef(): string;
    set labelClickRef(a: string);
    private ca;
    get selectedItemChangingRef(): string;
    set selectedItemChangingRef(a: string);
    private cc;
    get selectedItemsChangingRef(): string;
    set selectedItemsChangingRef(a: string);
    private b9;
    get selectedItemChangedRef(): string;
    set selectedItemChangedRef(a: string);
    private cb;
    get selectedItemsChangedRef(): string;
    set selectedItemsChangedRef(a: string);
    private cg;
    get sliceClickRef(): string;
    set sliceClickRef(a: string);
    private ch;
    get sliceEnterRef(): string;
    set sliceEnterRef(a: string);
    private cj;
    get sliceLeaveRef(): string;
    set sliceLeaveRef(a: string);
    private ci;
    get sliceHoverRef(): string;
    set sliceHoverRef(a: string);
}
