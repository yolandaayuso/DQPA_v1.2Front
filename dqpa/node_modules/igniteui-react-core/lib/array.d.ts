import { IList, ICollection, IEnumerable, IEnumerable$1, IEnumerator, IEnumerator$1, IList$1, Type } from "./type";
export declare function arrayCopyTo(source: any[], dest: any[], index: number): void;
export declare function arrayCopy(source: any[], sourceIndex: number, dest: any[], destIndex: number, count: number): void;
export declare function arrayInsert(target: any[], index: number, item: any): void;
export declare function arrayRemoveAt(target: any[], index: number): void;
export declare function arrayRemoveItem(target: any[], item: any): boolean;
export declare function arrayGetValue(target: any[], index: number): any;
export declare function arrayGetLength(target: any[], dimension: number): number;
export declare function arrayGetRank(target: any[]): number;
export declare function arrayResize<T>(target: T[], length: number): void;
export declare function arrayInsertRange(target: any[], index: number, items: any[]): void;
export declare function arrayInsertRange1(target: any[], index: number, items: any[]): void;
export declare function arrayShallowClone(arr: any[]): any[];
export declare function arrayClear(arr: any[]): void;
export declare function boxArray$1<T>(array: any): ArrayBox$1<T>;
export declare function unboxArray<T>(box: any): T[];
export declare function arrayListCreate(): ArrayBox$1<any>;
export declare class ArrayBox$1<T> implements IList, IList$1<T>, ICollection, IEnumerable, IEnumerable$1<T> {
    isFixedSize: boolean;
    isSynchronized: boolean;
    syncRoot: any;
    private _target;
    constructor(target: any);
    item(index: number, value?: T): T;
    indexOf(item: T): number;
    insert(index: number, item: T): void;
    insertRange(index: number, items: any[]): void;
    removeRange(index: number, count: number): void;
    removeAt(index: number): void;
    get count(): number;
    isReadOnly: boolean;
    add(item: T): void;
    clear(): void;
    contains(item: T): boolean;
    copyTo(array: T[], arrayIndex: number): void;
    remove(item: T): boolean;
    getEnumerator(): IEnumerator$1<T>;
    getEnumeratorObject(): IEnumerator;
    getHashCode(): number;
    $arrayWrapper: boolean;
    equals(other: any): boolean;
    get $type(): Type;
    reverse(): void;
}
