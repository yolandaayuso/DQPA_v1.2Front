import { Base, Type } from "./type";
import { UIElementPropertyId } from "./UIElementPropertyId";
import { Brush } from "./Brush";
import { Thickness } from "./Thickness";
import { CornerRadius } from "./CornerRadius";
import { Transform } from "./Transform";
/**
 * @hidden
 */
export declare class NativeUI extends Base {
    static $t: Type;
    static ag(a: UIElementPropertyId, b: any, c: any): void;
    static l(a: UIElementPropertyId, b: any): any;
    static y(a: any, b: number): void;
    static g(a: any): number;
    static m(a: any, b: Brush): void;
    static aj(a: any): Brush;
    static n(a: any, b: Brush): void;
    static ak(a: any): Brush;
    static p(a: any, b: Thickness): void;
    static ap(a: any): Thickness;
    static o(a: any, b: CornerRadius): void;
    static z(a: any, b: Thickness): void;
    static ar(a: any): Thickness;
    static ai(a: any): CornerRadius;
    static q(a: any, b: Brush): void;
    static al(a: any): Brush;
    static s(a: any, b: number): void;
    static c(a: any): number;
    static ah(a: any, b: number): void;
    static k(a: any): number;
    static x(a: any, b: number): void;
    static f(a: any): number;
    static t(a: any, b: number): void;
    static d(a: any): number;
    static v(a: any, b: number): void;
    static ae(a: any, b: number): void;
    static e(a: any): number;
    static j(a: any): number;
    static w(a: any, b: Thickness): void;
    static aq(a: any): Thickness;
    static af(a: any, b: Transform): void;
    static ao(a: any): Transform;
    static aa(a: any, b: Brush): void;
    static r(a: any, b: Brush): void;
    static am(a: any): Brush;
    static an(a: any): Brush;
    static ad(a: any, b: number): void;
    static i(a: any): number;
    static ab(a: any, b: number[]): void;
    static a(a: any): number[];
    static ac(a: any, b: number): void;
    static h(a: any): number;
    static u(a: any, b: boolean): void;
    static b(a: any): boolean;
}
