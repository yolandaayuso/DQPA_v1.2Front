import { Base, Type } from "./type";
import { IRenderer } from "./IRenderer";
import { LinearGradientBrush } from "./LinearGradientBrush";
import { Rectangle } from "./Rectangle";
import { Shape } from "./Shape";
import { Path } from "./Path";
import { Geometry } from "./Geometry";
import { Rect } from "./Rect";
import { TextBlock } from "./TextBlock";
import { Polygon } from "./Polygon";
import { Polyline } from "./Polyline";
import { DataTemplateRenderInfo } from "./DataTemplateRenderInfo";
import { ContentControl } from "./ContentControl";
import { Transform } from "./Transform";
import { Line } from "./Line";
import { FontInfo } from "./FontInfo";
import { TextFontMetrics } from "./TextFontMetrics";
import { Style } from "./Style";
/**
 * @hidden
 */
export declare class CanvasViewRenderer extends Base implements IRenderer {
    static $t: Type;
    private j;
    h$e(): any;
    get h$d(): any;
    set h$d(a: any);
    l(a: LinearGradientBrush, b: number, c: number, d: number, e: number, f: number, g: boolean): CanvasGradient;
    static k(a: CanvasRenderingContext2D, b: LinearGradientBrush, c: number, d: number, e: number, f: number, g: number, h: boolean): CanvasGradient;
    h$t(a: Rectangle): void;
    private h;
    private f;
    private i;
    private g;
    private b;
    private c;
    h$q(a: Path): void;
    h$o(a: Geometry): void;
    private p;
    private t;
    private q;
    private x;
    private aa;
    private z;
    private o;
    private u;
    private y;
    private n;
    private s;
    private v;
    private w;
    private r;
    private m;
    h$u(a: TextBlock): void;
    h$v(a: TextBlock, b: Rect, c: number): void;
    h$r(a: Polygon): void;
    h$s(a: Polyline): void;
    h$n(a: DataTemplateRenderInfo, b: ContentControl): void;
    h$h(a: Transform): void;
    h$p(a: Line): void;
    h$ac(a: Rect): void;
    h$x(): void;
    h$w(): void;
    h$y(a: number, b: number): void;
    h$ad(a: number, b: number): void;
    h$i(a: number, b: number, c: number, d: number): void;
    h$k(a: any, b: number, c: number, d: number, e: number, f: number): void;
    h$l(a: any, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
    h$a(a: number, b: number): number[];
    h$f(): string;
    h$b(): FontInfo;
    h$z(a: string): void;
    private a;
    private d;
    h$aa(a: FontInfo): void;
    h$ae(a: string, b: number, c: boolean): TextFontMetrics;
    h$c(a: string): number;
    private e;
    h$ab(a: number): void;
    h$g(shape_: Shape, style_: Style): void;
    h$m(a: string, b: number, c: number, d: number): void;
    h$j(): void;
}
