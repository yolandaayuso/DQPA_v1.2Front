import { FilterSyntaxVisitor } from "./FilterSyntaxVisitor";
import { IFilterExpression } from "./IFilterExpression";
import { FilterSyntaxBinaryOperatorExpressionSyntax } from "./FilterSyntaxBinaryOperatorExpressionSyntax";
import { Type } from "./type";
import { FilterSyntaxIdentifierExpressionSyntax } from "./FilterSyntaxIdentifierExpressionSyntax";
import { FilterSyntaxMemberExpressionSyntax } from "./FilterSyntaxMemberExpressionSyntax";
import { FilterSyntaxMethodCallExpressionSyntax } from "./FilterSyntaxMethodCallExpressionSyntax";
import { FilterSyntaxNullExpressionSyntax } from "./FilterSyntaxNullExpressionSyntax";
import { FilterSyntaxParenthesisExpressionSyntax } from "./FilterSyntaxParenthesisExpressionSyntax";
import { FilterSyntaxPrimitiveValueExpressionSyntax } from "./FilterSyntaxPrimitiveValueExpressionSyntax";
import { FilterSyntaxUnaryOperatorExpressionSyntax } from "./FilterSyntaxUnaryOperatorExpressionSyntax";
/**
 * @hidden
 */
export declare class FilterExpressionConversionVisitor extends FilterSyntaxVisitor {
    static $t: Type;
    constructor();
    o(): IFilterExpression;
    private q;
    get p(): boolean;
    get k(): string[];
    private n;
    private r;
    private s;
    c(a: FilterSyntaxBinaryOperatorExpressionSyntax): void;
    private t;
    private m;
    d(a: FilterSyntaxIdentifierExpressionSyntax): void;
    e(a: FilterSyntaxMemberExpressionSyntax): void;
    f(a: FilterSyntaxMethodCallExpressionSyntax): void;
    private l;
    g(a: FilterSyntaxNullExpressionSyntax): void;
    h(a: FilterSyntaxParenthesisExpressionSyntax): void;
    i(a: FilterSyntaxPrimitiveValueExpressionSyntax): void;
    j(a: FilterSyntaxUnaryOperatorExpressionSyntax): void;
}
