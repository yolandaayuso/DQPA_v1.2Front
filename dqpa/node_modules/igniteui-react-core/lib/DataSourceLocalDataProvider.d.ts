import { Base, IList, Type } from "./type";
import { IDataSourceLocalDataProvider } from "./IDataSourceLocalDataProvider";
import { IDataSourceDataProvider } from "./IDataSourceDataProvider";
import { IDataSourceSchema } from "./IDataSourceSchema";
import { DataSourceSchemaPropertyType } from "./DataSourceSchemaPropertyType";
import { IDataSourceExecutionContext } from "./IDataSourceExecutionContext";
import { IDataSourceDataProviderUpdateNotifier } from "./IDataSourceDataProviderUpdateNotifier";
import { SortDescriptionCollection } from "./SortDescriptionCollection";
import { FilterExpressionCollection } from "./FilterExpressionCollection";
import { SummaryDescriptionCollection } from "./SummaryDescriptionCollection";
import { DataSourceSummaryScope } from "./DataSourceSummaryScope";
import { DataSourceDataProviderSchemaChangedEventArgs } from "./DataSourceDataProviderSchemaChangedEventArgs";
/**
 * @hidden
 */
export declare class DataSourceLocalDataProvider extends Base implements IDataSourceLocalDataProvider {
    static $t: Type;
    constructor();
    private au;
    clone(): IDataSourceDataProvider;
    private n;
    private m;
    private g;
    private o;
    private f;
    private aa;
    private ab;
    get dataSource(): any;
    set dataSource(a: any);
    private u;
    private ad;
    get schemaHints(): string;
    set schemaHints(a: string);
    private ap;
    private d;
    schemaChanged: (sender: any, args: DataSourceDataProviderSchemaChangedEventArgs) => void;
    getItemAtIndex(a: number): any;
    private t;
    private v;
    getItemValue(a: any, b: string): any;
    setItemValue(a: any, b: string, c: any): void;
    removeItem(a: any): void;
    addItem(a: any): void;
    private ak;
    get actualCount(): number;
    private j;
    get actualSchema(): IDataSourceSchema;
    private l;
    private k;
    resolveSchemaPropertyType(a: string): DataSourceSchemaPropertyType;
    setSchema(a: IDataSourceSchema): void;
    private w;
    private am;
    private al;
    private x;
    private c;
    private static e;
    private ac;
    protected ao(a: string, b: any, c: any): void;
    private y;
    protected get z(): IList;
    private r;
    protected aq(a: string, b: any, c: any): void;
    private an;
    private i;
    get executionContext(): IDataSourceExecutionContext;
    set executionContext(a: IDataSourceExecutionContext);
    protected get s(): boolean;
    notifySetItem(a: number, b: any, c: any): void;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
    private h;
    get updateNotifier(): IDataSourceDataProviderUpdateNotifier;
    set updateNotifier(a: IDataSourceDataProviderUpdateNotifier);
    private q;
    get deferAutoRefresh(): boolean;
    set deferAutoRefresh(a: boolean);
    get isSortingSupported(): boolean;
    get isFilteringSupported(): boolean;
    get sortDescriptions(): SortDescriptionCollection;
    get filterExpressions(): FilterExpressionCollection;
    get summaryDescriptions(): SummaryDescriptionCollection;
    get summaryScope(): DataSourceSummaryScope;
    set summaryScope(a: DataSourceSummaryScope);
    get notifyUsingSourceIndexes(): boolean;
    private a;
    get propertiesRequested(): string[];
    set propertiesRequested(a: string[]);
    get isItemIndexLookupSupported(): boolean;
    get isKeyIndexLookupSupported(): boolean;
    get isGroupingSupported(): boolean;
    get groupDescriptions(): SortDescriptionCollection;
    p: boolean;
    queueAutoRefresh(): void;
    aj(): void;
    ar(): void;
    protected as(): void;
    flushAutoRefresh(): void;
    refresh(): void;
    indexOfItem(a: any): number;
    indexOfKey(a: any[]): number;
    private b;
    get schemaIncludedProperties(): string[];
    set schemaIncludedProperties(a: string[]);
}
