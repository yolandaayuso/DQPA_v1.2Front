import { Base, Type } from "./type";
import { ITileGenerator } from "./ITileGenerator";
import { Color } from "./Color";
import { TileImageCreatedEventArgs } from "./TileImageCreatedEventArgs";
import { TileImageZoomChangingEventArgs } from "./TileImageZoomChangingEventArgs";
/**
 * @hidden
 */
export declare class HeatTileGenerator extends Base implements ITileGenerator {
    static $t: Type;
    private m;
    private bz;
    private l;
    constructor();
    private e;
    get k(): number[];
    set k(a: number[]);
    private d;
    get j(): number[];
    set j(a: number[]);
    private c;
    get i(): number[];
    set i(a: number[]);
    private bw;
    get by(): Color;
    set by(a: Color);
    private bv;
    get bx(): Color;
    set bx(a: Color);
    private b;
    get scaleColors(): Color[];
    set scaleColors(a: Color[]);
    private a;
    get g(): number[];
    set g(a: number[]);
    private ac;
    get ap(): number;
    set ap(a: number);
    private am;
    get ar(): number;
    set ar(a: number);
    private p;
    get u(): boolean;
    set u(a: boolean);
    private q;
    get v(): boolean;
    set v(a: boolean);
    private r;
    get w(): boolean;
    set w(a: boolean);
    private ao;
    get at(): number;
    set at(a: number);
    private an;
    get as(): number;
    set as(a: number);
    private al;
    get aq(): number;
    set aq(a: number);
    private s;
    get x(): boolean;
    set x(a: boolean);
    private t;
    get y(): boolean;
    set y(a: boolean);
    private a0;
    get bi(): string;
    set bi(a: string);
    private ax;
    get az(): any;
    set az(a: any);
    bo(): void;
    protected br(a: string, b: any, c: any): void;
    protected bs(a: string, b: any, c: any): void;
    private ad;
    private ag;
    private aw;
    getTile(a: number, b: number, c: number, d: (sender: any, eventArgs: TileImageCreatedEventArgs) => void, e: (sender: any, eventArgs: TileImageCreatedEventArgs) => void, f: (sender: any, eventArgs: TileImageZoomChangingEventArgs) => void, g: HTMLImageElement): void;
    private au;
    private ay;
    private ak;
    private aj;
    private z;
    private aa;
    private ah;
    private ai;
    private ae;
    private af;
    private n;
    private ab;
    private getTile1;
    cancelTile(a: number, b: number, c: number): void;
    private o;
    private bm;
    private bn;
    private a2;
    private f;
    private bt;
    private bu;
    private b0;
    private bq;
}
