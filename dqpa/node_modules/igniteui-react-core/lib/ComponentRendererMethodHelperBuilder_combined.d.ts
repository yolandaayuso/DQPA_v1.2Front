import { Base, Type } from "./type";
import { JsonDictionaryItem } from "./JsonDictionaryItem";
import { EmbeddedRefDescription } from "./EmbeddedRefDescription";
import { PointDescription } from "./PointDescription";
import { SizeDescription } from "./SizeDescription";
import { RectDescription } from "./RectDescription";
/**
 * @hidden
 */
export declare class ComponentRendererMethodHelperBuilder extends Base {
    static $t: Type;
    private e;
    private f;
    private d;
    private b;
    constructor(a: string, b: string);
    argument(): ComponentRendererMethodHelperArgumentBuilder;
    $return(): ComponentRendererMethodHelperReturnBuilder;
    build(): string;
}
/**
 * @hidden
 */
export declare class ComponentRendererMethodHelperArgumentBuilder extends Base {
    static $t: Type;
    private v;
    constructor(a: ComponentRendererMethodHelperBuilder);
    argument(): ComponentRendererMethodHelperArgumentBuilder;
    $return(): ComponentRendererMethodHelperReturnBuilder;
    build(): string;
    private z;
    private ac;
    private ab;
    private aa;
    private x;
    asInt(a: number): ComponentRendererMethodHelperArgumentBuilder;
    asIntArray(a: number[]): ComponentRendererMethodHelperArgumentBuilder;
    asDouble(a: number): ComponentRendererMethodHelperArgumentBuilder;
    asDoubleArray(a: number[]): ComponentRendererMethodHelperArgumentBuilder;
    asShort(a: number): ComponentRendererMethodHelperArgumentBuilder;
    asShortArray(a: number[]): ComponentRendererMethodHelperArgumentBuilder;
    asLong(a: number): ComponentRendererMethodHelperArgumentBuilder;
    asLongArray(a: number[]): ComponentRendererMethodHelperArgumentBuilder;
    asFloat(a: number): ComponentRendererMethodHelperArgumentBuilder;
    asFloatArray(a: number[]): ComponentRendererMethodHelperArgumentBuilder;
    asEnum(a: Type, b: any): ComponentRendererMethodHelperArgumentBuilder;
    asString(a: string): ComponentRendererMethodHelperArgumentBuilder;
    asStringArray(a: string[]): ComponentRendererMethodHelperArgumentBuilder;
    asPublicTypeRef(a: string, b: EmbeddedRefDescription): ComponentRendererMethodHelperArgumentBuilder;
    asPoint(a: PointDescription): ComponentRendererMethodHelperArgumentBuilder;
    asSize(a: SizeDescription): ComponentRendererMethodHelperArgumentBuilder;
    asRect(a: RectDescription): ComponentRendererMethodHelperArgumentBuilder;
    asMethodRef(a: string): ComponentRendererMethodHelperArgumentBuilder;
    asBool(a: boolean): ComponentRendererMethodHelperArgumentBuilder;
    asBoolArray(a: boolean[]): ComponentRendererMethodHelperArgumentBuilder;
    y(): JsonDictionaryItem;
}
/**
 * @hidden
 */
export declare class ComponentRendererMethodHelperReturnBuilder extends Base {
    static $t: Type;
    private b;
    constructor(a: ComponentRendererMethodHelperBuilder);
    argument(): ComponentRendererMethodHelperArgumentBuilder;
    $return(): ComponentRendererMethodHelperReturnBuilder;
    build(): string;
    private y;
    private ab;
    private aa;
    private z;
    asInt(): ComponentRendererMethodHelperReturnBuilder;
    asIntArray(): ComponentRendererMethodHelperReturnBuilder;
    asDouble(): ComponentRendererMethodHelperReturnBuilder;
    asDoubleArray(): ComponentRendererMethodHelperReturnBuilder;
    asShort(): ComponentRendererMethodHelperReturnBuilder;
    asShortArray(): ComponentRendererMethodHelperReturnBuilder;
    asLong(): ComponentRendererMethodHelperReturnBuilder;
    asLongArray(): ComponentRendererMethodHelperReturnBuilder;
    asFlout(): ComponentRendererMethodHelperReturnBuilder;
    asFloatArray(): ComponentRendererMethodHelperReturnBuilder;
    asEnum(a: Type): ComponentRendererMethodHelperReturnBuilder;
    asString(): ComponentRendererMethodHelperReturnBuilder;
    asStringArray(): ComponentRendererMethodHelperReturnBuilder;
    asPublicTypeRef(a: string): ComponentRendererMethodHelperReturnBuilder;
    asPoint(): ComponentRendererMethodHelperReturnBuilder;
    asSize(): ComponentRendererMethodHelperReturnBuilder;
    asRect(): ComponentRendererMethodHelperReturnBuilder;
    asMethodRef(): ComponentRendererMethodHelperReturnBuilder;
    asBool(): ComponentRendererMethodHelperReturnBuilder;
    x(): JsonDictionaryItem;
    asVoid(): ComponentRendererMethodHelperReturnBuilder;
}
