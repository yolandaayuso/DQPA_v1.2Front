import { DomainChartDescription } from "./DomainChartDescription";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class RadialBaseChartDescription extends DomainChartDescription {
    static $t: Type;
    protected get_type(): string;
    constructor();
    private t5;
    get angleAxisFormatLabelRef(): string;
    set angleAxisFormatLabelRef(a: string);
    private un;
    get valueAxisFormatLabelRef(): string;
    set valueAxisFormatLabelRef(a: string);
    private sa;
    get angleAxisLabelLeftMargin(): number;
    set angleAxisLabelLeftMargin(a: number);
    private sc;
    get angleAxisLabelTopMargin(): number;
    set angleAxisLabelTopMargin(a: number);
    private sb;
    get angleAxisLabelRightMargin(): number;
    set angleAxisLabelRightMargin(a: number);
    private r9;
    get angleAxisLabelBottomMargin(): number;
    set angleAxisLabelBottomMargin(a: number);
    private sr;
    get valueAxisLabelLeftMargin(): number;
    set valueAxisLabelLeftMargin(a: number);
    private st;
    get valueAxisLabelTopMargin(): number;
    set valueAxisLabelTopMargin(a: number);
    private ss;
    get valueAxisLabelRightMargin(): number;
    set valueAxisLabelRightMargin(a: number);
    private sq;
    get valueAxisLabelBottomMargin(): number;
    set valueAxisLabelBottomMargin(a: number);
    private ua;
    get angleAxisLabelTextColor(): string;
    set angleAxisLabelTextColor(a: string);
    private us;
    get valueAxisLabelTextColor(): string;
    set valueAxisLabelTextColor(a: string);
    private t3;
    get actualAngleAxisLabelTextColor(): string;
    set actualAngleAxisLabelTextColor(a: string);
    private t4;
    get actualValueAxisLabelTextColor(): string;
    set actualValueAxisLabelTextColor(a: string);
    private sl;
    get angleAxisTitleMargin(): number;
    set angleAxisTitleMargin(a: number);
    private s2;
    get valueAxisTitleMargin(): number;
    set valueAxisTitleMargin(a: number);
    private sk;
    get angleAxisTitleLeftMargin(): number;
    set angleAxisTitleLeftMargin(a: number);
    private s1;
    get valueAxisTitleLeftMargin(): number;
    set valueAxisTitleLeftMargin(a: number);
    private sn;
    get angleAxisTitleTopMargin(): number;
    set angleAxisTitleTopMargin(a: number);
    private s4;
    get valueAxisTitleTopMargin(): number;
    set valueAxisTitleTopMargin(a: number);
    private sm;
    get angleAxisTitleRightMargin(): number;
    set angleAxisTitleRightMargin(a: number);
    private s3;
    get valueAxisTitleRightMargin(): number;
    set valueAxisTitleRightMargin(a: number);
    private sj;
    get angleAxisTitleBottomMargin(): number;
    set angleAxisTitleBottomMargin(a: number);
    private s0;
    get valueAxisTitleBottomMargin(): number;
    set valueAxisTitleBottomMargin(a: number);
    private ul;
    get angleAxisTitleTextColor(): string;
    set angleAxisTitleTextColor(a: string);
    private u3;
    get valueAxisTitleTextColor(): string;
    set valueAxisTitleTextColor(a: string);
    private ub;
    get angleAxisLabelTextStyle(): string;
    set angleAxisLabelTextStyle(a: string);
    private ut;
    get valueAxisLabelTextStyle(): string;
    set valueAxisLabelTextStyle(a: string);
    private um;
    get angleAxisTitleTextStyle(): string;
    set angleAxisTitleTextStyle(a: string);
    private u4;
    get valueAxisTitleTextStyle(): string;
    set valueAxisTitleTextStyle(a: string);
    private t9;
    get angleAxisLabelRef(): string;
    set angleAxisLabelRef(a: string);
    private ur;
    get valueAxisLabelRef(): string;
    set valueAxisLabelRef(a: string);
    private ue;
    get angleAxisMajorStroke(): string;
    set angleAxisMajorStroke(a: string);
    private uw;
    get valueAxisMajorStroke(): string;
    set valueAxisMajorStroke(a: string);
    private sd;
    get angleAxisMajorStrokeThickness(): number;
    set angleAxisMajorStrokeThickness(a: number);
    private su;
    get valueAxisMajorStrokeThickness(): number;
    set valueAxisMajorStrokeThickness(a: number);
    private se;
    get angleAxisMinorStrokeThickness(): number;
    set angleAxisMinorStrokeThickness(a: number);
    private sv;
    get valueAxisMinorStrokeThickness(): number;
    set valueAxisMinorStrokeThickness(a: number);
    private ug;
    get angleAxisStrip(): string;
    set angleAxisStrip(a: string);
    private uy;
    get valueAxisStrip(): string;
    set valueAxisStrip(a: string);
    private uh;
    get angleAxisStroke(): string;
    set angleAxisStroke(a: string);
    private uz;
    get valueAxisStroke(): string;
    set valueAxisStroke(a: string);
    private sf;
    get angleAxisStrokeThickness(): number;
    set angleAxisStrokeThickness(a: number);
    private sw;
    get valueAxisStrokeThickness(): number;
    set valueAxisStrokeThickness(a: number);
    private sg;
    get angleAxisTickLength(): number;
    set angleAxisTickLength(a: number);
    private sx;
    get valueAxisTickLength(): number;
    set valueAxisTickLength(a: number);
    private ui;
    get angleAxisTickStroke(): string;
    set angleAxisTickStroke(a: string);
    private u0;
    get valueAxisTickStroke(): string;
    set valueAxisTickStroke(a: string);
    private sh;
    get angleAxisTickStrokeThickness(): number;
    set angleAxisTickStrokeThickness(a: number);
    private sy;
    get valueAxisTickStrokeThickness(): number;
    set valueAxisTickStrokeThickness(a: number);
    private uj;
    get angleAxisTitle(): string;
    set angleAxisTitle(a: string);
    private u1;
    get valueAxisTitle(): string;
    set valueAxisTitle(a: string);
    private uf;
    get angleAxisMinorStroke(): string;
    set angleAxisMinorStroke(a: string);
    private ux;
    get valueAxisMinorStroke(): string;
    set valueAxisMinorStroke(a: string);
    private r8;
    get angleAxisLabelAngle(): number;
    set angleAxisLabelAngle(a: number);
    private sp;
    get valueAxisLabelAngle(): number;
    set valueAxisLabelAngle(a: number);
    private r7;
    get angleAxisExtent(): number;
    set angleAxisExtent(a: number);
    private so;
    get valueAxisExtent(): number;
    set valueAxisExtent(a: number);
    private si;
    get angleAxisTitleAngle(): number;
    set angleAxisTitleAngle(a: number);
    private sz;
    get valueAxisTitleAngle(): number;
    set valueAxisTitleAngle(a: number);
    private r3;
    get angleAxisInverted(): boolean;
    set angleAxisInverted(a: boolean);
    private r4;
    get valueAxisInverted(): boolean;
    set valueAxisInverted(a: boolean);
    private uk;
    get angleAxisTitleAlignment(): string;
    set angleAxisTitleAlignment(a: string);
    private u2;
    get valueAxisTitleAlignment(): string;
    set valueAxisTitleAlignment(a: string);
    private t7;
    get angleAxisLabelHorizontalAlignment(): string;
    set angleAxisLabelHorizontalAlignment(a: string);
    private up;
    get valueAxisLabelHorizontalAlignment(): string;
    set valueAxisLabelHorizontalAlignment(a: string);
    private uc;
    get angleAxisLabelVerticalAlignment(): string;
    set angleAxisLabelVerticalAlignment(a: string);
    private uu;
    get valueAxisLabelVerticalAlignment(): string;
    set valueAxisLabelVerticalAlignment(a: string);
    private ud;
    get angleAxisLabelVisibility(): string;
    set angleAxisLabelVisibility(a: string);
    private uv;
    get valueAxisLabelVisibility(): string;
    set valueAxisLabelVisibility(a: string);
    private uq;
    get valueAxisLabelLocation(): string;
    set valueAxisLabelLocation(a: string);
    private t8;
    get angleAxisLabelLocation(): string;
    set angleAxisLabelLocation(a: string);
    private t6;
    get angleAxisLabelFormat(): string;
    set angleAxisLabelFormat(a: string);
    private rz;
    get angleAxisLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set angleAxisLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private uo;
    get valueAxisLabelFormat(): string;
    set valueAxisLabelFormat(a: string);
    private r0;
    get valueAxisLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set valueAxisLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
}
