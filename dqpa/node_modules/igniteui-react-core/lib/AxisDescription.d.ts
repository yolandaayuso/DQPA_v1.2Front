import { Description } from "./Description";
import { Type } from "./type";
import { AxisAnnotationDescription } from "./AxisAnnotationDescription";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
/**
 * @hidden
 */
export declare abstract class AxisDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private by;
    get formatLabelRef(): string;
    set formatLabelRef(a: string);
    private cg;
    get title(): string;
    set title(a: string);
    private ce;
    get stroke(): string;
    set stroke(a: string);
    private bv;
    get actualStroke(): string;
    set actualStroke(a: string);
    private aw;
    get strokeThickness(): number;
    set strokeThickness(a: number);
    private l;
    get strokeDashArray(): number[];
    set strokeDashArray(a: number[]);
    private cd;
    get strip(): string;
    set strip(a: string);
    private b9;
    get majorStroke(): string;
    set majorStroke(a: string);
    private bt;
    get actualMajorStroke(): string;
    set actualMajorStroke(a: string);
    private au;
    get majorStrokeThickness(): number;
    set majorStrokeThickness(a: number);
    private j;
    get majorStrokeDashArray(): number[];
    set majorStrokeDashArray(a: number[]);
    private ca;
    get minorStroke(): string;
    set minorStroke(a: string);
    private bu;
    get actualMinorStroke(): string;
    set actualMinorStroke(a: string);
    private av;
    get minorStrokeThickness(): number;
    set minorStrokeThickness(a: number);
    private k;
    get minorStrokeDashArray(): number[];
    set minorStrokeDashArray(a: number[]);
    private cf;
    get tickStroke(): string;
    set tickStroke(a: string);
    private ay;
    get tickStrokeThickness(): number;
    set tickStrokeThickness(a: number);
    private m;
    get tickStrokeDashArray(): number[];
    set tickStrokeDashArray(a: number[]);
    private ax;
    get tickLength(): number;
    set tickLength(a: number);
    private v;
    get isDisabled(): boolean;
    set isDisabled(a: boolean);
    private w;
    get isInverted(): boolean;
    set isInverted(a: boolean);
    private y;
    get shouldAvoidAnnotationCollisions(): boolean;
    set shouldAvoidAnnotationCollisions(a: boolean);
    private z;
    get shouldKeepAnnotationsInView(): boolean;
    set shouldKeepAnnotationsInView(a: boolean);
    private ac;
    get usePerLabelHeightMeasurement(): boolean;
    set usePerLabelHeightMeasurement(a: boolean);
    private ab;
    get useEnhancedIntervalManagement(): boolean;
    set useEnhancedIntervalManagement(a: boolean);
    private bp;
    get enhancedIntervalMinimumCharacters(): number;
    set enhancedIntervalMinimumCharacters(a: number);
    private t;
    get enhancedIntervalPreferMoreCategoryLabels(): boolean;
    set enhancedIntervalPreferMoreCategoryLabels(a: boolean);
    private b6;
    get labelTextColor(): string;
    set labelTextColor(a: string);
    private b5;
    get labelLocation(): string;
    set labelLocation(a: string);
    private x;
    get labelShowFirstLabel(): boolean;
    set labelShowFirstLabel(a: boolean);
    private an;
    get labelAngle(): number;
    set labelAngle(a: number);
    private ap;
    get labelExtent(): number;
    set labelExtent(a: number);
    private ar;
    get labelLeftMargin(): number;
    set labelLeftMargin(a: number);
    private as;
    get labelRightMargin(): number;
    set labelRightMargin(a: number);
    private at;
    get labelTopMargin(): number;
    set labelTopMargin(a: number);
    private ao;
    get labelBottomMargin(): number;
    set labelBottomMargin(a: number);
    private b4;
    get labelHorizontalAlignment(): string;
    set labelHorizontalAlignment(a: string);
    private b7;
    get labelVerticalAlignment(): string;
    set labelVerticalAlignment(a: string);
    private bx;
    get crossingAxisRef(): string;
    set crossingAxisRef(a: string);
    private br;
    get crossingValue(): any;
    set crossingValue(a: any);
    private cm;
    get titlePosition(): string;
    set titlePosition(a: string);
    private cn;
    get titleTextColor(): string;
    set titleTextColor(a: string);
    private cl;
    get titleLocation(): string;
    set titleLocation(a: string);
    private aa;
    get titleShowFirstLabel(): boolean;
    set titleShowFirstLabel(a: boolean);
    private az;
    get titleAngle(): number;
    set titleAngle(a: number);
    private a1;
    get titleExtent(): number;
    set titleExtent(a: number);
    private a3;
    get titleLeftMargin(): number;
    set titleLeftMargin(a: number);
    private a4;
    get titleRightMargin(): number;
    set titleRightMargin(a: number);
    private a5;
    get titleTopMargin(): number;
    set titleTopMargin(a: number);
    private a0;
    get titleBottomMargin(): number;
    set titleBottomMargin(a: number);
    private ck;
    get titleHorizontalAlignment(): string;
    set titleHorizontalAlignment(a: string);
    private co;
    get titleVerticalAlignment(): string;
    set titleVerticalAlignment(a: string);
    private h;
    get annotations(): AxisAnnotationDescription[];
    set annotations(a: AxisAnnotationDescription[]);
    private bw;
    get coercionMethodsRef(): string;
    set coercionMethodsRef(a: string);
    private u;
    get expectFunctions(): boolean;
    set expectFunctions(a: boolean);
    private b3;
    get labelFormat(): string;
    set labelFormat(a: string);
    private i;
    get labelFormatSpecifiers(): FormatSpecifierDescription[];
    set labelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private cb;
    get rangeChangedRef(): string;
    set rangeChangedRef(a: string);
    private cc;
    get renderRequestedRef(): string;
    set renderRequestedRef(a: string);
    private bz;
    get label(): string;
    set label(a: string);
    private b0;
    get labelFontFamily(): string;
    set labelFontFamily(a: string);
    private aq;
    get labelFontSize(): number;
    set labelFontSize(a: number);
    private b2;
    get labelFontWeight(): string;
    set labelFontWeight(a: string);
    private b1;
    get labelFontStyle(): string;
    set labelFontStyle(a: string);
    private ch;
    get titleFontFamily(): string;
    set titleFontFamily(a: string);
    private a2;
    get titleFontSize(): number;
    set titleFontSize(a: number);
    private cj;
    get titleFontWeight(): string;
    set titleFontWeight(a: string);
    private ci;
    get titleFontStyle(): string;
    set titleFontStyle(a: string);
    private b8;
    get labelVisibility(): string;
    set labelVisibility(a: string);
}
