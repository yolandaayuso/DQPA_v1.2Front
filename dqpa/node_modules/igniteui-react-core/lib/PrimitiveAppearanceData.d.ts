import { Base, Type } from "./type";
import { IVisualData } from "./IVisualData";
import { ColorData } from "./ColorData";
import { BrushAppearanceData } from "./BrushAppearanceData";
import { RectData } from "./RectData";
/**
 * @hidden
 */
export declare class PrimitiveAppearanceData extends Base implements IVisualData {
    static $t: Type;
    private _stroke;
    get stroke(): ColorData;
    set stroke(a: ColorData);
    private _strokeExtended;
    get strokeExtended(): BrushAppearanceData;
    set strokeExtended(a: BrushAppearanceData);
    private _fill;
    get fill(): ColorData;
    set fill(a: ColorData);
    private _fillExtended;
    get fillExtended(): BrushAppearanceData;
    set fillExtended(a: BrushAppearanceData);
    private _strokeThickness;
    get strokeThickness(): number;
    set strokeThickness(a: number);
    private _isVisible;
    get isVisible(): boolean;
    set isVisible(a: boolean);
    private _opacity;
    get opacity(): number;
    set opacity(a: number);
    private _canvasLeft;
    get canvasLeft(): number;
    set canvasLeft(a: number);
    private _canvasTop;
    get canvasTop(): number;
    set canvasTop(a: number);
    private _canvaZIndex;
    get canvaZIndex(): number;
    set canvaZIndex(a: number);
    private _dashArray;
    get dashArray(): any[];
    set dashArray(a: any[]);
    private _dashCap;
    get dashCap(): number;
    set dashCap(a: number);
    m(a: RectData): void;
    serialize(): string;
}
