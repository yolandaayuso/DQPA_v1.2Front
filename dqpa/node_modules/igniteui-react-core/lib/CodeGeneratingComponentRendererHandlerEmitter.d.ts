import { Base, Type } from "./type";
import { CodeGeneratingRendererResult } from "./CodeGeneratingRendererResult";
import { CodeGeneratingCodeWriter } from "./CodeGeneratingCodeWriter";
import { CodeGeneratingImportManager } from "./CodeGeneratingImportManager";
import { CodeGenerationRendererOptions } from "./CodeGenerationRendererOptions";
import { HashSet$1 } from "./HashSet$1";
/**
 * @hidden
 */
export declare class CodeGeneratingComponentRendererHandlerEmitter extends Base {
    static $t: Type;
    private o;
    private m;
    protected get n(): CodeGeneratingRendererResult;
    constructor(a: CodeGenerationRendererOptions, b: CodeGeneratingRendererResult);
    private e;
    protected get j(): CodeGeneratingCodeWriter;
    private a;
    protected get f(): CodeGeneratingCodeWriter;
    private k;
    protected get l(): CodeGeneratingImportManager;
    private b;
    protected get g(): CodeGeneratingCodeWriter;
    private d;
    protected get i(): CodeGeneratingCodeWriter;
    private c;
    protected get h(): CodeGeneratingCodeWriter;
    protected u(a: string, b: boolean): void;
    protected t(a: string, b: boolean): void;
    private p;
    s(a: string[], b: string[]): void;
    protected r(a: string, b: HashSet$1<string>, c: boolean, d: boolean): void;
    protected v(a: CodeGeneratingImportManager, b: string): void;
    protected q(a: string, b: string): string;
}
