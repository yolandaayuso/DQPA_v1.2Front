import { Base, Type } from "./type";
import { FilterSyntaxTokenType } from "./FilterSyntaxTokenType";
/**
 * @hidden
 */
export declare abstract class FilterSyntaxExpressionSyntax extends Base {
    static $t: Type;
    abstract a(a: FilterSyntaxVisitor): void;
}
/**
 * @hidden
 */
export declare class FilterSyntaxPrimitiveValueExpressionSyntax extends FilterSyntaxExpressionSyntax {
    static $t: Type;
    b: FilterSyntaxTokenType;
    c: any;
    a(a: FilterSyntaxVisitor): void;
}
/**
 * @hidden
 */
export declare class FilterSyntaxNullExpressionSyntax extends FilterSyntaxExpressionSyntax {
    static $t: Type;
    b: FilterSyntaxTokenType;
    c: any;
    a(a: FilterSyntaxVisitor): void;
}
/**
 * @hidden
 */
export declare class FilterSyntaxParenthesisExpressionSyntax extends FilterSyntaxExpressionSyntax {
    static $t: Type;
    b: FilterSyntaxExpressionSyntax;
    a(a: FilterSyntaxVisitor): void;
}
/**
 * @hidden
 */
export declare class FilterSyntaxBinaryOperatorExpressionSyntax extends FilterSyntaxExpressionSyntax {
    static $t: Type;
    d: FilterSyntaxTokenType;
    b: FilterSyntaxExpressionSyntax;
    c: FilterSyntaxExpressionSyntax;
    a(a: FilterSyntaxVisitor): void;
}
/**
 * @hidden
 */
export declare class FilterSyntaxMemberExpressionSyntax extends FilterSyntaxExpressionSyntax {
    static $t: Type;
    b: FilterSyntaxExpressionSyntax;
    c: FilterSyntaxExpressionSyntax;
    a(a: FilterSyntaxVisitor): void;
}
/**
 * @hidden
 */
export declare class FilterSyntaxMethodCallExpressionSyntax extends FilterSyntaxExpressionSyntax {
    static $t: Type;
    c: FilterSyntaxExpressionSyntax;
    b: FilterSyntaxExpressionSyntax[];
    a(a: FilterSyntaxVisitor): void;
}
/**
 * @hidden
 */
export declare class FilterSyntaxIdentifierExpressionSyntax extends FilterSyntaxExpressionSyntax {
    static $t: Type;
    b: FilterSyntaxTokenType;
    c: any;
    a(a: FilterSyntaxVisitor): void;
}
/**
 * @hidden
 */
export declare class FilterSyntaxUnaryOperatorExpressionSyntax extends FilterSyntaxExpressionSyntax {
    static $t: Type;
    c: FilterSyntaxTokenType;
    b: FilterSyntaxExpressionSyntax;
    a(a: FilterSyntaxVisitor): void;
}
/**
 * @hidden
 */
export declare class FilterSyntaxVisitor extends Base {
    static $t: Type;
    constructor();
    b(a: FilterSyntaxExpressionSyntax): void;
    a(a: FilterSyntaxExpressionSyntax): void;
    j(a: FilterSyntaxUnaryOperatorExpressionSyntax): void;
    c(a: FilterSyntaxBinaryOperatorExpressionSyntax): void;
    d(a: FilterSyntaxIdentifierExpressionSyntax): void;
    e(a: FilterSyntaxMemberExpressionSyntax): void;
    f(a: FilterSyntaxMethodCallExpressionSyntax): void;
    g(a: FilterSyntaxNullExpressionSyntax): void;
    h(a: FilterSyntaxParenthesisExpressionSyntax): void;
    i(a: FilterSyntaxPrimitiveValueExpressionSyntax): void;
}
