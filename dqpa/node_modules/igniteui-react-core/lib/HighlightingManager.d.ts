import { Base, Type } from "./type";
import { IHighlightingManager } from "./IHighlightingManager";
import { IExecutionContext } from "./IExecutionContext";
import { List$1 } from "./List$1";
import { HighlightingInfo } from "./HighlightingInfo";
import { IFastItemsSource } from "./IFastItemsSource";
/**
 * @hidden
 */
export declare class HighlightingManager extends Base implements IHighlightingManager {
    static $t: Type;
    private _executionContext;
    get executionContext(): IExecutionContext;
    set executionContext(a: IExecutionContext);
    private _ensureAnimator;
    get ensureAnimator(): () => void;
    set ensureAnimator(a: () => void);
    private _maxHighlightingProgress;
    get maxHighlightingProgress(): number;
    set maxHighlightingProgress(a: number);
    private _sumHighlightingProgress;
    get sumHighlightingProgress(): number;
    set sumHighlightingProgress(a: number);
    private _maxMarkerHighlightingProgress;
    get maxMarkerHighlightingProgress(): number;
    set maxMarkerHighlightingProgress(a: number);
    private _sumMarkerHighlightingProgress;
    get sumMarkerHighlightingProgress(): number;
    set sumMarkerHighlightingProgress(a: number);
    private _totalHighlightingProgress;
    get totalHighlightingProgress(): number;
    set totalHighlightingProgress(a: number);
    private _totalHighWaterMark;
    get totalHighWaterMark(): number;
    set totalHighWaterMark(a: number);
    private _inProgress;
    get inProgress(): boolean;
    set inProgress(a: boolean);
    private _retainMainShapes;
    get retainMainShapes(): boolean;
    set retainMainShapes(a: boolean);
    private _isExclusiveHighlight;
    get isExclusiveHighlight(): boolean;
    set isExclusiveHighlight(a: boolean);
    n: number;
    p: number;
    o: number;
    constructor();
    private d;
    private h;
    protected get l(): List$1<HighlightingInfo>;
    startHighlight(a: HighlightingInfo): void;
    private a;
    endHighlight(a: HighlightingInfo): void;
    private g;
    private i;
    private b;
    private c;
    private r;
    q: number;
    private u;
    private k;
    private s;
    private t;
    clear(): void;
    getHighlightingInfo(a: any, b: IFastItemsSource, c: number, d: number, e: boolean): HighlightingInfo;
    private m;
    private _dirtyContexts;
    get dirtyContexts(): List$1<any>;
    set dirtyContexts(a: List$1<any>);
    private _allDirty;
    get allDirty(): boolean;
    set allDirty(a: boolean);
    private e;
    private f;
    private j;
    tick(a: number): boolean;
    isCrossContextHighlight(a: any): boolean;
    isContextValid(a: any): boolean;
}
