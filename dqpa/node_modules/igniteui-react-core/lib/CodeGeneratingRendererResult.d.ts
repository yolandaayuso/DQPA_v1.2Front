import { Base, Type } from "./type";
import { List$1 } from "./List$1";
import { CodeGenerationItemBuilderPropertyInfo } from "./CodeGenerationItemBuilderPropertyInfo";
import { CodeGenerationTargetPlatforms } from "./CodeGenerationTargetPlatforms";
import { CodeGenerationRendererOptions } from "./CodeGenerationRendererOptions";
import { CodeGeneratingImportManager } from "./CodeGeneratingImportManager";
/**
 * @hidden
 */
export declare class CodeGeneratingRendererResult extends Base {
    static $t: Type;
    private q;
    get t(): List$1<CodeGenerationItemBuilderPropertyInfo>;
    private _platform;
    get platform(): CodeGenerationTargetPlatforms;
    set platform(a: CodeGenerationTargetPlatforms);
    private _generationOptions;
    get generationOptions(): CodeGenerationRendererOptions;
    set generationOptions(a: CodeGenerationRendererOptions);
    private l;
    private n;
    private k;
    private p;
    addPackageRef(a: string): void;
    addContainerResult(a: string, b: string): void;
    addImportResult(a: string, b: CodeGeneratingImportManager): void;
    addContainerNewFileResult(a: string, b: string): void;
    getPackages(): string[];
    getKeys(): string[];
    getImportsKeys(): string[];
    getContentForKey(a: string): string;
    r(a: string): List$1<CodeGeneratingImportManager>;
    getImportsArrayForKey(a: string): CodeGeneratingImportManager[];
    private i;
    u(a: string): string;
    af(a: CodeGenerationItemBuilderPropertyInfo): void;
    getNewFiles(): List$1<string>;
    getNewFileContent(a: string): string;
    private o;
    defineString(a: string, b: string): void;
    getStringNames(): string[];
    getString(a: string): string;
    private m;
    trackDescriptionField(a: string, b: string): void;
    hasDescription(a: string): boolean;
    getDescriptionField(a: string): string;
    private j;
    v(a: string): string;
}
