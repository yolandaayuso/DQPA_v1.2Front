/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
/**
 * @hidden
 */
var CellInfoDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CellInfoDescriptionMetadata, _super);
    function CellInfoDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CellInfoDescriptionMetadata.b = function (a) {
        if (CellInfoDescriptionMetadata.a == null) {
            CellInfoDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            CellInfoDescriptionMetadata.c(CellInfoDescriptionMetadata.a);
        }
        if (a.k(CellInfoDescriptionMetadata.a)) {
            return;
        }
        a.ac(CellInfoDescriptionMetadata.a);
    };
    CellInfoDescriptionMetadata.c = function (a) {
        a.item("__marshalByValue", "Boolean");
        a.item("StyleKey", "String");
        a.item("DataRow", "Number:int");
        a.item("IsPositionDirty", "Boolean");
        a.item("IsSizeDirty", "Boolean");
        a.item("IsContentDirty", "Boolean");
        a.item("IsBorderDirty", "Boolean");
        a.item("IsLayerDirty", "Boolean");
        a.item("IsStateDirty", "Boolean");
        a.item("IsDataDirty", "Boolean");
        a.item("IsPlaceholdContentNeeded", "Boolean");
        a.item("ActionManager", "ExportedType");
        a.item("IsHitTestVisible", "Boolean");
        a.item("IsRowPinned", "Boolean");
        a.item("IsRowSticky", "Boolean");
        a.item("IsLastStickyRow", "Boolean");
        a.item("IsFilterRow", "Boolean");
        a.item("Indent", "Number:int");
        a.item("RowItemRef", "(w:RowItem,wf:RowItem)DataRef");
        a.item("X", "Number:double");
        a.item("Y", "Number:double");
        a.item("SnappedX", "Number:int");
        a.item("SnappedY", "Number:int");
        a.item("EditOpacity", "Number:double");
        a.item("ContentOpacity", "Number:double");
        a.item("ActualContentOpacity", "Number:double");
        a.item("Opacity", "Number:double");
        a.item("ActualOpacity", "Number:double");
        a.item("Height", "Number:int");
        a.item("Width", "Number:int");
        a.item("IsSelected", "Boolean");
        a.item("SelectedStatus", "Number:double");
        a.item("ActivationStatus", "Number:double");
        a.item("HoverStatus", "Number:double");
        a.item("IsHoverable", "Boolean");
        a.item("HorizontalAlignment", "ExportedType:string:CellContentHorizontalAlignment");
        a.item("HorizontalAlignment@names", "Left;Center;Right;Stretch;Auto");
        a.item("VerticalAlignment", "ExportedType:string:CellContentVerticalAlignment");
        a.item("VerticalAlignment@names", "Top;Center;Bottom;Stretch;Auto");
        a.item("Background", "Brush");
        a.item("Border", "Brush");
        a.item("ActualBackground", "Brush");
        a.item("ActualBorder", "Brush");
        a.item("ActivationBorder", "Brush");
        a.item("ErrorBorder", "Brush");
        a.item("SelectedBackground", "Brush");
        a.item("HoverBackground", "Brush");
        a.item("HoverTextColor", "Brush");
        a.item("SortIndicatorColor", "Brush");
        a.item("StickyRowBackground", "Brush");
        a.item("PinnedRowBackground", "Brush");
        a.item("LastStickyRowBackground", "Brush");
        a.item("FilterRowBackground", "Brush");
        a.item("PinnedRowOpacity", "Number:double");
        a.item("OriginalValueRef", "(w:OriginalValue,wf:OriginalValue)DataRef");
        a.item("RenderValue", "String");
        a.item("TextColor", "Brush");
        a.item("ActualTextColor", "Brush");
        a.item("DeletedTextColor", "Brush");
        a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:font/FontFamilyTransform)String");
        a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:font/FontSizeTransform)Number:double");
        a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontFamily/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:font/FontStyleTransform)String");
        a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontFamily/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:font/FontWeightTransform)String");
        a.item("ActualFontFamily", "(w:ActualFontFamily/FontFamilyTransform,xam:ActualFontFamily,wf:ActualFontFamily,web:actualFont/FontFamilyTransform)String");
        a.item("ActualFontSize", "(w:ActualFontSize,xam:ActualFontSize,wf:ActualFontSize,web:actualFont/FontSizeTransform)Number:double");
        a.item("ActualFontStyle", "(w:ActualFontStyle/FontStyleTransform,xam:ActualFontFamily/FontStyleTransform,wf:ActualFontFamily/FontStyleTransform,web:actualFont/FontStyleTransform)String");
        a.item("ActualFontWeight", "(w:ActualFontWeight/FontWeightTransform,xam:ActualFontFamily/FontWeightTransform,wf:ActualFontFamily/FontWeightTransform,web:actualFont/FontWeightTransform)String");
        a.item("LineBreakMode", "ExportedType:string:TextCellLineBreakMode");
        a.item("LineBreakMode@names", "Ellipsis;NoWrap;WordWrap;CharacterWrap");
        a.item("VirtualizationPercentage", "Number:double");
        a.item("PaddingLeft", "Number:int");
        a.item("PaddingTop", "Number:int");
        a.item("PaddingRight", "Number:int");
        a.item("PaddingBottom", "Number:int");
        a.item("ActualPaddingLeft", "Number:int");
        a.item("ActualPaddingTop", "Number:int");
        a.item("ActualPaddingRight", "Number:int");
        a.item("ActualPaddingBottom", "Number:int");
        a.item("BorderLeftWidth", "Number:int");
        a.item("BorderTopWidth", "Number:int");
        a.item("BorderRightWidth", "Number:int");
        a.item("BorderBottomWidth", "Number:int");
        a.item("ActivationBorderLeftWidth", "Number:int");
        a.item("ActivationBorderTopWidth", "Number:int");
        a.item("ActivationBorderRightWidth", "Number:int");
        a.item("ActivationBorderBottomWidth", "Number:int");
        a.item("ErrorBorderLeftWidth", "Number:int");
        a.item("ErrorBorderTopWidth", "Number:int");
        a.item("ErrorBorderRightWidth", "Number:int");
        a.item("ErrorBorderBottomWidth", "Number:int");
        a.item("ActualBorderLeftWidth", "Number:int");
        a.item("ActualBorderTopWidth", "Number:int");
        a.item("ActualBorderRightWidth", "Number:int");
        a.item("ActualBorderBottomWidth", "Number:int");
        a.item("SortDirection", "ExportedType:string:ColumnSortDirection");
        a.item("SortDirection@names", "None;Ascending;Descending");
        a.item("IsExpanded", "Boolean");
        a.item("IsCollapsable", "Boolean");
        a.item("Pinned", "ExportedType:string:PinnedPositions");
        a.item("Pinned@names", "None;Left;Right");
        a.item("EditFontFamily", "(w:EditFontFamily/FontFamilyTransform,xam:EditFontFamily,wf:EditFontFamily,web:editFont/FontFamilyTransform)String");
        a.item("EditFontSize", "(w:EditFontSize,xam:EditFontSize,wf:EditFontSize,web:editFont/FontSizeTransform)Number:double");
        a.item("EditFontStyle", "(w:EditFontStyle/FontStyleTransform,xam:EditFontFamily/FontStyleTransform,wf:EditFontFamily/FontStyleTransform,web:editFont/FontStyleTransform)String");
        a.item("EditFontWeight", "(w:EditFontWeight/FontWeightTransform,xam:EditFontFamily/FontWeightTransform,wf:EditFontFamily/FontWeightTransform,web:editFont/FontWeightTransform)String");
        a.item("IsEdited", "Boolean");
        a.item("IsDeleted", "Boolean");
        a.item("EditError", "String");
        a.item("IsInEditMode", "Boolean");
        a.item("EditID", "Number:int");
    };
    CellInfoDescriptionMetadata.d = function (a) {
        CellInfoDescriptionMetadata.b(a);
        a.ad("CellInfo", CellInfoDescriptionMetadata.a);
    };
    CellInfoDescriptionMetadata.$t = markType(CellInfoDescriptionMetadata, 'CellInfoDescriptionMetadata');
    CellInfoDescriptionMetadata.a = null;
    return CellInfoDescriptionMetadata;
}(Base));
export { CellInfoDescriptionMetadata };
