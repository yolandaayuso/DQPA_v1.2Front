/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { FinancialSeriesDescriptionMetadata } from "./FinancialSeriesDescriptionMetadata";
import { FinancialPriceSeriesDescription } from "./FinancialPriceSeriesDescription";
/**
 * @hidden
 */
var FinancialPriceSeriesDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialPriceSeriesDescriptionMetadata, _super);
    function FinancialPriceSeriesDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FinancialPriceSeriesDescriptionMetadata.b = function (a) {
        if (FinancialPriceSeriesDescriptionMetadata.a == null) {
            FinancialPriceSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            FinancialPriceSeriesDescriptionMetadata.c(FinancialPriceSeriesDescriptionMetadata.a);
        }
        if (a.k(FinancialPriceSeriesDescriptionMetadata.a)) {
            return;
        }
        a.ac(FinancialPriceSeriesDescriptionMetadata.a);
    };
    FinancialPriceSeriesDescriptionMetadata.c = function (a) {
        FinancialSeriesDescriptionMetadata.c(a);
        a.item("TrendLineType", "ExportedType:string:TrendLineType");
        a.item("TrendLineType@names", "None;LinearFit;QuadraticFit;CubicFit;QuarticFit;QuinticFit;LogarithmicFit;ExponentialFit;PowerLawFit;SimpleAverage;ExponentialAverage;ModifiedAverage;CumulativeAverage;WeightedAverage");
        a.item("TrendLineBrush", "Brush");
        a.item("ActualTrendLineBrush", "Brush");
        a.item("TrendLineThickness", "Number:double");
        a.item("TrendLineDashArray", "DoubleCollection:double");
        a.item("TrendLinePeriod", "Number:int");
        a.item("DisplayType", "ExportedType:string:PriceDisplayType");
        a.item("DisplayType@names", "Candlestick;OHLC");
        a.item("CategoryCollisionMode", "ExportedType:string:CategoryCollisionMode");
        a.item("CategoryCollisionMode@names", "WholeColumn;MatchHeight");
        a.item("NegativeOutline", "Brush");
        a.item("LowMemberAsLegendLabel", "String");
        a.item("HighMemberAsLegendLabel", "String");
        a.item("CloseMemberAsLegendLabel", "String");
        a.item("OpenMemberAsLegendLabel", "String");
        a.item("LowMemberAsLegendUnit", "String");
        a.item("HighMemberAsLegendUnit", "String");
        a.item("CloseMemberAsLegendUnit", "String");
        a.item("OpenMemberAsLegendUnit", "String");
    };
    FinancialPriceSeriesDescriptionMetadata.d = function (a) {
        FinancialPriceSeriesDescriptionMetadata.b(a);
        a.ae("FinancialPriceSeries", function () { return new FinancialPriceSeriesDescription(); });
        a.ad("FinancialPriceSeries", FinancialPriceSeriesDescriptionMetadata.a);
    };
    FinancialPriceSeriesDescriptionMetadata.$t = markType(FinancialPriceSeriesDescriptionMetadata, 'FinancialPriceSeriesDescriptionMetadata');
    FinancialPriceSeriesDescriptionMetadata.a = null;
    return FinancialPriceSeriesDescriptionMetadata;
}(Base));
export { FinancialPriceSeriesDescriptionMetadata };
