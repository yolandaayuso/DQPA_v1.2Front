/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AxisDescriptionMetadata } from "./AxisDescriptionMetadata";
/**
 * @hidden
 */
var CategoryAxisBaseDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryAxisBaseDescriptionMetadata, _super);
    function CategoryAxisBaseDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CategoryAxisBaseDescriptionMetadata.b = function (a) {
        if (CategoryAxisBaseDescriptionMetadata.a == null) {
            CategoryAxisBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            CategoryAxisBaseDescriptionMetadata.c(CategoryAxisBaseDescriptionMetadata.a);
        }
        if (a.k(CategoryAxisBaseDescriptionMetadata.a)) {
            return;
        }
        a.ac(CategoryAxisBaseDescriptionMetadata.a);
    };
    CategoryAxisBaseDescriptionMetadata.c = function (a) {
        AxisDescriptionMetadata.c(a);
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)DataRef::object");
        a.item("ItemsCount", "Number:int");
        a.item("Gap", "Number:double");
        a.item("MaximumGap", "Number:double");
        a.item("MinimumGapSize", "Number:double");
        a.item("Overlap", "Number:double");
        a.item("UseClusteringMode", "Boolean");
        a.item("ItemsCountChangeRef", "EventRef::itemsCountChange");
        CategoryAxisBaseDescriptionMetadata.e(a);
    };
    CategoryAxisBaseDescriptionMetadata.d = function (a) {
        CategoryAxisBaseDescriptionMetadata.b(a);
        a.ad("CategoryAxisBase", CategoryAxisBaseDescriptionMetadata.a);
    };
    CategoryAxisBaseDescriptionMetadata.e = function (a) {
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource)DataRef:String");
    };
    CategoryAxisBaseDescriptionMetadata.$t = markType(CategoryAxisBaseDescriptionMetadata, 'CategoryAxisBaseDescriptionMetadata');
    CategoryAxisBaseDescriptionMetadata.a = null;
    return CategoryAxisBaseDescriptionMetadata;
}(Base));
export { CategoryAxisBaseDescriptionMetadata };
