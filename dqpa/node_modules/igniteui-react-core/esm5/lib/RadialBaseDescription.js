/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { MarkerSeriesDescription } from "./MarkerSeriesDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var RadialBaseDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RadialBaseDescription, _super);
    function RadialBaseDescription() {
        var _this = _super.call(this) || this;
        _this.f9 = 0;
        _this.ga = 0;
        _this.gg = null;
        _this.gl = null;
        _this.gj = null;
        _this.gi = null;
        _this.gh = null;
        _this.fr = null;
        _this.go = null;
        _this.fv = null;
        _this.gk = null;
        _this.fs = null;
        _this.gn = null;
        _this.fu = null;
        _this.gm = null;
        _this.ft = null;
        _this.f3 = false;
        _this.f2 = false;
        _this.gp = null;
        _this.f4 = false;
        _this.gd = null;
        _this.gq = null;
        _this.f1 = false;
        _this.gf = null;
        _this.ge = null;
        return _this;
    }
    RadialBaseDescription.prototype.get_type = function () {
        return "RadialBase";
    };
    Object.defineProperty(RadialBaseDescription.prototype, "autoCalloutLabelPrecision", {
        get: function () {
            return this.f9;
        },
        set: function (a) {
            this.f9 = a;
            this.g("AutoCalloutLabelPrecision");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "autoCalloutPercentagePrecision", {
        get: function () {
            return this.ga;
        },
        set: function (a) {
            this.ga = a;
            this.g("AutoCalloutPercentagePrecision");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "autoCalloutLabelValueSeparator", {
        get: function () {
            return this.gg;
        },
        set: function (a) {
            this.gg = a;
            this.g("AutoCalloutLabelValueSeparator");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "legendRadialLabelMode", {
        get: function () {
            return this.gl;
        },
        set: function (a) {
            this.gl = a;
            this.g("LegendRadialLabelMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "categoryCollisionMode", {
        get: function () {
            return this.gj;
        },
        set: function (a) {
            this.gj = a;
            this.g("CategoryCollisionMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "autoCalloutRadialLabelMode", {
        get: function () {
            return this.gi;
        },
        set: function (a) {
            this.gi = a;
            this.g("AutoCalloutRadialLabelMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "autoCalloutOthersLabelFormat", {
        get: function () {
            return this.gh;
        },
        set: function (a) {
            this.gh = a;
            this.g("AutoCalloutOthersLabelFormat");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "autoCalloutOthersLabelFormatSpecifiers", {
        get: function () {
            return this.fr;
        },
        set: function (a) {
            this.fr = a;
            this.g("AutoCalloutOthersLabelFormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "proportionalRadialLabelFormat", {
        get: function () {
            return this.go;
        },
        set: function (a) {
            this.go = a;
            this.g("ProportionalRadialLabelFormat");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "proportionalRadialLabelFormatSpecifiers", {
        get: function () {
            return this.fv;
        },
        set: function (a) {
            this.fv = a;
            this.g("ProportionalRadialLabelFormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "legendProportionalRadialLabelFormat", {
        get: function () {
            return this.gk;
        },
        set: function (a) {
            this.gk = a;
            this.g("LegendProportionalRadialLabelFormat");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "legendProportionalRadialLabelFormatSpecifiers", {
        get: function () {
            return this.fs;
        },
        set: function (a) {
            this.fs = a;
            this.g("LegendProportionalRadialLabelFormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "othersProportionalRadialLabelFormat", {
        get: function () {
            return this.gn;
        },
        set: function (a) {
            this.gn = a;
            this.g("OthersProportionalRadialLabelFormat");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "othersProportionalRadialLabelFormatSpecifiers", {
        get: function () {
            return this.fu;
        },
        set: function (a) {
            this.fu = a;
            this.g("OthersProportionalRadialLabelFormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "othersLegendProportionalRadialLabelFormat", {
        get: function () {
            return this.gm;
        },
        set: function (a) {
            this.gm = a;
            this.g("OthersLegendProportionalRadialLabelFormat");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "othersLegendProportionalRadialLabelFormatSpecifiers", {
        get: function () {
            return this.ft;
        },
        set: function (a) {
            this.ft = a;
            this.g("OthersLegendProportionalRadialLabelFormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "isCustomRadialStyleAllowed", {
        get: function () {
            return this.f3;
        },
        set: function (a) {
            this.f3 = a;
            this.g("IsCustomRadialStyleAllowed");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "isCustomRadialMarkerStyleAllowed", {
        get: function () {
            return this.f2;
        },
        set: function (a) {
            this.f2 = a;
            this.g("IsCustomRadialMarkerStyleAllowed");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "transitionInMode", {
        get: function () {
            return this.gp;
        },
        set: function (a) {
            this.gp = a;
            this.g("TransitionInMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "isTransitionInEnabled", {
        get: function () {
            return this.f4;
        },
        set: function (a) {
            this.f4 = a;
            this.g("IsTransitionInEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "angleAxisRef", {
        get: function () {
            return this.gd;
        },
        set: function (a) {
            this.gd = a;
            this.g("AngleAxisRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "valueAxisRef", {
        get: function () {
            return this.gq;
        },
        set: function (a) {
            this.gq = a;
            this.g("ValueAxisRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "clipSeriesToBounds", {
        get: function () {
            return this.f1;
        },
        set: function (a) {
            this.f1 = a;
            this.g("ClipSeriesToBounds");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "assigningRadialStyleRef", {
        get: function () {
            return this.gf;
        },
        set: function (a) {
            this.gf = a;
            this.g("AssigningRadialStyleRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialBaseDescription.prototype, "assigningRadialMarkerStyleRef", {
        get: function () {
            return this.ge;
        },
        set: function (a) {
            this.ge = a;
            this.g("AssigningRadialMarkerStyleRef");
        },
        enumerable: false,
        configurable: true
    });
    RadialBaseDescription.$t = markType(RadialBaseDescription, 'RadialBaseDescription', MarkerSeriesDescription.$);
    return RadialBaseDescription;
}(MarkerSeriesDescription));
export { RadialBaseDescription };
