/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { SeriesDescriptionMetadata } from "./SeriesDescriptionMetadata";
/**
 * @hidden
 */
var MarkerSeriesDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(MarkerSeriesDescriptionMetadata, _super);
    function MarkerSeriesDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MarkerSeriesDescriptionMetadata.b = function (a) {
        if (MarkerSeriesDescriptionMetadata.a == null) {
            MarkerSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            MarkerSeriesDescriptionMetadata.c(MarkerSeriesDescriptionMetadata.a);
        }
        if (a.k(MarkerSeriesDescriptionMetadata.a)) {
            return;
        }
        a.ac(MarkerSeriesDescriptionMetadata.a);
    };
    MarkerSeriesDescriptionMetadata.c = function (a) {
        SeriesDescriptionMetadata.c(a);
        a.item("MarkerType", "ExportedType:string:MarkerType");
        a.item("MarkerType@names", "Unset;None;Automatic;Circle;Triangle;Pyramid;Square;Diamond;Pentagon;Hexagon;Tetragram;Pentagram;Hexagram;Hidden");
        a.item("ActualMarkerType", "ExportedType:string:MarkerType");
        a.item("ActualMarkerType@names", "Unset;None;Automatic;Circle;Triangle;Pyramid;Square;Diamond;Pentagon;Hexagon;Tetragram;Pentagram;Hexagram;Hidden");
        a.item("IsCustomMarkerCircular", "Boolean");
        a.item("MarkerOutlineMode", "ExportedType:string:MarkerOutlineMode");
        a.item("MarkerOutlineMode@names", "Auto;Normal;MatchMarkerBrush");
        a.item("MarkerFillMode", "ExportedType:string:MarkerFillMode");
        a.item("MarkerFillMode@names", "Auto;Normal;MatchMarkerOutline");
        a.item("MarkerTemplateRef", "(w:MarkerTemplate,wf:MarkerTemplate)DataRef::object");
        a.item("MarkerThickness", "Number:double");
        a.item("ActualMarkerTemplateRef", "(w:ActualMarkerTemplate,wf:ActualMarkerTemplate)DataRef::object");
        a.item("MarkerBrush", "Brush");
        a.item("ActualMarkerBrush", "Brush");
        a.item("MarkerOutline", "Brush");
        a.item("ActualMarkerOutline", "Brush");
    };
    MarkerSeriesDescriptionMetadata.d = function (a) {
        MarkerSeriesDescriptionMetadata.b(a);
        a.ad("MarkerSeries", MarkerSeriesDescriptionMetadata.a);
    };
    MarkerSeriesDescriptionMetadata.$t = markType(MarkerSeriesDescriptionMetadata, 'MarkerSeriesDescriptionMetadata');
    MarkerSeriesDescriptionMetadata.a = null;
    return MarkerSeriesDescriptionMetadata;
}(Base));
export { MarkerSeriesDescriptionMetadata };
