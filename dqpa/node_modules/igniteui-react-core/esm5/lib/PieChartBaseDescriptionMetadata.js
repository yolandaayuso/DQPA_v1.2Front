/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { LabelClickEventArgsDescriptionMetadata } from "./LabelClickEventArgsDescriptionMetadata";
import { SelectedItemChangingEventArgsDescriptionMetadata } from "./SelectedItemChangingEventArgsDescriptionMetadata";
import { SelectedItemsChangingEventArgsDescriptionMetadata } from "./SelectedItemsChangingEventArgsDescriptionMetadata";
import { SelectedItemChangedEventArgsDescriptionMetadata } from "./SelectedItemChangedEventArgsDescriptionMetadata";
import { SelectedItemsChangedEventArgsDescriptionMetadata } from "./SelectedItemsChangedEventArgsDescriptionMetadata";
import { SliceClickEventArgsDescriptionMetadata } from "./SliceClickEventArgsDescriptionMetadata";
import { SliceEventArgsDescriptionMetadata } from "./SliceEventArgsDescriptionMetadata";
/**
 * @hidden
 */
var PieChartBaseDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(PieChartBaseDescriptionMetadata, _super);
    function PieChartBaseDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PieChartBaseDescriptionMetadata.e = function (a) {
        a.item("TooltipTemplateRef", "(w:ToolTip)DataRef:String");
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource)DataRef:String");
        a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:TextStyle/FontFamilyTransform)String");
        a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:TextStyle/FontSizeTransform)Number:double");
        a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontStyle/FontStyleTransform,wf:FontStyle/FontStyleTransform,web:TextStyle/FontStyleTransform)String");
        a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontStyle/FontWeightTransform,wf:FontStyle/FontWeightTransform,web:TextStyle/FontWeightTransform)String");
    };
    PieChartBaseDescriptionMetadata.b = function (a) {
        if (PieChartBaseDescriptionMetadata.a == null) {
            PieChartBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            PieChartBaseDescriptionMetadata.c(PieChartBaseDescriptionMetadata.a);
        }
        if (a.k(PieChartBaseDescriptionMetadata.a)) {
            return;
        }
        a.ac(PieChartBaseDescriptionMetadata.a);
        LabelClickEventArgsDescriptionMetadata.d(a);
        SelectedItemChangingEventArgsDescriptionMetadata.d(a);
        SelectedItemsChangingEventArgsDescriptionMetadata.d(a);
        SelectedItemChangedEventArgsDescriptionMetadata.d(a);
        SelectedItemsChangedEventArgsDescriptionMetadata.d(a);
        SliceClickEventArgsDescriptionMetadata.d(a);
        SliceEventArgsDescriptionMetadata.d(a);
    };
    PieChartBaseDescriptionMetadata.c = function (a) {
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)DataRef::object");
        a.item("InnerExtent", "Number:double");
        a.item("ValueMemberPath", "String");
        a.item("LabelMemberPath", "String");
        a.item("LegendLabelMemberPath", "String");
        a.item("LabelsPosition", "ExportedType:string:LabelsPosition");
        a.item("LabelsPosition@names", "None;Center;InsideEnd;OutsideEnd;BestFit");
        a.item("LabelOuterColor", "Brush");
        a.item("LabelInnerColor", "Brush");
        a.item("ActualLabelOuterColor", "Brush");
        a.item("ActualLabelInnerColor", "Brush");
        a.item("LeaderLineVisibility", "ExportedType:string:Visibility");
        a.item("LeaderLineVisibility@names", "Visible;Collapsed");
        a.item("LeaderLineType", "ExportedType:string:LeaderLineType");
        a.item("LeaderLineType@names", "Straight;Arc;Spline");
        a.item("LeaderLineMargin", "Number:double");
        a.item("OthersCategoryThreshold", "Number:double");
        a.item("OthersCategoryType", "ExportedType:string:OthersCategoryType");
        a.item("OthersCategoryType@names", "Number;Percent");
        a.item("OthersCategoryText", "String");
        a.item("ExplodedRadius", "Number:double");
        a.item("RadiusFactor", "Number:double");
        a.item("AllowSliceSelection", "Boolean");
        a.item("AllowSliceExplosion", "Boolean");
        a.item("ExplodedSlices", "Collection:int:IndexCollection:Int32");
        a.item("LegendRef", "(w:Legend,wf:Legend)DataRef::object");
        a.item("LabelExtent", "Number:double");
        a.item("StartAngle", "Number:double");
        a.item("SweepDirection", "ExportedType:string:SweepDirection");
        a.item("SweepDirection@names", "Counterclockwise;Clockwise");
        a.item("OthersCategoryFill", "(w:OthersCategoryStyle.Fill,wf:OthersCategoryFill)String");
        a.item("OthersCategoryStroke", "(w:OthersCategoryStyle.Stroke,wf:OthersCategoryStroke)String");
        a.item("OthersCategoryStrokeThickness", "(w:OthersCategoryStyle.StrokeThickness,wf:OthersCategoryStrokeThickness)Number:double");
        a.item("OthersCategoryOpacity", "(w:OthersCategoryStyle.Opacity,wf:OthersCategoryOpacity)Number:double");
        a.item("SelectedSliceFill", "(w:SelectedStyle.Fill,wf:SelectedSliceFill)String");
        a.item("SelectedSliceStroke", "(w:SelectedStyle.Stroke,wf:SelectedSliceStroke)String");
        a.item("SelectedSliceStrokeThickness", "(w:SelectedStyle.StrokeThickness,wf:SelectedSliceStrokeThickness)Number:double");
        a.item("SelectedSliceOpacity", "(w:SelectedStyle.Opacity,wf:SelectedSliceOpacity)Number:double");
        a.item("Brushes", "BrushCollection:string");
        a.item("ActualBrushes", "BrushCollection:string");
        a.item("Outlines", "BrushCollection:string");
        a.item("ActualOutlines", "BrushCollection:string");
        a.item("LabelFormat", "String");
        a.item("LabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("LabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("OthersLabelFormat", "String");
        a.item("OthersLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("OthersLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("LegendLabelFormat", "String");
        a.item("LegendLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("LegendLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("LegendOthersLabelFormat", "String");
        a.item("LegendOthersLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("LegendOthersLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("LegendItemTemplateRef", "(w:LegendItemTemplate,wf:LegendItemTemplate)DataRef::object");
        a.item("LegendItemBadgeTemplateRef", "(w:LegendItemBadgeTemplate,wf:LegendItemBadgeTemplate)DataRef::object");
        a.item("IsDragInteractionEnabled", "Boolean");
        a.item("IsSurfaceInteractionDisabled", "Boolean");
        a.item("ShouldDisplayMockData", "Boolean");
        a.item("ShouldUseSkeletonStyleForMockData", "Boolean");
        a.item("LegendEmptyValuesMode", "ExportedType:string:LegendEmptyValuesMode");
        a.item("LegendEmptyValuesMode@names", "AlwaysHidden;AlwaysVisible;ShowWhenNoOthersCategory");
        a.item("FormatLabelRef", "(w:FormatLabel,wf:FormatLabel)MethodRef");
        a.item("FormatLegendLabelRef", "(w:FormatLegendLabel,wf:FormatLegendLabel)MethodRef");
        a.item("PixelScalingRatio", "Number:double");
        a.item("ActualPixelScalingRatio", "Number:double");
        a.item("SelectionMode", "ExportedType:string:SliceSelectionMode");
        a.item("SelectionMode@names", "Manual;Single;Multiple");
        a.item("SelectedItem", "Unknown");
        a.item("SelectedItems", "Collection:object:ObjectCollection:Object");
        a.item("TextStyle", "String");
        a.item("LabelClickRef", "EventRef::labelClick");
        a.item("SelectedItemChangingRef", "EventRef::selectedItemChanging");
        a.item("SelectedItemsChangingRef", "EventRef::selectedItemsChanging");
        a.item("SelectedItemChangedRef", "EventRef::selectedItemChanged");
        a.item("SelectedItemsChangedRef", "EventRef::selectedItemsChanged");
        a.item("SliceClickRef", "EventRef::sliceClick");
        a.item("SliceEnterRef", "EventRef::sliceEnter");
        a.item("SliceLeaveRef", "EventRef::sliceLeave");
        a.item("SliceHoverRef", "EventRef::sliceHover");
        PieChartBaseDescriptionMetadata.e(a);
    };
    PieChartBaseDescriptionMetadata.d = function (a) {
        PieChartBaseDescriptionMetadata.b(a);
        a.ad("PieChartBase", PieChartBaseDescriptionMetadata.a);
    };
    PieChartBaseDescriptionMetadata.$t = markType(PieChartBaseDescriptionMetadata, 'PieChartBaseDescriptionMetadata');
    PieChartBaseDescriptionMetadata.a = null;
    return PieChartBaseDescriptionMetadata;
}(Base));
export { PieChartBaseDescriptionMetadata };
