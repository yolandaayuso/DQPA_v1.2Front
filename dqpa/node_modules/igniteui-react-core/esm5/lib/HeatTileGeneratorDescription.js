/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { TileGeneratorDescription } from "./TileGeneratorDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var HeatTileGeneratorDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(HeatTileGeneratorDescription, _super);
    function HeatTileGeneratorDescription() {
        var _this = _super.call(this) || this;
        _this.m = null;
        _this.l = null;
        _this.k = null;
        _this.an = null;
        _this.am = null;
        _this.j = null;
        _this.i = null;
        _this.ac = 0;
        _this.ae = 0;
        _this.s = false;
        _this.t = false;
        _this.u = false;
        _this.ag = 0;
        _this.af = 0;
        _this.ad = 0;
        _this.v = false;
        _this.w = false;
        _this.ap = null;
        _this.ao = null;
        return _this;
    }
    HeatTileGeneratorDescription.prototype.get_type = function () {
        return "HeatTileGenerator";
    };
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "yValues", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.g("YValues");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "xValues", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.g("XValues");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "values", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.g("Values");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "minimumColor", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.g("MinimumColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "maximumColor", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
            this.g("MaximumColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "scaleColors", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.g("ScaleColors");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "scaleColorOffsets", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.g("ScaleColorOffsets");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "blurRadius", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
            this.g("BlurRadius");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "maxBlurRadius", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
            this.g("MaxBlurRadius");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "useBlurRadiusAdjustedForZoom", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.g("UseBlurRadiusAdjustedForZoom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "useGlobalMinMax", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.g("UseGlobalMinMax");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "useGlobalMinMaxAdjustedForZoom", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.g("UseGlobalMinMaxAdjustedForZoom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "minimumValue", {
        get: function () {
            return this.ag;
        },
        set: function (a) {
            this.ag = a;
            this.g("MinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "maximumValue", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            this.af = a;
            this.g("MaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "logarithmBase", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
            this.g("LogarithmBase");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "useLogarithmicScale", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.g("UseLogarithmicScale");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "useWebWorkers", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.g("UseWebWorkers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "webWorkerScriptPath", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.g("WebWorkerScriptPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "webWorkerInstanceRef", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
            this.g("WebWorkerInstanceRef");
        },
        enumerable: false,
        configurable: true
    });
    HeatTileGeneratorDescription.$t = markType(HeatTileGeneratorDescription, 'HeatTileGeneratorDescription', TileGeneratorDescription.$);
    return HeatTileGeneratorDescription;
}(TileGeneratorDescription));
export { HeatTileGeneratorDescription };
