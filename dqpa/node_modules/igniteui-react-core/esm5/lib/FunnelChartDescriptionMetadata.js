/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { FunnelChartSelectedItemsChangedEventArgsDescriptionMetadata } from "./FunnelChartSelectedItemsChangedEventArgsDescriptionMetadata";
import { FunnelSliceClickedEventArgsDescriptionMetadata } from "./FunnelSliceClickedEventArgsDescriptionMetadata";
import { FunnelSliceEventArgsDescriptionMetadata } from "./FunnelSliceEventArgsDescriptionMetadata";
import { FunnelChartDescription } from "./FunnelChartDescription";
/**
 * @hidden
 */
var FunnelChartDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FunnelChartDescriptionMetadata, _super);
    function FunnelChartDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FunnelChartDescriptionMetadata.b = function (a) {
        if (FunnelChartDescriptionMetadata.a == null) {
            FunnelChartDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            FunnelChartDescriptionMetadata.c(FunnelChartDescriptionMetadata.a);
        }
        if (a.k(FunnelChartDescriptionMetadata.a)) {
            return;
        }
        a.ac(FunnelChartDescriptionMetadata.a);
        FunnelChartSelectedItemsChangedEventArgsDescriptionMetadata.d(a);
        FunnelSliceClickedEventArgsDescriptionMetadata.d(a);
        FunnelSliceEventArgsDescriptionMetadata.d(a);
    };
    FunnelChartDescriptionMetadata.c = function (a) {
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)DataRef::object");
        a.item("ValueMemberPath", "String");
        a.item("HighlightedValueMemberPath", "String");
        a.item("ActualHighlightValueOpacity", "Number:double");
        a.item("HighlightValueOpacity", "Number:double");
        a.item("ActualHighlightValueDisplayMode", "ExportedType:string:HighlightedValueDisplayMode");
        a.item("ActualHighlightValueDisplayMode@names", "Auto;Hidden;Overlay");
        a.item("HighlightValueDisplayMode", "ExportedType:string:HighlightedValueDisplayMode");
        a.item("HighlightValueDisplayMode@names", "Auto;Hidden;Overlay");
        a.item("Brushes", "BrushCollection:string");
        a.item("Outlines", "BrushCollection:string");
        a.item("BottomEdgeWidth", "Number:double");
        a.item("InnerLabelMemberPath", "String");
        a.item("OuterLabelMemberPath", "String");
        a.item("InnerLabelVisibility", "ExportedType:string:Visibility");
        a.item("InnerLabelVisibility@names", "Visible;Collapsed");
        a.item("OuterLabelVisibility", "ExportedType:string:Visibility");
        a.item("OuterLabelVisibility@names", "Visible;Collapsed");
        a.item("OuterLabelAlignment", "ExportedType:string:OuterLabelAlignment");
        a.item("OuterLabelAlignment@names", "Left;Right");
        a.item("FunnelSliceDisplay", "ExportedType:string:FunnelSliceDisplay");
        a.item("FunnelSliceDisplay@names", "Uniform;Weighted");
        a.item("FormatInnerLabelRef", "(w:FormatInnerLabel,wf:FormatInnerLabel)MethodRef");
        a.item("FormatOuterLabelRef", "(w:FormatOuterLabel,wf:FormatOuterLabel)MethodRef");
        a.item("TransitionDuration", "Number:int");
        a.item("IsInverted", "Boolean");
        a.item("UseBezierCurve", "Boolean");
        a.item("AllowSliceSelection", "Boolean");
        a.item("UseUnselectedStyle", "Boolean");
        a.item("SelectedSliceFill", "(w:SelectedSliceStyle.Fill,wf:SelectedSliceFill)String");
        a.item("SelectedSliceStroke", "(w:SelectedSliceStyle.Stroke,wf:SelectedSliceStroke)String");
        a.item("SelectedSliceStrokeThickness", "(w:SelectedSliceStyle.StrokeThickness,wf:SelectedSliceStrokeThickness)Number:double");
        a.item("SelectedSliceOpacity", "(w:SelectedSliceStyle.Opacity,wf:SelectedSliceOpacity)Number:double");
        a.item("UnselectedSliceFill", "(w:UnselectedSliceStyle.Fill,wf:UnselectedSliceFill)String");
        a.item("UnselectedSliceStroke", "(w:UnselectedSliceStyle.Stroke,wf:UnselectedSliceStroke)String");
        a.item("UnselectedSliceStrokeThickness", "(w:UnselectedSliceStyle.StrokeThickness,wf:UnselectedSliceStrokeThickness)Number:double");
        a.item("UnselectedSliceOpacity", "(w:UnselectedSliceStyle.Opacity,wf:UnselectedSliceOpacity)Number:double");
        a.item("SelectedItems", "Collection:object:FunnelChartSelectedItemsCollection:Object");
        a.item("LegendItemBadgeTemplateRef", "(w:LegendItemBadgeTemplate,wf:LegendItemBadgeTemplate)DataRef::object");
        a.item("UseOuterLabelsForLegend", "Boolean");
        a.item("TextStyle", "String");
        a.item("OuterLabelTextStyle", "String");
        a.item("OutlineThickness", "Number:double");
        a.item("PixelScalingRatio", "Number:double");
        a.item("OuterLabelTextColor", "Brush");
        a.item("TextColor", "Brush");
        a.item("SelectedItemsChangedRef", "EventRef::selectedItemsChanged");
        a.item("SliceClickedRef", "EventRef::sliceClicked");
        a.item("SliceEnterRef", "EventRef::sliceEnter");
        a.item("SliceLeaveRef", "EventRef::sliceLeave");
        a.item("SliceHoverRef", "EventRef::sliceHover");
    };
    FunnelChartDescriptionMetadata.d = function (a) {
        FunnelChartDescriptionMetadata.b(a);
        a.ae("FunnelChart", function () { return new FunnelChartDescription(); });
        a.ad("FunnelChart", FunnelChartDescriptionMetadata.a);
    };
    FunnelChartDescriptionMetadata.$t = markType(FunnelChartDescriptionMetadata, 'FunnelChartDescriptionMetadata');
    FunnelChartDescriptionMetadata.a = null;
    return FunnelChartDescriptionMetadata;
}(Base));
export { FunnelChartDescriptionMetadata };
