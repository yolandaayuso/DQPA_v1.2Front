/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "./type";
import { AnimationKeyFrameProperty } from "./AnimationKeyFrameProperty";
import { List$1 } from "./List$1";
import { Dictionary$2 } from "./Dictionary$2";
import { UIElementPropertyId_$type } from "./UIElementPropertyId";
/**
 * @hidden
 */
var AnimationKeyFrame = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AnimationKeyFrame, _super);
    function AnimationKeyFrame(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.j = 0;
        _this.i = new List$1(AnimationKeyFrameProperty.$, 0);
        _this.a = null;
        _this.h = null;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    _this.j = NaN;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this.j = c;
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(AnimationKeyFrame.prototype, "b", {
        get: function () {
            if (this.a == null) {
                this.a = this.i.toArray();
            }
            return this.a;
        },
        enumerable: false,
        configurable: true
    });
    AnimationKeyFrame.prototype.g = function (a) {
        if (this.h == null) {
            this.h = new Dictionary$2(UIElementPropertyId_$type, AnimationKeyFrameProperty.$, 0);
            for (var b = 0; b < this.b.length; b++) {
                this.h.item(this.b[b].a, this.b[b]);
            }
        }
        if (this.h.containsKey(a)) {
            return this.h.item(a);
        }
        return null;
    };
    AnimationKeyFrame.d = function () {
        return new AnimationKeyFrame(0);
    };
    AnimationKeyFrame.e = function (a) {
        var b = new AnimationKeyFrame(0);
        b.j = a;
        return b;
    };
    AnimationKeyFrame.f = function (a, b) {
        var c = new AnimationKeyFrame(0);
        c.j = a;
        c.i.o(b);
        return c;
    };
    AnimationKeyFrame.prototype.c = function (a) {
        this.i.add(a);
        this.a = null;
        this.h = null;
        return this;
    };
    AnimationKeyFrame.$t = markType(AnimationKeyFrame, 'AnimationKeyFrame');
    return AnimationKeyFrame;
}(Base));
export { AnimationKeyFrame };
