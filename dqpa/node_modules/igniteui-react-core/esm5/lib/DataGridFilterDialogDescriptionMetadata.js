/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { GridFilterDialogOpeningEventArgsDescriptionMetadata } from "./GridFilterDialogOpeningEventArgsDescriptionMetadata";
import { GridFilterDialogFilterChangeEventArgsDescriptionMetadata } from "./GridFilterDialogFilterChangeEventArgsDescriptionMetadata";
import { FilterDialogRenderCompletedEventArgsDescriptionMetadata } from "./FilterDialogRenderCompletedEventArgsDescriptionMetadata";
import { DataGridFilterDialogDescription } from "./DataGridFilterDialogDescription";
/**
 * @hidden
 */
var DataGridFilterDialogDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DataGridFilterDialogDescriptionMetadata, _super);
    function DataGridFilterDialogDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGridFilterDialogDescriptionMetadata.b = function (a) {
        if (DataGridFilterDialogDescriptionMetadata.a == null) {
            DataGridFilterDialogDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            DataGridFilterDialogDescriptionMetadata.c(DataGridFilterDialogDescriptionMetadata.a);
        }
        if (a.k(DataGridFilterDialogDescriptionMetadata.a)) {
            return;
        }
        a.ac(DataGridFilterDialogDescriptionMetadata.a);
        GridFilterDialogOpeningEventArgsDescriptionMetadata.d(a);
        GridFilterDialogFilterChangeEventArgsDescriptionMetadata.d(a);
        FilterDialogRenderCompletedEventArgsDescriptionMetadata.d(a);
    };
    DataGridFilterDialogDescriptionMetadata.c = function (a) {
        a.item("IsAnimationEnabled", "Boolean");
        a.item("PixelScalingRatio", "Number:double");
        a.item("ActualPixelScalingRatio", "Number:double");
        a.item("IconColor", "Brush");
        a.item("ViewSize", "Number:double");
        a.item("CommandCompletedRef", "(w:CommandCompleted,wf:CommandCompleted)MethodRef");
        a.item("InvalidateActionsRef", "(w:InvalidateActions,wf:InvalidateActions)MethodRef");
        a.item("DialogOpeningRef", "EventRef::dialogOpening");
        a.item("FilterChangingRef", "EventRef::filterChanging");
        a.item("FilterChangedRef", "EventRef::filterChanged");
        a.item("RenderCompletedRef", "EventRef::renderCompleted");
    };
    DataGridFilterDialogDescriptionMetadata.d = function (a) {
        DataGridFilterDialogDescriptionMetadata.b(a);
        a.ae("DataGridFilterDialog", function () { return new DataGridFilterDialogDescription(); });
        a.ad("DataGridFilterDialog", DataGridFilterDialogDescriptionMetadata.a);
    };
    DataGridFilterDialogDescriptionMetadata.$t = markType(DataGridFilterDialogDescriptionMetadata, 'DataGridFilterDialogDescriptionMetadata');
    DataGridFilterDialogDescriptionMetadata.a = null;
    return DataGridFilterDialogDescriptionMetadata;
}(Base));
export { DataGridFilterDialogDescriptionMetadata };
