/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { CellInfoDescriptionMetadata } from "./CellInfoDescriptionMetadata";
import { NumericCellInfoDescription } from "./NumericCellInfoDescription";
/**
 * @hidden
 */
var NumericCellInfoDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NumericCellInfoDescriptionMetadata, _super);
    function NumericCellInfoDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumericCellInfoDescriptionMetadata.b = function (a) {
        if (NumericCellInfoDescriptionMetadata.a == null) {
            NumericCellInfoDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            NumericCellInfoDescriptionMetadata.c(NumericCellInfoDescriptionMetadata.a);
        }
        if (a.k(NumericCellInfoDescriptionMetadata.a)) {
            return;
        }
        a.ac(NumericCellInfoDescriptionMetadata.a);
    };
    NumericCellInfoDescriptionMetadata.c = function (a) {
        CellInfoDescriptionMetadata.c(a);
        a.item("NumericValue", "Number:double");
        a.item("HasDecimalValue", "Boolean");
        a.item("FormatStringOverride", "String");
        a.item("FormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("FormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("FormatOverrideRef", "(w:FormatOverride,wf:FormatOverride)DataRef");
        a.item("NegativePrefix", "String");
        a.item("PositivePrefix", "String");
        a.item("NegativeSuffix", "String");
        a.item("PositiveSuffix", "String");
        a.item("MaxFractionDigits", "Number:int");
        a.item("MinFractionDigits", "Number:int");
        a.item("MinIntegerDigits", "Number:int");
        a.item("ShowGroupingSeparator", "Boolean");
    };
    NumericCellInfoDescriptionMetadata.d = function (a) {
        NumericCellInfoDescriptionMetadata.b(a);
        a.ae("NumericCellInfo", function () { return new NumericCellInfoDescription(); });
        a.ad("NumericCellInfo", NumericCellInfoDescriptionMetadata.a);
    };
    NumericCellInfoDescriptionMetadata.$t = markType(NumericCellInfoDescriptionMetadata, 'NumericCellInfoDescriptionMetadata');
    NumericCellInfoDescriptionMetadata.a = null;
    return NumericCellInfoDescriptionMetadata;
}(Base));
export { NumericCellInfoDescriptionMetadata };
