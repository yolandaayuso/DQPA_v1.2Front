/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var DataChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DataChartDescription, _super);
    function DataChartDescription() {
        var _this = _super.call(this) || this;
        _this.h9 = false;
        _this.i1 = 0;
        _this.i2 = 0;
        _this.it = 0;
        _this.iu = 0;
        _this.h8 = false;
        _this.ia = false;
        _this.jm = null;
        _this.h7 = false;
        _this.iw = 0;
        _this.iv = 0;
        _this.id = false;
        _this.ib = false;
        _this.ic = false;
        _this.ie = false;
        _this.jh = null;
        _this.jl = null;
        _this.jj = null;
        _this.jk = null;
        _this.h5 = null;
        _this.iq = 0;
        _this.is = 0;
        _this.ir = 0;
        _this.ip = 0;
        _this.ji = null;
        _this.jo = null;
        _this.jp = null;
        _this.iy = 0;
        _this.i0 = 0;
        _this.iz = 0;
        _this.ix = 0;
        _this.jq = null;
        _this.jn = null;
        return _this;
    }
    DataChartDescription.prototype.get_type = function () {
        return "DataChart";
    };
    Object.defineProperty(DataChartDescription.prototype, "isSquare", {
        get: function () {
            return this.h9;
        },
        set: function (a) {
            this.h9 = a;
            this.g("IsSquare");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "windowScaleHorizontal", {
        get: function () {
            return this.i1;
        },
        set: function (a) {
            this.i1 = a;
            this.g("WindowScaleHorizontal");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "windowScaleVertical", {
        get: function () {
            return this.i2;
        },
        set: function (a) {
            this.i2 = a;
            this.g("WindowScaleVertical");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualWindowScaleHorizontal", {
        get: function () {
            return this.it;
        },
        set: function (a) {
            this.it = a;
            this.g("ActualWindowScaleHorizontal");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualWindowScaleVertical", {
        get: function () {
            return this.iu;
        },
        set: function (a) {
            this.iu = a;
            this.g("ActualWindowScaleVertical");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "isHorizontalZoomEnabled", {
        get: function () {
            return this.h8;
        },
        set: function (a) {
            this.h8 = a;
            this.g("IsHorizontalZoomEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "isVerticalZoomEnabled", {
        get: function () {
            return this.ia;
        },
        set: function (a) {
            this.ia = a;
            this.g("IsVerticalZoomEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "gridMode", {
        get: function () {
            return this.jm;
        },
        set: function (a) {
            this.jm = a;
            this.g("GridMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "alignsGridLinesToPixels", {
        get: function () {
            return this.h7;
        },
        set: function (a) {
            this.h7 = a;
            this.g("AlignsGridLinesToPixels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoExpandMarginMaximumValue", {
        get: function () {
            return this.iw;
        },
        set: function (a) {
            this.iw = a;
            this.g("AutoExpandMarginMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoExpandMarginExtraPadding", {
        get: function () {
            return this.iv;
        },
        set: function (a) {
            this.iv = a;
            this.g("AutoExpandMarginExtraPadding");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "shouldSuppressAxisLabelTruncation", {
        get: function () {
            return this.id;
        },
        set: function (a) {
            this.id = a;
            this.g("ShouldSuppressAxisLabelTruncation");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "shouldAutoExpandMarginForInitialLabels", {
        get: function () {
            return this.ib;
        },
        set: function (a) {
            this.ib = a;
            this.g("ShouldAutoExpandMarginForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "shouldConsiderAutoRotationForInitialLabels", {
        get: function () {
            return this.ic;
        },
        set: function (a) {
            this.ic = a;
            this.g("ShouldConsiderAutoRotationForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "suppressAutoMarginAndAngleRecalculation", {
        get: function () {
            return this.ie;
        },
        set: function (a) {
            this.ie = a;
            this.g("SuppressAutoMarginAndAngleRecalculation");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoMarginAndAngleUpdateMode", {
        get: function () {
            return this.jh;
        },
        set: function (a) {
            this.jh = a;
            this.g("AutoMarginAndAngleUpdateMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisStroke", {
        get: function () {
            return this.jl;
        },
        set: function (a) {
            this.jl = a;
            this.g("DefaultAxisStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisMajorStroke", {
        get: function () {
            return this.jj;
        },
        set: function (a) {
            this.jj = a;
            this.g("DefaultAxisMajorStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisMinorStroke", {
        get: function () {
            return this.jk;
        },
        set: function (a) {
            this.jk = a;
            this.g("DefaultAxisMinorStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "axes", {
        get: function () {
            return this.h5;
        },
        set: function (a) {
            this.h5 = a;
            this.g("Axes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginLeft", {
        get: function () {
            return this.iq;
        },
        set: function (a) {
            this.iq = a;
            this.g("ActualPlotAreaMarginLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginTop", {
        get: function () {
            return this.is;
        },
        set: function (a) {
            this.is = a;
            this.g("ActualPlotAreaMarginTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginRight", {
        get: function () {
            return this.ir;
        },
        set: function (a) {
            this.ir = a;
            this.g("ActualPlotAreaMarginRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginBottom", {
        get: function () {
            return this.ip;
        },
        set: function (a) {
            this.ip = a;
            this.g("ActualPlotAreaMarginBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "computedPlotAreaMarginMode", {
        get: function () {
            return this.ji;
        },
        set: function (a) {
            this.ji = a;
            this.g("ComputedPlotAreaMarginMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "seriesPlotAreaMarginHorizontalMode", {
        get: function () {
            return this.jo;
        },
        set: function (a) {
            this.jo = a;
            this.g("SeriesPlotAreaMarginHorizontalMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "seriesPlotAreaMarginVerticalMode", {
        get: function () {
            return this.jp;
        },
        set: function (a) {
            this.jp = a;
            this.g("SeriesPlotAreaMarginVerticalMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginLeft", {
        get: function () {
            return this.iy;
        },
        set: function (a) {
            this.iy = a;
            this.g("PlotAreaMarginLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginTop", {
        get: function () {
            return this.i0;
        },
        set: function (a) {
            this.i0 = a;
            this.g("PlotAreaMarginTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginRight", {
        get: function () {
            return this.iz;
        },
        set: function (a) {
            this.iz = a;
            this.g("PlotAreaMarginRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginBottom", {
        get: function () {
            return this.ix;
        },
        set: function (a) {
            this.ix = a;
            this.g("PlotAreaMarginBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "width", {
        get: function () {
            return this.jq;
        },
        set: function (a) {
            this.jq = a;
            this.g("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "height", {
        get: function () {
            return this.jn;
        },
        set: function (a) {
            this.jn = a;
            this.g("Height");
        },
        enumerable: false,
        configurable: true
    });
    DataChartDescription.$t = markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
}(SeriesViewerDescription));
export { DataChartDescription };
