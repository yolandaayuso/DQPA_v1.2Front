/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var FunnelChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FunnelChartDescription, _super);
    function FunnelChartDescription() {
        var _this = _super.call(this) || this;
        _this.as = null;
        _this.bh = null;
        _this.aw = null;
        _this.x = 0;
        _this.z = 0;
        _this.ar = null;
        _this.ax = null;
        _this.h = null;
        _this.i = null;
        _this.y = 0;
        _this.ay = null;
        _this.a2 = null;
        _this.az = null;
        _this.a5 = null;
        _this.a1 = null;
        _this.av = null;
        _this.at = null;
        _this.au = null;
        _this.ap = 0;
        _this.o = false;
        _this.p = false;
        _this.n = false;
        _this.r = false;
        _this.a7 = null;
        _this.a8 = null;
        _this.ad = 0;
        _this.ac = 0;
        _this.bf = null;
        _this.bg = null;
        _this.af = 0;
        _this.ae = 0;
        _this.j = null;
        _this.a0 = null;
        _this.q = false;
        _this.be = null;
        _this.a4 = null;
        _this.aa = 0;
        _this.ab = 0;
        _this.a3 = null;
        _this.bd = null;
        _this.a6 = null;
        _this.a9 = null;
        _this.ba = null;
        _this.bc = null;
        _this.bb = null;
        return _this;
    }
    FunnelChartDescription.prototype.get_type = function () {
        return "FunnelChart";
    };
    Object.defineProperty(FunnelChartDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "dataSourceRef", {
        get: function () {
            return this.as;
        },
        set: function (a) {
            this.as = a;
            this.g("DataSourceRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "valueMemberPath", {
        get: function () {
            return this.bh;
        },
        set: function (a) {
            this.bh = a;
            this.g("ValueMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "highlightedValueMemberPath", {
        get: function () {
            return this.aw;
        },
        set: function (a) {
            this.aw = a;
            this.g("HighlightedValueMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "actualHighlightValueOpacity", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            this.x = a;
            this.g("ActualHighlightValueOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "highlightValueOpacity", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.g("HighlightValueOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "actualHighlightValueDisplayMode", {
        get: function () {
            return this.ar;
        },
        set: function (a) {
            this.ar = a;
            this.g("ActualHighlightValueDisplayMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "highlightValueDisplayMode", {
        get: function () {
            return this.ax;
        },
        set: function (a) {
            this.ax = a;
            this.g("HighlightValueDisplayMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "brushes", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.g("Brushes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outlines", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.g("Outlines");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "bottomEdgeWidth", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
            this.g("BottomEdgeWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "innerLabelMemberPath", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            this.ay = a;
            this.g("InnerLabelMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outerLabelMemberPath", {
        get: function () {
            return this.a2;
        },
        set: function (a) {
            this.a2 = a;
            this.g("OuterLabelMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "innerLabelVisibility", {
        get: function () {
            return this.az;
        },
        set: function (a) {
            this.az = a;
            this.g("InnerLabelVisibility");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outerLabelVisibility", {
        get: function () {
            return this.a5;
        },
        set: function (a) {
            this.a5 = a;
            this.g("OuterLabelVisibility");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outerLabelAlignment", {
        get: function () {
            return this.a1;
        },
        set: function (a) {
            this.a1 = a;
            this.g("OuterLabelAlignment");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "funnelSliceDisplay", {
        get: function () {
            return this.av;
        },
        set: function (a) {
            this.av = a;
            this.g("FunnelSliceDisplay");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "formatInnerLabelRef", {
        get: function () {
            return this.at;
        },
        set: function (a) {
            this.at = a;
            this.g("FormatInnerLabelRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "formatOuterLabelRef", {
        get: function () {
            return this.au;
        },
        set: function (a) {
            this.au = a;
            this.g("FormatOuterLabelRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "transitionDuration", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.g("TransitionDuration");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "isInverted", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.g("IsInverted");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "useBezierCurve", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.g("UseBezierCurve");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "allowSliceSelection", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.g("AllowSliceSelection");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "useUnselectedStyle", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.g("UseUnselectedStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "selectedSliceFill", {
        get: function () {
            return this.a7;
        },
        set: function (a) {
            this.a7 = a;
            this.g("SelectedSliceFill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "selectedSliceStroke", {
        get: function () {
            return this.a8;
        },
        set: function (a) {
            this.a8 = a;
            this.g("SelectedSliceStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "selectedSliceStrokeThickness", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
            this.g("SelectedSliceStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "selectedSliceOpacity", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
            this.g("SelectedSliceOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "unselectedSliceFill", {
        get: function () {
            return this.bf;
        },
        set: function (a) {
            this.bf = a;
            this.g("UnselectedSliceFill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "unselectedSliceStroke", {
        get: function () {
            return this.bg;
        },
        set: function (a) {
            this.bg = a;
            this.g("UnselectedSliceStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "unselectedSliceStrokeThickness", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            this.af = a;
            this.g("UnselectedSliceStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "unselectedSliceOpacity", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
            this.g("UnselectedSliceOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "selectedItems", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.g("SelectedItems");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "legendItemBadgeTemplateRef", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            this.a0 = a;
            this.g("LegendItemBadgeTemplateRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "useOuterLabelsForLegend", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.g("UseOuterLabelsForLegend");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "textStyle", {
        get: function () {
            return this.be;
        },
        set: function (a) {
            this.be = a;
            this.g("TextStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outerLabelTextStyle", {
        get: function () {
            return this.a4;
        },
        set: function (a) {
            this.a4 = a;
            this.g("OuterLabelTextStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outlineThickness", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
            this.g("OutlineThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "pixelScalingRatio", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.g("PixelScalingRatio");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outerLabelTextColor", {
        get: function () {
            return this.a3;
        },
        set: function (a) {
            this.a3 = a;
            this.g("OuterLabelTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "textColor", {
        get: function () {
            return this.bd;
        },
        set: function (a) {
            this.bd = a;
            this.g("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "selectedItemsChangedRef", {
        get: function () {
            return this.a6;
        },
        set: function (a) {
            this.a6 = a;
            this.g("SelectedItemsChangedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "sliceClickedRef", {
        get: function () {
            return this.a9;
        },
        set: function (a) {
            this.a9 = a;
            this.g("SliceClickedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "sliceEnterRef", {
        get: function () {
            return this.ba;
        },
        set: function (a) {
            this.ba = a;
            this.g("SliceEnterRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "sliceLeaveRef", {
        get: function () {
            return this.bc;
        },
        set: function (a) {
            this.bc = a;
            this.g("SliceLeaveRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "sliceHoverRef", {
        get: function () {
            return this.bb;
        },
        set: function (a) {
            this.bb = a;
            this.g("SliceHoverRef");
        },
        enumerable: false,
        configurable: true
    });
    FunnelChartDescription.$t = markType(FunnelChartDescription, 'FunnelChartDescription', Description.$);
    return FunnelChartDescription;
}(Description));
export { FunnelChartDescription };
