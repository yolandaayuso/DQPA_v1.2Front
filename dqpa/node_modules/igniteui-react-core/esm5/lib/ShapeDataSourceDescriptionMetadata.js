/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AsyncCompletedEventArgsDescriptionMetadata } from "./AsyncCompletedEventArgsDescriptionMetadata";
import { ShapeFilterRecordEventArgsDescriptionMetadata } from "./ShapeFilterRecordEventArgsDescriptionMetadata";
import { ShapeDataSourceDescription } from "./ShapeDataSourceDescription";
/**
 * @hidden
 */
var ShapeDataSourceDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ShapeDataSourceDescriptionMetadata, _super);
    function ShapeDataSourceDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShapeDataSourceDescriptionMetadata.b = function (a) {
        if (ShapeDataSourceDescriptionMetadata.a == null) {
            ShapeDataSourceDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ShapeDataSourceDescriptionMetadata.c(ShapeDataSourceDescriptionMetadata.a);
        }
        if (a.k(ShapeDataSourceDescriptionMetadata.a)) {
            return;
        }
        a.ac(ShapeDataSourceDescriptionMetadata.a);
        AsyncCompletedEventArgsDescriptionMetadata.d(a);
        ShapeFilterRecordEventArgsDescriptionMetadata.d(a);
    };
    ShapeDataSourceDescriptionMetadata.c = function (a) {
        a.item("WorldRect", "Rect");
        a.item("ComputedWorldRect", "Rect");
        a.item("DeferImportCompleted", "Boolean");
        a.item("ShapefileSource", "String");
        a.item("DatabaseSource", "String");
        a.item("ImportPendingRef", "EventRef::importPending");
        a.item("ImportCompletedRef", "EventRef::importCompleted");
        a.item("FilterRef", "EventRef::filter");
    };
    ShapeDataSourceDescriptionMetadata.d = function (a) {
        ShapeDataSourceDescriptionMetadata.b(a);
        a.ae("ShapeDataSource", function () { return new ShapeDataSourceDescription(); });
        a.ad("ShapeDataSource", ShapeDataSourceDescriptionMetadata.a);
    };
    ShapeDataSourceDescriptionMetadata.$t = markType(ShapeDataSourceDescriptionMetadata, 'ShapeDataSourceDescriptionMetadata');
    ShapeDataSourceDescriptionMetadata.a = null;
    return ShapeDataSourceDescriptionMetadata;
}(Base));
export { ShapeDataSourceDescriptionMetadata };
