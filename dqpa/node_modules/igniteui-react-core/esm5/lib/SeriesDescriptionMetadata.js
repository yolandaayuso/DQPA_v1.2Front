/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { TransitionOutCompletedEventArgsDescriptionMetadata } from "./TransitionOutCompletedEventArgsDescriptionMetadata";
import { RenderRequestedEventArgsDescriptionMetadata } from "./RenderRequestedEventArgsDescriptionMetadata";
/**
 * @hidden
 */
var SeriesDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SeriesDescriptionMetadata, _super);
    function SeriesDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SeriesDescriptionMetadata.b = function (a) {
        if (SeriesDescriptionMetadata.a == null) {
            SeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            SeriesDescriptionMetadata.c(SeriesDescriptionMetadata.a);
        }
        if (a.k(SeriesDescriptionMetadata.a)) {
            return;
        }
        a.ac(SeriesDescriptionMetadata.a);
        TransitionOutCompletedEventArgsDescriptionMetadata.d(a);
        RenderRequestedEventArgsDescriptionMetadata.d(a);
    };
    SeriesDescriptionMetadata.c = function (a) {
        a.item("DataLegendGroup", "String");
        a.item("HighlightedValuesDataLegendGroup", "String");
        a.item("HighlightedValuesExtraPropertyOverlays", "Collection:SeriesLayerPropertyOverlay:SeriesLayerPropertyOverlayCollection:SeriesLayerPropertyOverlay");
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)DataRef::object");
        a.item("HighlightedDataSourceRef", "(w:HighlightedItemsSource,xam:HighlightedItemsSource,wf:HighlightedDataSource)DataRef::object");
        a.item("LegendRef", "(w:Legend,wf:Legend)DataRef::object");
        a.item("LegendItemVisibility", "ExportedType:string:Visibility");
        a.item("LegendItemVisibility@names", "Visible;Collapsed");
        a.item("LegendItemBadgeTemplateRef", "(w:LegendItemBadgeTemplate,wf:LegendItemBadgeTemplate)DataRef::object");
        a.item("ActualLegendItemBadgeTemplateRef", "(w:ActualLegendItemBadgeTemplate,wf:ActualLegendItemBadgeTemplate)DataRef::object");
        a.item("ActualLegendItemBadgeOutline", "Brush");
        a.item("ActualLegendItemBadgeBrush", "Brush");
        a.item("LegendItemBadgeShape", "ExportedType:string:LegendItemBadgeShape");
        a.item("LegendItemBadgeShape@names", "Automatic;Circle;Line;Square;Marker;Bar;Column;Hidden");
        a.item("LegendItemBadgeMode", "ExportedType:string:LegendItemBadgeMode");
        a.item("LegendItemBadgeMode@names", "Simplified;MatchSeries");
        a.item("LegendItemTemplateRef", "(w:LegendItemTemplate,wf:LegendItemTemplate)DataRef::object");
        a.item("DiscreteLegendItemTemplateRef", "(w:DiscreteLegendItemTemplate,wf:DiscreteLegendItemTemplate)DataRef::object");
        a.item("Index", "Number:int");
        a.item("TransitionEasingFunctionRef", "(w:TransitionEasingFunction,wf:TransitionEasingFunction)MethodRef");
        a.item("TransitionInEasingFunctionRef", "(w:TransitionInEasingFunction,wf:TransitionInEasingFunction)MethodRef");
        a.item("TransitionOutEasingFunctionRef", "(w:TransitionOutEasingFunction,wf:TransitionOutEasingFunction)MethodRef");
        a.item("TransitionDuration", "Number:int");
        a.item("ActualResolution", "Number:double");
        a.item("Resolution", "Number:double");
        a.item("VisibleRangeMarginTop", "Number:double");
        a.item("VisibleRangeMarginBottom", "Number:double");
        a.item("VisibleRangeMarginLeft", "Number:double");
        a.item("VisibleRangeMarginRight", "Number:double");
        a.item("HighlightedTitleSuffix", "String");
        a.item("HighlightedLegendItemVisibility", "ExportedType:string:Visibility");
        a.item("HighlightedLegendItemVisibility@names", "Visible;Collapsed");
        a.item("Brush", "Brush");
        a.item("ActualBrush", "Brush");
        a.item("SelectionBrush", "Brush");
        a.item("FocusBrush", "Brush");
        a.item("ActualSelectionBrush", "Brush");
        a.item("ActualFocusBrush", "Brush");
        a.item("SafeActualBrush", "Brush");
        a.item("Outline", "Brush");
        a.item("ActualOutline", "Brush");
        a.item("LineJoin", "ExportedType:string:PenLineJoin");
        a.item("LineJoin@names", "Miter;Bevel;Round");
        a.item("HighlightedValuesDisplayMode", "ExportedType:string:SeriesHighlightedValuesDisplayMode");
        a.item("HighlightedValuesDisplayMode@names", "Auto;Hidden;Overlay");
        a.item("ShouldAnimateOnDataSourceSwap", "Boolean");
        a.item("Thickness", "Number:double");
        a.item("ActualThickness", "Number:double");
        a.item("DashArray", "DoubleCollection:double");
        a.item("ActualHighlightingMode", "ExportedType:string:SeriesHighlightingMode");
        a.item("ActualHighlightingMode@names", "Auto;None;BrightenSpecific;Brighten;FadeOthersSpecific;FadeOthers");
        a.item("ActualSelectionMode", "ExportedType:string:SeriesSelectionMode");
        a.item("ActualSelectionMode@names", "Auto;None;Brighten;FadeOthers;GrayscaleOthers;FocusColorThickOutline;FocusColorOutline;SelectionColorThickOutline;SelectionColorOutline;FocusColorFill;SelectionColorFill;ThickOutline");
        a.item("ActualFocusMode", "ExportedType:string:SeriesSelectionMode");
        a.item("ActualFocusMode@names", "Auto;None;Brighten;FadeOthers;GrayscaleOthers;FocusColorThickOutline;FocusColorOutline;SelectionColorThickOutline;SelectionColorOutline;FocusColorFill;SelectionColorFill;ThickOutline");
        a.item("ActualHighlightedValuesFadeOpacity", "Number:double");
        a.item("HighlightedValuesFadeOpacity", "Number:double");
        a.item("ActualHighlightingFadeOpacity", "Number:double");
        a.item("HighlightingFadeOpacity", "Number:double");
        a.item("IsActualLegendFinancial", "Boolean");
        a.item("IsComponentHighlightingModeIgnored", "Boolean");
        a.item("IsHighlightingEnabled", "Boolean");
        a.item("UseItemWiseColors", "Boolean");
        a.item("ShouldShiftOpacityForSafeActualBrush", "Boolean");
        a.item("ShouldRemoveHighlightedDataOnLayerHidden", "Boolean");
        a.item("ShouldHideAutoCallouts", "Boolean");
        a.item("IsDropShadowEnabled", "Boolean");
        a.item("ShadowBlur", "Number:double");
        a.item("ShadowColor", "Color");
        a.item("UseSingleShadow", "Boolean");
        a.item("ShadowOffsetX", "Number:double");
        a.item("ShadowOffsetY", "Number:double");
        a.item("AreaFillOpacity", "Number:double");
        a.item("ActualAreaFillOpacity", "Number:double");
        a.item("MarkerFillOpacity", "Number:double");
        a.item("ActualMarkerFillOpacity", "Number:double");
        a.item("IsDefaultToolTipSelected", "Boolean");
        a.item("ShowDefaultTooltip", "Boolean");
        a.item("VisibleRangeMode", "ExportedType:string:SeriesVisibleRangeMode");
        a.item("VisibleRangeMode@names", "Auto;ValuesOnly;IncludeReferenceValue");
        a.item("OutlineMode", "ExportedType:string:SeriesOutlineMode");
        a.item("OutlineMode@names", "Auto;Visible;Collapsed");
        a.item("TransitionInDuration", "Number:int");
        a.item("TransitionOutDuration", "Number:int");
        a.item("TransitionInSpeedType", "ExportedType:string:TransitionInSpeedType");
        a.item("TransitionInSpeedType@names", "Auto;Normal;ValueScaled;IndexScaled;Random");
        a.item("TransitionOutSpeedType", "ExportedType:string:TransitionOutSpeedType");
        a.item("TransitionOutSpeedType@names", "Auto;Normal;ValueScaled;IndexScaled;Random");
        a.item("LineCap", "ExportedType:string:PenLineCap");
        a.item("LineCap@names", "Flat;Square;Round;Triangle");
        a.item("AutoCalloutLabelFormat", "String");
        a.item("AutoCalloutLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("AutoCalloutLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("AutoCalloutValueLabelFormat", "String");
        a.item("AutoCalloutValueLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("AutoCalloutValueLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("MouseOverEnabled", "Boolean");
        a.item("CoercionMethodsRef", "(w:CoercionMethods,wf:CoercionMethods)DataRef");
        a.item("ExpectFunctions", "Boolean");
        a.item("HitTestMode", "ExportedType:string:SeriesHitTestMode");
        a.item("HitTestMode@names", "Auto;Computational;ColorEncoded");
        a.item("ActualHitTestMode", "ExportedType:string:SeriesHitTestMode");
        a.item("ActualHitTestMode@names", "Auto;Computational;ColorEncoded");
        a.item("FinalValue", "Number:double");
        a.item("PercentChange", "Number:double");
        a.item("Layers", "Collection:SeriesLayer:SeriesLayerCollection:SeriesLayer");
        a.item("ActualLayers", "Collection:SeriesLayer:SeriesLayerCollection:SeriesLayer");
        a.item("Opacity", "Number:double");
        a.item("Visibility", "ExportedType:string:Visibility");
        a.item("Visibility@names", "Visible;Collapsed");
        a.item("TransitionOutCompletedRef", "EventRef::transitionOutCompleted");
        a.item("RenderRequestedRef", "EventRef::renderRequested");
        SeriesDescriptionMetadata.e(a);
    };
    SeriesDescriptionMetadata.d = function (a) {
        SeriesDescriptionMetadata.b(a);
        a.ad("Series", SeriesDescriptionMetadata.a);
    };
    SeriesDescriptionMetadata.e = function (a) {
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource)DataRef:String");
        a.item("Title", "String");
        a.item("TooltipTemplateRef", "(w:ToolTip)DataRef:String");
    };
    SeriesDescriptionMetadata.$t = markType(SeriesDescriptionMetadata, 'SeriesDescriptionMetadata');
    SeriesDescriptionMetadata.a = null;
    return SeriesDescriptionMetadata;
}(Base));
export { SeriesDescriptionMetadata };
