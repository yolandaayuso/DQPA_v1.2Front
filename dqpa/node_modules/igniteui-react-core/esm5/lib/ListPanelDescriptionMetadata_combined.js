/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ListPanelSelectedItemsChangedEventArgsDescriptionMetadata } from "./ListPanelSelectedItemsChangedEventArgsDescriptionMetadata";
import { ListPanelSelectedKeysChangedEventArgsDescriptionMetadata } from "./ListPanelSelectedKeysChangedEventArgsDescriptionMetadata";
import { ListPanelSelectionChangedEventArgsDescriptionMetadata } from "./ListPanelSelectionChangedEventArgsDescriptionMetadata";
import { ListPanelActiveRowChangedEventArgsDescriptionMetadata } from "./ListPanelActiveRowChangedEventArgsDescriptionMetadata";
import { ListPanelContentRefreshedEventArgsDescriptionMetadata } from "./ListPanelContentRefreshedEventArgsDescriptionMetadata";
import { ListPanelTemplateItemUpdatingEventArgsDescriptionMetadata } from "./ListPanelTemplateItemUpdatingEventArgsDescriptionMetadata";
import { ListPanelTemplateWidthRequestedEventArgsDescriptionMetadata } from "./ListPanelTemplateWidthRequestedEventArgsDescriptionMetadata";
import { ListPanelTemplateHeightRequestedEventArgsDescriptionMetadata } from "./ListPanelTemplateHeightRequestedEventArgsDescriptionMetadata";
import { ListPanelDescription } from "./ListPanelDescription";
import { ListPanelItemModelDescriptionMetadata } from "./ListPanelItemModelDescriptionMetadata";
import { ListPanelItemEventArgsDescription } from "./ListPanelItemEventArgsDescription";
/**
 * @hidden
 */
var ListPanelDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ListPanelDescriptionMetadata, _super);
    function ListPanelDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ListPanelDescriptionMetadata.b = function (a) {
        if (ListPanelDescriptionMetadata.a == null) {
            ListPanelDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ListPanelDescriptionMetadata.c(ListPanelDescriptionMetadata.a);
        }
        if (a.k(ListPanelDescriptionMetadata.a)) {
            return;
        }
        a.ac(ListPanelDescriptionMetadata.a);
        ListPanelSelectedItemsChangedEventArgsDescriptionMetadata.d(a);
        ListPanelSelectedKeysChangedEventArgsDescriptionMetadata.d(a);
        ListPanelSelectionChangedEventArgsDescriptionMetadata.d(a);
        ListPanelActiveRowChangedEventArgsDescriptionMetadata.d(a);
        ListPanelContentRefreshedEventArgsDescriptionMetadata.d(a);
        ListPanelTemplateItemUpdatingEventArgsDescriptionMetadata.d(a);
        ListPanelTemplateWidthRequestedEventArgsDescriptionMetadata.d(a);
        ListPanelTemplateHeightRequestedEventArgsDescriptionMetadata.d(a);
        ListPanelItemEventArgsDescriptionMetadata.d(a);
    };
    ListPanelDescriptionMetadata.c = function (a) {
        a.item("SelectionMode", "ExportedType:string:ListPanelSelectionMode");
        a.item("SelectionMode@names", "None;SingleRow;MultipleRow");
        a.item("IsActiveRowStyleEnabled", "Boolean");
        a.item("SelectedBackground", "Brush");
        a.item("NormalBackground", "Brush");
        a.item("ActivationBorder", "Brush");
        a.item("ActivationBorderLeftWidth", "Number:int");
        a.item("ActivationBorderTopWidth", "Number:int");
        a.item("ActivationBorderRightWidth", "Number:int");
        a.item("ActivationBorderBottomWidth", "Number:int");
        a.item("ActivationMode", "ExportedType:string:ListPanelActivationMode");
        a.item("ActivationMode@names", "None;Cell");
        a.item("SelectionBehavior", "ExportedType:string:ListPanelSelectionBehavior");
        a.item("SelectionBehavior@names", "Toggle;ModifierBased");
        a.item("PrimaryKey", "Array:string");
        a.item("ActualPrimaryKey", "Array:string");
        a.item("SelectedItems", "Collection:object:ListPanelSelectedItemsCollection:Object");
        a.item("SelectedKeys", "Collection:ListPanelPrimaryKeyValue:ListPanelSelectedKeysCollection:ListPanelPrimaryKeyValue");
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)DataRef::object");
        a.item("DataSource", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)ExportedType:BaseDataSource:BaseDataSource");
        a.item("SchemaIncludedProperties", "Array:string");
        a.item("RowHeight", "Number:int");
        a.item("ActualRowHeight", "Number:double");
        a.item("CellFontFamily", "(w:CellFontFamily/FontFamilyTransform,xam:CellFontFamily,wf:CellFontFamily,web:cellTextStyle/FontFamilyTransform)String");
        a.item("CellFontSize", "(w:CellFontSize,xam:CellFontSize,wf:CellFontSize,web:cellTextStyle/FontSizeTransform)Number:double");
        a.item("CellFontStyle", "(w:CellFontStyle/FontStyleTransform,xam:CellFontFamily/FontStyleTransform,wf:CellFontFamily/FontStyleTransform,web:cellTextStyle/FontStyleTransform)String");
        a.item("CellFontWeight", "(w:CellFontWeight/FontWeightTransform,xam:CellFontFamily/FontWeightTransform,wf:CellFontFamily/FontWeightTransform,web:cellTextStyle/FontWeightTransform)String");
        a.item("ScrollbarStyle", "ExportedType:string:ScrollbarStyle");
        a.item("ScrollbarStyle@names", "Default;Fading;Thin");
        a.item("ScrollbarBackground", "Brush");
        a.item("BackgroundColor", "Brush");
        a.item("Orientation", "ExportedType:string:ListPanelOrientation");
        a.item("Orientation@names", "Vertical;Horizontal;HorizontalWrapped");
        a.item("IsCustomRowHeightEnabled", "Boolean");
        a.item("TextColor", "Brush");
        a.item("ActiveRow", "Number:int");
        a.item("NotifyOnAllSelectionChanges", "Boolean");
        a.item("SelectedItemsChangedRef", "EventRef::selectedItemsChanged");
        a.item("SelectedKeysChangedRef", "EventRef::selectedKeysChanged");
        a.item("SelectionChangedRef", "EventRef::selectionChanged");
        a.item("ActiveRowChangedRef", "EventRef::activeRowChanged");
        a.item("ContentRefreshedRef", "EventRef::contentRefreshed");
        a.item("RowUpdatingRef", "EventRef::rowUpdating");
        a.item("ItemWidthRequestedRef", "EventRef::itemWidthRequested");
        a.item("ItemHeightRequestedRef", "EventRef::itemHeightRequested");
        a.item("ItemClickedRef", "EventRef::itemClicked");
        a.item("ActualPrimaryKeyChangeRef", "EventRef::actualPrimaryKeyChange");
    };
    ListPanelDescriptionMetadata.d = function (a) {
        ListPanelDescriptionMetadata.b(a);
        a.ae("ListPanel", function () { return new ListPanelDescription(); });
        a.ad("ListPanel", ListPanelDescriptionMetadata.a);
    };
    ListPanelDescriptionMetadata.$t = markType(ListPanelDescriptionMetadata, 'ListPanelDescriptionMetadata');
    ListPanelDescriptionMetadata.a = null;
    return ListPanelDescriptionMetadata;
}(Base));
export { ListPanelDescriptionMetadata };
/**
 * @hidden
 */
var ListPanelItemEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ListPanelItemEventArgsDescriptionMetadata, _super);
    function ListPanelItemEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ListPanelItemEventArgsDescriptionMetadata.b = function (a) {
        if (ListPanelItemEventArgsDescriptionMetadata.a == null) {
            ListPanelItemEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ListPanelItemEventArgsDescriptionMetadata.c(ListPanelItemEventArgsDescriptionMetadata.a);
        }
        if (a.k(ListPanelItemEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(ListPanelItemEventArgsDescriptionMetadata.a);
        ListPanelItemModelDescriptionMetadata.d(a);
        ListPanelDescriptionMetadata.d(a);
    };
    ListPanelItemEventArgsDescriptionMetadata.c = function (a) {
        a.item("ItemInfo", "ExportedType:ListPanelItemModel");
        a.item("ListPanel", "ExportedType:ListPanel");
        a.item("IsLeftButton", "Boolean");
        a.item("IsDoubleClick", "Boolean");
    };
    ListPanelItemEventArgsDescriptionMetadata.d = function (a) {
        ListPanelItemEventArgsDescriptionMetadata.b(a);
        a.ae("ListPanelItemEventArgs", function () { return new ListPanelItemEventArgsDescription(); });
        a.ad("ListPanelItemEventArgs", ListPanelItemEventArgsDescriptionMetadata.a);
    };
    ListPanelItemEventArgsDescriptionMetadata.$t = markType(ListPanelItemEventArgsDescriptionMetadata, 'ListPanelItemEventArgsDescriptionMetadata');
    ListPanelItemEventArgsDescriptionMetadata.a = null;
    return ListPanelItemEventArgsDescriptionMetadata;
}(Base));
export { ListPanelItemEventArgsDescriptionMetadata };
