/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ToolActionInfo } from "./ToolActionInfo";
import { markType } from "./type";
/**
 * @hidden
 */
var ToolActionComboInfo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolActionComboInfo, _super);
    function ToolActionComboInfo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._itemsSource = null;
        _this._displayMemberPath = null;
        _this._valueMemberPath = null;
        _this._selectedValues = null;
        return _this;
    }
    ToolActionComboInfo.prototype.get_d = function () {
        return 13;
    };
    Object.defineProperty(ToolActionComboInfo.prototype, "itemsSource", {
        get: function () {
            return this._itemsSource;
        },
        set: function (a) {
            this._itemsSource = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionComboInfo.prototype, "displayMemberPath", {
        get: function () {
            return this._displayMemberPath;
        },
        set: function (a) {
            this._displayMemberPath = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionComboInfo.prototype, "valueMemberPath", {
        get: function () {
            return this._valueMemberPath;
        },
        set: function (a) {
            this._valueMemberPath = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionComboInfo.prototype, "selectedValues", {
        get: function () {
            return this._selectedValues;
        },
        set: function (a) {
            this._selectedValues = a;
        },
        enumerable: false,
        configurable: true
    });
    ToolActionComboInfo.$t = markType(ToolActionComboInfo, 'ToolActionComboInfo', ToolActionInfo.$);
    return ToolActionComboInfo;
}(ToolActionInfo));
export { ToolActionComboInfo };
