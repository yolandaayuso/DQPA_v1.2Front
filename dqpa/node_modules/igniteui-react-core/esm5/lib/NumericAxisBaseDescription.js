/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { AxisDescription } from "./AxisDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var NumericAxisBaseDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NumericAxisBaseDescription, _super);
    function NumericAxisBaseDescription() {
        var _this = _super.call(this) || this;
        _this.ey = null;
        _this.d9 = 0;
        _this.d3 = 0;
        _this.d6 = 0;
        _this.d8 = 0;
        _this.d2 = 0;
        _this.d5 = 0;
        _this.d7 = 0;
        _this.d1 = 0;
        _this.en = 0;
        _this.ep = 0;
        _this.du = false;
        _this.ea = 0;
        _this.d4 = 0;
        _this.eb = 0;
        _this.dt = false;
        _this.dq = false;
        _this.dr = false;
        _this.eo = 0;
        _this.ez = null;
        _this.et = null;
        _this.dm = null;
        _this.ds = false;
        _this.dp = false;
        _this.ew = null;
        _this.ev = null;
        _this.eu = null;
        _this.ex = null;
        return _this;
    }
    NumericAxisBaseDescription.prototype.get_type = function () {
        return "NumericAxisBase";
    };
    Object.defineProperty(NumericAxisBaseDescription.prototype, "autoRangeBufferMode", {
        get: function () {
            return this.ey;
        },
        set: function (a) {
            this.ey = a;
            this.g("AutoRangeBufferMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "minimumValue", {
        get: function () {
            return this.d9;
        },
        set: function (a) {
            this.d9 = a;
            this.g("MinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMinimumValue", {
        get: function () {
            return this.d3;
        },
        set: function (a) {
            this.d3 = a;
            this.g("ActualMinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualVisibleMinimumValue", {
        get: function () {
            return this.d6;
        },
        set: function (a) {
            this.d6 = a;
            this.g("ActualVisibleMinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "maximumValue", {
        get: function () {
            return this.d8;
        },
        set: function (a) {
            this.d8 = a;
            this.g("MaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMaximumValue", {
        get: function () {
            return this.d2;
        },
        set: function (a) {
            this.d2 = a;
            this.g("ActualMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualVisibleMaximumValue", {
        get: function () {
            return this.d5;
        },
        set: function (a) {
            this.d5 = a;
            this.g("ActualVisibleMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "interval", {
        get: function () {
            return this.d7;
        },
        set: function (a) {
            this.d7 = a;
            this.g("Interval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualInterval", {
        get: function () {
            return this.d1;
        },
        set: function (a) {
            this.d1 = a;
            this.g("ActualInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMaxPrecision", {
        get: function () {
            return this.en;
        },
        set: function (a) {
            this.en = a;
            this.g("ActualMaxPrecision");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "maxPrecision", {
        get: function () {
            return this.ep;
        },
        set: function (a) {
            this.ep = a;
            this.g("MaxPrecision");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "shouldApplyMaxPrecisionWhenZoomed", {
        get: function () {
            return this.du;
        },
        set: function (a) {
            this.du = a;
            this.g("ShouldApplyMaxPrecisionWhenZoomed");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "minorInterval", {
        get: function () {
            return this.ea;
        },
        set: function (a) {
            this.ea = a;
            this.g("MinorInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMinorInterval", {
        get: function () {
            return this.d4;
        },
        set: function (a) {
            this.d4 = a;
            this.g("ActualMinorInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "referenceValue", {
        get: function () {
            return this.eb;
        },
        set: function (a) {
            this.eb = a;
            this.g("ReferenceValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "isLogarithmic", {
        get: function () {
            return this.dt;
        },
        set: function (a) {
            this.dt = a;
            this.g("IsLogarithmic");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualIsLogarithmic", {
        get: function () {
            return this.dq;
        },
        set: function (a) {
            this.dq = a;
            this.g("ActualIsLogarithmic");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "favorLabellingScaleEnd", {
        get: function () {
            return this.dr;
        },
        set: function (a) {
            this.dr = a;
            this.g("FavorLabellingScaleEnd");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "logarithmBase", {
        get: function () {
            return this.eo;
        },
        set: function (a) {
            this.eo = a;
            this.g("LogarithmBase");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "formatAbbreviatedLabelRef", {
        get: function () {
            return this.ez;
        },
        set: function (a) {
            this.ez = a;
            this.g("FormatAbbreviatedLabelRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "abbreviatedLabelFormat", {
        get: function () {
            return this.et;
        },
        set: function (a) {
            this.et = a;
            this.g("AbbreviatedLabelFormat");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "abbreviatedLabelFormatSpecifiers", {
        get: function () {
            return this.dm;
        },
        set: function (a) {
            this.dm = a;
            this.g("AbbreviatedLabelFormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "isFormattingAbbreviatedLargeNumber", {
        get: function () {
            return this.ds;
        },
        set: function (a) {
            this.ds = a;
            this.g("IsFormattingAbbreviatedLargeNumber");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "abbreviateLargeNumbers", {
        get: function () {
            return this.dp;
        },
        set: function (a) {
            this.dp = a;
            this.g("AbbreviateLargeNumbers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMinimumValueChangeRef", {
        get: function () {
            return this.ew;
        },
        set: function (a) {
            this.ew = a;
            this.g("ActualMinimumValueChangeRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMaximumValueChangeRef", {
        get: function () {
            return this.ev;
        },
        set: function (a) {
            this.ev = a;
            this.g("ActualMaximumValueChangeRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualIntervalChangeRef", {
        get: function () {
            return this.eu;
        },
        set: function (a) {
            this.eu = a;
            this.g("ActualIntervalChangeRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMinorIntervalChangeRef", {
        get: function () {
            return this.ex;
        },
        set: function (a) {
            this.ex = a;
            this.g("ActualMinorIntervalChangeRef");
        },
        enumerable: false,
        configurable: true
    });
    NumericAxisBaseDescription.$t = markType(NumericAxisBaseDescription, 'NumericAxisBaseDescription', AxisDescription.$);
    return NumericAxisBaseDescription;
}(AxisDescription));
export { NumericAxisBaseDescription };
