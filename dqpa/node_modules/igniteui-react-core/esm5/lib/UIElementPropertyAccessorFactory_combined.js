/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "./type";
import { CssColorPropertyAccessor } from "./CssColorPropertyAccessor";
import { CssThicknessPropertyAccessor } from "./CssThicknessPropertyAccessor";
import { CssPixelsPropertyAccessor } from "./CssPixelsPropertyAccessor";
import { CssLengthPropertyAccessor } from "./CssLengthPropertyAccessor";
import { CssLengthArrayPropertyAccessor } from "./CssLengthArrayPropertyAccessor";
import { CssFloatPropertyAccessor } from "./CssFloatPropertyAccessor";
import { CssCornerRadiusPropertyAccessor } from "./CssCornerRadiusPropertyAccessor";
import { CssTransformPropertyAccessor } from "./CssTransformPropertyAccessor";
import { CssCursorPropertyAccessor } from "./CssCursorPropertyAccessor";
import { CssHitTestVisiblePropertyAccessor } from "./CssHitTestVisiblePropertyAccessor";
import { CssVisibilityPropertyAccessor } from "./CssVisibilityPropertyAccessor";
/**
 * @hidden
 */
var UIElementPropertyAccessorFactory = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UIElementPropertyAccessorFactory, _super);
    function UIElementPropertyAccessorFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(UIElementPropertyAccessorFactory, "c", {
        get: function () {
            if (UIElementPropertyAccessorFactory.b == null) {
                UIElementPropertyAccessorFactory.b = new PlatformUIElementPropertyAccessorFactory();
            }
            return UIElementPropertyAccessorFactory.b;
        },
        enumerable: false,
        configurable: true
    });
    UIElementPropertyAccessorFactory.$t = markType(UIElementPropertyAccessorFactory, 'UIElementPropertyAccessorFactory');
    UIElementPropertyAccessorFactory.b = null;
    return UIElementPropertyAccessorFactory;
}(Base));
export { UIElementPropertyAccessorFactory };
/**
 * @hidden
 */
var PlatformUIElementPropertyAccessorFactory = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(PlatformUIElementPropertyAccessorFactory, _super);
    function PlatformUIElementPropertyAccessorFactory() {
        return _super.call(this) || this;
    }
    PlatformUIElementPropertyAccessorFactory.prototype.a = function (a, b) {
        switch (a) {
            case 2:
            case 3:
            case 7:
            case 15:
            case 16: return new CssColorPropertyAccessor(this.d(a));
            case 4:
            case 13:
            case 6: return new CssThicknessPropertyAccessor(this.d(a));
            case 11:
            case 10:
            case 12:
            case 8:
            case 9:
            case 26:
            case 27: return new CssPixelsPropertyAccessor(this.d(a));
            case 17:
            case 19: return new CssLengthPropertyAccessor(this.d(a));
            case 18: return new CssLengthArrayPropertyAccessor(this.d(a));
            case 1: return new CssFloatPropertyAccessor(this.d(a));
            case 5: return new CssCornerRadiusPropertyAccessor(this.d(a));
            case 14: return new CssTransformPropertyAccessor(this.d(a));
            case 20: return new CssCursorPropertyAccessor();
            case 21: return new CssHitTestVisiblePropertyAccessor();
            case 24: return new CssVisibilityPropertyAccessor();
        }
        return null;
    };
    PlatformUIElementPropertyAccessorFactory.prototype.d = function (a) {
        switch (a) {
            case 2: return "background-color";
            case 3: return "border-color";
            case 7: return "color";
            case 4: return "border-width";
            case 13: return "margin";
            case 6: return "padding";
            case 11: return "left";
            case 10: return "height";
            case 12: return "top";
            case 9: return "width";
            case 5: return "border-radius";
            case 8: return "font-size";
            case 1: return "opacity";
            case 14: return "transform";
            case 15: return "stroke";
            case 16: return "fill";
            case 18: return "stroke-dasharray";
            case 19: return "stroke-dashoffset";
            case 17: return "stroke-width";
            case 26: return "min-width";
            case 27: return "min-height";
        }
        return "";
    };
    PlatformUIElementPropertyAccessorFactory.$t = markType(PlatformUIElementPropertyAccessorFactory, 'PlatformUIElementPropertyAccessorFactory', UIElementPropertyAccessorFactory.$);
    return PlatformUIElementPropertyAccessorFactory;
}(UIElementPropertyAccessorFactory));
export { PlatformUIElementPropertyAccessorFactory };
