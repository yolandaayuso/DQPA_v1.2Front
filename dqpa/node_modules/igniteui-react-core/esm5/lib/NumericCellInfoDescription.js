/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { CellInfoDescription } from "./CellInfoDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var NumericCellInfoDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NumericCellInfoDescription, _super);
    function NumericCellInfoDescription() {
        var _this = _super.call(this) || this;
        _this.fs = 0;
        _this.fo = false;
        _this.f2 = null;
        _this.fl = null;
        _this.f1 = null;
        _this.f3 = null;
        _this.f5 = null;
        _this.f4 = null;
        _this.f6 = null;
        _this.fu = 0;
        _this.fv = 0;
        _this.fw = 0;
        _this.fp = false;
        return _this;
    }
    NumericCellInfoDescription.prototype.get_type = function () {
        return "NumericCellInfo";
    };
    Object.defineProperty(NumericCellInfoDescription.prototype, "numericValue", {
        get: function () {
            return this.fs;
        },
        set: function (a) {
            this.fs = a;
            this.g("NumericValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "hasDecimalValue", {
        get: function () {
            return this.fo;
        },
        set: function (a) {
            this.fo = a;
            this.g("HasDecimalValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "formatStringOverride", {
        get: function () {
            return this.f2;
        },
        set: function (a) {
            this.f2 = a;
            this.g("FormatStringOverride");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "formatSpecifiers", {
        get: function () {
            return this.fl;
        },
        set: function (a) {
            this.fl = a;
            this.g("FormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "formatOverrideRef", {
        get: function () {
            return this.f1;
        },
        set: function (a) {
            this.f1 = a;
            this.g("FormatOverrideRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "negativePrefix", {
        get: function () {
            return this.f3;
        },
        set: function (a) {
            this.f3 = a;
            this.g("NegativePrefix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "positivePrefix", {
        get: function () {
            return this.f5;
        },
        set: function (a) {
            this.f5 = a;
            this.g("PositivePrefix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "negativeSuffix", {
        get: function () {
            return this.f4;
        },
        set: function (a) {
            this.f4 = a;
            this.g("NegativeSuffix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "positiveSuffix", {
        get: function () {
            return this.f6;
        },
        set: function (a) {
            this.f6 = a;
            this.g("PositiveSuffix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "maxFractionDigits", {
        get: function () {
            return this.fu;
        },
        set: function (a) {
            this.fu = a;
            this.g("MaxFractionDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "minFractionDigits", {
        get: function () {
            return this.fv;
        },
        set: function (a) {
            this.fv = a;
            this.g("MinFractionDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "minIntegerDigits", {
        get: function () {
            return this.fw;
        },
        set: function (a) {
            this.fw = a;
            this.g("MinIntegerDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "showGroupingSeparator", {
        get: function () {
            return this.fp;
        },
        set: function (a) {
            this.fp = a;
            this.g("ShowGroupingSeparator");
        },
        enumerable: false,
        configurable: true
    });
    NumericCellInfoDescription.$t = markType(NumericCellInfoDescription, 'NumericCellInfoDescription', CellInfoDescription.$);
    NumericCellInfoDescription.__marshalByValue1 = true;
    NumericCellInfoDescription.__marshalByValueAlias1 = "NumericCellModel";
    return NumericCellInfoDescription;
}(CellInfoDescription));
export { NumericCellInfoDescription };
