/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebPivotAggregatorDescription } from "./WebPivotAggregatorDescription";
/**
 * @hidden
 */
var WebPivotAggregatorDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebPivotAggregatorDescriptionMetadata, _super);
    function WebPivotAggregatorDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebPivotAggregatorDescriptionMetadata.b = function (a) {
        if (WebPivotAggregatorDescriptionMetadata.a == null) {
            WebPivotAggregatorDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebPivotAggregatorDescriptionMetadata.c(WebPivotAggregatorDescriptionMetadata.a);
        }
        if (a.k(WebPivotAggregatorDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebPivotAggregatorDescriptionMetadata.a);
    };
    WebPivotAggregatorDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:PivotAggregator");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__isPlainObject", "Boolean");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Key", "String");
        a.item("Label", "String");
        a.item("AggregatorName", "ExportedType:string:PivotAggregationType");
        a.item("AggregatorName@stringUnion", "WebComponents;React");
        a.item("AggregatorName@names", "SUM;AVG;MIN;MAX;COUNT;LATEST;EARLIEST");
        a.item("AggregatorRef", "(w:Aggregator,wf:Aggregator)MethodRef");
    };
    WebPivotAggregatorDescriptionMetadata.d = function (a) {
        WebPivotAggregatorDescriptionMetadata.b(a);
        a.ae("WebPivotAggregator", function () { return new WebPivotAggregatorDescription(); });
        a.ad("WebPivotAggregator", WebPivotAggregatorDescriptionMetadata.a);
    };
    WebPivotAggregatorDescriptionMetadata.$t = markType(WebPivotAggregatorDescriptionMetadata, 'WebPivotAggregatorDescriptionMetadata');
    WebPivotAggregatorDescriptionMetadata.a = null;
    return WebPivotAggregatorDescriptionMetadata;
}(Base));
export { WebPivotAggregatorDescriptionMetadata };
