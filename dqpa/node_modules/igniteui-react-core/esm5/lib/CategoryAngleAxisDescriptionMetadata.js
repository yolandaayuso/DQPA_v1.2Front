/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { CategoryAxisBaseDescriptionMetadata } from "./CategoryAxisBaseDescriptionMetadata";
import { CategoryAngleAxisDescription } from "./CategoryAngleAxisDescription";
/**
 * @hidden
 */
var CategoryAngleAxisDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryAngleAxisDescriptionMetadata, _super);
    function CategoryAngleAxisDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CategoryAngleAxisDescriptionMetadata.b = function (a) {
        if (CategoryAngleAxisDescriptionMetadata.a == null) {
            CategoryAngleAxisDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            CategoryAngleAxisDescriptionMetadata.c(CategoryAngleAxisDescriptionMetadata.a);
        }
        if (a.k(CategoryAngleAxisDescriptionMetadata.a)) {
            return;
        }
        a.ac(CategoryAngleAxisDescriptionMetadata.a);
    };
    CategoryAngleAxisDescriptionMetadata.c = function (a) {
        CategoryAxisBaseDescriptionMetadata.c(a);
        a.item("StartAngleOffset", "Number:double");
        a.item("LabelMode", "ExportedType:string:AxisAngleLabelMode");
        a.item("LabelMode@names", "Auto;Center;ClosestPoint");
        a.item("Interval", "Number:double");
        a.item("ActualInterval", "Number:double");
        a.item("MinorInterval", "Number:double");
        a.item("ActualMinorInterval", "Number:double");
        a.item("ActualIntervalChangeRef", "EventRef::actualIntervalChange");
    };
    CategoryAngleAxisDescriptionMetadata.d = function (a) {
        CategoryAngleAxisDescriptionMetadata.b(a);
        a.ae("CategoryAngleAxis", function () { return new CategoryAngleAxisDescription(); });
        a.ad("CategoryAngleAxis", CategoryAngleAxisDescriptionMetadata.a);
    };
    CategoryAngleAxisDescriptionMetadata.$t = markType(CategoryAngleAxisDescriptionMetadata, 'CategoryAngleAxisDescriptionMetadata');
    CategoryAngleAxisDescriptionMetadata.a = null;
    return CategoryAngleAxisDescriptionMetadata;
}(Base));
export { CategoryAngleAxisDescriptionMetadata };
