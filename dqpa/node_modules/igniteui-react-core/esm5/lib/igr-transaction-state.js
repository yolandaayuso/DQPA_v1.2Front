import { TransactionType_$type } from "./TransactionType";
import { ensureEnum } from "./componentUtil";
/**
 * Represents the final state of items with all transactions combined.
*/
var IgrTransactionState = /** @class */ /*@__PURE__*/ (function () {
    function IgrTransactionState() {
        this.mounted = false;
    }
    Object.defineProperty(IgrTransactionState.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTransactionState.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrTransactionState.prototype.onImplementationCreated = function () {
    };
    IgrTransactionState.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    };
    Object.defineProperty(IgrTransactionState.prototype, "id", {
        /**
         * Gets or sets the ID for the state.  I.e. an items primary key.
        */
        get: function () {
            return this.i.id;
        },
        set: function (v) {
            this.i.id = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTransactionState.prototype, "transactionType", {
        /**
         * Gets or sets how this state was created.
        */
        get: function () {
            return this.i.transactionType;
        },
        set: function (v) {
            this.i.transactionType = ensureEnum(TransactionType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTransactionState.prototype, "value", {
        /**
         * Gets or sets the final value with all transaction deltas combined.
        */
        get: function () {
            return this.i.value;
        },
        set: function (v) {
            this.i.value = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTransactionState.prototype, "version", {
        /**
         * Gets or sets the version data for this item. Used for concurrency.
        */
        get: function () {
            return this.i.version;
        },
        set: function (v) {
            this.i.version = v;
        },
        enumerable: false,
        configurable: true
    });
    IgrTransactionState.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    return IgrTransactionState;
}());
export { IgrTransactionState };
