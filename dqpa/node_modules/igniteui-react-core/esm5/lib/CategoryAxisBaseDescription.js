/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { AxisDescription } from "./AxisDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var CategoryAxisBaseDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryAxisBaseDescription, _super);
    function CategoryAxisBaseDescription() {
        var _this = _super.call(this) || this;
        _this.dz = null;
        _this.dx = 0;
        _this.dp = 0;
        _this.dq = 0;
        _this.dr = 0;
        _this.ds = 0;
        _this.dm = false;
        _this.d0 = null;
        return _this;
    }
    CategoryAxisBaseDescription.prototype.get_type = function () {
        return "CategoryAxisBase";
    };
    Object.defineProperty(CategoryAxisBaseDescription.prototype, "dataSourceRef", {
        get: function () {
            return this.dz;
        },
        set: function (a) {
            this.dz = a;
            this.g("DataSourceRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBaseDescription.prototype, "itemsCount", {
        get: function () {
            return this.dx;
        },
        set: function (a) {
            this.dx = a;
            this.g("ItemsCount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBaseDescription.prototype, "gap", {
        get: function () {
            return this.dp;
        },
        set: function (a) {
            this.dp = a;
            this.g("Gap");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBaseDescription.prototype, "maximumGap", {
        get: function () {
            return this.dq;
        },
        set: function (a) {
            this.dq = a;
            this.g("MaximumGap");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBaseDescription.prototype, "minimumGapSize", {
        get: function () {
            return this.dr;
        },
        set: function (a) {
            this.dr = a;
            this.g("MinimumGapSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBaseDescription.prototype, "overlap", {
        get: function () {
            return this.ds;
        },
        set: function (a) {
            this.ds = a;
            this.g("Overlap");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBaseDescription.prototype, "useClusteringMode", {
        get: function () {
            return this.dm;
        },
        set: function (a) {
            this.dm = a;
            this.g("UseClusteringMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBaseDescription.prototype, "itemsCountChangeRef", {
        get: function () {
            return this.d0;
        },
        set: function (a) {
            this.d0 = a;
            this.g("ItemsCountChangeRef");
        },
        enumerable: false,
        configurable: true
    });
    CategoryAxisBaseDescription.$t = markType(CategoryAxisBaseDescription, 'CategoryAxisBaseDescription', AxisDescription.$);
    return CategoryAxisBaseDescription;
}(AxisDescription));
export { CategoryAxisBaseDescription };
