/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ColorScaleDescriptionMetadata } from "./ColorScaleDescriptionMetadata";
import { TriangulationStatusEventArgsDescriptionMetadata } from "./TriangulationStatusEventArgsDescriptionMetadata";
import { GeographicXYTriangulatingSeriesDescriptionMetadata } from "./GeographicXYTriangulatingSeriesDescriptionMetadata";
import { GeographicScatterAreaSeriesDescription } from "./GeographicScatterAreaSeriesDescription";
/**
 * @hidden
 */
var GeographicScatterAreaSeriesDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicScatterAreaSeriesDescriptionMetadata, _super);
    function GeographicScatterAreaSeriesDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicScatterAreaSeriesDescriptionMetadata.b = function (a) {
        if (GeographicScatterAreaSeriesDescriptionMetadata.a == null) {
            GeographicScatterAreaSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            GeographicScatterAreaSeriesDescriptionMetadata.c(GeographicScatterAreaSeriesDescriptionMetadata.a);
        }
        if (a.k(GeographicScatterAreaSeriesDescriptionMetadata.a)) {
            return;
        }
        a.ac(GeographicScatterAreaSeriesDescriptionMetadata.a);
        ColorScaleDescriptionMetadata.d(a);
        TriangulationStatusEventArgsDescriptionMetadata.d(a);
    };
    GeographicScatterAreaSeriesDescriptionMetadata.c = function (a) {
        GeographicXYTriangulatingSeriesDescriptionMetadata.c(a);
        a.item("ColorMemberPath", "String");
        a.item("ColorScale", "ExportedType:ColorScale");
        a.item("ActualColorScale", "ExportedType:ColorScale");
        a.item("TriangulationStatusChangedRef", "EventRef::triangulationStatusChanged");
    };
    GeographicScatterAreaSeriesDescriptionMetadata.d = function (a) {
        GeographicScatterAreaSeriesDescriptionMetadata.b(a);
        a.ae("GeographicScatterAreaSeries", function () { return new GeographicScatterAreaSeriesDescription(); });
        a.ad("GeographicScatterAreaSeries", GeographicScatterAreaSeriesDescriptionMetadata.a);
    };
    GeographicScatterAreaSeriesDescriptionMetadata.$t = markType(GeographicScatterAreaSeriesDescriptionMetadata, 'GeographicScatterAreaSeriesDescriptionMetadata');
    GeographicScatterAreaSeriesDescriptionMetadata.a = null;
    return GeographicScatterAreaSeriesDescriptionMetadata;
}(Base));
export { GeographicScatterAreaSeriesDescriptionMetadata };
