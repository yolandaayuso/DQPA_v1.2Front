/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var DataGridComparisonOperatorSelectorDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DataGridComparisonOperatorSelectorDescription, _super);
    function DataGridComparisonOperatorSelectorDescription() {
        var _this = _super.call(this) || this;
        _this.s = null;
        _this.n = null;
        _this.h = 0;
        _this.o = null;
        _this.i = 0;
        _this.r = null;
        _this.l = null;
        _this.t = null;
        _this.q = null;
        _this.p = null;
        _this.m = null;
        return _this;
    }
    DataGridComparisonOperatorSelectorDescription.prototype.get_type = function () {
        return "DataGridComparisonOperatorSelector";
    };
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "value", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.g("Value");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "customFilterID", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.g("CustomFilterID");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "customFilterIndex", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.g("CustomFilterIndex");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "dataType", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.g("DataType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "maxHeight", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.g("MaxHeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "textColor", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.g("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "background", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.g("Background");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "valueChangedRef", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.g("ValueChangedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "openingRef", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.g("OpeningRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "openedRef", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.g("OpenedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataGridComparisonOperatorSelectorDescription.prototype, "closingRef", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.g("ClosingRef");
        },
        enumerable: false,
        configurable: true
    });
    DataGridComparisonOperatorSelectorDescription.$t = markType(DataGridComparisonOperatorSelectorDescription, 'DataGridComparisonOperatorSelectorDescription', Description.$);
    return DataGridComparisonOperatorSelectorDescription;
}(Description));
export { DataGridComparisonOperatorSelectorDescription };
