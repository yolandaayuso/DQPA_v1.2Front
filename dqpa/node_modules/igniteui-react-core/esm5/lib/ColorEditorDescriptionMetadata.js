/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ColorEditorPanelSelectedValueChangedEventArgsDescriptionMetadata } from "./ColorEditorPanelSelectedValueChangedEventArgsDescriptionMetadata";
import { ColorEditorGotFocusEventArgsDescriptionMetadata } from "./ColorEditorGotFocusEventArgsDescriptionMetadata";
import { ColorEditorLostFocusEventArgsDescriptionMetadata } from "./ColorEditorLostFocusEventArgsDescriptionMetadata";
import { ColorEditorDescription } from "./ColorEditorDescription";
/**
 * @hidden
 */
var ColorEditorDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorEditorDescriptionMetadata, _super);
    function ColorEditorDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorEditorDescriptionMetadata.b = function (a) {
        if (ColorEditorDescriptionMetadata.a == null) {
            ColorEditorDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ColorEditorDescriptionMetadata.c(ColorEditorDescriptionMetadata.a);
        }
        if (a.k(ColorEditorDescriptionMetadata.a)) {
            return;
        }
        a.ac(ColorEditorDescriptionMetadata.a);
        ColorEditorPanelSelectedValueChangedEventArgsDescriptionMetadata.d(a);
        ColorEditorGotFocusEventArgsDescriptionMetadata.d(a);
        ColorEditorLostFocusEventArgsDescriptionMetadata.d(a);
    };
    ColorEditorDescriptionMetadata.c = function (a) {
        a.item("Value", "Brush");
        a.item("Label", "String");
        a.item("LabelTextColor", "Brush");
        a.item("LabelFontFamily", "(w:LabelFontFamily/FontFamilyTransform,xam:LabelFontFamily,wf:LabelFontFamily,web:labelTextStyle/FontFamilyTransform)String");
        a.item("LabelFontSize", "(w:LabelFontSize,xam:LabelFontSize,wf:LabelFontSize,web:labelTextStyle/FontSizeTransform)Number:double");
        a.item("LabelFontStyle", "(w:LabelFontStyle/FontStyleTransform,xam:LabelFontFamily/FontStyleTransform,wf:LabelFontFamily/FontStyleTransform,web:labelTextStyle/FontStyleTransform)String");
        a.item("LabelFontWeight", "(w:LabelFontWeight/FontWeightTransform,xam:LabelFontFamily/FontWeightTransform,wf:LabelFontFamily/FontWeightTransform,web:labelTextStyle/FontWeightTransform)String");
        a.item("Density", "ExportedType:string:ControlDisplayDensity");
        a.item("Density@names", "Auto;Comfortable;Cosy;Compact;Minimal");
        a.item("BaseTheme", "ExportedType:string:BaseControlTheme");
        a.item("BaseTheme@names", "Default;DenaliLight;MaterialLight;SlingshotLight;SlingshotDark;RevealLight;RevealDark");
        a.item("TextFontFamily", "(w:TextFontFamily/FontFamilyTransform,xam:TextFontFamily,wf:TextFontFamily,web:textStyle/FontFamilyTransform)String");
        a.item("TextFontSize", "(w:TextFontSize,xam:TextFontSize,wf:TextFontSize,web:textStyle/FontSizeTransform)Number:double");
        a.item("TextFontStyle", "(w:TextFontStyle/FontStyleTransform,xam:TextFontFamily/FontStyleTransform,wf:TextFontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
        a.item("TextFontWeight", "(w:TextFontWeight/FontWeightTransform,xam:TextFontFamily/FontWeightTransform,wf:TextFontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
        a.item("TextColor", "Brush");
        a.item("IconColor", "Brush");
        a.item("ShowClearButton", "Boolean");
        a.item("AllowTextInput", "Boolean");
        a.item("OpenOnFocus", "Boolean");
        a.item("IsDisabled", "Boolean");
        a.item("IsFixed", "Boolean");
        a.item("OpenAsChild", "Boolean");
        a.item("UseTopLayer", "Boolean");
        a.item("ValueChangedRef", "EventRef::valueChanged");
        a.item("ValueChangingRef", "EventRef::valueChanging");
        a.item("GotFocusRef", "EventRef::gotFocus");
        a.item("LostFocusRef", "EventRef::lostFocus");
        ColorEditorDescriptionMetadata.e(a);
    };
    ColorEditorDescriptionMetadata.d = function (a) {
        ColorEditorDescriptionMetadata.b(a);
        a.ae("ColorEditor", function () { return new ColorEditorDescription(); });
        a.ad("ColorEditor", ColorEditorDescriptionMetadata.a);
    };
    ColorEditorDescriptionMetadata.e = function (a) {
        a.item("_qualifiedName", "String:Infragistics.Controls.Inputs.XamColorEditor");
    };
    ColorEditorDescriptionMetadata.$t = markType(ColorEditorDescriptionMetadata, 'ColorEditorDescriptionMetadata');
    ColorEditorDescriptionMetadata.a = null;
    return ColorEditorDescriptionMetadata;
}(Base));
export { ColorEditorDescriptionMetadata };
