/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebDockManagerLayoutDescriptionMetadata } from "./WebDockManagerLayoutDescriptionMetadata";
import { WebDockManagerPaneDescriptionMetadata } from "./WebDockManagerPaneDescriptionMetadata";
import { WebDockManagerPointDescriptionMetadata } from "./WebDockManagerPointDescriptionMetadata";
import { WebContentPaneDescriptionMetadata } from "./WebContentPaneDescriptionMetadata";
import { WebDockManagerResourceStringsDescriptionMetadata } from "./WebDockManagerResourceStringsDescriptionMetadata";
import { WebLayoutChangeEventArgsDescriptionMetadata } from "./WebLayoutChangeEventArgsDescriptionMetadata";
import { WebDockManagerDescription } from "./WebDockManagerDescription";
/**
 * @hidden
 */
var WebDockManagerDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebDockManagerDescriptionMetadata, _super);
    function WebDockManagerDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebDockManagerDescriptionMetadata.b = function (a) {
        if (WebDockManagerDescriptionMetadata.a == null) {
            WebDockManagerDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebDockManagerDescriptionMetadata.c(WebDockManagerDescriptionMetadata.a);
        }
        if (a.k(WebDockManagerDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebDockManagerDescriptionMetadata.a);
        WebDockManagerLayoutDescriptionMetadata.d(a);
        WebDockManagerPaneDescriptionMetadata.d(a);
        WebDockManagerPointDescriptionMetadata.d(a);
        WebContentPaneDescriptionMetadata.d(a);
        WebDockManagerResourceStringsDescriptionMetadata.d(a);
        WebLayoutChangeEventArgsDescriptionMetadata.d(a);
    };
    WebDockManagerDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:DockManager");
        a.item("__tagNameWC", "String:igc-dockmanager");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents");
        a.item("Layout", "ExportedType:WebDockManagerLayout");
        a.item("DraggedPane", "ExportedType:WebDockManagerPane");
        a.item("DropPosition", "ExportedType:WebDockManagerPoint");
        a.item("ActivePane", "ExportedType:WebContentPane");
        a.item("AllowMaximize", "Boolean");
        a.item("ContainedInBoundaries", "Boolean");
        a.item("ShowHeaderIconOnHover", "ExportedType:string:DockManagerShowHeaderIconOnHover");
        a.item("ShowHeaderIconOnHover@stringUnion", "WebComponents;React");
        a.item("ShowHeaderIconOnHover@names", "CloseOnly;MoreOptionsOnly;All");
        a.item("MaximizedPane", "ExportedType:WebDockManagerPane");
        a.item("ResourceStrings", "ExportedType:WebDockManagerResourceStrings");
        a.item("AllowFloatingPanesResize", "Boolean");
        a.item("DisableKeyboardNavigation", "Boolean");
        a.item("AllowInnerDock", "Boolean");
        a.item("ShowPaneHeaders", "ExportedType:string:DockManagerShowPaneHeaders");
        a.item("ShowPaneHeaders@stringUnion", "WebComponents;React");
        a.item("ShowPaneHeaders@names", "OnHoverOnly;Always");
        a.item("ProximityDock", "Boolean");
        a.item("CloseBehavior", "ExportedType:string:PaneActionBehavior");
        a.item("CloseBehavior@stringUnion", "WebComponents;React");
        a.item("CloseBehavior@names", "AllPanes;SelectedPane");
        a.item("UnpinBehavior", "ExportedType:string:PaneActionBehavior");
        a.item("UnpinBehavior@stringUnion", "WebComponents;React");
        a.item("UnpinBehavior@names", "AllPanes;SelectedPane");
        a.item("LayoutChangeRef", "EventRef::layoutChange:customEvent");
    };
    WebDockManagerDescriptionMetadata.d = function (a) {
        WebDockManagerDescriptionMetadata.b(a);
        a.ae("WebDockManager", function () { return new WebDockManagerDescription(); });
        a.ad("WebDockManager", WebDockManagerDescriptionMetadata.a);
    };
    WebDockManagerDescriptionMetadata.$t = markType(WebDockManagerDescriptionMetadata, 'WebDockManagerDescriptionMetadata');
    WebDockManagerDescriptionMetadata.a = null;
    return WebDockManagerDescriptionMetadata;
}(Base));
export { WebDockManagerDescriptionMetadata };
