import { IgrDataLegendSeriesValueInfo } from "./igr-data-legend-series-value-info";
import { DataLegendSeriesContext as DataLegendSeriesContext_internal } from "./DataLegendSeriesContext";
/**
 * Represent info about series values
*/
var IgrDataLegendSeriesContext = /** @class */ /*@__PURE__*/ (function () {
    function IgrDataLegendSeriesContext() {
        this.mounted = false;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    IgrDataLegendSeriesContext.prototype.createImplementation = function () {
        return new DataLegendSeriesContext_internal();
    };
    Object.defineProperty(IgrDataLegendSeriesContext.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegendSeriesContext.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegendSeriesContext.prototype.onImplementationCreated = function () {
    };
    IgrDataLegendSeriesContext.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    };
    Object.defineProperty(IgrDataLegendSeriesContext.prototype, "seriesFamily", {
        /**
         * Gets a family of series that the current series belongs to, e.g. Category, Range, Financial, etc.
        */
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = v;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegendSeriesContext.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    /**
     * Creates an instance of DataLegendSeriesContext
    
    */
    IgrDataLegendSeriesContext.prototype.getSeriesValueInfo = function (type) {
        var iv = this.i.b((type == null ? null : type));
        var ret = null;
        if (iv && iv.externalObject) {
            ret = iv.externalObject;
        }
        else {
            if (iv) {
                var e = new IgrDataLegendSeriesValueInfo();
                e._implementation = iv;
                iv.externalObject = e;
                ret = e;
            }
        }
        return ret;
    };
    /**
     * Gets value info for the series value type
    
    */
    IgrDataLegendSeriesContext.prototype.getSeriesValue = function (type) {
        var iv = this.i.f((type == null ? null : type));
        return (iv);
    };
    IgrDataLegendSeriesContext.prototype.setSeriesValue = function (type, value) {
        this.i.k((type == null ? null : type), value);
    };
    IgrDataLegendSeriesContext.prototype.setSeriesValueInfo = function (type, valueInfo) {
        this.i.l((type == null ? null : type), (valueInfo == null ? null : valueInfo.i));
    };
    /**
     * Gets all values that a series renders at the current data point
     * For example, Open, High, Low, Close for Financial Series
    
    */
    IgrDataLegendSeriesContext.prototype.getSeriesValues = function () {
        var iv = this.i.a();
        return (iv);
    };
    return IgrDataLegendSeriesContext;
}());
export { IgrDataLegendSeriesContext };
