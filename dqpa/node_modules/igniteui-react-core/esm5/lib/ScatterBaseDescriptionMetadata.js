/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AssigningScatterStyleEventArgsDescriptionMetadata } from "./AssigningScatterStyleEventArgsDescriptionMetadata";
import { AssigningScatterMarkerStyleEventArgsDescriptionMetadata } from "./AssigningScatterMarkerStyleEventArgsDescriptionMetadata";
import { MarkerSeriesDescriptionMetadata } from "./MarkerSeriesDescriptionMetadata";
/**
 * @hidden
 */
var ScatterBaseDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ScatterBaseDescriptionMetadata, _super);
    function ScatterBaseDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScatterBaseDescriptionMetadata.b = function (a) {
        if (ScatterBaseDescriptionMetadata.a == null) {
            ScatterBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ScatterBaseDescriptionMetadata.c(ScatterBaseDescriptionMetadata.a);
        }
        if (a.k(ScatterBaseDescriptionMetadata.a)) {
            return;
        }
        a.ac(ScatterBaseDescriptionMetadata.a);
        AssigningScatterStyleEventArgsDescriptionMetadata.d(a);
        AssigningScatterMarkerStyleEventArgsDescriptionMetadata.d(a);
    };
    ScatterBaseDescriptionMetadata.c = function (a) {
        MarkerSeriesDescriptionMetadata.c(a);
        a.item("XAxisRef", "(w:XAxis,wf:XAxis)DataRef::object");
        a.item("XAxisRef@nameBinding", "true");
        a.item("YAxisRef", "(w:YAxis,wf:YAxis)DataRef::object");
        a.item("YAxisRef@nameBinding", "true");
        a.item("XMemberPath", "String");
        a.item("YMemberPath", "String");
        a.item("HighlightedXMemberPath", "String");
        a.item("HighlightedYMemberPath", "String");
        a.item("XMemberAsLegendLabel", "String");
        a.item("YMemberAsLegendLabel", "String");
        a.item("XMemberAsLegendUnit", "String");
        a.item("YMemberAsLegendUnit", "String");
        a.item("TrendLineType", "ExportedType:string:TrendLineType");
        a.item("TrendLineType@names", "None;LinearFit;QuadraticFit;CubicFit;QuarticFit;QuinticFit;LogarithmicFit;ExponentialFit;PowerLawFit;SimpleAverage;ExponentialAverage;ModifiedAverage;CumulativeAverage;WeightedAverage");
        a.item("TrendLineBrush", "Brush");
        a.item("ActualTrendLineBrush", "Brush");
        a.item("TrendLineThickness", "Number:double");
        a.item("TrendLineDashArray", "DoubleCollection:double");
        a.item("TrendLinePeriod", "Number:int");
        a.item("MarkerCollisionAvoidance", "ExportedType:string:CollisionAvoidanceType");
        a.item("MarkerCollisionAvoidance@names", "None;Omit;Fade;OmitAndShift;FadeAndShift");
        a.item("TrendLineZIndex", "Number:int");
        a.item("MaximumMarkers", "Number:int");
        a.item("ItemSearchMode", "ExportedType:string:ScatterItemSearchMode");
        a.item("ItemSearchMode@names", "Auto;ClosestVisiblePoint;ClosestPoint;ClosestVisiblePointOnClosestLine;ClosestPointOnClosestLine;TopVisiblePoint;None");
        a.item("ItemSearchThreshold", "Number:int");
        a.item("ActualItemSearchMode", "ExportedType:string:ScatterItemSearchMode");
        a.item("ActualItemSearchMode@names", "Auto;ClosestVisiblePoint;ClosestPoint;ClosestVisiblePointOnClosestLine;ClosestPointOnClosestLine;TopVisiblePoint;None");
        a.item("IsCustomScatterStyleAllowed", "Boolean");
        a.item("IsCustomScatterMarkerStyleAllowed", "Boolean");
        a.item("AssigningScatterStyleRef", "EventRef::assigningScatterStyle");
        a.item("AssigningScatterMarkerStyleRef", "EventRef::assigningScatterMarkerStyle");
    };
    ScatterBaseDescriptionMetadata.d = function (a) {
        ScatterBaseDescriptionMetadata.b(a);
        a.ad("ScatterBase", ScatterBaseDescriptionMetadata.a);
    };
    ScatterBaseDescriptionMetadata.$t = markType(ScatterBaseDescriptionMetadata, 'ScatterBaseDescriptionMetadata');
    ScatterBaseDescriptionMetadata.a = null;
    return ScatterBaseDescriptionMetadata;
}(Base));
export { ScatterBaseDescriptionMetadata };
