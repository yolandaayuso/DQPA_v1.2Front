/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var ColorEditorDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorEditorDescription, _super);
    function ColorEditorDescription() {
        var _this = _super.call(this) || this;
        _this.an = null;
        _this.ad = null;
        _this.ah = null;
        _this.ae = null;
        _this.v = 0;
        _this.af = null;
        _this.ag = null;
        _this.aa = null;
        _this.z = null;
        _this.ak = null;
        _this.w = 0;
        _this.al = null;
        _this.am = null;
        _this.aj = null;
        _this.ac = null;
        _this.m = false;
        _this.h = false;
        _this.l = false;
        _this.i = false;
        _this.j = false;
        _this.k = false;
        _this.n = false;
        _this.ao = null;
        _this.ap = null;
        _this.ab = null;
        _this.ai = null;
        return _this;
    }
    ColorEditorDescription.prototype.get_type = function () {
        return "ColorEditor";
    };
    Object.defineProperty(ColorEditorDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "value", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.g("Value");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "label", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
            this.g("Label");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "labelTextColor", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
            this.g("LabelTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "labelFontFamily", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
            this.g("LabelFontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "labelFontSize", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.g("LabelFontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "labelFontStyle", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            this.af = a;
            this.g("LabelFontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "labelFontWeight", {
        get: function () {
            return this.ag;
        },
        set: function (a) {
            this.ag = a;
            this.g("LabelFontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "density", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
            this.g("Density");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "baseTheme", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.g("BaseTheme");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "textFontFamily", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
            this.g("TextFontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "textFontSize", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.g("TextFontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "textFontStyle", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            this.al = a;
            this.g("TextFontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "textFontWeight", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
            this.g("TextFontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "textColor", {
        get: function () {
            return this.aj;
        },
        set: function (a) {
            this.aj = a;
            this.g("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "iconColor", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
            this.g("IconColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "showClearButton", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.g("ShowClearButton");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "allowTextInput", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.g("AllowTextInput");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "openOnFocus", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.g("OpenOnFocus");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "isDisabled", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.g("IsDisabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "isFixed", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.g("IsFixed");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "openAsChild", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.g("OpenAsChild");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "useTopLayer", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.g("UseTopLayer");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "valueChangedRef", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
            this.g("ValueChangedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "valueChangingRef", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.g("ValueChangingRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "gotFocusRef", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.g("GotFocusRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorEditorDescription.prototype, "lostFocusRef", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
            this.g("LostFocusRef");
        },
        enumerable: false,
        configurable: true
    });
    ColorEditorDescription.$t = markType(ColorEditorDescription, 'ColorEditorDescription', Description.$);
    return ColorEditorDescription;
}(Description));
export { ColorEditorDescription };
