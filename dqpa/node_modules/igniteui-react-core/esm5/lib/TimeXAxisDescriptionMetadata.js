/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { TimeAxisBaseDescriptionMetadata } from "./TimeAxisBaseDescriptionMetadata";
import { TimeXAxisDescription } from "./TimeXAxisDescription";
/**
 * @hidden
 */
var TimeXAxisDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TimeXAxisDescriptionMetadata, _super);
    function TimeXAxisDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TimeXAxisDescriptionMetadata.b = function (a) {
        if (TimeXAxisDescriptionMetadata.a == null) {
            TimeXAxisDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            TimeXAxisDescriptionMetadata.c(TimeXAxisDescriptionMetadata.a);
        }
        if (a.k(TimeXAxisDescriptionMetadata.a)) {
            return;
        }
        a.ac(TimeXAxisDescriptionMetadata.a);
    };
    TimeXAxisDescriptionMetadata.c = function (a) {
        TimeAxisBaseDescriptionMetadata.c(a);
        a.item("Breaks", "Collection:TimeAxisBreak:TimeAxisBreakCollection:TimeAxisBreak");
        a.item("LabellingMode", "ExportedType:string:TimeAxisLabellingMode");
        a.item("LabellingMode@names", "Auto;Normal;Compressed");
        a.item("LabelFormats", "Collection:TimeAxisLabelFormat:TimeAxisLabelFormatCollection:TimeAxisLabelFormat");
        a.item("Intervals", "Collection:TimeAxisInterval:TimeAxisIntervalCollection:TimeAxisInterval");
    };
    TimeXAxisDescriptionMetadata.d = function (a) {
        TimeXAxisDescriptionMetadata.b(a);
        a.ae("TimeXAxis", function () { return new TimeXAxisDescription(); });
        a.ad("TimeXAxis", TimeXAxisDescriptionMetadata.a);
    };
    TimeXAxisDescriptionMetadata.$t = markType(TimeXAxisDescriptionMetadata, 'TimeXAxisDescriptionMetadata');
    TimeXAxisDescriptionMetadata.a = null;
    return TimeXAxisDescriptionMetadata;
}(Base));
export { TimeXAxisDescriptionMetadata };
