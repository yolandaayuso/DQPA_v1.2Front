/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { XYChartDescriptionMetadata } from "./XYChartDescriptionMetadata";
import { CategoryChartDescription } from "./CategoryChartDescription";
/**
 * @hidden
 */
var CategoryChartDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryChartDescriptionMetadata, _super);
    function CategoryChartDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CategoryChartDescriptionMetadata.e = function (a) {
        a.item("TooltipTemplateRef", "(w:ToolTip)DataRef:String");
        a.item("_qualifiedName", "String:Infragistics.Controls.Charts.XamCategoryChart");
        a.item("Width", "(w:Width/DimensionTransform,xam:Width/DimensionTransform)String");
        a.item("Height", "(w:Height/DimensionTransform,xam:Height/DimensionTransform)String");
        a.item("Background", "(wf:BackColor/ColorTransform)Brush");
    };
    CategoryChartDescriptionMetadata.b = function (a) {
        if (CategoryChartDescriptionMetadata.a == null) {
            CategoryChartDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            CategoryChartDescriptionMetadata.c(CategoryChartDescriptionMetadata.a);
        }
        if (a.k(CategoryChartDescriptionMetadata.a)) {
            return;
        }
        a.ac(CategoryChartDescriptionMetadata.a);
    };
    CategoryChartDescriptionMetadata.c = function (a) {
        XYChartDescriptionMetadata.c(a);
        a.item("TransitionInDuration", "Number:int");
        a.item("TransitionOutDuration", "Number:int");
        a.item("TransitionInEasingFunctionRef", "(w:TransitionInEasingFunction,wf:TransitionInEasingFunction)MethodRef");
        a.item("TransitionOutEasingFunctionRef", "(w:TransitionOutEasingFunction,wf:TransitionOutEasingFunction)MethodRef");
        a.item("ChartType", "ExportedType:string:CategoryChartType");
        a.item("ChartType@names", "Line;Area;Column;Point;StepLine;StepArea;Spline;SplineArea;Waterfall;Auto");
        a.item("MarkerCollisionAvoidance", "ExportedType:string:CategorySeriesMarkerCollisionAvoidance");
        a.item("MarkerCollisionAvoidance@names", "None;Omit");
        a.item("IsSplineShapePartOfRange", "Boolean");
        a.item("IsTransitionInEnabled", "Boolean");
        a.item("TransitionInMode", "ExportedType:string:CategoryTransitionInMode");
        a.item("TransitionInMode@names", "Auto;FromZero;SweepFromLeft;SweepFromRight;SweepFromTop;SweepFromBottom;SweepFromCenter;AccordionFromLeft;AccordionFromRight;AccordionFromTop;AccordionFromBottom;Expand;SweepFromCategoryAxisMinimum;SweepFromCategoryAxisMaximum;SweepFromValueAxisMinimum;SweepFromValueAxisMaximum;AccordionFromCategoryAxisMinimum;AccordionFromCategoryAxisMaximum;AccordionFromValueAxisMinimum;AccordionFromValueAxisMaximum;FromParent");
        a.item("TransitionInSpeedType", "ExportedType:string:TransitionInSpeedType");
        a.item("TransitionInSpeedType@names", "Auto;Normal;ValueScaled;IndexScaled;Random");
        a.item("XAxisInterval", "Number:double");
        a.item("XAxisMinorInterval", "Number:double");
        a.item("XAxisGap", "Number:double");
        a.item("XAxisMinimumGapSize", "Number:double");
        a.item("XAxisMaximumGap", "Number:double");
        a.item("XAxisOverlap", "Number:double");
        a.item("YAxisInterval", "Number:double");
        a.item("AutoMarginAndAngleUpdateMode", "ExportedType:string:AutoMarginsAndAngleUpdateMode");
        a.item("AutoMarginAndAngleUpdateMode@names", "None;SizeChanging;SizeChangingAndZoom");
        a.item("ShouldAutoExpandMarginForInitialLabels", "Boolean");
        a.item("ShouldConsiderAutoRotationForInitialLabels", "Boolean");
        a.item("AutoExpandMarginExtraPadding", "Number:double");
        a.item("AutoExpandMarginMaximumValue", "Number:double");
        a.item("YAxisFavorLabellingScaleEnd", "Boolean");
        a.item("XAxisEnhancedIntervalPreferMoreCategoryLabels", "Boolean");
        a.item("YAxisEnhancedIntervalPreferMoreCategoryLabels", "Boolean");
        a.item("YAxisAutoRangeBufferMode", "ExportedType:string:AxisRangeBufferMode");
        a.item("YAxisAutoRangeBufferMode@names", "Auto;Series;SeriesMinimum;SeriesMaximum;None");
        a.item("YAxisIsLogarithmic", "Boolean");
        a.item("YAxisLogarithmBase", "Number:int");
        a.item("YAxisMinimumValue", "Number:double");
        a.item("YAxisMaximumValue", "Number:double");
        a.item("YAxisMinorInterval", "Number:double");
        a.item("NegativeBrushes", "BrushCollection:string");
        a.item("NegativeOutlines", "BrushCollection:string");
        a.item("YAxisAbbreviateLargeNumbers", "Boolean");
        a.item("XAxisZoomMaximumCategoryRange", "Number:double");
        a.item("XAxisZoomMaximumItemSpan", "Number:double");
        a.item("XAxisZoomToCategoryRange", "Number:double");
        a.item("XAxisZoomToCategoryStart", "Number:double");
        a.item("XAxisZoomToItemSpan", "Number:double");
        a.item("IsCategoryHighlightingEnabled", "Boolean");
        a.item("IsItemHighlightingEnabled", "Boolean");
        CategoryChartDescriptionMetadata.e(a);
    };
    CategoryChartDescriptionMetadata.d = function (a) {
        CategoryChartDescriptionMetadata.b(a);
        a.ae("CategoryChart", function () { return new CategoryChartDescription(); });
        a.ad("CategoryChart", CategoryChartDescriptionMetadata.a);
    };
    CategoryChartDescriptionMetadata.$t = markType(CategoryChartDescriptionMetadata, 'CategoryChartDescriptionMetadata');
    CategoryChartDescriptionMetadata.a = null;
    return CategoryChartDescriptionMetadata;
}(Base));
export { CategoryChartDescriptionMetadata };
