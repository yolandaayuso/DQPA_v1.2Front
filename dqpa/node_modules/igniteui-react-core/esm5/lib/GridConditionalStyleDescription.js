/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var GridConditionalStyleDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GridConditionalStyleDescription, _super);
    function GridConditionalStyleDescription() {
        var _this = _super.call(this) || this;
        _this.w = null;
        _this.o = false;
        _this.h = null;
        _this.t = null;
        _this.j = null;
        _this.m = false;
        _this.l = false;
        _this.n = false;
        _this.v = null;
        _this.u = null;
        return _this;
    }
    GridConditionalStyleDescription.prototype.get_type = function () {
        return "GridConditionalStyle";
    };
    Object.defineProperty(GridConditionalStyleDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStyleDescription.prototype, "styleKey", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.g("StyleKey");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStyleDescription.prototype, "isTransitionInEnabled", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.g("IsTransitionInEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStyleDescription.prototype, "properties", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.g("Properties");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStyleDescription.prototype, "conditionString", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.g("ConditionString");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStyleDescription.prototype, "condition", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.g("Condition");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStyleDescription.prototype, "isFieldMinimumNeeded", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.g("IsFieldMinimumNeeded");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStyleDescription.prototype, "isFieldMaximumNeeded", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.g("IsFieldMaximumNeeded");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStyleDescription.prototype, "isFieldSumNeeded", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.g("IsFieldSumNeeded");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStyleDescription.prototype, "propertyUpdatedRef", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.g("PropertyUpdatedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStyleDescription.prototype, "filterStringErrorsParsingRef", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.g("FilterStringErrorsParsingRef");
        },
        enumerable: false,
        configurable: true
    });
    GridConditionalStyleDescription.$t = markType(GridConditionalStyleDescription, 'GridConditionalStyleDescription', Description.$);
    return GridConditionalStyleDescription;
}(Description));
export { GridConditionalStyleDescription };
