/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { OperatorSelectorValueChangedEventArgsDescriptionMetadata } from "./OperatorSelectorValueChangedEventArgsDescriptionMetadata";
import { OperatorSelectorOpeningEventArgsDescriptionMetadata } from "./OperatorSelectorOpeningEventArgsDescriptionMetadata";
import { OperatorSelectorClosingEventArgsDescriptionMetadata } from "./OperatorSelectorClosingEventArgsDescriptionMetadata";
import { DataGridComparisonOperatorSelectorDescription } from "./DataGridComparisonOperatorSelectorDescription";
/**
 * @hidden
 */
var DataGridComparisonOperatorSelectorDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DataGridComparisonOperatorSelectorDescriptionMetadata, _super);
    function DataGridComparisonOperatorSelectorDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGridComparisonOperatorSelectorDescriptionMetadata.b = function (a) {
        if (DataGridComparisonOperatorSelectorDescriptionMetadata.a == null) {
            DataGridComparisonOperatorSelectorDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            DataGridComparisonOperatorSelectorDescriptionMetadata.c(DataGridComparisonOperatorSelectorDescriptionMetadata.a);
        }
        if (a.k(DataGridComparisonOperatorSelectorDescriptionMetadata.a)) {
            return;
        }
        a.ac(DataGridComparisonOperatorSelectorDescriptionMetadata.a);
        OperatorSelectorValueChangedEventArgsDescriptionMetadata.d(a);
        OperatorSelectorOpeningEventArgsDescriptionMetadata.d(a);
        OperatorSelectorClosingEventArgsDescriptionMetadata.d(a);
    };
    DataGridComparisonOperatorSelectorDescriptionMetadata.c = function (a) {
        a.item("Value", "ExportedType:string:ColumnComparisonConditionOperatorType");
        a.item("Value@names", "Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom");
        a.item("CustomFilterID", "String");
        a.item("CustomFilterIndex", "Number:int");
        a.item("DataType", "ExportedType:string:DataSourceSchemaPropertyType");
        a.item("DataType@names", "StringValue;IntValue;BooleanValue;LongValue;ShortValue;DoubleValue;DecimalValue;SingleValue;DateTimeValue;DateTimeOffsetValue;ByteValue;ObjectValue");
        a.item("MaxHeight", "Number:int");
        a.item("TextColor", "Brush");
        a.item("Background", "Brush");
        a.item("ValueChangedRef", "EventRef::valueChanged");
        a.item("OpeningRef", "EventRef::opening");
        a.item("OpenedRef", "EventRef::opened");
        a.item("ClosingRef", "EventRef::closing");
    };
    DataGridComparisonOperatorSelectorDescriptionMetadata.d = function (a) {
        DataGridComparisonOperatorSelectorDescriptionMetadata.b(a);
        a.ae("DataGridComparisonOperatorSelector", function () { return new DataGridComparisonOperatorSelectorDescription(); });
        a.ad("DataGridComparisonOperatorSelector", DataGridComparisonOperatorSelectorDescriptionMetadata.a);
    };
    DataGridComparisonOperatorSelectorDescriptionMetadata.$t = markType(DataGridComparisonOperatorSelectorDescriptionMetadata, 'DataGridComparisonOperatorSelectorDescriptionMetadata');
    DataGridComparisonOperatorSelectorDescriptionMetadata.a = null;
    return DataGridComparisonOperatorSelectorDescriptionMetadata;
}(Base));
export { DataGridComparisonOperatorSelectorDescriptionMetadata };
