/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { List$1 } from "./List$1";
import { stringReplace, stringContains } from "./string";
/**
 * @hidden
 */
var ShapeChartUtils = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ShapeChartUtils, _super);
    function ShapeChartUtils() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShapeChartUtils.a = function (a) {
        if (a == 13 || a == 3) {
            return 1;
        }
        if (a == 15 || a == 5) {
            return 2;
        }
        if (a == 1) {
            return 3;
        }
        return 0;
    };
    ShapeChartUtils.ad = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.o, a);
    };
    ShapeChartUtils.o = function (a) {
        a = a.toLowerCase();
        a = stringReplace(stringReplace(a, "[", ""), "]", "");
        return Base.equalsStatic(a, "y") || Base.equalsStatic(a, "yvalue") || Base.equalsStatic(a, "ycolumn") || Base.equalsStatic(a, "ypoint") || Base.equalsStatic(a, "ylocation") || Base.equalsStatic(a, "ycoordinate") || Base.equalsStatic(a, "ydimension") || Base.equalsStatic(a, "lat") || Base.equalsStatic(a, "latitude");
    };
    ShapeChartUtils.ac = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.n, a);
    };
    ShapeChartUtils.n = function (a) {
        a = a.toLowerCase();
        a = stringReplace(stringReplace(a, "[", ""), "]", "");
        return Base.equalsStatic(a, "x") || Base.equalsStatic(a, "xvalue") || Base.equalsStatic(a, "xcolumn") || Base.equalsStatic(a, "xpoint") || Base.equalsStatic(a, "xlocation") || Base.equalsStatic(a, "xcoordinate") || Base.equalsStatic(a, "xdimension") || Base.equalsStatic(a, "lon") || Base.equalsStatic(a, "longitude");
    };
    ShapeChartUtils.u = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.f, a);
    };
    ShapeChartUtils.f = function (a) {
        a = a.toLowerCase();
        a = stringReplace(stringReplace(a, "[", ""), "]", "");
        return Base.equalsStatic(a, "r") || Base.equalsStatic(a, "radius") || Base.equalsStatic(a, "radiusvalue") || Base.equalsStatic(a, "rvalue") || Base.equalsStatic(a, "rcolumn") || Base.equalsStatic(a, "rdimension") || Base.equalsStatic(a, "bubble") || Base.equalsStatic(a, "bubblesize") || Base.equalsStatic(a, "size");
    };
    ShapeChartUtils.aa = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.l, a);
    };
    ShapeChartUtils.l = function (a) {
        a = a.toLowerCase();
        a = stringReplace(stringReplace(a, "[", ""), "]", "");
        return Base.equalsStatic(a, "v") || Base.equalsStatic(a, "value") || Base.equalsStatic(a, "vcolumn") || Base.equalsStatic(a, "z") || Base.equalsStatic(a, "zvalue") || Base.equalsStatic(a, "zcolumn") || Base.equalsStatic(a, "zdimension") || Base.equalsStatic(a, "zcoordinate") || Base.equalsStatic(a, "magnitude") || Base.equalsStatic(a, "elevation") || Base.equalsStatic(a, "depth") || Base.equalsStatic(a, "capacity") || Base.equalsStatic(a, "distance");
    };
    ShapeChartUtils.p = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.b, a);
    };
    ShapeChartUtils.b = function (a) {
        a = a.toLowerCase();
        a = stringReplace(stringReplace(a, "[", ""), "]", "");
        return Base.equalsStatic(a, "f") || Base.equalsStatic(a, "fill") || Base.equalsStatic(a, "fillvalue") || Base.equalsStatic(a, "fvalue") || Base.equalsStatic(a, "fcolumn") || Base.equalsStatic(a, "color") || Base.equalsStatic(a, "colorvalue") || Base.equalsStatic(a, "cvalue") || Base.equalsStatic(a, "ccolumn");
    };
    ShapeChartUtils.s = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.e, a);
    };
    ShapeChartUtils.e = function (a) {
        a = a.toLowerCase();
        a = stringReplace(stringReplace(a, "[", ""), "]", "");
        return Base.equalsStatic(a, "l") || Base.equalsStatic(a, "label") || Base.equalsStatic(a, "lvalue") || Base.equalsStatic(a, "lcolumn") || Base.equalsStatic(a, "n") || Base.equalsStatic(a, "name") || Base.equalsStatic(a, "nvalue") || Base.equalsStatic(a, "ncolumn");
    };
    ShapeChartUtils.r = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.d, a);
    };
    ShapeChartUtils.d = function (a) {
        a = a.toLowerCase();
        a = stringReplace(stringReplace(a, "[", ""), "]", "");
        return Base.equalsStatic(a, "g") || Base.equalsStatic(a, "groupping") || Base.equalsStatic(a, "group") || Base.equalsStatic(a, "gvalue") || Base.equalsStatic(a, "gcolumn") || Base.equalsStatic(a, "region") || Base.equalsStatic(a, "type");
    };
    ShapeChartUtils.y = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.j, a);
    };
    ShapeChartUtils.j = function (a) {
        a = a.toLowerCase();
        a = stringReplace(stringReplace(a, "[", ""), "]", "");
        return Base.equalsStatic(a, "points") || Base.equalsStatic(a, "shapes") || Base.equalsStatic(a, "locations") || Base.equalsStatic(a, "positions") || Base.equalsStatic(a, "coordinates") || Base.equalsStatic(a, "vectors");
    };
    ShapeChartUtils.v = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.g, a);
    };
    ShapeChartUtils.g = function (a) {
        a = a.toLowerCase();
        return stringContains(a, "marginalprofit");
    };
    ShapeChartUtils.w = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.h, a);
    };
    ShapeChartUtils.h = function (a) {
        a = a.toLowerCase();
        return stringContains(a, "revenue") || stringContains(a, "totalsales");
    };
    ShapeChartUtils.q = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.c, a);
    };
    ShapeChartUtils.c = function (a) {
        a = a.toLowerCase();
        return stringContains(a, "fixedcost") || stringContains(a, "fixedexpense");
    };
    ShapeChartUtils.ab = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.m, a);
    };
    ShapeChartUtils.m = function (a) {
        a = a.toLowerCase();
        return stringContains(a, "variablecost") || stringContains(a, "variableexpense");
    };
    ShapeChartUtils.z = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.k, a);
    };
    ShapeChartUtils.k = function (a) {
        a = a.toLowerCase();
        return stringContains(a, "totalcost") || stringContains(a, "totalexpense");
    };
    ShapeChartUtils.x = function (a) {
        return ShapeChartUtils.t(ShapeChartUtils.i, a);
    };
    ShapeChartUtils.i = function (a) {
        a = a.toLowerCase();
        return stringContains(a, "units") || stringContains(a, "volume") || stringContains(a, "quantity");
    };
    ShapeChartUtils.t = function (a, b) {
        var c = new List$1(String_$type, 0);
        for (var d = 0; d < b.count; d++) {
            if (a(b.item(d))) {
                c.add(b.item(d));
                b.removeAt(d);
                d--;
            }
        }
        return c;
    };
    ShapeChartUtils.$t = markType(ShapeChartUtils, 'ShapeChartUtils');
    return ShapeChartUtils;
}(Base));
export { ShapeChartUtils };
