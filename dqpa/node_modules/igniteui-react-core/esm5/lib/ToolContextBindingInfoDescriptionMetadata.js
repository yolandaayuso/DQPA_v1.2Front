/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ToolContextBindingInfoDescription } from "./ToolContextBindingInfoDescription";
/**
 * @hidden
 */
var ToolContextBindingInfoDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolContextBindingInfoDescriptionMetadata, _super);
    function ToolContextBindingInfoDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolContextBindingInfoDescriptionMetadata.b = function (a) {
        if (ToolContextBindingInfoDescriptionMetadata.a == null) {
            ToolContextBindingInfoDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ToolContextBindingInfoDescriptionMetadata.c(ToolContextBindingInfoDescriptionMetadata.a);
        }
        if (a.k(ToolContextBindingInfoDescriptionMetadata.a)) {
            return;
        }
        a.ac(ToolContextBindingInfoDescriptionMetadata.a);
    };
    ToolContextBindingInfoDescriptionMetadata.c = function (a) {
        a.item("__marshalByValue", "Boolean");
        a.item("ContextKey", "String");
        a.item("PropertyName", "String");
        a.item("BindingMode", "ExportedType:string:ToolContextBindingMode");
        a.item("BindingMode@names", "OneWay;TwoWay");
    };
    ToolContextBindingInfoDescriptionMetadata.d = function (a) {
        ToolContextBindingInfoDescriptionMetadata.b(a);
        a.ae("ToolContextBindingInfo", function () { return new ToolContextBindingInfoDescription(); });
        a.ad("ToolContextBindingInfo", ToolContextBindingInfoDescriptionMetadata.a);
    };
    ToolContextBindingInfoDescriptionMetadata.$t = markType(ToolContextBindingInfoDescriptionMetadata, 'ToolContextBindingInfoDescriptionMetadata');
    ToolContextBindingInfoDescriptionMetadata.a = null;
    return ToolContextBindingInfoDescriptionMetadata;
}(Base));
export { ToolContextBindingInfoDescriptionMetadata };
