/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { GridCompoundConditionalStyleDescriptionMetadata } from "./GridCompoundConditionalStyleDescriptionMetadata";
import { TextIconSetConditionalStyleDescription } from "./TextIconSetConditionalStyleDescription";
/**
 * @hidden
 */
var TextIconSetConditionalStyleDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TextIconSetConditionalStyleDescriptionMetadata, _super);
    function TextIconSetConditionalStyleDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextIconSetConditionalStyleDescriptionMetadata.b = function (a) {
        if (TextIconSetConditionalStyleDescriptionMetadata.a == null) {
            TextIconSetConditionalStyleDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            TextIconSetConditionalStyleDescriptionMetadata.c(TextIconSetConditionalStyleDescriptionMetadata.a);
        }
        if (a.k(TextIconSetConditionalStyleDescriptionMetadata.a)) {
            return;
        }
        a.ac(TextIconSetConditionalStyleDescriptionMetadata.a);
    };
    TextIconSetConditionalStyleDescriptionMetadata.c = function (a) {
        GridCompoundConditionalStyleDescriptionMetadata.c(a);
        a.item("IconType", "ExportedType:string:TextIconSetBuiltInTypes");
        a.item("IconType@names", "ThreeArrows;CheckOrDashOrX;ThreeBoxes;ThreeFaces");
    };
    TextIconSetConditionalStyleDescriptionMetadata.d = function (a) {
        TextIconSetConditionalStyleDescriptionMetadata.b(a);
        a.ae("TextIconSetConditionalStyle", function () { return new TextIconSetConditionalStyleDescription(); });
        a.ad("TextIconSetConditionalStyle", TextIconSetConditionalStyleDescriptionMetadata.a);
    };
    TextIconSetConditionalStyleDescriptionMetadata.$t = markType(TextIconSetConditionalStyleDescriptionMetadata, 'TextIconSetConditionalStyleDescriptionMetadata');
    TextIconSetConditionalStyleDescriptionMetadata.a = null;
    return TextIconSetConditionalStyleDescriptionMetadata;
}(Base));
export { TextIconSetConditionalStyleDescriptionMetadata };
