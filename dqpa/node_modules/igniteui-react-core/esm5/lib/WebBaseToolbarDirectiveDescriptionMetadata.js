/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebOverlaySettingsDescriptionMetadata } from "./WebOverlaySettingsDescriptionMetadata";
import { WebToggleViewCancelableEventArgsDescriptionMetadata } from "./WebToggleViewCancelableEventArgsDescriptionMetadata";
import { WebToggleViewEventArgsDescriptionMetadata } from "./WebToggleViewEventArgsDescriptionMetadata";
import { WebColumnToggledEventArgsDescriptionMetadata } from "./WebColumnToggledEventArgsDescriptionMetadata";
import { WebGridToolbarBaseActionDescriptionMetadata } from "./WebGridToolbarBaseActionDescriptionMetadata";
/**
 * @hidden
 */
var WebBaseToolbarDirectiveDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebBaseToolbarDirectiveDescriptionMetadata, _super);
    function WebBaseToolbarDirectiveDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebBaseToolbarDirectiveDescriptionMetadata.b = function (a) {
        if (WebBaseToolbarDirectiveDescriptionMetadata.a == null) {
            WebBaseToolbarDirectiveDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebBaseToolbarDirectiveDescriptionMetadata.c(WebBaseToolbarDirectiveDescriptionMetadata.a);
        }
        if (a.k(WebBaseToolbarDirectiveDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebBaseToolbarDirectiveDescriptionMetadata.a);
        WebOverlaySettingsDescriptionMetadata.d(a);
        WebToggleViewCancelableEventArgsDescriptionMetadata.d(a);
        WebToggleViewEventArgsDescriptionMetadata.d(a);
        WebColumnToggledEventArgsDescriptionMetadata.d(a);
    };
    WebBaseToolbarDirectiveDescriptionMetadata.c = function (a) {
        WebGridToolbarBaseActionDescriptionMetadata.c(a);
        a.item("__qualifiedNameTS", "String:BaseToolbarDirective");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__skipSuffix", "Boolean");
        a.item("ColumnListHeight", "String");
        a.item("Title", "String");
        a.item("Prompt", "String");
        a.item("OverlaySettings", "ExportedType:WebOverlaySettings");
        a.item("Name", "String");
        a.item("OpeningRef", "EventRef::opening:customEvent");
        a.item("OpenedRef", "EventRef::opened:customEvent");
        a.item("ClosingRef", "EventRef::closing:customEvent");
        a.item("ClosedRef", "EventRef::closed:customEvent");
        a.item("ColumnToggleRef", "EventRef::columnToggle:customEvent");
    };
    WebBaseToolbarDirectiveDescriptionMetadata.d = function (a) {
        WebBaseToolbarDirectiveDescriptionMetadata.b(a);
        a.ad("WebBaseToolbarDirective", WebBaseToolbarDirectiveDescriptionMetadata.a);
    };
    WebBaseToolbarDirectiveDescriptionMetadata.$t = markType(WebBaseToolbarDirectiveDescriptionMetadata, 'WebBaseToolbarDirectiveDescriptionMetadata');
    WebBaseToolbarDirectiveDescriptionMetadata.a = null;
    return WebBaseToolbarDirectiveDescriptionMetadata;
}(Base));
export { WebBaseToolbarDirectiveDescriptionMetadata };
