/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "./type";
/**
 * @hidden
 */
var Thickness = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(Thickness, _super);
    function Thickness(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this._bottom = 0;
        _this._left = 0;
        _this._right = 0;
        _this._top = 0;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this.bottom = _this.left = _this.right = _this.top = c;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    var e = _rest[2];
                    var f = _rest[3];
                    _this.left = c;
                    _this.top = d;
                    _this.right = e;
                    _this.bottom = f;
                }
                break;
            case 2:
                {
                    _this.bottom = NaN;
                    _this.left = NaN;
                    _this.right = NaN;
                    _this.top = NaN;
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(Thickness.prototype, "bottom", {
        get: function () {
            return this._bottom;
        },
        set: function (a) {
            this._bottom = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Thickness.prototype, "left", {
        get: function () {
            return this._left;
        },
        set: function (a) {
            this._left = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Thickness.prototype, "right", {
        get: function () {
            return this._right;
        },
        set: function (a) {
            this._right = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Thickness.prototype, "top", {
        get: function () {
            return this._top;
        },
        set: function (a) {
            this._top = a;
        },
        enumerable: false,
        configurable: true
    });
    Thickness.prototype.a = function (a) {
        return this.bottom == a.bottom && this.top == a.top && this.left == a.left && this.right == a.right;
    };
    Thickness.prototype.toString = function () {
        var a = this.left.toString() + "," + this.top.toString() + "," + this.right.toString() + "," + this.bottom.toString();
        return a;
    };
    Thickness.$t = markType(Thickness, 'Thickness');
    return Thickness;
}(Base));
export { Thickness };
