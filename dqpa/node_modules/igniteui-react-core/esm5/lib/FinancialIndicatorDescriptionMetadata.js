/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { FinancialSeriesDescriptionMetadata } from "./FinancialSeriesDescriptionMetadata";
/**
 * @hidden
 */
var FinancialIndicatorDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialIndicatorDescriptionMetadata, _super);
    function FinancialIndicatorDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FinancialIndicatorDescriptionMetadata.b = function (a) {
        if (FinancialIndicatorDescriptionMetadata.a == null) {
            FinancialIndicatorDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            FinancialIndicatorDescriptionMetadata.c(FinancialIndicatorDescriptionMetadata.a);
        }
        if (a.k(FinancialIndicatorDescriptionMetadata.a)) {
            return;
        }
        a.ac(FinancialIndicatorDescriptionMetadata.a);
    };
    FinancialIndicatorDescriptionMetadata.c = function (a) {
        FinancialSeriesDescriptionMetadata.c(a);
        a.item("DisplayType", "ExportedType:string:IndicatorDisplayType");
        a.item("DisplayType@names", "Line;Area;Column");
        a.item("IgnoreFirst", "Number:int");
        a.item("TrendLineType", "ExportedType:string:TrendLineType");
        a.item("TrendLineType@names", "None;LinearFit;QuadraticFit;CubicFit;QuarticFit;QuinticFit;LogarithmicFit;ExponentialFit;PowerLawFit;SimpleAverage;ExponentialAverage;ModifiedAverage;CumulativeAverage;WeightedAverage");
        a.item("TrendLineBrush", "Brush");
        a.item("ActualTrendLineBrush", "Brush");
        a.item("TrendLineThickness", "Number:double");
        a.item("TrendLineDashArray", "DoubleCollection:double");
        a.item("TrendLinePeriod", "Number:int");
    };
    FinancialIndicatorDescriptionMetadata.d = function (a) {
        FinancialIndicatorDescriptionMetadata.b(a);
        a.ad("FinancialIndicator", FinancialIndicatorDescriptionMetadata.a);
    };
    FinancialIndicatorDescriptionMetadata.$t = markType(FinancialIndicatorDescriptionMetadata, 'FinancialIndicatorDescriptionMetadata');
    FinancialIndicatorDescriptionMetadata.a = null;
    return FinancialIndicatorDescriptionMetadata;
}(Base));
export { FinancialIndicatorDescriptionMetadata };
