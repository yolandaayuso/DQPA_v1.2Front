/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __read, __spreadArray } from "tslib";
import { Base, markType, typeCast, typeGetValue, EnumUtil, enumGetBox, IComparable_$type, Date_$type, String_$type, Number_$type, Boolean_$type, getInstanceType } from "./type";
import { IFilterExpression_$type } from "./IFilterExpression";
import { DataSourceSchemaPropertyType_$type } from "./DataSourceSchemaPropertyType";
import { FilterExpressionOperatorType_$type } from "./FilterExpressionOperatorType";
import { FilterExpressionFunctionType, FilterExpressionFunctionType_$type } from "./FilterExpressionFunctionType";
import { dateMinValue, dateGetMonth, dateGetDate, dateNow, dateAddDays, dateAddMonths, dateAddYears } from "./date";
import { Convert } from "./Convert";
import { IOperationFilterExpression_$type } from "./IOperationFilterExpression";
import { NotImplementedException } from "./NotImplementedException";
import { InvalidOperationException } from "./InvalidOperationException";
import { intDivide, isNaN_ } from "./number";
import { CompareUtil } from "./compareUtil";
import { stringCompareTo, stringConcat, stringEndsWith, stringReplace, stringStartsWith, stringContains } from "./string";
import { IFunctionFilterExpression_$type } from "./IFunctionFilterExpression";
import { FilterExpressionCollection } from "./FilterExpressionCollection";
import { IPropertyReferenceFilterExpression_$type } from "./IPropertyReferenceFilterExpression";
import { ILiteralFilterExpression_$type } from "./ILiteralFilterExpression";
/**
 * @hidden
 */
var FilterFactory = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FilterFactory, _super);
    function FilterFactory() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.av = dateMinValue();
        return _this;
    }
    Object.defineProperty(FilterFactory.prototype, "todayOverride", {
        get: function () {
            return this.av;
        },
        set: function (a) {
            this.av = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FilterFactory, "instance", {
        get: function () {
            if (FilterFactory.at == null) {
                FilterFactory.at = new FilterFactory();
            }
            return FilterFactory.at;
        },
        enumerable: false,
        configurable: true
    });
    FilterFactory.build = function (a) {
        var b = FilterFactory.instance;
        return a(b);
    };
    FilterFactory.prototype.property = function (a) {
        return FilterExpression.property(a);
    };
    FilterFactory.prototype.literal = function (a) {
        return FilterExpression.literal(a);
    };
    FilterFactory.prototype.group = function (a) {
        return FilterExpression.operation(a, 15, null);
    };
    FilterFactory.prototype.and = function (a, b) {
        return FilterExpression.operation(a, 7, b);
    };
    FilterFactory.prototype.or = function (a, b) {
        return FilterExpression.operation(a, 8, b);
    };
    FilterFactory.prototype.not = function (a) {
        return FilterExpression.operation(a, 9, null);
    };
    FilterFactory.prototype.add = function (a, b) {
        return FilterExpression.operation(a, 10, b);
    };
    FilterFactory.prototype.divide = function (a, b) {
        return FilterExpression.operation(a, 13, b);
    };
    FilterFactory.prototype.equal = function (a, b) {
        return FilterExpression.operation(a, 1, b);
    };
    FilterFactory.prototype.greaterThan = function (a, b) {
        return FilterExpression.operation(a, 3, b);
    };
    FilterFactory.prototype.greaterThanOrEqual = function (a, b) {
        return FilterExpression.operation(a, 4, b);
    };
    FilterFactory.prototype.lessThan = function (a, b) {
        return FilterExpression.operation(a, 5, b);
    };
    FilterFactory.prototype.lessThanOrEqual = function (a, b) {
        return FilterExpression.operation(a, 6, b);
    };
    FilterFactory.prototype.modulus = function (a, b) {
        return FilterExpression.operation(a, 14, b);
    };
    FilterFactory.prototype.multiply = function (a, b) {
        return FilterExpression.operation(a, 12, b);
    };
    FilterFactory.prototype.notEqual = function (a, b) {
        return FilterExpression.operation(a, 2, b);
    };
    FilterFactory.prototype.subtract = function (a, b) {
        return FilterExpression.operation(a, 11, b);
    };
    FilterFactory.prototype.ceiling = function (a) {
        return FilterExpression.func(19, a);
    };
    FilterFactory.prototype.concat = function (a, b) {
        return FilterExpression.func(10, a, b);
    };
    FilterFactory.prototype.concat1 = function (a, b) {
        return FilterExpression.func(10, a, FilterExpression.literal(b));
    };
    FilterFactory.prototype.contains = function (a, b) {
        if (typeof b === 'string') {
            b = FilterExpression.literal(b);
        }
        return FilterExpression.func(0, a, b);
    };
    FilterFactory.prototype.day = function (a) {
        return FilterExpression.func(11, a);
    };
    FilterFactory.prototype.endsWith = function (a, b) {
        if (typeof b === 'string') {
            b = FilterExpression.literal(b);
        }
        return FilterExpression.func(1, a, b);
    };
    FilterFactory.prototype.floor = function (a) {
        return FilterExpression.func(18, a);
    };
    FilterFactory.prototype.hour = function (a) {
        return FilterExpression.func(12, a);
    };
    FilterFactory.prototype.indexOf = function (a, b) {
        if (typeof b === 'string') {
            b = FilterExpression.literal(b);
        }
        return FilterExpression.func(4, a, b);
    };
    FilterFactory.prototype.length = function (a) {
        return FilterExpression.func(FilterExpressionFunctionType.Length, a);
    };
    FilterFactory.prototype.minute = function (a) {
        return FilterExpression.func(13, a);
    };
    FilterFactory.prototype.month = function (a) {
        return FilterExpression.func(14, a);
    };
    FilterFactory.prototype.replace = function (a, b, c) {
        if (typeof b === 'string') {
            b = FilterExpression.literal(b);
        }
        if (typeof c === 'string') {
            c = FilterExpression.literal(c);
        }
        return FilterExpression.func(5, a, b, c);
    };
    FilterFactory.prototype.round = function (a) {
        return FilterExpression.func(17, a);
    };
    FilterFactory.prototype.second = function (a) {
        return FilterExpression.func(15, a);
    };
    FilterFactory.prototype.startsWith = function (a, b) {
        if (typeof b === 'string') {
            b = FilterExpression.literal(b);
        }
        return FilterExpression.func(2, a, b);
    };
    FilterFactory.prototype.substring = function (a, b, c) {
        if (c === void 0) {
            c = null;
        }
        if (typeof b === 'number') {
            b = FilterExpression.literal(b);
        }
        if (c != null && typeof c === 'number') {
            c = FilterExpression.literal(c);
        }
        if (c != null) {
            return FilterExpression.func(6, a, b, c);
        }
        else {
            return FilterExpression.func(6, a, b);
        }
    };
    FilterFactory.prototype.toLower = function (a) {
        return FilterExpression.func(7, a);
    };
    FilterFactory.prototype.toUpper = function (a) {
        return FilterExpression.func(8, a);
    };
    FilterFactory.prototype.trim = function (a) {
        return FilterExpression.func(9, a);
    };
    FilterFactory.prototype.year = function (a) {
        return FilterExpression.func(16, a);
    };
    FilterFactory.prototype.date = function (a) {
        return FilterExpression.func(20, a);
    };
    FilterFactory.prototype.time = function (a) {
        return FilterExpression.func(21, a);
    };
    FilterFactory.prototype.now = function () {
        return FilterExpression.func(16);
    };
    FilterFactory.prototype.isOf = function (a, b) {
        return FilterExpression.func(16, a);
    };
    FilterFactory.prototype.cast = function (a, b) {
        return FilterExpression.func(24, a);
    };
    FilterFactory.prototype.env = function (a) {
        return FilterExpression.func(25, a);
    };
    FilterFactory.$t = markType(FilterFactory, 'FilterFactory');
    FilterFactory.at = null;
    return FilterFactory;
}(Base));
export { FilterFactory };
/**
 * @hidden
 */
var FilterExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FilterExpression, _super);
    function FilterExpression() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.bj = false;
        _this._precedence = 0;
        _this.bk = false;
        return _this;
    }
    FilterExpression.prototype.get_precedence = function () {
        return this._precedence;
    };
    Object.defineProperty(FilterExpression.prototype, "precedence", {
        get: function () {
            return this.get_precedence();
        },
        enumerable: false,
        configurable: true
    });
    FilterExpression.prototype.markAutoGenerated = function () {
        this.bk = true;
    };
    Object.defineProperty(FilterExpression.prototype, "isAutoGenerated", {
        get: function () {
            return this.bk;
        },
        enumerable: false,
        configurable: true
    });
    FilterExpression.isFilterExpression = function (a) {
        return typeCast(IFilterExpression_$type, a) !== null;
    };
    FilterExpression.isSchemaType = function (a) {
        return typeCast(DataSourceSchemaPropertyType_$type, a) !== null;
    };
    FilterExpression.operation = function (a, b, c) {
        if (FilterExpression.isFilterExpression(a)) {
            var d = a;
            if (FilterExpression.isFilterExpression(c)) {
                var e = c;
                return new OperationFilterExpression(d, b, e);
            }
            else {
                return new OperationFilterExpression(d, b, c);
            }
        }
        else {
            var f = a;
            if (FilterExpression.isFilterExpression(c)) {
                var g = c;
                return new OperationFilterExpression(f, b, g);
            }
            else {
                return new OperationFilterExpression(f, b, c);
            }
        }
    };
    FilterExpression.func = function (a) {
        var b = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            b[_i - 1] = arguments[_i];
        }
        return new (FunctionFilterExpression.bind.apply(FunctionFilterExpression, __spreadArray([void 0, a], __read(b), false)))();
    };
    FilterExpression.prototype.bq = function () {
        this.bj = this.bo();
    };
    FilterExpression.property = function (a) {
        if (a == null) {
            return null;
        }
        var b = new PropertyReferenceFilterExpression(null);
        b.propertyReference = a;
        return b;
    };
    FilterExpression.nullLiteral = function () {
        var a = new LiteralFilterExpression(null, false);
        return a;
    };
    FilterExpression.literal = function (a) {
        var b = new LiteralFilterExpression(a, false);
        return b;
    };
    FilterExpression.unquotedLiteral = function (a) {
        var b = new LiteralFilterExpression(a, true);
        return b;
    };
    FilterExpression.prototype.match = function (a, b, c) {
        return this.matchWithEnvironment(a, b, c, null);
    };
    FilterExpression.prototype.matchWithEnvironment = function (a, b, c, d) {
        var e = this.evaluateWithEnvironment(a, b, c, d);
        return this.bp(e, b, c);
    };
    FilterExpression.prototype.bp = function (a, b, c) {
        if (!this.bj) {
            return this.bl(a, b, c);
        }
        return a;
    };
    FilterExpression.prototype.bl = function (a, b, c) {
        return Convert.toBoolean(a);
    };
    FilterExpression.prototype.evaluate = function (a, b, c) {
        return this.evaluateWithEnvironment(a, b, c, null);
    };
    FilterExpression.prototype.get_isPropertyReference = function () {
        return false;
    };
    Object.defineProperty(FilterExpression.prototype, "isPropertyReference", {
        get: function () {
            return this.get_isPropertyReference();
        },
        enumerable: false,
        configurable: true
    });
    FilterExpression.prototype.get_isOperation = function () {
        return false;
    };
    Object.defineProperty(FilterExpression.prototype, "isOperation", {
        get: function () {
            return this.get_isOperation();
        },
        enumerable: false,
        configurable: true
    });
    FilterExpression.prototype.get_isFunction = function () {
        return false;
    };
    Object.defineProperty(FilterExpression.prototype, "isFunction", {
        get: function () {
            return this.get_isFunction();
        },
        enumerable: false,
        configurable: true
    });
    FilterExpression.prototype.get_isLiteral = function () {
        return false;
    };
    Object.defineProperty(FilterExpression.prototype, "isLiteral", {
        get: function () {
            return this.get_isLiteral();
        },
        enumerable: false,
        configurable: true
    });
    FilterExpression.prototype.get_isNull = function () {
        return false;
    };
    Object.defineProperty(FilterExpression.prototype, "isNull", {
        get: function () {
            return this.get_isNull();
        },
        enumerable: false,
        configurable: true
    });
    FilterExpression.prototype.get_isWrapper = function () {
        return false;
    };
    Object.defineProperty(FilterExpression.prototype, "isWrapper", {
        get: function () {
            return this.get_isWrapper();
        },
        enumerable: false,
        configurable: true
    });
    FilterExpression.prototype.group = function () {
        return FilterExpression.operation(this, 15, null);
    };
    FilterExpression.prototype.and = function (a) {
        return FilterExpression.operation(this, 7, a);
    };
    FilterExpression.prototype.or = function (a) {
        return FilterExpression.operation(this, 8, a);
    };
    FilterExpression.prototype.not = function () {
        return FilterExpression.operation(this, 9, null);
    };
    FilterExpression.prototype.add = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 10, b);
        }
        else {
            return FilterExpression.operation(this, 10, a);
        }
    };
    FilterExpression.prototype.plus = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 10, b);
        }
        else {
            return FilterExpression.operation(this, 10, a);
        }
    };
    FilterExpression.prototype.divide = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 13, b);
        }
        else {
            return FilterExpression.operation(this, 13, a);
        }
    };
    FilterExpression.prototype.divideBy = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 13, b);
        }
        else {
            return FilterExpression.operation(this, 13, a);
        }
    };
    FilterExpression.prototype.isEqualTo = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 1, b);
        }
        else {
            return FilterExpression.operation(this, 1, a);
        }
    };
    FilterExpression.prototype.isGreaterThan = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 3, b);
        }
        else {
            return FilterExpression.operation(this, 3, a);
        }
    };
    FilterExpression.prototype.isGreaterThanOrEqualTo = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 4, b);
        }
        else {
            return FilterExpression.operation(this, 4, a);
        }
    };
    FilterExpression.prototype.isLessThan = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 5, b);
        }
        else {
            return FilterExpression.operation(this, 5, a);
        }
    };
    FilterExpression.prototype.isLessThanOrEqualTo = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 6, b);
        }
        else {
            return FilterExpression.operation(this, 6, a);
        }
    };
    FilterExpression.prototype.modulo = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 14, b);
        }
        else {
            return FilterExpression.operation(this, 14, a);
        }
    };
    FilterExpression.prototype.multiply = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 12, b);
        }
        else {
            return FilterExpression.operation(this, 12, a);
        }
    };
    FilterExpression.prototype.times = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 12, b);
        }
        else {
            return FilterExpression.operation(this, 12, a);
        }
    };
    FilterExpression.prototype.isNotEqualTo = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 2, b);
        }
        else {
            return FilterExpression.operation(this, 2, a);
        }
    };
    FilterExpression.prototype.subtract = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 11, b);
        }
        else {
            return FilterExpression.operation(this, 11, a);
        }
    };
    FilterExpression.prototype.minus = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.operation(this, 11, b);
        }
        else {
            return FilterExpression.operation(this, 11, a);
        }
    };
    FilterExpression.prototype.ceiling = function () {
        return FilterExpression.func(19, this);
    };
    FilterExpression.prototype.concat = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.func(10, this, b);
        }
        else {
            var c = a;
            return FilterExpression.func(10, this, FilterExpression.literal(c));
        }
    };
    FilterExpression.prototype.contains = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.func(0, this, b);
        }
        else {
            var c = a;
            return FilterExpression.func(0, this, FilterExpression.literal(c));
        }
    };
    FilterExpression.prototype.day = function () {
        return FilterExpression.func(11, this);
    };
    FilterExpression.prototype.endsWith = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.func(1, this, b);
        }
        else {
            var c = a;
            return FilterExpression.func(1, this, FilterExpression.literal(c));
        }
    };
    FilterExpression.prototype.floor = function () {
        return FilterExpression.func(18, this);
    };
    FilterExpression.prototype.hour = function () {
        return FilterExpression.func(12, this);
    };
    FilterExpression.prototype.indexOf = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.func(4, this, b);
        }
        else {
            var c = a;
            return FilterExpression.func(4, this, FilterExpression.literal(c));
        }
    };
    FilterExpression.prototype.length = function () {
        return FilterExpression.func(FilterExpressionFunctionType.Length, this);
    };
    FilterExpression.prototype.minute = function () {
        return FilterExpression.func(13, this);
    };
    FilterExpression.prototype.month = function () {
        return FilterExpression.func(14, this);
    };
    FilterExpression.prototype.isToday = function () {
        return new TodayExpression(1, this);
    };
    FilterExpression.prototype.isTomorrow = function () {
        return new TomorrowExpression(1, this);
    };
    FilterExpression.prototype.isYesterday = function () {
        return new YesterdayExpression(1, this);
    };
    FilterExpression.prototype.isThisWeek = function () {
        return new ThisWeekExpression(1, this);
    };
    FilterExpression.prototype.isNextWeek = function () {
        return new NextWeekExpression(1, this);
    };
    FilterExpression.prototype.isLastWeek = function () {
        return new LastWeekExpression(1, this);
    };
    FilterExpression.prototype.isThisMonth = function () {
        return new ThisMonthExpression(1, this);
    };
    FilterExpression.prototype.isNextMonth = function () {
        return new NextMonthExpression(1, this);
    };
    FilterExpression.prototype.isLastMonth = function () {
        return new LastMonthExpression(1, this);
    };
    FilterExpression.prototype.isThisYear = function () {
        return new ThisYearExpression(1, this);
    };
    FilterExpression.prototype.isNextYear = function () {
        return new NextYearExpression(1, this);
    };
    FilterExpression.prototype.isLastYear = function () {
        return new LastYearExpression(1, this);
    };
    FilterExpression.prototype.isYearToDate = function () {
        return new YearToDateExpression(1, this);
    };
    FilterExpression.prototype.isThisQuarter = function () {
        return new ThisQuarterExpression(1, this);
    };
    FilterExpression.prototype.isNextQuarter = function () {
        return new NextQuarterExpression(1, this);
    };
    FilterExpression.prototype.isLastQuarter = function () {
        return new LastQuarterExpression(1, this);
    };
    FilterExpression.prototype.isQ1 = function () {
        return new Q1Expression(1, this);
    };
    FilterExpression.prototype.isQ2 = function () {
        return new Q2Expression(1, this);
    };
    FilterExpression.prototype.isQ3 = function () {
        return new Q3Expression(1, this);
    };
    FilterExpression.prototype.isQ4 = function () {
        return new Q4Expression(1, this);
    };
    FilterExpression.prototype.replace = function (a, b) {
        if (FilterExpression.isFilterExpression(a)) {
            var c = a;
            if (FilterExpression.isFilterExpression(b)) {
                var d = b;
                return FilterExpression.func(5, this, c, d);
            }
            else {
                var e = b;
                return FilterExpression.func(5, this, c, FilterExpression.literal(e));
            }
        }
        else {
            var f = a;
            if (FilterExpression.isFilterExpression(b)) {
                var g = b;
                return FilterExpression.func(5, this, FilterExpression.literal(f), g);
            }
            else {
                var h = b;
                return FilterExpression.func(5, this, FilterExpression.literal(f), FilterExpression.literal(h));
            }
        }
    };
    FilterExpression.prototype.round = function () {
        return FilterExpression.func(17, this);
    };
    FilterExpression.prototype.second = function () {
        return FilterExpression.func(15, this);
    };
    FilterExpression.prototype.startsWith = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.func(2, this, b);
        }
        else {
            var c = a;
            return FilterExpression.func(2, this, FilterExpression.literal(c));
        }
    };
    FilterExpression.prototype.substring = function (a, b) {
        if (b === void 0) {
            b = null;
        }
        if (FilterExpression.isFilterExpression(a)) {
            var c = a;
            if (b == null) {
                return FilterExpression.func(6, this, c);
            }
            else {
                if (FilterExpression.isFilterExpression(b)) {
                    var d = b;
                    return FilterExpression.func(6, this, c, d);
                }
                else {
                    var e = typeGetValue(b);
                    return FilterExpression.func(6, this, c, FilterExpression.literal(e));
                }
            }
        }
        else {
            var f = typeGetValue(a);
            if (b == null) {
                return FilterExpression.func(6, this, FilterExpression.literal(f));
            }
            else {
                if (FilterExpression.isFilterExpression(b)) {
                    var g = b;
                    return FilterExpression.func(6, this, FilterExpression.literal(f), g);
                }
                else {
                    var h = typeGetValue(b);
                    return FilterExpression.func(6, this, FilterExpression.literal(f), FilterExpression.literal(h));
                }
            }
        }
    };
    FilterExpression.prototype.toLower = function () {
        return FilterExpression.func(7, this);
    };
    FilterExpression.prototype.toUpper = function () {
        return FilterExpression.func(8, this);
    };
    FilterExpression.prototype.trim = function () {
        return FilterExpression.func(9, this);
    };
    FilterExpression.prototype.year = function () {
        return FilterExpression.func(16, this);
    };
    FilterExpression.prototype.date = function () {
        return FilterExpression.func(20, this);
    };
    FilterExpression.prototype.time = function () {
        return FilterExpression.func(21, this);
    };
    FilterExpression.prototype.now = function () {
        return FilterExpression.func(22);
    };
    FilterExpression.prototype.isOf = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.func(23, this, b);
        }
        else {
            var c = a;
            return FilterExpression.func(23, this, FilterExpression.literal(a));
        }
    };
    FilterExpression.prototype.cast = function (a) {
        if (FilterExpression.isFilterExpression(a)) {
            var b = a;
            return FilterExpression.func(24, this, b);
        }
        else if (FilterExpression.isSchemaType(a)) {
            var c = EnumUtil.getEnumValue(DataSourceSchemaPropertyType_$type, a);
            return FilterExpression.func(24, this, FilterExpression.literal(enumGetBox(DataSourceSchemaPropertyType_$type, c)));
        }
        else {
            var d = a;
            return FilterExpression.func(24, this, FilterExpression.literal(d));
        }
    };
    FilterExpression.prototype.env = function (a) {
        return FilterExpression.func(25, FilterExpression.literal(a));
    };
    FilterExpression.$t = markType(FilterExpression, 'FilterExpression', Base.$, [IFilterExpression_$type]);
    return FilterExpression;
}(Base));
export { FilterExpression };
/**
 * @hidden
 */
var OperationFilterExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(OperationFilterExpression, _super);
    function OperationFilterExpression(a, b, c) {
        var _this = _super.call(this) || this;
        _this.bs = null;
        _this.bu = false;
        _this.bt = null;
        _this.bv = false;
        _this.br = 0;
        if (a != null) {
            if (FilterExpression.isFilterExpression(a)) {
                _this.bs = a;
            }
            else {
                _this.propertyName = a;
            }
        }
        if (c != null) {
            if (FilterExpression.isFilterExpression(c)) {
                _this.bt = c;
            }
            else {
                _this.value = c;
            }
        }
        _this.br = b;
        return _this;
    }
    OperationFilterExpression.prototype.get_isOperation = function () {
        return true;
    };
    OperationFilterExpression.prototype.bo = function () {
        return this.b1;
    };
    Object.defineProperty(OperationFilterExpression.prototype, "isComparisonOperation", {
        get: function () {
            var a = this.operator;
            switch (a) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 5:
                case 6:
                case 4: return true;
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "propertyName", {
        get: function () {
            if (this.bs == null || !this.bs.isPropertyReference) {
                return null;
            }
            return this.bs.propertyReference;
        },
        set: function (a) {
            this.left = FilterExpression.property(a);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "hasPropertyName", {
        get: function () {
            return this.bs != null && this.bs.isPropertyReference;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "value", {
        get: function () {
            if (this.bt == null) {
                return null;
            }
            if (this.bt.isNull) {
                return null;
            }
            if (!this.bt.isLiteral) {
                return null;
            }
            return this.bt.literalValue;
        },
        set: function (a) {
            if (a == null) {
                this.right = FilterExpression.nullLiteral();
                return;
            }
            this.right = FilterExpression.literal(a);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "hasValue", {
        get: function () {
            return this.bt != null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "left", {
        get: function () {
            return this.bs;
        },
        set: function (a) {
            this.bs = a;
            this.bu = true;
            this.bq();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "hasLeft", {
        get: function () {
            return this.bu;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "right", {
        get: function () {
            return this.bt;
        },
        set: function (a) {
            this.bt = a;
            this.bv = true;
            this.bq();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "hasRight", {
        get: function () {
            return this.bv;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "operator", {
        get: function () {
            return this.br;
        },
        set: function (a) {
            var b = enumGetBox(FilterExpressionOperatorType_$type, this.br);
            var c = a;
            if (c == null) {
                a = 0;
            }
            if ((typeof c == "number")) {
                var d = typeGetValue(c);
                if ((EnumUtil.getName(FilterExpressionOperatorType_$type, d) == undefined)) {
                    a = 0;
                }
                a = d;
            }
            else {
                a = (typeGetValue(EnumUtil.parse(FilterExpressionOperatorType_$type, c, true)));
            }
            this.br = a;
            this.bq();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "hasOperator", {
        get: function () {
            return this.br != 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OperationFilterExpression.prototype, "b1", {
        get: function () {
            switch (this.operator) {
                case 7:
                case 1:
                case 3:
                case 4:
                case 5:
                case 6:
                case 9:
                case 2:
                case 8: return true;
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    OperationFilterExpression.prototype.get_precedence = function () {
        switch (this.operator) {
            case 15: return 0;
            case 9: return 4;
            case 12: return 6;
            case 13: return 7;
            case 14: return 8;
            case 10: return 9;
            case 11: return 10;
            case 5: return 11;
            case 3: return 12;
            case 6: return 13;
            case 4: return 14;
            case 1: return 16;
            case 2: return 17;
            case 7: return 18;
            case 8: return 19;
            case 0: return 99;
        }
        return 99;
    };
    OperationFilterExpression.prototype.evaluateWithEnvironment = function (a, b, c, d) {
        switch (this.operator) {
            case 10:
            case 13:
            case 14:
            case 12:
            case 11: return this.b4(a, b, c, d);
            case 0:
            case 1:
            case 3:
            case 4:
            case 5:
            case 6:
            case 2: return this.b5(a, b, c, d);
            case 7:
            case 9:
            case 8: return this.b6(a, b, c, d);
            case 15: if (this.left != null) {
                return this.left.evaluateWithEnvironment(a, b, c, d);
            }
            else {
                if (this.right == null) {
                    return null;
                }
                return this.right.evaluateWithEnvironment(a, b, c, d);
            }
        }
        throw new NotImplementedException(0);
    };
    OperationFilterExpression.prototype.b5 = function (a, b, c, d) {
        var e = null;
        var f = null;
        var g = -1;
        if (this.left != null) {
            e = this.left.evaluateWithEnvironment(a, b, c, d);
        }
        if (this.right != null) {
            f = this.right.evaluateWithEnvironment(a, b, c, d);
        }
        if (e == null && f == null) {
            g = 0;
        }
        var h = null;
        var i = null;
        if (typeCast(IComparable_$type, e) !== null) {
            h = e;
        }
        if (typeCast(IComparable_$type, f) !== null) {
            i = f;
        }
        if (typeof e === 'number' && isNaN_(e) || typeof f === 'number' && isNaN_(f) || typeof e === 'number' && isNaN_(e) || typeof f === 'number' && isNaN_(f)) {
            return false;
        }
        if (typeof e === 'number' && !(typeof f === 'number')) {
            f = OperationFilterExpression.b3(f);
        }
        if (typeof f === 'number' && !(typeof e === 'number')) {
            e = OperationFilterExpression.b3(e);
        }
        if (typeCast(Date_$type, e) !== null && typeCast(Date_$type, f) !== null) {
            switch (this.operator) {
                case 1: return e.getTime() == f.getTime();
                case 2: return e.getTime() != f.getTime();
                case 3: return e.getTime() > f.getTime();
                case 4: return e.getTime() >= f.getTime();
                case 5: return e.getTime() < f.getTime();
                case 6: return e.getTime() <= f.getTime();
            }
        }
        if (h != null) {
            if (f == null) {
                g = CompareUtil.compareToObject(h, 0);
                if (g == 0) {
                    g = -1;
                }
            }
            else {
                g = CompareUtil.compareToObject(h, f);
            }
        }
        else if (i != null) {
            if (e == null) {
                var j = CompareUtil.compareToObject(i, 0);
                if (j == 0) {
                    g = 1;
                }
                else {
                    g = 1;
                    if (j == 0) {
                        g = 0;
                    }
                    if (j > 0) {
                        g = -1;
                    }
                }
            }
            else {
                var k = CompareUtil.compareToObject(i, e);
                g = 1;
                if (k == 0) {
                    g = 0;
                }
                if (k > 0) {
                    g = -1;
                }
            }
        }
        else {
            var l = null;
            var m = null;
            if (e != null) {
                l = e.toString();
            }
            if (f != null) {
                m = f.toString();
            }
            if (l != null) {
                if (m == null) {
                    g = 1;
                }
                else {
                    g = stringCompareTo(l, m);
                }
            }
            else if (m != null) {
                if (l == null) {
                    g = -1;
                }
                else {
                    var n = stringCompareTo(m, l);
                    g = 1;
                    if (n == 0) {
                        g = 0;
                    }
                    if (n > 0) {
                        g = -1;
                    }
                }
            }
            else {
                g = 0;
            }
        }
        switch (this.operator) {
            case 0:
            case 1: return g == 0;
            case 3: return g > 0;
            case 4: return g >= 0;
            case 5: return g < 0;
            case 6: return g <= 0;
            case 2: return g != 0;
        }
        throw new InvalidOperationException(0);
    };
    OperationFilterExpression.b3 = function (a) {
        if (typeCast(Date_$type, a) !== null) {
            return a.getTime();
        }
        if (a == null) {
            return 0;
        }
        return a;
    };
    OperationFilterExpression.prototype.b6 = function (a, b, c, d) {
        var e = null;
        var f = null;
        if (this.left != null) {
            e = this.left.evaluateWithEnvironment(a, b, c, d);
        }
        if (this.right != null) {
            f = this.right.evaluateWithEnvironment(a, b, c, d);
        }
        if (f == null && e == null) {
            return false;
        }
        if (f == null) {
            f = false;
        }
        if (e == null) {
            e = false;
        }
        switch (this.operator) {
            case 7: return e && f;
            case 9: if (this.left == null) {
                return !f;
            }
            else {
                return !e;
            }
            case 8: return e || f;
        }
        return false;
    };
    OperationFilterExpression.prototype.b4 = function (a, b, c, d) {
        var e = null;
        var f = null;
        if (this.left != null) {
            e = this.left.evaluateWithEnvironment(a, b, c, d);
        }
        if (this.right != null) {
            f = this.right.evaluateWithEnvironment(a, b, c, d);
        }
        if (e == null) {
            return f;
        }
        if (f == null) {
            return e;
        }
        if (e == null && f == null) {
            return 0;
        }
        if (typeof e === 'number' || typeof f === 'number') {
            switch (this.operator) {
                case 10: return e + f;
                case 13: return e / f;
                case 14: return e % f;
                case 12: return e * f;
                case 11: return e - f;
            }
        }
        if (typeof e === 'number' || typeof f === 'number') {
            switch (this.operator) {
                case 10: return e + f;
                case 13: return e / f;
                case 14: return e % f;
                case 12: return e * f;
                case 11: return e - f;
            }
        }
        if (typeof e === 'number' || typeof f === 'number') {
            switch (this.operator) {
                case 10: return e + f;
                case 13: return e / f;
                case 14: return e % f;
                case 12: return e * f;
                case 11: return e - f;
            }
        }
        if (typeof e === 'number' || typeof f === 'number') {
            switch (this.operator) {
                case 10: return typeGetValue(e) + typeGetValue(f);
                case 13: return intDivide(typeGetValue(e), typeGetValue(f));
                case 14: return typeGetValue(e) % typeGetValue(f);
                case 12: return typeGetValue(e) * typeGetValue(f);
                case 11: return typeGetValue(e) - typeGetValue(f);
            }
        }
        if (typeof e === 'number' || typeof f === 'number') {
            switch (this.operator) {
                case 10: return typeGetValue(e) + typeGetValue(f);
                case 13: return intDivide(typeGetValue(e), typeGetValue(f));
                case 14: return typeGetValue(e) % typeGetValue(f);
                case 12: return typeGetValue(e) * typeGetValue(f);
                case 11: return typeGetValue(e) - typeGetValue(f);
            }
        }
        if (typeof e === 'number' || typeof f === 'number') {
            switch (this.operator) {
                case 10: return typeGetValue(e) + typeGetValue(f);
                case 13: return intDivide(typeGetValue(e), typeGetValue(f));
                case 14: return typeGetValue(e) % typeGetValue(f);
                case 12: return typeGetValue(e) * typeGetValue(f);
                case 11: return typeGetValue(e) - typeGetValue(f);
            }
        }
        if (typeof e === 'number' || typeof f === 'number') {
            switch (this.operator) {
                case 10: return typeGetValue(e) + typeGetValue(f);
                case 13: return intDivide(typeGetValue(e), typeGetValue(f));
                case 14: return typeGetValue(e) % typeGetValue(f);
                case 12: return typeGetValue(e) * typeGetValue(f);
                case 11: return typeGetValue(e) - typeGetValue(f);
            }
        }
        throw new NotImplementedException(0);
    };
    OperationFilterExpression.$t = markType(OperationFilterExpression, 'OperationFilterExpression', FilterExpression.$, [IOperationFilterExpression_$type]);
    return OperationFilterExpression;
}(FilterExpression));
export { OperationFilterExpression };
/**
 * @hidden
 */
var FunctionFilterExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FunctionFilterExpression, _super);
    function FunctionFilterExpression(a) {
        var b = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            b[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.bs = 19;
        _this.br = new FilterExpressionCollection();
        _this.bs = a;
        for (var c = 0; c < b.length; c++) {
            _this.br.add(b[c]);
        }
        return _this;
    }
    FunctionFilterExpression.prototype.get_isFunction = function () {
        return true;
    };
    FunctionFilterExpression.prototype.bo = function () {
        return this.bt;
    };
    Object.defineProperty(FunctionFilterExpression.prototype, "functionType", {
        get: function () {
            return this.bs;
        },
        set: function (a) {
            var b = enumGetBox(FilterExpressionFunctionType_$type, this.bs);
            var c = a;
            if (c == null) {
                a = 0;
            }
            if ((typeof c == "number")) {
                var d = typeGetValue(c);
                if ((EnumUtil.getName(FilterExpressionFunctionType_$type, d) == undefined)) {
                    a = 0;
                }
                a = d;
            }
            else {
                a = (typeGetValue(EnumUtil.parse(FilterExpressionFunctionType_$type, c, true)));
            }
            this.bs = a;
            this.bq();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionFilterExpression.prototype, "bt", {
        get: function () {
            switch (this.functionType) {
                case 1:
                case 2:
                case 0: return true;
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionFilterExpression.prototype, "functionArguments", {
        get: function () {
            return this.br;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionFilterExpression.prototype, "hasFunctionArguments", {
        get: function () {
            return this.br.k.count > 0;
        },
        enumerable: false,
        configurable: true
    });
    FunctionFilterExpression.prototype.evaluateWithEnvironment = function (a, b, c, d) {
        var e = null;
        var f = null;
        var g = null;
        var h = null;
        var i = this.functionArguments.k;
        if (i.count > 0) {
            for (var j = 0; j < i.count; j++) {
                var k = null;
                if (i.item(j) != null) {
                    k = i.item(j).evaluateWithEnvironment(a, b, c, d);
                }
                switch (j) {
                    case 0:
                        e = k;
                        break;
                    case 1:
                        f = k;
                        break;
                    case 2:
                        g = k;
                        break;
                    case 3:
                        h = k;
                        break;
                }
                if (j > 3) {
                    break;
                }
            }
        }
        switch (this.functionType) {
            case 19:
                if (e == null) {
                    e = 0;
                }
                if (!(typeof e === 'number')) {
                    e = OperationFilterExpression.b3(e);
                }
                return Math.ceil(e);
            case 18:
                if (e == null) {
                    e = 0;
                }
                if (!(typeof e === 'number')) {
                    e = OperationFilterExpression.b3(e);
                }
                return Math.floor(e);
            case 17:
                if (e == null) {
                    e = 0;
                }
                if (typeof e === 'number') {
                    return Math.round(e);
                }
                if (!(typeof e === 'number')) {
                    e = OperationFilterExpression.b3(e);
                }
                return Math.round(e);
            case 11:
                if (e == null) {
                    return 0;
                }
                return e.getDate();
            case 12:
                if (e == null) {
                    return 0;
                }
                return e.getHours();
            case 13:
                if (e == null) {
                    return 0;
                }
                return e.getMinutes();
            case 14:
                if (e == null) {
                    return 0;
                }
                return dateGetMonth(e);
            case 16:
                if (e == null) {
                    return 0;
                }
                return e.getFullYear();
            case 15:
                if (e == null) {
                    return 0;
                }
                return e.getSeconds();
            case 20:
                if (e == null) {
                    return 0;
                }
                return dateGetDate(e);
            case 21:
                if (e == null) {
                    return 0;
                }
                return e;
            case 22: return dateNow();
            case 23:
                var l = this.bw(f, g);
                var m = e;
                if (m == null) {
                    return true;
                }
                if (l == null) {
                    return false;
                }
                if (l.isAssignableFrom(getInstanceType(m))) {
                    return true;
                }
                return false;
            case 24:
                var n = this.bw(f, e);
                var o = e;
                if (o == null) {
                    return null;
                }
                if (n == null) {
                    return null;
                }
                return this.bu(o, n);
            case 10:
                if (e == null) {
                    e = "";
                }
                if (f == null) {
                    f = "";
                }
                return stringConcat(e, f);
            case 1:
                if (e == null) {
                    e = "";
                }
                if (f == null) {
                    f = "";
                }
                return stringEndsWith(e, f);
            case 4:
                if (e == null) {
                    e = "";
                }
                if (f == null) {
                    f = "";
                }
                return e.indexOf(f);
            case FilterExpressionFunctionType.Length:
                if (e == null) {
                    e = "";
                }
                return e.length;
            case 5:
                if (e == null) {
                    e = "";
                }
                if (f == null) {
                    f = "";
                }
                if (g == null) {
                    g = "";
                }
                return stringReplace(e, f, g);
            case 2:
                if (e == null) {
                    e = "";
                }
                if (f == null) {
                    f = "";
                }
                return stringStartsWith(e, f);
            case 6:
                if (e == null) {
                    e = "";
                }
                if (f == null) {
                    f = 0;
                }
                if (g != null) {
                    return e.substr(typeGetValue(f), typeGetValue(g));
                }
                else {
                    return e.substr(typeGetValue(f));
                }
            case 0:
                if (e == null) {
                    e = "";
                }
                if (f == null) {
                    f = "";
                }
                return stringContains(e, f);
            case 7:
                if (e == null) {
                    e = "";
                }
                return e.toLowerCase();
            case 8:
                if (e == null) {
                    e = "";
                }
                return e.toUpperCase();
            case 9:
                if (e == null) {
                    e = "";
                }
                return e.trim();
            case 25:
                if (e == null) {
                    e = "";
                }
                if (d != null) {
                    if (d.hasVariable(e)) {
                        return d.getVariableValue(e);
                    }
                }
                return null;
        }
        throw new NotImplementedException(0);
    };
    FunctionFilterExpression.prototype.get_precedence = function () {
        switch (this.functionType) {
            case 23: return 15;
            case 24: return 5;
        }
        return 2;
    };
    FunctionFilterExpression.prototype.bu = function (a, b) {
        if (b == String_$type) {
            if (a == null) {
                return "";
            }
            return a.toString();
        }
        else if (b == Number_$type || b == Number_$type || b == Number_$type) {
            return Convert.toInt321(a);
        }
        else if (b == Boolean_$type) {
            return Convert.toBoolean(a);
        }
        else if (b == Number_$type) {
            return Convert.toByte1(a);
        }
        else if (b == Date_$type) {
            return Convert.toDateTime(a);
        }
        else if (b == Number_$type || b == Number_$type) {
            return Convert.toInt64(a);
        }
        else if (b == Number_$type) {
            return Convert.toDecimal2(a);
        }
        else {
            return a;
        }
    };
    FunctionFilterExpression.prototype.bw = function (a, b) {
        if (typeCast(DataSourceSchemaPropertyType_$type, a) !== null || typeof a === 'number') {
            var c = typeGetValue(a);
            switch (c) {
                case 2: return Boolean_$type;
                case 10: return Number_$type;
                case 9: return Date_$type;
                case 8: return Date_$type;
                case 6: return Number_$type;
                case 5: return Number_$type;
                case 1: return Number_$type;
                case 3: return Number_$type;
                case 11:
                    if (b != null && typeof b === 'string') {
                        return this.bv(b);
                    }
                    return Base.$;
                case 4: return Number_$type;
                case 7: return Number_$type;
                case 0: return String_$type;
            }
        }
        if (typeof a === 'string') {
            return this.bv(b);
        }
        return Base.$;
    };
    FunctionFilterExpression.prototype.bv = function (a) {
        switch (a) {
            case "Edm.Boolean":
            case "Boolean":
            case "bool":
            case "boolean": return Boolean_$type;
            case "Edm.Byte":
            case "Byte":
            case "byte":
            case "Edm.SByte":
            case "SByte": return Number_$type;
            case "Edm.DateTimeOffset":
            case "DateTimeOffset": return Date_$type;
            case "Edm.DateTime":
            case "DateTime":
            case "Calendar":
            case "datetime":
            case "calendar":
            case "Edm.Time":
            case "Time":
            case "time": return Date_$type;
            case "Edm.Decimal":
            case "Decimal":
            case "decimal": return Number_$type;
            case "Edm.Double":
            case "Double":
            case "double": return Number_$type;
            case "Edm.Float":
            case "Float":
            case "float":
            case "Edm.Single":
            case "Single":
            case "single": return Number_$type;
            case "Edm.Int16":
            case "Int16":
            case "Short":
            case "short": return Number_$type;
            case "Edm.Int32":
            case "Int32":
            case "int":
            case "Integer": return Number_$type;
            case "Edm.Int64":
            case "Int64":
            case "long":
            case "Long": return Number_$type;
            case "Edm.String":
            case "String":
            case "string": return String_$type;
        }
        return Base.$;
    };
    FunctionFilterExpression.$t = markType(FunctionFilterExpression, 'FunctionFilterExpression', FilterExpression.$, [IFunctionFilterExpression_$type]);
    return FunctionFilterExpression;
}(FilterExpression));
export { FunctionFilterExpression };
/**
 * @hidden
 */
var PropertyReferenceFilterExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(PropertyReferenceFilterExpression, _super);
    function PropertyReferenceFilterExpression(a) {
        var _this = _super.call(this) || this;
        _this.br = null;
        _this.br = a;
        return _this;
    }
    PropertyReferenceFilterExpression.prototype.get_isPropertyReference = function () {
        return true;
    };
    PropertyReferenceFilterExpression.prototype.get_precedence = function () {
        return 99;
    };
    PropertyReferenceFilterExpression.prototype.bo = function () {
        return false;
    };
    Object.defineProperty(PropertyReferenceFilterExpression.prototype, "propertyReference", {
        get: function () {
            return this.br;
        },
        set: function (a) {
            this.br = a;
        },
        enumerable: false,
        configurable: true
    });
    PropertyReferenceFilterExpression.prototype.evaluateWithEnvironment = function (a, b, c, d) {
        var e = b.getItemValue(a, this.propertyReference);
        return e;
    };
    PropertyReferenceFilterExpression.$t = markType(PropertyReferenceFilterExpression, 'PropertyReferenceFilterExpression', FilterExpression.$, [IPropertyReferenceFilterExpression_$type]);
    return PropertyReferenceFilterExpression;
}(FilterExpression));
export { PropertyReferenceFilterExpression };
/**
 * @hidden
 */
var LiteralFilterExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LiteralFilterExpression, _super);
    function LiteralFilterExpression(a, b) {
        var _this = _super.call(this) || this;
        _this.bs = null;
        _this.br = false;
        _this.bs = a;
        return _this;
    }
    LiteralFilterExpression.prototype.get_precedence = function () {
        return 99;
    };
    LiteralFilterExpression.prototype.get_isLiteral = function () {
        return true;
    };
    LiteralFilterExpression.prototype.get_isNull = function () {
        return this.literalValue == null;
    };
    Object.defineProperty(LiteralFilterExpression.prototype, "literalValue", {
        get: function () {
            return this.bs;
        },
        set: function (a) {
            this.bs = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LiteralFilterExpression.prototype, "leaveUnquoted", {
        get: function () {
            return this.br;
        },
        set: function (a) {
            this.br = a;
        },
        enumerable: false,
        configurable: true
    });
    LiteralFilterExpression.prototype.bo = function () {
        return typeCast(Boolean_$type, this.literalValue) !== null;
    };
    LiteralFilterExpression.prototype.evaluateWithEnvironment = function (a, b, c, d) {
        return this.literalValue;
    };
    LiteralFilterExpression.$t = markType(LiteralFilterExpression, 'LiteralFilterExpression', FilterExpression.$, [ILiteralFilterExpression_$type]);
    return LiteralFilterExpression;
}(FilterExpression));
export { LiteralFilterExpression };
/**
 * @hidden
 */
var WrapperExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WrapperExpression, _super);
    function WrapperExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.br = null;
        _this.bx = false;
        _this._innerExpression = null;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this.expression = FilterFactory.instance.property(c);
                    _this.propertyName = c;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this.expression = c;
                    if (_this.expression.isPropertyReference) {
                        _this.propertyName = _this.expression.propertyReference;
                    }
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(WrapperExpression.prototype, "innerExpression", {
        get: function () {
            return this._innerExpression;
        },
        set: function (a) {
            this._innerExpression = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WrapperExpression.prototype, "expression", {
        get: function () {
            return this.br;
        },
        set: function (a) {
            this.br = a;
            this.bx = true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WrapperExpression.prototype, "propertyName", {
        get: function () {
            if (this.br == null || !this.br.isPropertyReference) {
                return null;
            }
            return this.br.propertyReference;
        },
        set: function (a) {
            this.expression = FilterExpression.property(a);
        },
        enumerable: false,
        configurable: true
    });
    WrapperExpression.prototype.get_isWrapper = function () {
        return true;
    };
    WrapperExpression.prototype.get_precedence = function () {
        return 99;
    };
    Object.defineProperty(WrapperExpression.prototype, "bu", {
        get: function () {
            return FilterFactory.instance;
        },
        enumerable: false,
        configurable: true
    });
    WrapperExpression.prototype.bo = function () {
        return true;
    };
    WrapperExpression.prototype.evaluateWithEnvironment = function (a, b, c, d) {
        if (this.innerExpression == null || this.bx) {
            this.innerExpression = this.bv();
            this.bx = false;
        }
        return this.innerExpression.evaluateWithEnvironment(a, b, c, d);
    };
    WrapperExpression.$t = markType(WrapperExpression, 'WrapperExpression', FilterExpression.$);
    return WrapperExpression;
}(FilterExpression));
export { WrapperExpression };
/**
 * @hidden
 */
var TodayExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TodayExpression, _super);
    function TodayExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    TodayExpression.prototype.getWrapperType = function () {
        return 0;
    };
    TodayExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        var b = FilterFactory.instance.literal(dateGetMonth(a));
        var c = FilterFactory.instance.literal(a.getDate());
        var d = FilterFactory.instance.literal(a.getFullYear());
        return this.expression.month().isEqualTo(b).and(this.expression.day().isEqualTo(c)).and(this.expression.year().isEqualTo(d));
    };
    TodayExpression.$t = markType(TodayExpression, 'TodayExpression', WrapperExpression.$);
    return TodayExpression;
}(WrapperExpression));
export { TodayExpression };
/**
 * @hidden
 */
var TomorrowExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TomorrowExpression, _super);
    function TomorrowExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    TomorrowExpression.prototype.getWrapperType = function () {
        return 1;
    };
    TomorrowExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        a = dateAddDays(a, 1);
        var b = FilterFactory.instance.literal(dateGetMonth(a));
        var c = FilterFactory.instance.literal(a.getDate());
        var d = FilterFactory.instance.literal(a.getFullYear());
        return this.expression.month().isEqualTo(b).and(this.expression.day().isEqualTo(c)).and(this.expression.year().isEqualTo(d));
    };
    TomorrowExpression.$t = markType(TomorrowExpression, 'TomorrowExpression', WrapperExpression.$);
    return TomorrowExpression;
}(WrapperExpression));
export { TomorrowExpression };
/**
 * @hidden
 */
var YesterdayExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(YesterdayExpression, _super);
    function YesterdayExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    YesterdayExpression.prototype.getWrapperType = function () {
        return 2;
    };
    YesterdayExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        a = dateAddDays(a, -1);
        var b = FilterFactory.instance.literal(dateGetMonth(a));
        var c = FilterFactory.instance.literal(a.getDate());
        var d = FilterFactory.instance.literal(a.getFullYear());
        return this.expression.month().isEqualTo(b).and(this.expression.day().isEqualTo(c)).and(this.expression.year().isEqualTo(d));
    };
    YesterdayExpression.$t = markType(YesterdayExpression, 'YesterdayExpression', WrapperExpression.$);
    return YesterdayExpression;
}(WrapperExpression));
export { YesterdayExpression };
/**
 * @hidden
 */
var OffsettableWeekExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(OffsettableWeekExpression, _super);
    function OffsettableWeekExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                    _this.bz = 0;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                    _this.bz = 0;
                }
                break;
        }
        return _this;
    }
    OffsettableWeekExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        a = dateAddDays(a, this.bz);
        var b = dateAddDays(a, 0 - a.getDay());
        var c = dateAddDays(a, 6 - a.getDay());
        var d = false;
        var e = dateMinValue();
        var f = dateMinValue();
        var g = dateMinValue();
        var h = dateMinValue();
        for (var i = 0; i < 7; i++) {
            var j = dateAddDays(c, -i);
            if (j.getDate() == 1) {
                if (i == 6) {
                    break;
                }
                d = true;
                f = dateAddDays(j, -1);
                e = dateAddDays(f, -(6 - i - 1));
                g = j;
                h = dateAddDays(j, i);
                break;
            }
        }
        if (d) {
            var k = this.expression.year().isEqualTo(this.bu.literal(e.getFullYear())).and(this.expression.month().isEqualTo(this.bu.literal(dateGetMonth(e))));
            var l = null;
            if (f.getDate() - e.getDate() > 0) {
                l = this.expression.day().isGreaterThanOrEqualTo(this.bu.literal(e.getDate())).and(this.expression.day().isLessThanOrEqualTo(this.bu.literal(f.getDate())));
            }
            else {
                l = this.expression.day().isEqualTo(this.bu.literal(e.getDate()));
            }
            var m = k.and(l);
            var n = this.expression.year().isEqualTo(this.bu.literal(g.getFullYear())).and(this.expression.month().isEqualTo(this.bu.literal(dateGetMonth(g))));
            var o = null;
            if (h.getDate() - g.getDate() > 0) {
                o = this.expression.day().isGreaterThanOrEqualTo(this.bu.literal(g.getDate())).and(this.expression.day().isLessThanOrEqualTo(this.bu.literal(h.getDate())));
            }
            else {
                o = this.expression.day().isEqualTo(this.bu.literal(g.getDate()));
            }
            var p = n.and(o);
            return m.or(p);
        }
        var q = FilterFactory.instance.literal(dateGetMonth(a));
        var r = FilterFactory.instance.literal(a.getFullYear());
        var s = FilterFactory.instance.literal(b.getDate());
        var t = FilterFactory.instance.literal(c.getDate());
        return this.expression.year().isEqualTo(r).and(this.expression.month().isEqualTo(q)).and(this.expression.day().isGreaterThanOrEqualTo(s)).and(this.expression.day().isLessThanOrEqualTo(t));
    };
    OffsettableWeekExpression.$t = markType(OffsettableWeekExpression, 'OffsettableWeekExpression', WrapperExpression.$);
    return OffsettableWeekExpression;
}(WrapperExpression));
export { OffsettableWeekExpression };
/**
 * @hidden
 */
var ThisWeekExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ThisWeekExpression, _super);
    function ThisWeekExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    ThisWeekExpression.prototype.getWrapperType = function () {
        return 3;
    };
    ThisWeekExpression.$t = markType(ThisWeekExpression, 'ThisWeekExpression', OffsettableWeekExpression.$);
    return ThisWeekExpression;
}(OffsettableWeekExpression));
export { ThisWeekExpression };
/**
 * @hidden
 */
var NextWeekExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NextWeekExpression, _super);
    function NextWeekExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                    _this.bz = 7;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                    _this.bz = 7;
                }
                break;
        }
        return _this;
    }
    NextWeekExpression.prototype.getWrapperType = function () {
        return 4;
    };
    NextWeekExpression.$t = markType(NextWeekExpression, 'NextWeekExpression', OffsettableWeekExpression.$);
    return NextWeekExpression;
}(OffsettableWeekExpression));
export { NextWeekExpression };
/**
 * @hidden
 */
var LastWeekExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LastWeekExpression, _super);
    function LastWeekExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                    _this.bz = -7;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                    _this.bz = -7;
                }
                break;
        }
        return _this;
    }
    LastWeekExpression.prototype.getWrapperType = function () {
        return 5;
    };
    LastWeekExpression.$t = markType(LastWeekExpression, 'LastWeekExpression', OffsettableWeekExpression.$);
    return LastWeekExpression;
}(OffsettableWeekExpression));
export { LastWeekExpression };
/**
 * @hidden
 */
var ThisMonthExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ThisMonthExpression, _super);
    function ThisMonthExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    ThisMonthExpression.prototype.getWrapperType = function () {
        return 6;
    };
    ThisMonthExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        return this.expression.year().isEqualTo(this.bu.literal(a.getFullYear())).and(this.expression.month().isEqualTo(this.bu.literal(dateGetMonth(a))));
    };
    ThisMonthExpression.$t = markType(ThisMonthExpression, 'ThisMonthExpression', WrapperExpression.$);
    return ThisMonthExpression;
}(WrapperExpression));
export { ThisMonthExpression };
/**
 * @hidden
 */
var NextMonthExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NextMonthExpression, _super);
    function NextMonthExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    NextMonthExpression.prototype.getWrapperType = function () {
        return 7;
    };
    NextMonthExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        a = dateAddMonths(a, 1);
        return this.expression.year().isEqualTo(this.bu.literal(a.getFullYear())).and(this.expression.month().isEqualTo(this.bu.literal(dateGetMonth(a))));
    };
    NextMonthExpression.$t = markType(NextMonthExpression, 'NextMonthExpression', WrapperExpression.$);
    return NextMonthExpression;
}(WrapperExpression));
export { NextMonthExpression };
/**
 * @hidden
 */
var LastMonthExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LastMonthExpression, _super);
    function LastMonthExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    LastMonthExpression.prototype.getWrapperType = function () {
        return 8;
    };
    LastMonthExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        a = dateAddMonths(a, -1);
        return this.expression.year().isEqualTo(this.bu.literal(a.getFullYear())).and(this.expression.month().isEqualTo(this.bu.literal(dateGetMonth(a))));
    };
    LastMonthExpression.$t = markType(LastMonthExpression, 'LastMonthExpression', WrapperExpression.$);
    return LastMonthExpression;
}(WrapperExpression));
export { LastMonthExpression };
/**
 * @hidden
 */
var ThisYearExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ThisYearExpression, _super);
    function ThisYearExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    ThisYearExpression.prototype.getWrapperType = function () {
        return 9;
    };
    ThisYearExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        return this.expression.year().isEqualTo(this.bu.literal(a.getFullYear()));
    };
    ThisYearExpression.$t = markType(ThisYearExpression, 'ThisYearExpression', WrapperExpression.$);
    return ThisYearExpression;
}(WrapperExpression));
export { ThisYearExpression };
/**
 * @hidden
 */
var NextYearExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NextYearExpression, _super);
    function NextYearExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    NextYearExpression.prototype.getWrapperType = function () {
        return 10;
    };
    NextYearExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        a = dateAddYears(a, 1);
        return this.expression.year().isEqualTo(this.bu.literal(a.getFullYear()));
    };
    NextYearExpression.$t = markType(NextYearExpression, 'NextYearExpression', WrapperExpression.$);
    return NextYearExpression;
}(WrapperExpression));
export { NextYearExpression };
/**
 * @hidden
 */
var LastYearExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LastYearExpression, _super);
    function LastYearExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    LastYearExpression.prototype.getWrapperType = function () {
        return 11;
    };
    LastYearExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        a = dateAddYears(a, -1);
        return this.expression.year().isEqualTo(this.bu.literal(a.getFullYear()));
    };
    LastYearExpression.$t = markType(LastYearExpression, 'LastYearExpression', WrapperExpression.$);
    return LastYearExpression;
}(WrapperExpression));
export { LastYearExpression };
/**
 * @hidden
 */
var YearToDateExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(YearToDateExpression, _super);
    function YearToDateExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    YearToDateExpression.prototype.getWrapperType = function () {
        return 15;
    };
    YearToDateExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        return this.expression.year().isEqualTo(this.bu.literal(a.getFullYear())).and(this.expression.month().isEqualTo(this.bu.literal(dateGetMonth(a))).and(this.expression.day().isLessThanOrEqualTo(this.bu.literal(a.getDate()))).or(this.expression.month().isLessThan(this.bu.literal(dateGetMonth(a)))));
    };
    YearToDateExpression.$t = markType(YearToDateExpression, 'YearToDateExpression', WrapperExpression.$);
    return YearToDateExpression;
}(WrapperExpression));
export { YearToDateExpression };
/**
 * @hidden
 */
var ThisQuarterExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ThisQuarterExpression, _super);
    function ThisQuarterExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    ThisQuarterExpression.prototype.getWrapperType = function () {
        return 12;
    };
    ThisQuarterExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        var b = this.expression.year().isEqualTo(this.bu.literal(a.getFullYear()));
        if (dateGetMonth(a) == 1 || dateGetMonth(a) == 2 || dateGetMonth(a) == 3) {
            return b.and(this.expression.isQ1());
        }
        else if (dateGetMonth(a) == 4 || dateGetMonth(a) == 5 || dateGetMonth(a) == 6) {
            return b.and(this.expression.isQ2());
        }
        else if (dateGetMonth(a) == 7 || dateGetMonth(a) == 8 || dateGetMonth(a) == 9) {
            return b.and(this.expression.isQ3());
        }
        else {
            return b.and(this.expression.isQ4());
        }
    };
    ThisQuarterExpression.$t = markType(ThisQuarterExpression, 'ThisQuarterExpression', WrapperExpression.$);
    return ThisQuarterExpression;
}(WrapperExpression));
export { ThisQuarterExpression };
/**
 * @hidden
 */
var NextQuarterExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NextQuarterExpression, _super);
    function NextQuarterExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    NextQuarterExpression.prototype.getWrapperType = function () {
        return 13;
    };
    NextQuarterExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        var b = this.expression.year().isEqualTo(this.bu.literal(a.getFullYear()));
        if (dateGetMonth(a) == 1 || dateGetMonth(a) == 2 || dateGetMonth(a) == 3) {
            return b.and(this.expression.isQ2());
        }
        else if (dateGetMonth(a) == 4 || dateGetMonth(a) == 5 || dateGetMonth(a) == 6) {
            return b.and(this.expression.isQ3());
        }
        else if (dateGetMonth(a) == 7 || dateGetMonth(a) == 8 || dateGetMonth(a) == 9) {
            return b.and(this.expression.isQ4());
        }
        else {
            return this.expression.year().isEqualTo(this.bu.literal(a.getFullYear() + 1)).and(this.expression.isQ1());
        }
    };
    NextQuarterExpression.$t = markType(NextQuarterExpression, 'NextQuarterExpression', WrapperExpression.$);
    return NextQuarterExpression;
}(WrapperExpression));
export { NextQuarterExpression };
/**
 * @hidden
 */
var LastQuarterExpression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LastQuarterExpression, _super);
    function LastQuarterExpression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    LastQuarterExpression.prototype.getWrapperType = function () {
        return 13;
    };
    LastQuarterExpression.prototype.bv = function () {
        var a = +(this.bu.todayOverride) != +(dateMinValue()) ? this.bu.todayOverride : dateGetDate(dateNow());
        var b = this.expression.year().isEqualTo(this.bu.literal(a.getFullYear()));
        if (dateGetMonth(a) == 1 || dateGetMonth(a) == 2 || dateGetMonth(a) == 3) {
            return this.expression.year().isEqualTo(this.bu.literal(a.getFullYear() - 1)).and(this.expression.isQ4());
        }
        else if (dateGetMonth(a) == 4 || dateGetMonth(a) == 5 || dateGetMonth(a) == 6) {
            return b.and(this.expression.isQ1());
        }
        else if (dateGetMonth(a) == 7 || dateGetMonth(a) == 8 || dateGetMonth(a) == 9) {
            return b.and(this.expression.isQ2());
        }
        else {
            return b.and(this.expression.isQ3());
        }
    };
    LastQuarterExpression.$t = markType(LastQuarterExpression, 'LastQuarterExpression', WrapperExpression.$);
    return LastQuarterExpression;
}(WrapperExpression));
export { LastQuarterExpression };
/**
 * @hidden
 */
var Q1Expression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(Q1Expression, _super);
    function Q1Expression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    Q1Expression.prototype.getWrapperType = function () {
        return 16;
    };
    Q1Expression.prototype.bv = function () {
        return this.expression.month().isEqualTo(this.bu.literal(1)).or(this.expression.month().isEqualTo(this.bu.literal(2))).or(this.expression.month().isEqualTo(this.bu.literal(3)));
    };
    Q1Expression.$t = markType(Q1Expression, 'Q1Expression', WrapperExpression.$);
    return Q1Expression;
}(WrapperExpression));
export { Q1Expression };
/**
 * @hidden
 */
var Q2Expression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(Q2Expression, _super);
    function Q2Expression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    Q2Expression.prototype.getWrapperType = function () {
        return 17;
    };
    Q2Expression.prototype.bv = function () {
        return this.expression.month().isEqualTo(this.bu.literal(4)).or(this.expression.month().isEqualTo(this.bu.literal(5))).or(this.expression.month().isEqualTo(this.bu.literal(6)));
    };
    Q2Expression.$t = markType(Q2Expression, 'Q2Expression', WrapperExpression.$);
    return Q2Expression;
}(WrapperExpression));
export { Q2Expression };
/**
 * @hidden
 */
var Q3Expression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(Q3Expression, _super);
    function Q3Expression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    Q3Expression.prototype.getWrapperType = function () {
        return 18;
    };
    Q3Expression.prototype.bv = function () {
        return this.expression.month().isEqualTo(this.bu.literal(7)).or(this.expression.month().isEqualTo(this.bu.literal(8))).or(this.expression.month().isEqualTo(this.bu.literal(9)));
    };
    Q3Expression.$t = markType(Q3Expression, 'Q3Expression', WrapperExpression.$);
    return Q3Expression;
}(WrapperExpression));
export { Q3Expression };
/**
 * @hidden
 */
var Q4Expression = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(Q4Expression, _super);
    function Q4Expression(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 0, c) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    Q4Expression.prototype.getWrapperType = function () {
        return 19;
    };
    Q4Expression.prototype.bv = function () {
        return this.expression.month().isEqualTo(this.bu.literal(10)).or(this.expression.month().isEqualTo(this.bu.literal(11))).or(this.expression.month().isEqualTo(this.bu.literal(12)));
    };
    Q4Expression.$t = markType(Q4Expression, 'Q4Expression', WrapperExpression.$);
    return Q4Expression;
}(WrapperExpression));
export { Q4Expression };
