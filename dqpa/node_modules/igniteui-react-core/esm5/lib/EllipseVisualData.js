/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { PrimitiveVisualData } from "./PrimitiveVisualData";
import { AppearanceHelper } from "./AppearanceHelper";
import { markType } from "./type";
/**
 * @hidden
 */
var EllipseVisualData = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(EllipseVisualData, _super);
    function EllipseVisualData(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    _this = _super.call(this, 1, "ellipse1") || this;
                    _this._width = 0;
                    _this._height = 0;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this = _super.call(this, 1, c) || this;
                    _this._width = 0;
                    _this._height = 0;
                    _this.width = d.width;
                    _this.height = d.height;
                    AppearanceHelper.p(_this.appearance, d);
                }
                break;
        }
        return _this;
    }
    EllipseVisualData.prototype.get_type = function () {
        return "Ellipse";
    };
    Object.defineProperty(EllipseVisualData.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EllipseVisualData.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (a) {
            this._width = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EllipseVisualData.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (a) {
            this._height = a;
        },
        enumerable: false,
        configurable: true
    });
    EllipseVisualData.prototype.e = function () {
        return "width: " + this.width + ", height: " + this.height;
    };
    EllipseVisualData.prototype.scaleByViewport = function (a) {
        _super.prototype.scaleByViewport.call(this, a);
        this.width = this.width / a.width;
        this.height = this.height / a.height;
    };
    EllipseVisualData.prototype.getPointsOverride = function (a, b) {
    };
    EllipseVisualData.$t = markType(EllipseVisualData, 'EllipseVisualData', PrimitiveVisualData.$);
    return EllipseVisualData;
}(PrimitiveVisualData));
export { EllipseVisualData };
