/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { CheckboxChangeEventArgsDescriptionMetadata } from "./CheckboxChangeEventArgsDescriptionMetadata";
import { CheckboxDescription } from "./CheckboxDescription";
/**
 * @hidden
 */
var CheckboxDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CheckboxDescriptionMetadata, _super);
    function CheckboxDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckboxDescriptionMetadata.b = function (a) {
        if (CheckboxDescriptionMetadata.a == null) {
            CheckboxDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            CheckboxDescriptionMetadata.c(CheckboxDescriptionMetadata.a);
        }
        if (a.k(CheckboxDescriptionMetadata.a)) {
            return;
        }
        a.ac(CheckboxDescriptionMetadata.a);
        CheckboxChangeEventArgsDescriptionMetadata.d(a);
    };
    CheckboxDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:XCheckbox");
        a.item("BaseTheme", "ExportedType:string:BaseControlTheme");
        a.item("BaseTheme@names", "Default;DenaliLight;MaterialLight;SlingshotLight;SlingshotDark;RevealLight;RevealDark");
        a.item("UncheckedBackgroundColor", "Brush");
        a.item("ActualUncheckedBackgroundColor", "Brush");
        a.item("CheckedBackgroundColor", "Brush");
        a.item("TickColor", "Brush");
        a.item("ActualTickColor", "Brush");
        a.item("UncheckedBorderColor", "Brush");
        a.item("CheckedBorderColor", "Brush");
        a.item("ActualUncheckedBorderColor", "Brush");
        a.item("ActualCheckedBorderColor", "Brush");
        a.item("BorderWidth", "Number:double");
        a.item("ActualBorderWidth", "Number:double");
        a.item("CornerRadius", "Number:double");
        a.item("TickStrokeWidth", "Number:double");
        a.item("ActualTickStrokeWidth", "Number:double");
        a.item("ActualCornerRadius", "Number:double");
        a.item("ActualCheckedBackgroundColor", "Brush");
        a.item("InputId", "String");
        a.item("Id", "String");
        a.item("LabelId", "String");
        a.item("Name", "String");
        a.item("TabIndex", "Number:int");
        a.item("Required", "Number:int");
        a.item("AriaLabelledBy", "String");
        a.item("AriaLabel", "String");
        a.item("ValueRef", "(w:Value,wf:Value)DataRef");
        a.item("Focused", "(w:IsFocused,xam:IsFocused,wf:IsFocused)Boolean");
        a.item("LabelPosition", "ExportedType:string:CheckboxLabelPosition");
        a.item("LabelPosition@names", "After;Before");
        a.item("DisableRipple", "Boolean");
        a.item("Checked", "(w:IsChecked,xam:IsChecked,wf:IsChecked)Boolean");
        a.item("Indeterminate", "(w:IsIndeterminate,xam:IsIndeterminate,wf:IsIndeterminate)Boolean");
        a.item("Disabled", "(w:IsDisabled,xam:IsDisabled,wf:IsDisabled)Boolean");
        a.item("DisableTransitions", "Boolean");
        a.item("ChangeRef", "EventRef::change");
    };
    CheckboxDescriptionMetadata.d = function (a) {
        CheckboxDescriptionMetadata.b(a);
        a.ae("Checkbox", function () { return new CheckboxDescription(); });
        a.ad("Checkbox", CheckboxDescriptionMetadata.a);
    };
    CheckboxDescriptionMetadata.$t = markType(CheckboxDescriptionMetadata, 'CheckboxDescriptionMetadata');
    CheckboxDescriptionMetadata.a = null;
    return CheckboxDescriptionMetadata;
}(Base));
export { CheckboxDescriptionMetadata };
