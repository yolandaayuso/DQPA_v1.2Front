/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var DoughnutChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DoughnutChartDescription, _super);
    function DoughnutChartDescription() {
        var _this = _super.call(this) || this;
        _this.z = null;
        _this.k = false;
        _this.l = false;
        _this.j = false;
        _this.h = null;
        _this.q = 0;
        _this.ab = null;
        _this.ac = null;
        _this.t = 0;
        _this.s = 0;
        _this.r = 0;
        _this.p = 0;
        _this.ad = null;
        _this.aa = null;
        return _this;
    }
    Object.defineProperty(DoughnutChartDescription.prototype, "background", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.g("Background");
        },
        enumerable: false,
        configurable: true
    });
    DoughnutChartDescription.prototype.get_type = function () {
        return "DoughnutChart";
    };
    Object.defineProperty(DoughnutChartDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "allowSliceSelection", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.g("AllowSliceSelection");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "isSurfaceInteractionDisabled", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.g("IsSurfaceInteractionDisabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "allowSliceExplosion", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.g("AllowSliceExplosion");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "series", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.g("Series");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "innerExtent", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.g("InnerExtent");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "selectedSliceFill", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.g("SelectedSliceFill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "selectedSliceStroke", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
            this.g("SelectedSliceStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "selectedSliceStrokeThickness", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.g("SelectedSliceStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "selectedSliceOpacity", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.g("SelectedSliceOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "pixelScalingRatio", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.g("PixelScalingRatio");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "actualPixelScalingRatio", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.g("ActualPixelScalingRatio");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "sliceClickRef", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
            this.g("SliceClickRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartDescription.prototype, "holeDimensionsChangedRef", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
            this.g("HoleDimensionsChangedRef");
        },
        enumerable: false,
        configurable: true
    });
    DoughnutChartDescription.$t = markType(DoughnutChartDescription, 'DoughnutChartDescription', Description.$);
    return DoughnutChartDescription;
}(Description));
export { DoughnutChartDescription };
