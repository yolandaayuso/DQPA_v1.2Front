/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ScalerParamsDescription } from "./ScalerParamsDescription";
/**
 * @hidden
 */
var ScalerParamsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ScalerParamsDescriptionMetadata, _super);
    function ScalerParamsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScalerParamsDescriptionMetadata.b = function (a) {
        if (ScalerParamsDescriptionMetadata.a == null) {
            ScalerParamsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ScalerParamsDescriptionMetadata.c(ScalerParamsDescriptionMetadata.a);
        }
        if (a.k(ScalerParamsDescriptionMetadata.a)) {
            return;
        }
        a.ac(ScalerParamsDescriptionMetadata.a);
    };
    ScalerParamsDescriptionMetadata.c = function (a) {
        a.item("ReferenceValue", "Number:double");
    };
    ScalerParamsDescriptionMetadata.d = function (a) {
        ScalerParamsDescriptionMetadata.b(a);
        a.ae("ScalerParams", function () { return new ScalerParamsDescription(); });
        a.ad("ScalerParams", ScalerParamsDescriptionMetadata.a);
    };
    ScalerParamsDescriptionMetadata.$t = markType(ScalerParamsDescriptionMetadata, 'ScalerParamsDescriptionMetadata');
    ScalerParamsDescriptionMetadata.a = null;
    return ScalerParamsDescriptionMetadata;
}(Base));
export { ScalerParamsDescriptionMetadata };
