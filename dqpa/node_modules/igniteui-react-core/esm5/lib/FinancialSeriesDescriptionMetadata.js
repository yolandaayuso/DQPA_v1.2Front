/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AssigningCategoryStyleEventArgsDescriptionMetadata } from "./AssigningCategoryStyleEventArgsDescriptionMetadata";
import { FinancialEventArgsDescriptionMetadata } from "./FinancialEventArgsDescriptionMetadata";
import { SeriesDescriptionMetadata } from "./SeriesDescriptionMetadata";
/**
 * @hidden
 */
var FinancialSeriesDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialSeriesDescriptionMetadata, _super);
    function FinancialSeriesDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FinancialSeriesDescriptionMetadata.b = function (a) {
        if (FinancialSeriesDescriptionMetadata.a == null) {
            FinancialSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            FinancialSeriesDescriptionMetadata.c(FinancialSeriesDescriptionMetadata.a);
        }
        if (a.k(FinancialSeriesDescriptionMetadata.a)) {
            return;
        }
        a.ac(FinancialSeriesDescriptionMetadata.a);
        AssigningCategoryStyleEventArgsDescriptionMetadata.d(a);
        FinancialEventArgsDescriptionMetadata.d(a);
    };
    FinancialSeriesDescriptionMetadata.c = function (a) {
        SeriesDescriptionMetadata.c(a);
        a.item("NegativeBrush", "Brush");
        a.item("XAxisRef", "(w:XAxis,wf:XAxis)DataRef::object");
        a.item("XAxisRef@nameBinding", "true");
        a.item("YAxisRef", "(w:YAxis,wf:YAxis)DataRef::object");
        a.item("YAxisRef@nameBinding", "true");
        a.item("OpenMemberPath", "String");
        a.item("HighMemberPath", "String");
        a.item("LowMemberPath", "String");
        a.item("CloseMemberPath", "String");
        a.item("VolumeMemberPath", "String");
        a.item("HighlightedOpenMemberPath", "String");
        a.item("HighlightedHighMemberPath", "String");
        a.item("HighlightedLowMemberPath", "String");
        a.item("HighlightedCloseMemberPath", "String");
        a.item("HighlightedVolumeMemberPath", "String");
        a.item("IsCustomCategoryStyleAllowed", "Boolean");
        a.item("TransitionInMode", "ExportedType:string:CategoryTransitionInMode");
        a.item("TransitionInMode@names", "Auto;FromZero;SweepFromLeft;SweepFromRight;SweepFromTop;SweepFromBottom;SweepFromCenter;AccordionFromLeft;AccordionFromRight;AccordionFromTop;AccordionFromBottom;Expand;SweepFromCategoryAxisMinimum;SweepFromCategoryAxisMaximum;SweepFromValueAxisMinimum;SweepFromValueAxisMaximum;AccordionFromCategoryAxisMinimum;AccordionFromCategoryAxisMaximum;AccordionFromValueAxisMinimum;AccordionFromValueAxisMaximum;FromParent");
        a.item("IsTransitionInEnabled", "Boolean");
        a.item("AssigningCategoryStyleRef", "EventRef::assigningCategoryStyle");
        a.item("TypicalRef", "EventRef::typical");
        a.item("TypicalBasedOnRef", "EventRef::typicalBasedOn");
    };
    FinancialSeriesDescriptionMetadata.d = function (a) {
        FinancialSeriesDescriptionMetadata.b(a);
        a.ad("FinancialSeries", FinancialSeriesDescriptionMetadata.a);
    };
    FinancialSeriesDescriptionMetadata.$t = markType(FinancialSeriesDescriptionMetadata, 'FinancialSeriesDescriptionMetadata');
    FinancialSeriesDescriptionMetadata.a = null;
    return FinancialSeriesDescriptionMetadata;
}(Base));
export { FinancialSeriesDescriptionMetadata };
