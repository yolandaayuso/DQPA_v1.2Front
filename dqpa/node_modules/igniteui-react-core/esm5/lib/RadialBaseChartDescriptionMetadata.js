/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { DomainChartDescriptionMetadata } from "./DomainChartDescriptionMetadata";
/**
 * @hidden
 */
var RadialBaseChartDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RadialBaseChartDescriptionMetadata, _super);
    function RadialBaseChartDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RadialBaseChartDescriptionMetadata.b = function (a) {
        if (RadialBaseChartDescriptionMetadata.a == null) {
            RadialBaseChartDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            RadialBaseChartDescriptionMetadata.c(RadialBaseChartDescriptionMetadata.a);
        }
        if (a.k(RadialBaseChartDescriptionMetadata.a)) {
            return;
        }
        a.ac(RadialBaseChartDescriptionMetadata.a);
    };
    RadialBaseChartDescriptionMetadata.c = function (a) {
        DomainChartDescriptionMetadata.c(a);
        a.item("AngleAxisFormatLabelRef", "(w:AngleAxisFormatLabel,wf:AngleAxisFormatLabel)MethodRef");
        a.item("ValueAxisFormatLabelRef", "(w:ValueAxisFormatLabel,wf:ValueAxisFormatLabel)MethodRef");
        a.item("AngleAxisLabelLeftMargin", "Number:double");
        a.item("AngleAxisLabelTopMargin", "Number:double");
        a.item("AngleAxisLabelRightMargin", "Number:double");
        a.item("AngleAxisLabelBottomMargin", "Number:double");
        a.item("ValueAxisLabelLeftMargin", "Number:double");
        a.item("ValueAxisLabelTopMargin", "Number:double");
        a.item("ValueAxisLabelRightMargin", "Number:double");
        a.item("ValueAxisLabelBottomMargin", "Number:double");
        a.item("AngleAxisLabelTextColor", "Brush");
        a.item("ValueAxisLabelTextColor", "Brush");
        a.item("ActualAngleAxisLabelTextColor", "Brush");
        a.item("ActualValueAxisLabelTextColor", "Brush");
        a.item("AngleAxisTitleMargin", "Number:double");
        a.item("ValueAxisTitleMargin", "Number:double");
        a.item("AngleAxisTitleLeftMargin", "Number:double");
        a.item("ValueAxisTitleLeftMargin", "Number:double");
        a.item("AngleAxisTitleTopMargin", "Number:double");
        a.item("ValueAxisTitleTopMargin", "Number:double");
        a.item("AngleAxisTitleRightMargin", "Number:double");
        a.item("ValueAxisTitleRightMargin", "Number:double");
        a.item("AngleAxisTitleBottomMargin", "Number:double");
        a.item("ValueAxisTitleBottomMargin", "Number:double");
        a.item("AngleAxisTitleTextColor", "Brush");
        a.item("ValueAxisTitleTextColor", "Brush");
        a.item("AngleAxisLabelTextStyle", "String");
        a.item("ValueAxisLabelTextStyle", "String");
        a.item("AngleAxisTitleTextStyle", "String");
        a.item("ValueAxisTitleTextStyle", "String");
        a.item("AngleAxisLabelRef", "(w:AngleAxisLabel,wf:AngleAxisLabel)DataRef");
        a.item("ValueAxisLabelRef", "(w:ValueAxisLabel,wf:ValueAxisLabel)DataRef");
        a.item("AngleAxisMajorStroke", "Brush");
        a.item("ValueAxisMajorStroke", "Brush");
        a.item("AngleAxisMajorStrokeThickness", "Number:double");
        a.item("ValueAxisMajorStrokeThickness", "Number:double");
        a.item("AngleAxisMinorStrokeThickness", "Number:double");
        a.item("ValueAxisMinorStrokeThickness", "Number:double");
        a.item("AngleAxisStrip", "Brush");
        a.item("ValueAxisStrip", "Brush");
        a.item("AngleAxisStroke", "Brush");
        a.item("ValueAxisStroke", "Brush");
        a.item("AngleAxisStrokeThickness", "Number:double");
        a.item("ValueAxisStrokeThickness", "Number:double");
        a.item("AngleAxisTickLength", "Number:double");
        a.item("ValueAxisTickLength", "Number:double");
        a.item("AngleAxisTickStroke", "Brush");
        a.item("ValueAxisTickStroke", "Brush");
        a.item("AngleAxisTickStrokeThickness", "Number:double");
        a.item("ValueAxisTickStrokeThickness", "Number:double");
        a.item("AngleAxisTitle", "String");
        a.item("ValueAxisTitle", "String");
        a.item("AngleAxisMinorStroke", "Brush");
        a.item("ValueAxisMinorStroke", "Brush");
        a.item("AngleAxisLabelAngle", "Number:double");
        a.item("ValueAxisLabelAngle", "Number:double");
        a.item("AngleAxisExtent", "Number:double");
        a.item("ValueAxisExtent", "Number:double");
        a.item("AngleAxisTitleAngle", "Number:double");
        a.item("ValueAxisTitleAngle", "Number:double");
        a.item("AngleAxisInverted", "Boolean");
        a.item("ValueAxisInverted", "Boolean");
        a.item("AngleAxisTitleAlignment", "ExportedType:string:HorizontalAlignment");
        a.item("AngleAxisTitleAlignment@names", "Left;Center;Right;Stretch");
        a.item("ValueAxisTitleAlignment", "ExportedType:string:VerticalAlignment");
        a.item("ValueAxisTitleAlignment@names", "Top;Center;Bottom;Stretch");
        a.item("AngleAxisLabelHorizontalAlignment", "ExportedType:string:HorizontalAlignment");
        a.item("AngleAxisLabelHorizontalAlignment@names", "Left;Center;Right;Stretch");
        a.item("ValueAxisLabelHorizontalAlignment", "ExportedType:string:HorizontalAlignment");
        a.item("ValueAxisLabelHorizontalAlignment@names", "Left;Center;Right;Stretch");
        a.item("AngleAxisLabelVerticalAlignment", "ExportedType:string:VerticalAlignment");
        a.item("AngleAxisLabelVerticalAlignment@names", "Top;Center;Bottom;Stretch");
        a.item("ValueAxisLabelVerticalAlignment", "ExportedType:string:VerticalAlignment");
        a.item("ValueAxisLabelVerticalAlignment@names", "Top;Center;Bottom;Stretch");
        a.item("AngleAxisLabelVisibility", "ExportedType:string:Visibility");
        a.item("AngleAxisLabelVisibility@names", "Visible;Collapsed");
        a.item("ValueAxisLabelVisibility", "ExportedType:string:Visibility");
        a.item("ValueAxisLabelVisibility@names", "Visible;Collapsed");
        a.item("ValueAxisLabelLocation", "ExportedType:string:ValueAxisLabelLocation");
        a.item("ValueAxisLabelLocation@names", "OutsideLeft;OutsideRight;InsideLeft;InsideRight;Auto");
        a.item("AngleAxisLabelLocation", "ExportedType:string:AngleAxisLabelLocation");
        a.item("AngleAxisLabelLocation@names", "OutsideTop;OutsideBottom;InsideTop;InsideBottom;Auto");
        a.item("AngleAxisLabelFormat", "String");
        a.item("AngleAxisLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("AngleAxisLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("ValueAxisLabelFormat", "String");
        a.item("ValueAxisLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("ValueAxisLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
    };
    RadialBaseChartDescriptionMetadata.d = function (a) {
        RadialBaseChartDescriptionMetadata.b(a);
        a.ad("RadialBaseChart", RadialBaseChartDescriptionMetadata.a);
    };
    RadialBaseChartDescriptionMetadata.$t = markType(RadialBaseChartDescriptionMetadata, 'RadialBaseChartDescriptionMetadata');
    RadialBaseChartDescriptionMetadata.a = null;
    return RadialBaseChartDescriptionMetadata;
}(Base));
export { RadialBaseChartDescriptionMetadata };
