/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { FrameworkElement } from "./FrameworkElement";
import { markType } from "./type";
/**
 * @hidden
 */
var TextBlock = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TextBlock, _super);
    function TextBlock() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ag = false;
        _this.ah = 0;
        _this.ak = null;
        _this.ao = null;
        _this.af = true;
        _this.ae = null;
        _this.ad = null;
        _this.ab = null;
        _this.ac = null;
        _this.ai = -1;
        return _this;
    }
    Object.defineProperty(TextBlock.prototype, "al", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            if (this.ak != a) {
                this.af = true;
                this.ak = a;
            }
        },
        enumerable: false,
        configurable: true
    });
    TextBlock.prototype.an = function (a, b) {
        if (this.ai == -1) {
            return null;
        }
        if (!this.af) {
            if (this.ab[this.ai] == a) {
                return this.ae[this.ai];
            }
        }
        for (var c = 0; c < 5; c++) {
            var d = this.ai - c;
            if (d < 0) {
                d = (5) + d;
            }
            if (b != this.ac[d] || a != this.ab[d] || this.ak != this.ad[d]) {
                continue;
            }
            return this.ae[d];
        }
        return null;
    };
    TextBlock.prototype.am = function (a, b, c) {
        if (this.ai == -1) {
            this.ad = new Array(5);
            this.ab = new Array(5);
            this.ac = new Array(5);
            this.ae = new Array(5);
        }
        this.ai++;
        if (this.ai > 5 - 1) {
            this.ai = 0;
        }
        this.ad[this.ai] = this.ak;
        this.ab[this.ai] = a;
        this.ac[this.ai] = b;
        this.ae[this.ai] = c;
        this.af = false;
    };
    TextBlock.$t = markType(TextBlock, 'TextBlock', FrameworkElement.$);
    return TextBlock;
}(FrameworkElement));
export { TextBlock };
