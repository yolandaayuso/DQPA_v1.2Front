/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { LocalDataSource } from "./LocalDataSource";
import { DataSourceExecutionContext } from "./DataSourceExecutionContext";
import { markType } from "./type";
/**
 * @hidden
 */
var PagedDataSource = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(PagedDataSource, _super);
    function PagedDataSource(a) {
        var _this = _super.call(this) || this;
        _this.ec = null;
        _this.ed = false;
        _this.actualDataProvider = a;
        _this.actualDataProvider.executionContext = new DataSourceExecutionContext();
        return _this;
    }
    PagedDataSource.prototype.isPlaceholderItem = function (a) {
        return !this.ed;
    };
    PagedDataSource.prototype.getItemPropertyAtIndex = function (a, b) {
        if (this.ec.isVirtual) {
            if (this.getRowType(a) != 0) {
                return _super.prototype.getItemPropertyAtIndex.call(this, a, b);
            }
            else {
                var c = this.getItemAtIndex(a);
                if (c == null) {
                    return null;
                }
                return this.getItemProperty(c, b);
            }
        }
        return _super.prototype.getItemPropertyAtIndex.call(this, a, b);
    };
    PagedDataSource.prototype.getItemProperty = function (a, b) {
        if (a == null) {
            return null;
        }
        if (this.ec.isVirtual) {
            return this.ec.getItemProperty(a, b);
        }
        return _super.prototype.getItemProperty.call(this, a, b);
    };
    PagedDataSource.prototype.setSchema = function (a) {
        if (this.actualBaseDataProvider != null) {
            this.actualBaseDataProvider.setSchema(a);
            this.queueAutoRefresh();
        }
    };
    PagedDataSource.$t = markType(PagedDataSource, 'PagedDataSource', LocalDataSource.$);
    return PagedDataSource;
}(LocalDataSource));
export { PagedDataSource };
