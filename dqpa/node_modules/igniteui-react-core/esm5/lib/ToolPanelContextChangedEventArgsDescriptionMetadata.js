/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ToolPanelContextChangedEventArgsDescription } from "./ToolPanelContextChangedEventArgsDescription";
/**
 * @hidden
 */
var ToolPanelContextChangedEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolPanelContextChangedEventArgsDescriptionMetadata, _super);
    function ToolPanelContextChangedEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolPanelContextChangedEventArgsDescriptionMetadata.b = function (a) {
        if (ToolPanelContextChangedEventArgsDescriptionMetadata.a == null) {
            ToolPanelContextChangedEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ToolPanelContextChangedEventArgsDescriptionMetadata.c(ToolPanelContextChangedEventArgsDescriptionMetadata.a);
        }
        if (a.k(ToolPanelContextChangedEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(ToolPanelContextChangedEventArgsDescriptionMetadata.a);
    };
    ToolPanelContextChangedEventArgsDescriptionMetadata.c = function (a) {
        a.item("ContextKey", "String");
        a.item("OldValueRef", "(w:OldValue,wf:OldValue)DataRef");
        a.item("NewValueRef", "(w:NewValue,wf:NewValue)DataRef");
    };
    ToolPanelContextChangedEventArgsDescriptionMetadata.d = function (a) {
        ToolPanelContextChangedEventArgsDescriptionMetadata.b(a);
        a.ae("ToolPanelContextChangedEventArgs", function () { return new ToolPanelContextChangedEventArgsDescription(); });
        a.ad("ToolPanelContextChangedEventArgs", ToolPanelContextChangedEventArgsDescriptionMetadata.a);
    };
    ToolPanelContextChangedEventArgsDescriptionMetadata.$t = markType(ToolPanelContextChangedEventArgsDescriptionMetadata, 'ToolPanelContextChangedEventArgsDescriptionMetadata');
    ToolPanelContextChangedEventArgsDescriptionMetadata.a = null;
    return ToolPanelContextChangedEventArgsDescriptionMetadata;
}(Base));
export { ToolPanelContextChangedEventArgsDescriptionMetadata };
