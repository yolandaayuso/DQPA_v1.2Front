/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { PropertyEditorPanelDescription } from "./PropertyEditorPanelDescription";
/**
 * @hidden
 */
var PropertyEditorPanelDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(PropertyEditorPanelDescriptionMetadata, _super);
    function PropertyEditorPanelDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyEditorPanelDescriptionMetadata.b = function (a) {
        if (PropertyEditorPanelDescriptionMetadata.a == null) {
            PropertyEditorPanelDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            PropertyEditorPanelDescriptionMetadata.c(PropertyEditorPanelDescriptionMetadata.a);
        }
        if (a.k(PropertyEditorPanelDescriptionMetadata.a)) {
            return;
        }
        a.ac(PropertyEditorPanelDescriptionMetadata.a);
    };
    PropertyEditorPanelDescriptionMetadata.c = function (a) {
        a.item("ActualDataSource", "(w:ActualProperties,xam:ActualProperties,wf:ActualProperties)Collection:PropertyEditorPropertyDescription:PropertyEditorPropertyDescriptionCollection:PropertyEditorPropertyDescription");
        a.item("Properties", "Collection:PropertyEditorPropertyDescription:PropertyEditorPropertyDescriptionCollection:PropertyEditorPropertyDescription");
        a.item("RowHeight", "Number:int");
        a.item("UpdateMode", "ExportedType:string:PropertyEditorPanelUpdateMode");
        a.item("UpdateMode@names", "Auto;ComponentRendererOverlay;DataSeriesToDescriptionCustomizations");
        a.item("ActualRowHeight", "Number:double");
        a.item("CellFontFamily", "(w:CellFontFamily/FontFamilyTransform,xam:CellFontFamily,wf:CellFontFamily,web:cellTextStyle/FontFamilyTransform)String");
        a.item("CellFontSize", "(w:CellFontSize,xam:CellFontSize,wf:CellFontSize,web:cellTextStyle/FontSizeTransform)Number:double");
        a.item("CellFontStyle", "(w:CellFontStyle/FontStyleTransform,xam:CellFontFamily/FontStyleTransform,wf:CellFontFamily/FontStyleTransform,web:cellTextStyle/FontStyleTransform)String");
        a.item("CellFontWeight", "(w:CellFontWeight/FontWeightTransform,xam:CellFontFamily/FontWeightTransform,wf:CellFontFamily/FontWeightTransform,web:cellTextStyle/FontWeightTransform)String");
        a.item("DescriptionContextRef", "(w:DescriptionContext,wf:DescriptionContext)DataRef::object");
        a.item("ComponentRendererRef", "(w:ComponentRenderer,wf:ComponentRenderer)DataRef::object");
        a.item("TargetRef", "(w:Target,wf:Target)DataRef::object");
        a.item("DescriptionType", "String");
        a.item("IsHorizontal", "Boolean");
        a.item("IsWrappingEnabled", "Boolean");
        a.item("IsIndirectModeEnabled", "Boolean");
        a.item("BackgroundColor", "Brush");
        a.item("TextColor", "Brush");
        PropertyEditorPanelDescriptionMetadata.e(a);
    };
    PropertyEditorPanelDescriptionMetadata.d = function (a) {
        PropertyEditorPanelDescriptionMetadata.b(a);
        a.ae("PropertyEditorPanel", function () { return new PropertyEditorPanelDescription(); });
        a.ad("PropertyEditorPanel", PropertyEditorPanelDescriptionMetadata.a);
    };
    PropertyEditorPanelDescriptionMetadata.e = function (a) {
        a.item("_qualifiedName", "String:Infragistics.Controls.Layouts.XamPropertyEditorPanel");
        a.item("Width", "(w:Width/DimensionTransform,xam:Width/DimensionTransform)String");
        a.item("Height", "(w:Height/DimensionTransform,xam:Height/DimensionTransform)String");
        a.item("Background", "(wf:BackColor/ColorTransform)Brush");
    };
    PropertyEditorPanelDescriptionMetadata.$t = markType(PropertyEditorPanelDescriptionMetadata, 'PropertyEditorPanelDescriptionMetadata');
    PropertyEditorPanelDescriptionMetadata.a = null;
    return PropertyEditorPanelDescriptionMetadata;
}(Base));
export { PropertyEditorPanelDescriptionMetadata };
