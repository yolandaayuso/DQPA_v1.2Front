/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { SparklineDescription } from "./SparklineDescription";
/**
 * @hidden
 */
var SparklineDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SparklineDescriptionMetadata, _super);
    function SparklineDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SparklineDescriptionMetadata.b = function (a) {
        if (SparklineDescriptionMetadata.a == null) {
            SparklineDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            SparklineDescriptionMetadata.c(SparklineDescriptionMetadata.a);
        }
        if (a.k(SparklineDescriptionMetadata.a)) {
            return;
        }
        a.ac(SparklineDescriptionMetadata.a);
    };
    SparklineDescriptionMetadata.c = function (a) {
        a.item("Brush", "Brush");
        a.item("NegativeBrush", "Brush");
        a.item("MarkerBrush", "Brush");
        a.item("NegativeMarkerBrush", "Brush");
        a.item("FirstMarkerBrush", "Brush");
        a.item("LastMarkerBrush", "Brush");
        a.item("HighMarkerBrush", "Brush");
        a.item("LowMarkerBrush", "Brush");
        a.item("TrendLineBrush", "Brush");
        a.item("HorizontalAxisBrush", "Brush");
        a.item("VerticalAxisBrush", "Brush");
        a.item("NormalRangeFill", "Brush");
        a.item("HorizontalAxisVisibility", "ExportedType:string:Visibility");
        a.item("HorizontalAxisVisibility@names", "Visible;Collapsed");
        a.item("VerticalAxisVisibility", "ExportedType:string:Visibility");
        a.item("VerticalAxisVisibility@names", "Visible;Collapsed");
        a.item("MarkerVisibility", "ExportedType:string:Visibility");
        a.item("MarkerVisibility@names", "Visible;Collapsed");
        a.item("NegativeMarkerVisibility", "ExportedType:string:Visibility");
        a.item("NegativeMarkerVisibility@names", "Visible;Collapsed");
        a.item("FirstMarkerVisibility", "ExportedType:string:Visibility");
        a.item("FirstMarkerVisibility@names", "Visible;Collapsed");
        a.item("LastMarkerVisibility", "ExportedType:string:Visibility");
        a.item("LastMarkerVisibility@names", "Visible;Collapsed");
        a.item("LowMarkerVisibility", "ExportedType:string:Visibility");
        a.item("LowMarkerVisibility@names", "Visible;Collapsed");
        a.item("HighMarkerVisibility", "ExportedType:string:Visibility");
        a.item("HighMarkerVisibility@names", "Visible;Collapsed");
        a.item("NormalRangeVisibility", "ExportedType:string:Visibility");
        a.item("NormalRangeVisibility@names", "Visible;Collapsed");
        a.item("DisplayNormalRangeInFront", "Boolean");
        a.item("MarkerSize", "Number:double");
        a.item("FirstMarkerSize", "Number:double");
        a.item("LastMarkerSize", "Number:double");
        a.item("HighMarkerSize", "Number:double");
        a.item("LowMarkerSize", "Number:double");
        a.item("NegativeMarkerSize", "Number:double");
        a.item("LineThickness", "Number:double");
        a.item("Minimum", "Number:double");
        a.item("Maximum", "Number:double");
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:DataSource)DataRef::object");
        a.item("ValueMemberPath", "String");
        a.item("LabelMemberPath", "String");
        a.item("TrendLineType", "ExportedType:string:TrendLineType");
        a.item("TrendLineType@names", "None;LinearFit;QuadraticFit;CubicFit;QuarticFit;QuinticFit;LogarithmicFit;ExponentialFit;PowerLawFit;SimpleAverage;ExponentialAverage;ModifiedAverage;CumulativeAverage;WeightedAverage");
        a.item("TrendLinePeriod", "Number:int");
        a.item("TrendLineThickness", "Number:double");
        a.item("NormalRangeMinimum", "Number:double");
        a.item("NormalRangeMaximum", "Number:double");
        a.item("DisplayType", "ExportedType:string:SparklineDisplayType");
        a.item("DisplayType@names", "Line;Area;Column;WinLoss");
        a.item("UnknownValuePlotting", "ExportedType:string:UnknownValuePlotting");
        a.item("UnknownValuePlotting@names", "LinearInterpolate;DontPlot");
        a.item("VerticalAxisLabelRef", "(w:VerticalAxisLabel,wf:VerticalAxisLabel)DataRef");
        a.item("HorizontalAxisLabelRef", "(w:HorizontalAxisLabel,wf:HorizontalAxisLabel)DataRef");
        a.item("FormatLabelRef", "(w:FormatLabel,wf:FormatLabel)MethodRef");
        a.item("HorizontalLabelFormat", "String");
        a.item("HorizontalLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("HorizontalLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("VerticalLabelFormat", "String");
        a.item("VerticalLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("VerticalLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("PixelScalingRatio", "Number:double");
        a.item("ActualPixelScalingRatio", "Number:double");
        SparklineDescriptionMetadata.e(a);
    };
    SparklineDescriptionMetadata.d = function (a) {
        SparklineDescriptionMetadata.b(a);
        a.ae("Sparkline", function () { return new SparklineDescription(); });
        a.ad("Sparkline", SparklineDescriptionMetadata.a);
    };
    SparklineDescriptionMetadata.e = function (a) {
        a.item("_qualifiedName", "String:Infragistics.Controls.Charts.XamSparkline");
        a.item("Width", "(w:Width/DimensionTransform,xam:Width/DimensionTransform)String");
        a.item("Height", "(w:Height/DimensionTransform,xam:Height/DimensionTransform)String");
        a.item("Background", "(wf:BackColor/ColorTransform)Brush");
    };
    SparklineDescriptionMetadata.$t = markType(SparklineDescriptionMetadata, 'SparklineDescriptionMetadata');
    SparklineDescriptionMetadata.a = null;
    return SparklineDescriptionMetadata;
}(Base));
export { SparklineDescriptionMetadata };
