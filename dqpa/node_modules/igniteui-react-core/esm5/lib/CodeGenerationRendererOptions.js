/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "./type";
/**
 * @hidden
 */
var CodeGenerationRendererOptions = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CodeGenerationRendererOptions, _super);
    function CodeGenerationRendererOptions() {
        var _this = _super.call(this) || this;
        _this._forceHelperLookups = false;
        _this._skipAlterDataCasing = false;
        _this.c = false;
        _this._reusedContext = null;
        _this._generateFullProject = false;
        _this._forceCodeBehind = false;
        _this._library = null;
        _this._cDNBasePath = null;
        _this._useSpacesForIndent = false;
        _this._indentSpaces = 0;
        _this.useSpacesForIndent = true;
        _this.indentSpaces = 4;
        _this.cDNBasePath = "https://static.infragistics.com/xplatform/cdn/";
        return _this;
    }
    Object.defineProperty(CodeGenerationRendererOptions.prototype, "forceHelperLookups", {
        get: function () {
            return this._forceHelperLookups;
        },
        set: function (a) {
            this._forceHelperLookups = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeGenerationRendererOptions.prototype, "skipAlterDataCasing", {
        get: function () {
            return this._skipAlterDataCasing;
        },
        set: function (a) {
            this._skipAlterDataCasing = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeGenerationRendererOptions.prototype, "reusedContext", {
        get: function () {
            return this._reusedContext;
        },
        set: function (a) {
            this._reusedContext = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeGenerationRendererOptions.prototype, "g", {
        get: function () {
            return this.skipAlterDataCasing || this.c;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeGenerationRendererOptions.prototype, "generateFullProject", {
        get: function () {
            return this._generateFullProject;
        },
        set: function (a) {
            this._generateFullProject = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeGenerationRendererOptions.prototype, "forceCodeBehind", {
        get: function () {
            return this._forceCodeBehind;
        },
        set: function (a) {
            this._forceCodeBehind = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeGenerationRendererOptions.prototype, "library", {
        get: function () {
            return this._library;
        },
        set: function (a) {
            this._library = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeGenerationRendererOptions.prototype, "cDNBasePath", {
        get: function () {
            return this._cDNBasePath;
        },
        set: function (a) {
            this._cDNBasePath = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeGenerationRendererOptions.prototype, "useSpacesForIndent", {
        get: function () {
            return this._useSpacesForIndent;
        },
        set: function (a) {
            this._useSpacesForIndent = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeGenerationRendererOptions.prototype, "indentSpaces", {
        get: function () {
            return this._indentSpaces;
        },
        set: function (a) {
            this._indentSpaces = a;
        },
        enumerable: false,
        configurable: true
    });
    CodeGenerationRendererOptions.$t = markType(CodeGenerationRendererOptions, 'CodeGenerationRendererOptions');
    return CodeGenerationRendererOptions;
}(Base));
export { CodeGenerationRendererOptions };
