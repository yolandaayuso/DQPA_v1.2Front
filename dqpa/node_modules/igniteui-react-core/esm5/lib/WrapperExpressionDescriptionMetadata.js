/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { FilterExpressionDescriptionMetadata } from "./FilterExpressionDescriptionMetadata";
/**
 * @hidden
 */
var WrapperExpressionDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WrapperExpressionDescriptionMetadata, _super);
    function WrapperExpressionDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WrapperExpressionDescriptionMetadata.b = function (a) {
        if (WrapperExpressionDescriptionMetadata.a == null) {
            WrapperExpressionDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WrapperExpressionDescriptionMetadata.c(WrapperExpressionDescriptionMetadata.a);
        }
        if (a.k(WrapperExpressionDescriptionMetadata.a)) {
            return;
        }
        a.ac(WrapperExpressionDescriptionMetadata.a);
        FilterExpressionDescriptionMetadata.d(a);
    };
    WrapperExpressionDescriptionMetadata.c = function (a) {
        FilterExpressionDescriptionMetadata.c(a);
        a.item("InnerExpression", "ExportedType:IFilterExpression");
        a.item("Expression", "ExportedType:FilterExpression");
        a.item("PropertyName", "String");
    };
    WrapperExpressionDescriptionMetadata.d = function (a) {
        WrapperExpressionDescriptionMetadata.b(a);
        a.ad("WrapperExpression", WrapperExpressionDescriptionMetadata.a);
    };
    WrapperExpressionDescriptionMetadata.$t = markType(WrapperExpressionDescriptionMetadata, 'WrapperExpressionDescriptionMetadata');
    WrapperExpressionDescriptionMetadata.a = null;
    return WrapperExpressionDescriptionMetadata;
}(Base));
export { WrapperExpressionDescriptionMetadata };
