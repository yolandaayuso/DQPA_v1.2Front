/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { CollisionGeometry } from "./CollisionGeometry";
import { CollisionRect } from "./CollisionRect";
import { Point_$type, markType } from "./type";
import { GeometryUtil } from "./GeometryUtil";
/**
 * @hidden
 */
var CircleCollisionGeometry = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CircleCollisionGeometry, _super);
    function CircleCollisionGeometry(a, b, c) {
        var _this = _super.call(this) || this;
        _this.h = 0;
        _this.i = 0;
        _this.j = 0;
        _this.g = CollisionRect.empty;
        _this.h = a;
        _this.i = b;
        _this.j = c;
        return _this;
    }
    CircleCollisionGeometry.prototype.get_type = function () {
        return 0;
    };
    Object.defineProperty(CircleCollisionGeometry.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    CircleCollisionGeometry.prototype.get_boundingBox = function () {
        if (this.g.isEmpty) {
            this.g = new CollisionRect(1, this.h - this.j, this.i - this.j, this.j + this.j, this.j + this.j);
        }
        return this.g;
    };
    Object.defineProperty(CircleCollisionGeometry.prototype, "boundingBox", {
        get: function () {
            return this.get_boundingBox();
        },
        enumerable: false,
        configurable: true
    });
    CircleCollisionGeometry.prototype.d = function (a) {
        var b = { $type: Point_$type, x: a.left, y: a.top };
        var c = { $type: Point_$type, x: a.right, y: a.top };
        var d = { $type: Point_$type, x: a.right, y: a.bottom };
        var e = { $type: Point_$type, x: a.left, y: a.bottom };
        var f = { $type: Point_$type, x: this.h, y: this.i };
        var g = this.j;
        return GeometryUtil.c(b, f, g) || GeometryUtil.c(c, f, g) || GeometryUtil.c(d, f, g) || GeometryUtil.c(e, f, g);
    };
    CircleCollisionGeometry.$t = markType(CircleCollisionGeometry, 'CircleCollisionGeometry', CollisionGeometry.$);
    return CircleCollisionGeometry;
}(CollisionGeometry));
export { CircleCollisionGeometry };
