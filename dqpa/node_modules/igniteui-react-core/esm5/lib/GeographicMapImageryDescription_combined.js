/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
import { SeriesViewerDescription } from "./SeriesViewerDescription";
/**
 * @hidden
 */
var GeographicMapImageryDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicMapImageryDescription, _super);
    function GeographicMapImageryDescription() {
        var _this = _super.call(this) || this;
        _this.j = null;
        _this.h = null;
        _this.t = null;
        _this.l = false;
        _this.u = null;
        _this.n = 0;
        _this.s = null;
        _this.r = null;
        _this.p = null;
        _this.q = null;
        return _this;
    }
    GeographicMapImageryDescription.prototype.get_type = function () {
        return "GeographicMapImagery";
    };
    Object.defineProperty(GeographicMapImageryDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "windowRect", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.g("WindowRect");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "geographicMap", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.g("GeographicMap");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "referer", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.g("Referer");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "isHorizontalWrappingEnabled", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.g("IsHorizontalWrappingEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "userAgent", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.g("UserAgent");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "opacity", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.g("Opacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "imageTilesReadyRef", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.g("ImageTilesReadyRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "imagesChangedRef", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.g("ImagesChangedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "cancellingImageRef", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.g("CancellingImageRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "downloadingImageRef", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.g("DownloadingImageRef");
        },
        enumerable: false,
        configurable: true
    });
    GeographicMapImageryDescription.$t = markType(GeographicMapImageryDescription, 'GeographicMapImageryDescription', Description.$);
    return GeographicMapImageryDescription;
}(Description));
export { GeographicMapImageryDescription };
/**
 * @hidden
 */
var GeographicMapDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicMapDescription, _super);
    function GeographicMapDescription() {
        var _this = _super.call(this) || this;
        _this.ie = false;
        _this.is = null;
        _this.ib = false;
        _this.ip = null;
        _this.id = false;
        _this.ic = false;
        _this.h8 = null;
        _this.h7 = null;
        _this.h5 = null;
        _this.il = 0;
        _this.ik = 0;
        _this.ir = null;
        _this.it = null;
        _this.iq = null;
        return _this;
    }
    GeographicMapDescription.prototype.get_type = function () {
        return "GeographicMap";
    };
    Object.defineProperty(GeographicMapDescription.prototype, "zoomable", {
        get: function () {
            return this.ie;
        },
        set: function (a) {
            this.ie = a;
            this.g("Zoomable");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "resizeBehavior", {
        get: function () {
            return this.is;
        },
        set: function (a) {
            this.is = a;
            this.g("ResizeBehavior");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "isHorizontalWrappingEnabled", {
        get: function () {
            return this.ib;
        },
        set: function (a) {
            this.ib = a;
            this.g("IsHorizontalWrappingEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "backgroundTilingMode", {
        get: function () {
            return this.ip;
        },
        set: function (a) {
            this.ip = a;
            this.g("BackgroundTilingMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "useWorldRectForZoomBounds", {
        get: function () {
            return this.id;
        },
        set: function (a) {
            this.id = a;
            this.g("UseWorldRectForZoomBounds");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "suppressZoomResetOnWorldRectChange", {
        get: function () {
            return this.ic;
        },
        set: function (a) {
            this.ic = a;
            this.g("SuppressZoomResetOnWorldRectChange");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "worldRect", {
        get: function () {
            return this.h8;
        },
        set: function (a) {
            this.h8 = a;
            this.g("WorldRect");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "actualWorldRect", {
        get: function () {
            return this.h7;
        },
        set: function (a) {
            this.h7 = a;
            this.g("ActualWorldRect");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "backgroundContent", {
        get: function () {
            return this.h5;
        },
        set: function (a) {
            this.h5 = a;
            this.g("BackgroundContent");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "windowScale", {
        get: function () {
            return this.il;
        },
        set: function (a) {
            this.il = a;
            this.g("WindowScale");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "actualWindowScale", {
        get: function () {
            return this.ik;
        },
        set: function (a) {
            this.ik = a;
            this.g("ActualWindowScale");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "imageTilesReadyRef", {
        get: function () {
            return this.ir;
        },
        set: function (a) {
            this.ir = a;
            this.g("ImageTilesReadyRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "width", {
        get: function () {
            return this.it;
        },
        set: function (a) {
            this.it = a;
            this.g("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "height", {
        get: function () {
            return this.iq;
        },
        set: function (a) {
            this.iq = a;
            this.g("Height");
        },
        enumerable: false,
        configurable: true
    });
    GeographicMapDescription.$t = markType(GeographicMapDescription, 'GeographicMapDescription', SeriesViewerDescription.$);
    return GeographicMapDescription;
}(SeriesViewerDescription));
export { GeographicMapDescription };
