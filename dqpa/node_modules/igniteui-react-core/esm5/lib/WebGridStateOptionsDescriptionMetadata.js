/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebGridStateOptionsDescription } from "./WebGridStateOptionsDescription";
/**
 * @hidden
 */
var WebGridStateOptionsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridStateOptionsDescriptionMetadata, _super);
    function WebGridStateOptionsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridStateOptionsDescriptionMetadata.b = function (a) {
        if (WebGridStateOptionsDescriptionMetadata.a == null) {
            WebGridStateOptionsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridStateOptionsDescriptionMetadata.c(WebGridStateOptionsDescriptionMetadata.a);
        }
        if (a.k(WebGridStateOptionsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridStateOptionsDescriptionMetadata.a);
    };
    WebGridStateOptionsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridStateOptions");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__isPlainObject", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Columns", "Boolean");
        a.item("Filtering", "Boolean");
        a.item("AdvancedFiltering", "Boolean");
        a.item("Sorting", "Boolean");
        a.item("GroupBy", "Boolean");
        a.item("Paging", "Boolean");
        a.item("CellSelection", "Boolean");
        a.item("RowSelection", "Boolean");
        a.item("ColumnSelection", "Boolean");
        a.item("RowPinning", "Boolean");
        a.item("PinningConfig", "Boolean");
        a.item("Expansion", "Boolean");
        a.item("RowIslands", "Boolean");
        a.item("Moving", "Boolean");
        a.item("PivotConfiguration", "Boolean");
    };
    WebGridStateOptionsDescriptionMetadata.d = function (a) {
        WebGridStateOptionsDescriptionMetadata.b(a);
        a.ae("WebGridStateOptions", function () { return new WebGridStateOptionsDescription(); });
        a.ad("WebGridStateOptions", WebGridStateOptionsDescriptionMetadata.a);
    };
    WebGridStateOptionsDescriptionMetadata.$t = markType(WebGridStateOptionsDescriptionMetadata, 'WebGridStateOptionsDescriptionMetadata');
    WebGridStateOptionsDescriptionMetadata.a = null;
    return WebGridStateOptionsDescriptionMetadata;
}(Base));
export { WebGridStateOptionsDescriptionMetadata };
