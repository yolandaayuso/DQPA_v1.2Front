/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var DatePickerDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DatePickerDescription, _super);
    function DatePickerDescription() {
        var _this = _super.call(this) || this;
        _this.ac = new Date();
        _this.ab = new Date();
        _this.av = null;
        _this.az = null;
        _this.aw = null;
        _this.ah = 0;
        _this.ax = null;
        _this.ay = null;
        _this.a1 = null;
        _this.aa = new Date();
        _this.z = new Date();
        _this.ao = null;
        _this.al = null;
        _this.a4 = null;
        _this.ai = 0;
        _this.a5 = null;
        _this.a6 = null;
        _this.a3 = null;
        _this.at = null;
        _this.m = false;
        _this.n = false;
        _this.h = false;
        _this.l = false;
        _this.ap = null;
        _this.aq = null;
        _this.o = false;
        _this.an = null;
        _this.ar = null;
        _this.i = false;
        _this.j = false;
        _this.k = false;
        _this.p = false;
        _this.a2 = null;
        _this.as = null;
        _this.a0 = null;
        _this.au = null;
        _this.am = null;
        _this.a7 = null;
        return _this;
    }
    DatePickerDescription.prototype.get_type = function () {
        return "DatePicker";
    };
    Object.defineProperty(DatePickerDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "value", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
            this.g("Value");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "today", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.g("Today");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "label", {
        get: function () {
            return this.av;
        },
        set: function (a) {
            this.av = a;
            this.g("Label");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "labelTextColor", {
        get: function () {
            return this.az;
        },
        set: function (a) {
            this.az = a;
            this.g("LabelTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "labelFontFamily", {
        get: function () {
            return this.aw;
        },
        set: function (a) {
            this.aw = a;
            this.g("LabelFontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "labelFontSize", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
            this.g("LabelFontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "labelFontStyle", {
        get: function () {
            return this.ax;
        },
        set: function (a) {
            this.ax = a;
            this.g("LabelFontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "labelFontWeight", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            this.ay = a;
            this.g("LabelFontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "placeholder", {
        get: function () {
            return this.a1;
        },
        set: function (a) {
            this.a1 = a;
            this.g("Placeholder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "minDate", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
            this.g("MinDate");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "maxDate", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.g("MaxDate");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "density", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
            this.g("Density");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "baseTheme", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            this.al = a;
            this.g("BaseTheme");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "textFontFamily", {
        get: function () {
            return this.a4;
        },
        set: function (a) {
            this.a4 = a;
            this.g("TextFontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "textFontSize", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
            this.g("TextFontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "textFontStyle", {
        get: function () {
            return this.a5;
        },
        set: function (a) {
            this.a5 = a;
            this.g("TextFontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "textFontWeight", {
        get: function () {
            return this.a6;
        },
        set: function (a) {
            this.a6 = a;
            this.g("TextFontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "textColor", {
        get: function () {
            return this.a3;
        },
        set: function (a) {
            this.a3 = a;
            this.g("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "iconColor", {
        get: function () {
            return this.at;
        },
        set: function (a) {
            this.at = a;
            this.g("IconColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "showClearButton", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.g("ShowClearButton");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "showTodayButton", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.g("ShowTodayButton");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "allowTextInput", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.g("AllowTextInput");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "openOnFocus", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.g("OpenOnFocus");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "firstDayOfWeek", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.g("FirstDayOfWeek");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "firstWeekOfYear", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            this.aq = a;
            this.g("FirstWeekOfYear");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "showWeekNumbers", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.g("ShowWeekNumbers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "dateFormat", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.g("DateFormat");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "formatString", {
        get: function () {
            return this.ar;
        },
        set: function (a) {
            this.ar = a;
            this.g("FormatString");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "isDisabled", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.g("IsDisabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "isFixed", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.g("IsFixed");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "openAsChild", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.g("OpenAsChild");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "useTopLayer", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.g("UseTopLayer");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "selectedValueChangedRef", {
        get: function () {
            return this.a2;
        },
        set: function (a) {
            this.a2 = a;
            this.g("SelectedValueChangedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "gotFocusRef", {
        get: function () {
            return this.as;
        },
        set: function (a) {
            this.as = a;
            this.g("GotFocusRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "lostFocusRef", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            this.a0 = a;
            this.g("LostFocusRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "keyDownRef", {
        get: function () {
            return this.au;
        },
        set: function (a) {
            this.au = a;
            this.g("KeyDownRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "changingRef", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
            this.g("ChangingRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DatePickerDescription.prototype, "valueChangeRef", {
        get: function () {
            return this.a7;
        },
        set: function (a) {
            this.a7 = a;
            this.g("ValueChangeRef");
        },
        enumerable: false,
        configurable: true
    });
    DatePickerDescription.$t = markType(DatePickerDescription, 'DatePickerDescription', Description.$);
    return DatePickerDescription;
}(Description));
export { DatePickerDescription };
