/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AxisRangeChangedEventArgsDescriptionMetadata } from "./AxisRangeChangedEventArgsDescriptionMetadata";
import { RenderRequestedEventArgsDescriptionMetadata } from "./RenderRequestedEventArgsDescriptionMetadata";
/**
 * @hidden
 */
var AxisDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AxisDescriptionMetadata, _super);
    function AxisDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AxisDescriptionMetadata.b = function (a) {
        if (AxisDescriptionMetadata.a == null) {
            AxisDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            AxisDescriptionMetadata.c(AxisDescriptionMetadata.a);
        }
        if (a.k(AxisDescriptionMetadata.a)) {
            return;
        }
        a.ac(AxisDescriptionMetadata.a);
        AxisRangeChangedEventArgsDescriptionMetadata.d(a);
        RenderRequestedEventArgsDescriptionMetadata.d(a);
    };
    AxisDescriptionMetadata.c = function (a) {
        a.item("FormatLabelRef", "(w:FormatLabel,wf:FormatLabel)MethodRef");
        a.item("Title", "String");
        a.item("Stroke", "Brush");
        a.item("ActualStroke", "Brush");
        a.item("StrokeThickness", "Number:double");
        a.item("StrokeDashArray", "DoubleCollection:double");
        a.item("Strip", "Brush");
        a.item("MajorStroke", "Brush");
        a.item("ActualMajorStroke", "Brush");
        a.item("MajorStrokeThickness", "Number:double");
        a.item("MajorStrokeDashArray", "DoubleCollection:double");
        a.item("MinorStroke", "Brush");
        a.item("ActualMinorStroke", "Brush");
        a.item("MinorStrokeThickness", "Number:double");
        a.item("MinorStrokeDashArray", "DoubleCollection:double");
        a.item("TickStroke", "Brush");
        a.item("TickStrokeThickness", "Number:double");
        a.item("TickStrokeDashArray", "DoubleCollection:double");
        a.item("TickLength", "Number:double");
        a.item("IsDisabled", "Boolean");
        a.item("IsInverted", "Boolean");
        a.item("ShouldAvoidAnnotationCollisions", "Boolean");
        a.item("ShouldKeepAnnotationsInView", "Boolean");
        a.item("UsePerLabelHeightMeasurement", "Boolean");
        a.item("UseEnhancedIntervalManagement", "Boolean");
        a.item("EnhancedIntervalMinimumCharacters", "Number:int");
        a.item("EnhancedIntervalPreferMoreCategoryLabels", "Boolean");
        a.item("LabelTextColor", "(w:LabelSettings.TextColor,wf:LabelTextColor)Brush");
        a.item("LabelLocation", "(w:LabelSettings.Location,wf:LabelLocation)ExportedType:string:AxisLabelsLocation");
        a.item("LabelLocation@names", "OutsideTop;OutsideBottom;OutsideLeft;OutsideRight;InsideTop;InsideBottom;InsideLeft;InsideRight");
        a.item("LabelShowFirstLabel", "(w:LabelSettings.ShowFirstLabel,wf:LabelShowFirstLabel)Boolean");
        a.item("LabelAngle", "(w:LabelSettings.Angle,wf:LabelAngle)Number:double");
        a.item("LabelExtent", "(w:LabelSettings.Extent,wf:LabelExtent)Number:double");
        a.item("LabelLeftMargin", "(w:LabelSettings.LeftMargin,wf:LabelLeftMargin)Number:double");
        a.item("LabelRightMargin", "(w:LabelSettings.RightMargin,wf:LabelRightMargin)Number:double");
        a.item("LabelTopMargin", "(w:LabelSettings.TopMargin,wf:LabelTopMargin)Number:double");
        a.item("LabelBottomMargin", "(w:LabelSettings.BottomMargin,wf:LabelBottomMargin)Number:double");
        a.item("LabelHorizontalAlignment", "(w:LabelSettings.HorizontalAlignment,wf:LabelHorizontalAlignment)ExportedType:string:HorizontalAlignment");
        a.item("LabelHorizontalAlignment@names", "Left;Center;Right;Stretch");
        a.item("LabelVerticalAlignment", "(w:LabelSettings.VerticalAlignment,wf:LabelVerticalAlignment)ExportedType:string:VerticalAlignment");
        a.item("LabelVerticalAlignment@names", "Top;Center;Bottom;Stretch");
        a.item("CrossingAxisRef", "(w:CrossingAxis,wf:CrossingAxis)DataRef::object");
        a.item("CrossingAxisRef@nameBinding", "true");
        a.item("CrossingValue", "Unknown");
        a.item("TitlePosition", "(w:TitleSettings.Position,wf:TitlePosition)ExportedType:string:AxisTitlePosition");
        a.item("TitlePosition@names", "Auto;Left;Right;Top;Bottom");
        a.item("TitleTextColor", "(w:TitleSettings.TextColor,wf:TitleTextColor)Brush");
        a.item("TitleLocation", "(w:TitleSettings.Location,wf:TitleLocation)ExportedType:string:AxisLabelsLocation");
        a.item("TitleLocation@names", "OutsideTop;OutsideBottom;OutsideLeft;OutsideRight;InsideTop;InsideBottom;InsideLeft;InsideRight");
        a.item("TitleShowFirstLabel", "(w:TitleSettings.ShowFirstLabel,wf:TitleShowFirstLabel)Boolean");
        a.item("TitleAngle", "(w:TitleSettings.Angle,wf:TitleAngle)Number:double");
        a.item("TitleExtent", "(w:TitleSettings.Extent,wf:TitleExtent)Number:double");
        a.item("TitleLeftMargin", "(w:TitleSettings.LeftMargin,wf:TitleLeftMargin)Number:double");
        a.item("TitleRightMargin", "(w:TitleSettings.RightMargin,wf:TitleRightMargin)Number:double");
        a.item("TitleTopMargin", "(w:TitleSettings.TopMargin,wf:TitleTopMargin)Number:double");
        a.item("TitleBottomMargin", "(w:TitleSettings.BottomMargin,wf:TitleBottomMargin)Number:double");
        a.item("TitleHorizontalAlignment", "(w:TitleSettings.HorizontalAlignment,wf:TitleHorizontalAlignment)ExportedType:string:HorizontalAlignment");
        a.item("TitleHorizontalAlignment@names", "Left;Center;Right;Stretch");
        a.item("TitleVerticalAlignment", "(w:TitleSettings.VerticalAlignment,wf:TitleVerticalAlignment)ExportedType:string:VerticalAlignment");
        a.item("TitleVerticalAlignment@names", "Top;Center;Bottom;Stretch");
        a.item("Annotations", "Collection:AxisAnnotation:AxisAnnotationCollection:IAxisAnnotation");
        a.item("CoercionMethodsRef", "(w:CoercionMethods,wf:CoercionMethods)DataRef");
        a.item("ExpectFunctions", "Boolean");
        a.item("LabelFormat", "String");
        a.item("LabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("LabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("RangeChangedRef", "EventRef::rangeChanged");
        a.item("RenderRequestedRef", "EventRef::renderRequested");
        AxisDescriptionMetadata.e(a);
    };
    AxisDescriptionMetadata.d = function (a) {
        AxisDescriptionMetadata.b(a);
        a.ad("Axis", AxisDescriptionMetadata.a);
    };
    AxisDescriptionMetadata.e = function (a) {
        a.item("Label", "(w:Label/AxisLabelTransform)String");
        a.item("LabelTextColor", "(w:LabelSettings.Foreground,wf:LabelTextColor,web:LabelTextColor)Brush");
        a.item("TitleTextColor", "(w:TitleSettings.Foreground,wf:TitleTextColor,web:TitleTextColor)Brush");
        a.item("LabelFontFamily", "(w:LabelSettings.FontFamily/FontFamilyTransform,wf:LabelFontFamily,xam:LabelFontFamily,web:LabelTextStyle/FontFamilyTransform)String");
        a.item("LabelFontSize", "(w:LabelSettings.FontSize,wf:LabelFontSize,xam:LabelFontSize,web:LabelTextStyle/FontSizeTransform)Number:double");
        a.item("LabelFontStyle", "(w:LabelSettings.FontStyle/FontStyleTransform,xam:LabelTextStyle/FontStyleTransform,wf:LabelTextStyle/FontStyleTransform,web:LabelTextStyle/FontStyleTransform)String");
        a.item("LabelFontWeight", "(w:LabelSettings.FontWeight/FontWeightTransform,xam:LabelTextSTyle/FontWeightTransform,wf:LabelTextStyle/FontWeightTransform,web:LabelTextStyle/FontWeightTransform)String");
        a.item("TitleFontFamily", "(w:TitleSettings.FontFamily/FontFamilyTransform,xam:TitleFontFamily,wf:TitleFontFamily,web:TitleTextStyle/FontFamilyTransform)String");
        a.item("TitleFontSize", "(w:TitleSettings.FontSize,wf:TitleFontSize,xam:TitleTextStyle/FontSizeTransform,web:TitleTextStyle/FontSizeTransform)Number:double");
        a.item("TitleFontStyle", "(w:TitleSettings.FontStyle/FontStyleTransform,xam:TitleTextStyle/FontStyleTransform,wf:TitleTextStyle/FontStyleTransform,web:TitleTextStyle/FontStyleTransform)String");
        a.item("TitleFontWeight", "(w:TitleSettings.FontWeight/FontWeightTransform,xam:TitleTextStyle/FontWeightTransform,wf:TitleTextStyle/FontWeightTransform,web:TitleTextStyle/FontWeightTransform)String");
        a.item("LabelVisibility", "(w:LabelSettings.Visibility,wf:LabelsVisible/VisibilityToBooleanTransform)ExportedType:string:Visibility");
        a.item("LabelVisibility@names", "Visible;Collapsed");
        a.item("LabelSettings", "ExportedType:AxisLabelSettings");
    };
    AxisDescriptionMetadata.$t = markType(AxisDescriptionMetadata, 'AxisDescriptionMetadata');
    AxisDescriptionMetadata.a = null;
    return AxisDescriptionMetadata;
}(Base));
export { AxisDescriptionMetadata };
