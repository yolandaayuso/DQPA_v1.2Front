/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { FilterExpressionVisitor } from "./FilterExpressionVisitor";
import { markType } from "./type";
/**
 * @hidden
 */
var ContainsPropertyDataSourceFilterExpressionVisitor = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ContainsPropertyDataSourceFilterExpressionVisitor, _super);
    function ContainsPropertyDataSourceFilterExpressionVisitor(a) {
        var _this = _super.call(this) || this;
        _this.h = null;
        _this.f = false;
        _this.h = a;
        return _this;
    }
    Object.defineProperty(ContainsPropertyDataSourceFilterExpressionVisitor.prototype, "contains", {
        get: function () {
            return this.f;
        },
        enumerable: false,
        configurable: true
    });
    ContainsPropertyDataSourceFilterExpressionVisitor.prototype.visitPropertyReferenceExpression = function (a) {
        if (a.isPropertyReference && a.propertyReference == this.h) {
            this.f = true;
        }
    };
    ContainsPropertyDataSourceFilterExpressionVisitor.$t = markType(ContainsPropertyDataSourceFilterExpressionVisitor, 'ContainsPropertyDataSourceFilterExpressionVisitor', FilterExpressionVisitor.$);
    return ContainsPropertyDataSourceFilterExpressionVisitor;
}(FilterExpressionVisitor));
export { ContainsPropertyDataSourceFilterExpressionVisitor };
