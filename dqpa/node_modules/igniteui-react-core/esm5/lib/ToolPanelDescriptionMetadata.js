/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ToolPanelContentRefreshedEventArgsDescriptionMetadata } from "./ToolPanelContentRefreshedEventArgsDescriptionMetadata";
import { ToolCommandEventArgsDescriptionMetadata } from "./ToolCommandEventArgsDescriptionMetadata";
import { ToolPanelDescription } from "./ToolPanelDescription";
/**
 * @hidden
 */
var ToolPanelDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolPanelDescriptionMetadata, _super);
    function ToolPanelDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolPanelDescriptionMetadata.b = function (a) {
        if (ToolPanelDescriptionMetadata.a == null) {
            ToolPanelDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ToolPanelDescriptionMetadata.c(ToolPanelDescriptionMetadata.a);
        }
        if (a.k(ToolPanelDescriptionMetadata.a)) {
            return;
        }
        a.ac(ToolPanelDescriptionMetadata.a);
        ToolPanelContentRefreshedEventArgsDescriptionMetadata.d(a);
        ToolCommandEventArgsDescriptionMetadata.d(a);
    };
    ToolPanelDescriptionMetadata.c = function (a) {
        a.item("Actions", "Collection:ToolAction:ToolActionCollection:ToolAction");
        a.item("ShowOnHover", "Boolean");
        a.item("ShowTooltipOnHover", "Boolean");
        a.item("DropdownClickBuffer", "Number:int");
        a.item("CellFontFamily", "(w:CellFontFamily/FontFamilyTransform,xam:CellFontFamily,wf:CellFontFamily,web:cellTextStyle/FontFamilyTransform)String");
        a.item("CellFontSize", "(w:CellFontSize,xam:CellFontSize,wf:CellFontSize,web:cellTextStyle/FontSizeTransform)Number:double");
        a.item("CellFontStyle", "(w:CellFontStyle/FontStyleTransform,xam:CellFontFamily/FontStyleTransform,wf:CellFontFamily/FontStyleTransform,web:cellTextStyle/FontStyleTransform)String");
        a.item("CellFontWeight", "(w:CellFontWeight/FontWeightTransform,xam:CellFontFamily/FontWeightTransform,wf:CellFontFamily/FontWeightTransform,web:cellTextStyle/FontWeightTransform)String");
        a.item("SubtitleFontFamily", "(w:SubtitleFontFamily/FontFamilyTransform,xam:SubtitleFontFamily,wf:SubtitleFontFamily,web:subtitleTextStyle/FontFamilyTransform)String");
        a.item("SubtitleFontSize", "(w:SubtitleFontSize,xam:SubtitleFontSize,wf:SubtitleFontSize,web:subtitleTextStyle/FontSizeTransform)Number:double");
        a.item("SubtitleFontStyle", "(w:SubtitleFontStyle/FontStyleTransform,xam:SubtitleFontFamily/FontStyleTransform,wf:SubtitleFontFamily/FontStyleTransform,web:subtitleTextStyle/FontStyleTransform)String");
        a.item("SubtitleFontWeight", "(w:SubtitleFontWeight/FontWeightTransform,xam:SubtitleFontFamily/FontWeightTransform,wf:SubtitleFontFamily/FontWeightTransform,web:subtitleTextStyle/FontWeightTransform)String");
        a.item("BaseTheme", "ExportedType:string:BaseControlTheme");
        a.item("BaseTheme@names", "Default;DenaliLight;MaterialLight;SlingshotLight;SlingshotDark;RevealLight;RevealDark");
        a.item("Density", "ExportedType:string:ControlDisplayDensity");
        a.item("Density@names", "Auto;Comfortable;Cosy;Compact;Minimal");
        a.item("ActualDensity", "ExportedType:string:ControlDisplayDensity");
        a.item("ActualDensity@names", "Auto;Comfortable;Cosy;Compact;Minimal");
        a.item("BackgroundColor", "Brush");
        a.item("ActualBackgroundColor", "Brush");
        a.item("SubmenuBackgroundColor", "Brush");
        a.item("ActualSubmenuBackgroundColor", "Brush");
        a.item("GroupHeaderBackgroundColor", "Brush");
        a.item("ActualGroupHeaderBackgroundColor", "Brush");
        a.item("SeparatorBackgroundColor", "Brush");
        a.item("ActualSeparatorBackgroundColor", "Brush");
        a.item("GroupHeaderSeparatorBackgroundColor", "Brush");
        a.item("ActualGroupHeaderSeparatorBackgroundColor", "Brush");
        a.item("HoverBackgroundColor", "Brush");
        a.item("ActualHoverBackgroundColor", "Brush");
        a.item("TextColor", "Brush");
        a.item("ActualTextColor", "Brush");
        a.item("ActualSubtitleTextColor", "Brush");
        a.item("SubtitleTextColor", "Brush");
        a.item("DisabledTextColor", "Brush");
        a.item("ActualDisabledTextColor", "Brush");
        a.item("GroupHeaderTextColor", "Brush");
        a.item("ActualGroupHeaderTextColor", "Brush");
        a.item("GroupHeaderSubtitleTextColor", "Brush");
        a.item("ActualGroupHeaderSubtitleTextColor", "Brush");
        a.item("ToolTipTextColor", "Brush");
        a.item("ActualToolTipTextColor", "Brush");
        a.item("ToolTipBackgroundColor", "Brush");
        a.item("ActualToolTipBackgroundColor", "Brush");
        a.item("ToolTipCornerRadius", "Number:double");
        a.item("ActualToolTipCornerRadius", "Number:double");
        a.item("ToolTipElevation", "Number:double");
        a.item("ActualToolTipElevation", "Number:double");
        a.item("IconFill", "Brush");
        a.item("ActualIconFill", "Brush");
        a.item("IconStroke", "Brush");
        a.item("ActualIconStroke", "Brush");
        a.item("SeparatorVerticalPaddingLeft", "Number:double");
        a.item("ActualSeparatorVerticalPaddingLeft", "Number:double");
        a.item("SeparatorVerticalPaddingRight", "Number:double");
        a.item("ActualSeparatorVerticalPaddingRight", "Number:double");
        a.item("SeparatorVerticalPaddingTop", "Number:double");
        a.item("ActualSeparatorVerticalPaddingTop", "Number:double");
        a.item("SeparatorVerticalPaddingBottom", "Number:double");
        a.item("ActualSeparatorVerticalPaddingBottom", "Number:double");
        a.item("SeparatorHorizontalPaddingLeft", "Number:double");
        a.item("ActualSeparatorHorizontalPaddingLeft", "Number:double");
        a.item("SeparatorHorizontalPaddingRight", "Number:double");
        a.item("ActualSeparatorHorizontalPaddingRight", "Number:double");
        a.item("SeparatorHorizontalPaddingTop", "Number:double");
        a.item("ActualSeparatorHorizontalPaddingTop", "Number:double");
        a.item("SeparatorHorizontalPaddingBottom", "Number:double");
        a.item("ActualSeparatorHorizontalPaddingBottom", "Number:double");
        a.item("Orientation", "ExportedType:string:ToolPanelOrientation");
        a.item("Orientation@names", "Vertical;Horizontal;HorizontalWrapped");
        a.item("RowHeight", "Number:int");
        a.item("HighlightWidth", "Number:double");
        a.item("ActualHighlightWidth", "Number:double");
        a.item("HighlightRadius", "Number:double");
        a.item("ActualHighlightRadius", "Number:double");
        a.item("HighlightColor", "Brush");
        a.item("ActualHighlightColor", "Brush");
        a.item("MenuArrowStroke", "Brush");
        a.item("ActualMenuArrowStroke", "Brush");
        a.item("UncheckedBackgroundColor", "Brush");
        a.item("ActualUncheckedBackgroundColor", "Brush");
        a.item("CheckedBackgroundColor", "Brush");
        a.item("ActualCheckedBackgroundColor", "Brush");
        a.item("UncheckedBorderColor", "Brush");
        a.item("ActualUncheckedBorderColor", "Brush");
        a.item("CheckedBorderColor", "Brush");
        a.item("ActualCheckedBorderColor", "Brush");
        a.item("DropdownDelay", "Number:int");
        a.item("ActualDropdownDelay", "Number:int");
        a.item("NestedActionMode", "ExportedType:string:NestedActionMode");
        a.item("NestedActionMode@names", "Replace");
        a.item("ContentRefreshedRef", "EventRef::contentRefreshed");
        a.item("OnCommandRef", "EventRef::onCommand");
    };
    ToolPanelDescriptionMetadata.d = function (a) {
        ToolPanelDescriptionMetadata.b(a);
        a.ae("ToolPanel", function () { return new ToolPanelDescription(); });
        a.ad("ToolPanel", ToolPanelDescriptionMetadata.a);
    };
    ToolPanelDescriptionMetadata.$t = markType(ToolPanelDescriptionMetadata, 'ToolPanelDescriptionMetadata');
    ToolPanelDescriptionMetadata.a = null;
    return ToolPanelDescriptionMetadata;
}(Base));
export { ToolPanelDescriptionMetadata };
