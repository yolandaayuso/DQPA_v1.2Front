/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ColumnFilterConditionDescriptionMetadata } from "./ColumnFilterConditionDescriptionMetadata";
import { ColumnComparisonFilterConditionDescription } from "./ColumnComparisonFilterConditionDescription";
/**
 * @hidden
 */
var ColumnComparisonFilterConditionDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColumnComparisonFilterConditionDescriptionMetadata, _super);
    function ColumnComparisonFilterConditionDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnComparisonFilterConditionDescriptionMetadata.b = function (a) {
        if (ColumnComparisonFilterConditionDescriptionMetadata.a == null) {
            ColumnComparisonFilterConditionDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ColumnComparisonFilterConditionDescriptionMetadata.c(ColumnComparisonFilterConditionDescriptionMetadata.a);
        }
        if (a.k(ColumnComparisonFilterConditionDescriptionMetadata.a)) {
            return;
        }
        a.ac(ColumnComparisonFilterConditionDescriptionMetadata.a);
    };
    ColumnComparisonFilterConditionDescriptionMetadata.c = function (a) {
        ColumnFilterConditionDescriptionMetadata.c(a);
        a.item("Operator", "ExportedType:string:ColumnComparisonConditionOperatorType");
        a.item("Operator@names", "Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom");
        a.item("ValueRef", "(w:Value,wf:Value)DataRef");
        a.item("IsCaseSensitive", "Boolean");
    };
    ColumnComparisonFilterConditionDescriptionMetadata.d = function (a) {
        ColumnComparisonFilterConditionDescriptionMetadata.b(a);
        a.ae("ColumnComparisonFilterCondition", function () { return new ColumnComparisonFilterConditionDescription(); });
        a.ad("ColumnComparisonFilterCondition", ColumnComparisonFilterConditionDescriptionMetadata.a);
    };
    ColumnComparisonFilterConditionDescriptionMetadata.$t = markType(ColumnComparisonFilterConditionDescriptionMetadata, 'ColumnComparisonFilterConditionDescriptionMetadata');
    ColumnComparisonFilterConditionDescriptionMetadata.a = null;
    return ColumnComparisonFilterConditionDescriptionMetadata;
}(Base));
export { ColumnComparisonFilterConditionDescriptionMetadata };
