/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var GridConditionalStylePropertyDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GridConditionalStylePropertyDescription, _super);
    function GridConditionalStylePropertyDescription() {
        var _this = _super.call(this) || this;
        _this.am = null;
        _this.ak = null;
        _this.ag = null;
        _this.al = null;
        _this.n = null;
        _this.ac = null;
        _this.j = null;
        _this.p = null;
        _this.ai = null;
        _this.l = null;
        _this.o = null;
        _this.ae = null;
        _this.k = null;
        _this.q = null;
        _this.an = null;
        _this.m = null;
        _this.aq = null;
        _this.z = false;
        _this.ah = null;
        _this.ad = null;
        _this.aj = null;
        _this.af = null;
        _this.ao = null;
        _this.h = null;
        _this.ap = null;
        _this.ab = null;
        return _this;
    }
    GridConditionalStylePropertyDescription.prototype.get_type = function () {
        return "GridConditionalStyleProperty";
    };
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "stylingType", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
            this.g("StylingType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "minimumType", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
            this.g("MinimumType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "maximumType", {
        get: function () {
            return this.ag;
        },
        set: function (a) {
            this.ag = a;
            this.g("MaximumType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "propertyName", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            this.al = a;
            this.g("PropertyName");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "inputValueExpression", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.g("InputValueExpression");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "inputValueExpressionString", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
            this.g("InputValueExpressionString");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "actualInputValueExpression", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.g("ActualInputValueExpression");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "minimumInputValueExpression", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.g("MinimumInputValueExpression");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "minimumInputValueExpressionString", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
            this.g("MinimumInputValueExpressionString");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "actualMinimumInputValueExpression", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.g("ActualMinimumInputValueExpression");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "maximumInputValueExpression", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.g("MaximumInputValueExpression");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "maximumInputValueExpressionString", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
            this.g("MaximumInputValueExpressionString");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "actualMaximumInputValueExpression", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.g("ActualMaximumInputValueExpression");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "sumInputValueExpression", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.g("SumInputValueExpression");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "sumInputValueExpressionString", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.g("SumInputValueExpressionString");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "actualSumInputValueExpression", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.g("ActualSumInputValueExpression");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "valueRef", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            this.aq = a;
            this.g("ValueRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "shouldSetValue", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.g("ShouldSetValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "minimumColor", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
            this.g("MinimumColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "maximumColor", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
            this.g("MaximumColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "minimumInputValueRef", {
        get: function () {
            return this.aj;
        },
        set: function (a) {
            this.aj = a;
            this.g("MinimumInputValueRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "maximumInputValueRef", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            this.af = a;
            this.g("MaximumInputValueRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "sumInputValueRef", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
            this.g("SumInputValueRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "colorCollection", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.g("ColorCollection");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "valueCollectionRef", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.g("ValueCollectionRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridConditionalStylePropertyDescription.prototype, "filterStringErrorsParsingRef", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.g("FilterStringErrorsParsingRef");
        },
        enumerable: false,
        configurable: true
    });
    GridConditionalStylePropertyDescription.$t = markType(GridConditionalStylePropertyDescription, 'GridConditionalStylePropertyDescription', Description.$);
    return GridConditionalStylePropertyDescription;
}(Description));
export { GridConditionalStylePropertyDescription };
