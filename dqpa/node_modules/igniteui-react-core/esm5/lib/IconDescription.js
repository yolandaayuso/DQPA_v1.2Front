/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var IconDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IconDescription, _super);
    function IconDescription() {
        var _this = _super.call(this) || this;
        _this.at = null;
        _this.ap = null;
        _this.aq = null;
        _this.ar = null;
        _this.r = 0;
        _this.av = null;
        _this.a8 = null;
        _this.w = 0;
        _this.bb = null;
        _this.az = null;
        _this.a0 = null;
        _this.u = 0;
        _this.a1 = null;
        _this.h = null;
        _this.i = null;
        _this.a3 = null;
        _this.a4 = null;
        _this.a5 = null;
        _this.a6 = null;
        _this.a7 = null;
        _this.au = null;
        _this.ba = null;
        _this.a9 = null;
        _this.j = null;
        _this.aw = null;
        _this.s = 0;
        _this.ax = null;
        _this.ay = null;
        _this.a2 = null;
        _this.an = 0;
        _this.as = null;
        _this.o = false;
        _this.n = false;
        _this.v = 0;
        _this.y = 0;
        _this.z = 0;
        _this.aa = 0;
        _this.x = 0;
        _this.ab = 0;
        _this.t = 0;
        return _this;
    }
    IconDescription.prototype.get_type = function () {
        return "Icon";
    };
    Object.defineProperty(IconDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "baseTheme", {
        get: function () {
            return this.at;
        },
        set: function (a) {
            this.at = a;
            this.g("BaseTheme");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualFill", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.g("ActualFill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualStroke", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            this.aq = a;
            this.g("ActualStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualTextColor", {
        get: function () {
            return this.ar;
        },
        set: function (a) {
            this.ar = a;
            this.g("ActualTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualStrokeWidth", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.g("ActualStrokeWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fill", {
        get: function () {
            return this.av;
        },
        set: function (a) {
            this.av = a;
            this.g("Fill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "stroke", {
        get: function () {
            return this.a8;
        },
        set: function (a) {
            this.a8 = a;
            this.g("Stroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "strokeWidth", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.g("StrokeWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "textColor", {
        get: function () {
            return this.bb;
        },
        set: function (a) {
            this.bb = a;
            this.g("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "hoverFill", {
        get: function () {
            return this.az;
        },
        set: function (a) {
            this.az = a;
            this.g("HoverFill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "hoverStroke", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            this.a0 = a;
            this.g("HoverStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "hoverStrokeThickness", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.g("HoverStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "hoverTextColor", {
        get: function () {
            return this.a1;
        },
        set: function (a) {
            this.a1 = a;
            this.g("HoverTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fillColors", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.g("FillColors");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "strokeColors", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.g("StrokeColors");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "primaryFillColor", {
        get: function () {
            return this.a3;
        },
        set: function (a) {
            this.a3 = a;
            this.g("PrimaryFillColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "primaryStrokeColor", {
        get: function () {
            return this.a4;
        },
        set: function (a) {
            this.a4 = a;
            this.g("PrimaryStrokeColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "secondaryFillColor", {
        get: function () {
            return this.a5;
        },
        set: function (a) {
            this.a5 = a;
            this.g("SecondaryFillColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "secondaryStrokeColor", {
        get: function () {
            return this.a6;
        },
        set: function (a) {
            this.a6 = a;
            this.g("SecondaryStrokeColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "sourceRef", {
        get: function () {
            return this.a7;
        },
        set: function (a) {
            this.a7 = a;
            this.g("SourceRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "dataURL", {
        get: function () {
            return this.au;
        },
        set: function (a) {
            this.au = a;
            this.g("DataURL");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "svgPath", {
        get: function () {
            return this.ba;
        },
        set: function (a) {
            this.ba = a;
            this.g("SvgPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "svg", {
        get: function () {
            return this.a9;
        },
        set: function (a) {
            this.a9 = a;
            this.g("Svg");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "sVGPaths", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.g("SVGPaths");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fontFamily", {
        get: function () {
            return this.aw;
        },
        set: function (a) {
            this.aw = a;
            this.g("FontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fontSize", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.g("FontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fontStyle", {
        get: function () {
            return this.ax;
        },
        set: function (a) {
            this.ax = a;
            this.g("FontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fontWeight", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            this.ay = a;
            this.g("FontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "id", {
        get: function () {
            return this.a2;
        },
        set: function (a) {
            this.a2 = a;
            this.g("Id");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "tabIndex", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.g("TabIndex");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "ariaLabel", {
        get: function () {
            return this.as;
        },
        set: function (a) {
            this.as = a;
            this.g("AriaLabel");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "isHover", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.g("IsHover");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "disabled", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.g("Disabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "opacity", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.g("Opacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "viewBoxLeft", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
            this.g("ViewBoxLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "viewBoxTop", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.g("ViewBoxTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "viewBoxWidth", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
            this.g("ViewBoxWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "viewBoxHeight", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            this.x = a;
            this.g("ViewBoxHeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "width", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.g("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "height", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.g("Height");
        },
        enumerable: false,
        configurable: true
    });
    IconDescription.$t = markType(IconDescription, 'IconDescription', Description.$);
    return IconDescription;
}(Description));
export { IconDescription };
