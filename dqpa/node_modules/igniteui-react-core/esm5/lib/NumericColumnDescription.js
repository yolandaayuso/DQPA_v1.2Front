/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { DataGridColumnDescription } from "./DataGridColumnDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var NumericColumnDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NumericColumnDescription, _super);
    function NumericColumnDescription() {
        var _this = _super.call(this) || this;
        _this.gl = null;
        _this.gn = null;
        _this.gm = null;
        _this.go = null;
        _this.f8 = 0;
        _this.f9 = 0;
        _this.ga = 0;
        _this.f6 = false;
        _this.gk = null;
        _this.f1 = null;
        _this.gj = null;
        _this.gh = null;
        _this.gf = null;
        _this.f3 = null;
        _this.gg = null;
        _this.gi = null;
        return _this;
    }
    NumericColumnDescription.prototype.get_type = function () {
        return "NumericColumn";
    };
    Object.defineProperty(NumericColumnDescription.prototype, "negativePrefix", {
        get: function () {
            return this.gl;
        },
        set: function (a) {
            this.gl = a;
            this.g("NegativePrefix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "positivePrefix", {
        get: function () {
            return this.gn;
        },
        set: function (a) {
            this.gn = a;
            this.g("PositivePrefix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "negativeSuffix", {
        get: function () {
            return this.gm;
        },
        set: function (a) {
            this.gm = a;
            this.g("NegativeSuffix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "positiveSuffix", {
        get: function () {
            return this.go;
        },
        set: function (a) {
            this.go = a;
            this.g("PositiveSuffix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "maxFractionDigits", {
        get: function () {
            return this.f8;
        },
        set: function (a) {
            this.f8 = a;
            this.g("MaxFractionDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "minFractionDigits", {
        get: function () {
            return this.f9;
        },
        set: function (a) {
            this.f9 = a;
            this.g("MinFractionDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "minIntegerDigits", {
        get: function () {
            return this.ga;
        },
        set: function (a) {
            this.ga = a;
            this.g("MinIntegerDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "showGroupingSeparator", {
        get: function () {
            return this.f6;
        },
        set: function (a) {
            this.f6 = a;
            this.g("ShowGroupingSeparator");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "formatString", {
        get: function () {
            return this.gk;
        },
        set: function (a) {
            this.gk = a;
            this.g("FormatString");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "formatSpecifiers", {
        get: function () {
            return this.f1;
        },
        set: function (a) {
            this.f1 = a;
            this.g("FormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "formatOverrideRef", {
        get: function () {
            return this.gj;
        },
        set: function (a) {
            this.gj = a;
            this.g("FormatOverrideRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorType", {
        get: function () {
            return this.gh;
        },
        set: function (a) {
            this.gh = a;
            this.g("EditorType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorDataSourceRef", {
        get: function () {
            return this.gf;
        },
        set: function (a) {
            this.gf = a;
            this.g("EditorDataSourceRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorDataSource", {
        get: function () {
            return this.f3;
        },
        set: function (a) {
            this.f3 = a;
            this.g("EditorDataSource");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorTextField", {
        get: function () {
            return this.gg;
        },
        set: function (a) {
            this.gg = a;
            this.g("EditorTextField");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorValueField", {
        get: function () {
            return this.gi;
        },
        set: function (a) {
            this.gi = a;
            this.g("EditorValueField");
        },
        enumerable: false,
        configurable: true
    });
    NumericColumnDescription.$t = markType(NumericColumnDescription, 'NumericColumnDescription', DataGridColumnDescription.$);
    NumericColumnDescription.__canMarshalByValue1 = true;
    NumericColumnDescription.__marshalByValueAlias1 = "NumericColumn";
    return NumericColumnDescription;
}(DataGridColumnDescription));
export { NumericColumnDescription };
