/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { DataGridColumnDescriptionMetadata } from "./DataGridColumnDescriptionMetadata";
import { NumericColumnDescription } from "./NumericColumnDescription";
/**
 * @hidden
 */
var NumericColumnDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NumericColumnDescriptionMetadata, _super);
    function NumericColumnDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumericColumnDescriptionMetadata.b = function (a) {
        if (NumericColumnDescriptionMetadata.a == null) {
            NumericColumnDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            NumericColumnDescriptionMetadata.c(NumericColumnDescriptionMetadata.a);
        }
        if (a.k(NumericColumnDescriptionMetadata.a)) {
            return;
        }
        a.ac(NumericColumnDescriptionMetadata.a);
    };
    NumericColumnDescriptionMetadata.c = function (a) {
        DataGridColumnDescriptionMetadata.c(a);
        a.item("NegativePrefix", "String");
        a.item("PositivePrefix", "String");
        a.item("NegativeSuffix", "String");
        a.item("PositiveSuffix", "String");
        a.item("MaxFractionDigits", "Number:int");
        a.item("MinFractionDigits", "Number:int");
        a.item("MinIntegerDigits", "Number:int");
        a.item("ShowGroupingSeparator", "Boolean");
        a.item("FormatString", "String");
        a.item("FormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        a.item("FormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
        a.item("FormatOverrideRef", "(w:FormatOverride,wf:FormatOverride)DataRef");
        a.item("EditorType", "ExportedType:string:EditorType");
        a.item("EditorType@names", "Default;Text;Numeric;Date;Combo");
        a.item("EditorDataSourceRef", "(w:EditorItemsSource,xam:EditorItemsSource,wf:EditorItemsSource)DataRef::object");
        a.item("EditorDataSource", "(w:EditorItemsSource,xam:EditorItemsSource,wf:EditorItemsSource)ExportedType:BaseDataSource:BaseDataSource");
        a.item("EditorTextField", "String");
        a.item("EditorValueField", "String");
    };
    NumericColumnDescriptionMetadata.d = function (a) {
        NumericColumnDescriptionMetadata.b(a);
        a.ae("NumericColumn", function () { return new NumericColumnDescription(); });
        a.ad("NumericColumn", NumericColumnDescriptionMetadata.a);
    };
    NumericColumnDescriptionMetadata.$t = markType(NumericColumnDescriptionMetadata, 'NumericColumnDescriptionMetadata');
    NumericColumnDescriptionMetadata.a = null;
    return NumericColumnDescriptionMetadata;
}(Base));
export { NumericColumnDescriptionMetadata };
