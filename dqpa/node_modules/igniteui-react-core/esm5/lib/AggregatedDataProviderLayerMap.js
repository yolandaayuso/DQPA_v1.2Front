/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "./type";
import { List$1 } from "./List$1";
import { AggregatedDataProviderTopLayer } from "./AggregatedDataProviderTopLayer";
import { Dictionary$2 } from "./Dictionary$2";
/**
 * @hidden
 */
var AggregatedDataProviderLayerMap = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AggregatedDataProviderLayerMap, _super);
    function AggregatedDataProviderLayerMap() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.c = new Dictionary$2(Base.$, AggregatedDataProviderTopLayer.$, 0);
        _this.d = new List$1(AggregatedDataProviderTopLayer.$, 0);
        return _this;
    }
    AggregatedDataProviderLayerMap.prototype.a = function (a) {
        var b = new List$1(Base.$, 0);
        for (var c = 0; c < this.d.count; c++) {
            var d = this.d._inner[c];
            var e = d.o(a);
            b.add1(e);
        }
        return b.toArray();
    };
    AggregatedDataProviderLayerMap.prototype.b = function (a) {
        var b = a == null ? AggregatedDataProviderLayerMap.e : a;
        if (this.c.containsKey(b)) {
            return this.c.item(b);
        }
        return null;
    };
    AggregatedDataProviderLayerMap.prototype.f = function (a) {
        var b = a.j._inner[0] == null ? AggregatedDataProviderLayerMap.e : a.j._inner[0];
        var c;
        if (!this.c.containsKey(b)) {
            c = new AggregatedDataProviderTopLayer();
            this.d.add(c);
            c.w = a.i._inner[0];
            c.p = b;
            this.c.addItem(c.p, c);
        }
        else {
            c = this.c.item(b);
        }
        c.h.add(a);
    };
    AggregatedDataProviderLayerMap.$t = markType(AggregatedDataProviderLayerMap, 'AggregatedDataProviderLayerMap');
    AggregatedDataProviderLayerMap.e = {};
    return AggregatedDataProviderLayerMap;
}(Base));
export { AggregatedDataProviderLayerMap };
