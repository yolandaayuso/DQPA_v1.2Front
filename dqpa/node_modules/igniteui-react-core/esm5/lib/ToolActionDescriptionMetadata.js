/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ToolCommandEventArgsDescriptionMetadata } from "./ToolCommandEventArgsDescriptionMetadata";
import { ToolActionPerformedEventArgsDescriptionMetadata } from "./ToolActionPerformedEventArgsDescriptionMetadata";
/**
 * @hidden
 */
var ToolActionDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolActionDescriptionMetadata, _super);
    function ToolActionDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolActionDescriptionMetadata.b = function (a) {
        if (ToolActionDescriptionMetadata.a == null) {
            ToolActionDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ToolActionDescriptionMetadata.c(ToolActionDescriptionMetadata.a);
        }
        if (a.k(ToolActionDescriptionMetadata.a)) {
            return;
        }
        a.ac(ToolActionDescriptionMetadata.a);
        ToolCommandEventArgsDescriptionMetadata.d(a);
        ToolActionPerformedEventArgsDescriptionMetadata.d(a);
    };
    ToolActionDescriptionMetadata.c = function (a) {
        a.item("ContextBindings", "Collection:ToolContextBinding:ToolContextBindingCollection:ToolContextBinding");
        a.item("Actions", "Collection:ToolAction:ToolActionCollection:ToolAction");
        a.item("Width", "Number:double");
        a.item("ParentId", "String");
        a.item("BeforeId", "String");
        a.item("AfterId", "String");
        a.item("OverlayId", "String");
        a.item("CommandId", "String");
        a.item("CommandArgument", "String");
        a.item("CommandArgumentValue", "Unknown");
        a.item("PaddingLeft", "Number:double");
        a.item("ActualPaddingLeft", "Number:double");
        a.item("PaddingRight", "Number:double");
        a.item("ActualPaddingRight", "Number:double");
        a.item("PaddingBottom", "Number:double");
        a.item("ActualPaddingBottom", "Number:double");
        a.item("PaddingTop", "Number:double");
        a.item("ActualPaddingTop", "Number:double");
        a.item("ActualHoverBackground", "Brush");
        a.item("HoverBackground", "Brush");
        a.item("ActualBackground", "Brush");
        a.item("Background", "Brush");
        a.item("ActualTextColor", "Brush");
        a.item("TextColor", "Brush");
        a.item("ActualSubtitleTextColor", "Brush");
        a.item("SubtitleTextColor", "Brush");
        a.item("ActualDisabledTextColor", "Brush");
        a.item("DisabledTextColor", "Brush");
        a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
        a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
        a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontFamily/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
        a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontFamily/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
        a.item("SubtitleFontFamily", "(w:SubtitleFontFamily/FontFamilyTransform,xam:SubtitleFontFamily,wf:SubtitleFontFamily,web:subtitleTextStyle/FontFamilyTransform)String");
        a.item("SubtitleFontSize", "(w:SubtitleFontSize,xam:SubtitleFontSize,wf:SubtitleFontSize,web:subtitleTextStyle/FontSizeTransform)Number:double");
        a.item("SubtitleFontStyle", "(w:SubtitleFontStyle/FontStyleTransform,xam:SubtitleFontFamily/FontStyleTransform,wf:SubtitleFontFamily/FontStyleTransform,web:subtitleTextStyle/FontStyleTransform)String");
        a.item("SubtitleFontWeight", "(w:SubtitleFontWeight/FontWeightTransform,xam:SubtitleFontFamily/FontWeightTransform,wf:SubtitleFontFamily/FontWeightTransform,web:subtitleTextStyle/FontWeightTransform)String");
        a.item("IsDisabled", "Boolean");
        a.item("IsHighlighted", "Boolean");
        a.item("Density", "ExportedType:string:ControlDisplayDensity");
        a.item("Density@names", "Auto;Comfortable;Cosy;Compact;Minimal");
        a.item("ActualDensity", "ExportedType:string:ControlDisplayDensity");
        a.item("ActualDensity@names", "Auto;Comfortable;Cosy;Compact;Minimal");
        a.item("Name", "String");
        a.item("Title", "String");
        a.item("Subtitle", "String");
        a.item("IconName", "String");
        a.item("IconCollectionName", "String");
        a.item("IconViewBoxLeft", "Number:double");
        a.item("IconViewBoxTop", "Number:double");
        a.item("IconViewBoxWidth", "Number:double");
        a.item("IconViewBoxHeight", "Number:double");
        a.item("IconFill", "Brush");
        a.item("ActualIconFill", "Brush");
        a.item("IconFillColors", "BrushCollection:string");
        a.item("IconStroke", "Brush");
        a.item("ActualIconStroke", "Brush");
        a.item("IconStrokeColors", "BrushCollection:string");
        a.item("IconStrokeWidth", "Number:double");
        a.item("IconWidth", "Number:double");
        a.item("ActualIconWidth", "Number:double");
        a.item("IconHeight", "Number:double");
        a.item("ActualIconHeight", "Number:double");
        a.item("Visibility", "ExportedType:string:Visibility");
        a.item("Visibility@names", "Visible;Collapsed");
        a.item("CloseOnExecute", "Boolean");
        a.item("HighlightWidth", "Number:double");
        a.item("ActualHighlightWidth", "Number:double");
        a.item("HighlightRadius", "Number:double");
        a.item("ActualHighlightRadius", "Number:double");
        a.item("HighlightColor", "Brush");
        a.item("ActualHighlightColor", "Brush");
        a.item("OnCommandRef", "EventRef::onCommand");
        a.item("PerformedRef", "EventRef::performed");
    };
    ToolActionDescriptionMetadata.d = function (a) {
        ToolActionDescriptionMetadata.b(a);
        a.ad("ToolAction", ToolActionDescriptionMetadata.a);
    };
    ToolActionDescriptionMetadata.$t = markType(ToolActionDescriptionMetadata, 'ToolActionDescriptionMetadata');
    ToolActionDescriptionMetadata.a = null;
    return ToolActionDescriptionMetadata;
}(Base));
export { ToolActionDescriptionMetadata };
