/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { DateRangeDescriptorDescriptionMetadata } from "./DateRangeDescriptorDescriptionMetadata";
import { WebCalendarResourceStringsDescriptionMetadata } from "./WebCalendarResourceStringsDescriptionMetadata";
import { VoidEventArgsDescriptionMetadata } from "./VoidEventArgsDescriptionMetadata";
import { WebComponentDateValueChangedEventArgsDescriptionMetadata } from "./WebComponentDateValueChangedEventArgsDescriptionMetadata";
import { WebBaseComboBoxLikeDescriptionMetadata } from "./WebBaseComboBoxLikeDescriptionMetadata";
import { WebDatePickerDescription } from "./WebDatePickerDescription";
/**
 * @hidden
 */
var WebDatePickerDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebDatePickerDescriptionMetadata, _super);
    function WebDatePickerDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebDatePickerDescriptionMetadata.b = function (a) {
        if (WebDatePickerDescriptionMetadata.a == null) {
            WebDatePickerDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebDatePickerDescriptionMetadata.c(WebDatePickerDescriptionMetadata.a);
        }
        if (a.k(WebDatePickerDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebDatePickerDescriptionMetadata.a);
        DateRangeDescriptorDescriptionMetadata.d(a);
        WebCalendarResourceStringsDescriptionMetadata.d(a);
        VoidEventArgsDescriptionMetadata.d(a);
        WebComponentDateValueChangedEventArgsDescriptionMetadata.d(a);
    };
    WebDatePickerDescriptionMetadata.c = function (a) {
        WebBaseComboBoxLikeDescriptionMetadata.c(a);
        a.item("__qualifiedNameTS", "String:DatePicker");
        a.item("__tagNameWC", "String:igc-date-picker");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents");
        a.item("Label", "String");
        a.item("Mode", "ExportedType:string:DatePickerMode");
        a.item("Mode@stringUnion", "WebComponents;React");
        a.item("Mode@names", "Dropdown;Dialog");
        a.item("NonEditable", "Boolean");
        a.item("ReadOnly", "Boolean");
        a.item("Value", "Date");
        a.item("ActiveDate", "Date");
        a.item("Min", "Date");
        a.item("Max", "Date");
        a.item("HeaderOrientation", "ExportedType:string:DatePickerHeaderOrientation");
        a.item("HeaderOrientation@stringUnion", "WebComponents;React");
        a.item("HeaderOrientation@names", "Horizontal;Vertical");
        a.item("Orientation", "ExportedType:string:DatePickerOrientation");
        a.item("Orientation@stringUnion", "WebComponents;React");
        a.item("Orientation@names", "Horizontal;Vertical");
        a.item("HideHeader", "Boolean");
        a.item("HideOutsideDays", "Boolean");
        a.item("DisabledDates", "Array:DateRangeDescriptorDescription:IDateRangeDescriptor");
        a.item("SpecialDates", "Array:DateRangeDescriptorDescription:IDateRangeDescriptor");
        a.item("Outlined", "Boolean");
        a.item("Placeholder", "String");
        a.item("VisibleMonths", "Number:double");
        a.item("ShowWeekNumbers", "Boolean");
        a.item("DisplayFormat", "String");
        a.item("InputFormat", "String");
        a.item("Locale", "String");
        a.item("Prompt", "String");
        a.item("ResourceStrings", "ExportedType:WebCalendarResourceStrings");
        a.item("WeekStart", "ExportedType:string:WeekDays");
        a.item("WeekStart@stringUnion", "WebComponents;React");
        a.item("WeekStart@names", "Sunday;Monday;Tuesday;Wednesday;Thursday;Friday;Saturday");
        a.item("Disabled", "Boolean");
        a.item("Required", "Boolean");
        a.item("DefaultValue", "Unknown");
        a.item("Name", "String");
        a.item("Invalid", "Boolean");
        a.item("OpeningRef", "EventRef::opening");
        a.item("OpenedRef", "EventRef::opened");
        a.item("ClosingRef", "EventRef::closing");
        a.item("ClosedRef", "EventRef::closed");
        a.item("ChangeRef", "EventRef::change");
        a.item("InputRef", "EventRef::input");
    };
    WebDatePickerDescriptionMetadata.d = function (a) {
        WebDatePickerDescriptionMetadata.b(a);
        a.ae("WebDatePicker", function () { return new WebDatePickerDescription(); });
        a.ad("WebDatePicker", WebDatePickerDescriptionMetadata.a);
    };
    WebDatePickerDescriptionMetadata.$t = markType(WebDatePickerDescriptionMetadata, 'WebDatePickerDescriptionMetadata');
    WebDatePickerDescriptionMetadata.a = null;
    return WebDatePickerDescriptionMetadata;
}(Base));
export { WebDatePickerDescriptionMetadata };
