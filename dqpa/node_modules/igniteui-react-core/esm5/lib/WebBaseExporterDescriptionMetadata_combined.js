/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebBaseEventArgsDescriptionMetadata } from "./WebBaseEventArgsDescriptionMetadata";
import { WebRowExportingEventArgsDescriptionMetadata } from "./WebRowExportingEventArgsDescriptionMetadata";
import { WebColumnDescriptionMetadata } from "./WebColumnDescriptionMetadata";
import { WebGridCellIdentifierDescriptionMetadata } from "./WebGridCellIdentifierDescriptionMetadata";
import { WebGridValidationStateDescriptionMetadata } from "./WebGridValidationStateDescriptionMetadata";
import { WebCellTypeDescription } from "./WebCellTypeDescription";
import { WebColumnExportingEventArgsDescription } from "./WebColumnExportingEventArgsDescription";
import { WebBaseEventArgsDetailDescriptionMetadata } from "./WebBaseEventArgsDetailDescriptionMetadata";
import { WebColumnExportingEventArgsDetailDescription } from "./WebColumnExportingEventArgsDetailDescription";
import { WebDataCloneStrategyDescriptionMetadata } from "./WebDataCloneStrategyDescriptionMetadata";
import { WebClipboardOptionsDescriptionMetadata } from "./WebClipboardOptionsDescriptionMetadata";
import { WebGridResourceStringsDescriptionMetadata } from "./WebGridResourceStringsDescriptionMetadata";
import { WebFilteringExpressionsTreeDescriptionMetadata } from "./WebFilteringExpressionsTreeDescriptionMetadata";
import { WebPinningConfigDescriptionMetadata } from "./WebPinningConfigDescriptionMetadata";
import { WebFilteringStrategyDescriptionMetadata } from "./WebFilteringStrategyDescriptionMetadata";
import { WebGridSortingStrategyDescriptionMetadata } from "./WebGridSortingStrategyDescriptionMetadata";
import { WebSortingOptionsDescriptionMetadata } from "./WebSortingOptionsDescriptionMetadata";
import { WebSortingExpressionDescriptionMetadata } from "./WebSortingExpressionDescriptionMetadata";
import { WebOverlayOutletDirectiveDescriptionMetadata } from "./WebOverlayOutletDirectiveDescriptionMetadata";
import { WebFilteringExpressionsTreeEventArgsDescriptionMetadata } from "./WebFilteringExpressionsTreeEventArgsDescriptionMetadata";
import { WebGridScrollEventArgsDescriptionMetadata } from "./WebGridScrollEventArgsDescriptionMetadata";
import { WebRowSelectionEventArgsDescriptionMetadata } from "./WebRowSelectionEventArgsDescriptionMetadata";
import { WebColumnSelectionEventArgsDescriptionMetadata } from "./WebColumnSelectionEventArgsDescriptionMetadata";
import { WebPinColumnCancellableEventArgsDescriptionMetadata } from "./WebPinColumnCancellableEventArgsDescriptionMetadata";
import { WebPinColumnEventArgsDescriptionMetadata } from "./WebPinColumnEventArgsDescriptionMetadata";
import { WebColumnComponentEventArgsDescriptionMetadata } from "./WebColumnComponentEventArgsDescriptionMetadata";
import { WebColumnsAutoGeneratedEventArgsDescriptionMetadata } from "./WebColumnsAutoGeneratedEventArgsDescriptionMetadata";
import { WebSortingEventArgsDescriptionMetadata } from "./WebSortingEventArgsDescriptionMetadata";
import { WebSortingExpressionEventArgsDescriptionMetadata } from "./WebSortingExpressionEventArgsDescriptionMetadata";
import { WebFilteringEventArgsDescriptionMetadata } from "./WebFilteringEventArgsDescriptionMetadata";
import { WebRowDataEventArgsDescriptionMetadata } from "./WebRowDataEventArgsDescriptionMetadata";
import { WebColumnResizeEventArgsDescriptionMetadata } from "./WebColumnResizeEventArgsDescriptionMetadata";
import { WebColumnVisibilityChangingEventArgsDescriptionMetadata } from "./WebColumnVisibilityChangingEventArgsDescriptionMetadata";
import { WebColumnVisibilityChangedEventArgsDescriptionMetadata } from "./WebColumnVisibilityChangedEventArgsDescriptionMetadata";
import { WebColumnMovingStartEventArgsDescriptionMetadata } from "./WebColumnMovingStartEventArgsDescriptionMetadata";
import { WebColumnMovingEventArgsDescriptionMetadata } from "./WebColumnMovingEventArgsDescriptionMetadata";
import { WebColumnMovingEndEventArgsDescriptionMetadata } from "./WebColumnMovingEndEventArgsDescriptionMetadata";
import { WebGridKeydownEventArgsDescriptionMetadata } from "./WebGridKeydownEventArgsDescriptionMetadata";
import { WebGridClipboardEventEventArgsDescriptionMetadata } from "./WebGridClipboardEventEventArgsDescriptionMetadata";
import { WebComponentArrayDataValueChangedEventArgsDescriptionMetadata } from "./WebComponentArrayDataValueChangedEventArgsDescriptionMetadata";
import { WebRowToggleEventArgsDescriptionMetadata } from "./WebRowToggleEventArgsDescriptionMetadata";
import { WebActiveNodeChangeEventArgsDescriptionMetadata } from "./WebActiveNodeChangeEventArgsDescriptionMetadata";
import { WebGridSelectionRangeEventArgsDescriptionMetadata } from "./WebGridSelectionRangeEventArgsDescriptionMetadata";
import { VoidEventArgsDescriptionMetadata } from "./VoidEventArgsDescriptionMetadata";
import { WebForOfDataChangingEventArgsDescriptionMetadata } from "./WebForOfDataChangingEventArgsDescriptionMetadata";
import { WebGridContextMenuEventArgsDescription } from "./WebGridContextMenuEventArgsDescription";
import { WebGridContextMenuEventArgsDetailDescription } from "./WebGridContextMenuEventArgsDetailDescription";
import { WebGridRowEventArgsDescription } from "./WebGridRowEventArgsDescription";
import { WebGridRowEventArgsDetailDescription } from "./WebGridRowEventArgsDetailDescription";
import { WebGridCellEventArgsDescription } from "./WebGridCellEventArgsDescription";
import { WebGridCellEventArgsDetailDescription } from "./WebGridCellEventArgsDetailDescription";
import { WebGridEditDoneEventArgsDescription } from "./WebGridEditDoneEventArgsDescription";
import { WebGridEditDoneEventArgsDetailDescription } from "./WebGridEditDoneEventArgsDetailDescription";
import { WebGridEditEventArgsDescription } from "./WebGridEditEventArgsDescription";
import { WebGridEditEventArgsDetailDescription } from "./WebGridEditEventArgsDetailDescription";
import { WebGridFormGroupCreatedEventArgsDescription } from "./WebGridFormGroupCreatedEventArgsDescription";
import { WebGridFormGroupCreatedEventArgsDetailDescription } from "./WebGridFormGroupCreatedEventArgsDetailDescription";
import { WebGridToolbarExportEventArgsDescription } from "./WebGridToolbarExportEventArgsDescription";
import { WebExporterOptionsBaseDescriptionMetadata } from "./WebExporterOptionsBaseDescriptionMetadata";
import { WebGridToolbarExportEventArgsDetailDescription } from "./WebGridToolbarExportEventArgsDetailDescription";
import { WebGridValidationStatusEventArgsDescription } from "./WebGridValidationStatusEventArgsDescription";
import { WebGridValidationStatusEventArgsDetailDescription } from "./WebGridValidationStatusEventArgsDetailDescription";
import { WebPinRowEventArgsDescription } from "./WebPinRowEventArgsDescription";
import { WebPinRowEventArgsDetailDescription } from "./WebPinRowEventArgsDetailDescription";
import { WebRowDataCancelableEventArgsDescription } from "./WebRowDataCancelableEventArgsDescription";
import { WebRowDataCancelableEventArgsDetailDescription } from "./WebRowDataCancelableEventArgsDetailDescription";
import { WebRowDragEndEventArgsDescription } from "./WebRowDragEndEventArgsDescription";
import { WebRowDragEndEventArgsDetailDescription } from "./WebRowDragEndEventArgsDetailDescription";
import { WebRowDragStartEventArgsDescription } from "./WebRowDragStartEventArgsDescription";
import { WebRowDragStartEventArgsDetailDescription } from "./WebRowDragStartEventArgsDetailDescription";
import { WebGroupByRecordDescriptionMetadata } from "./WebGroupByRecordDescriptionMetadata";
import { WebTreeGridRecordDescriptionMetadata } from "./WebTreeGridRecordDescriptionMetadata";
import { WebRowTypeDescription } from "./WebRowTypeDescription";
/**
 * @hidden
 */
var WebBaseExporterDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebBaseExporterDescriptionMetadata, _super);
    function WebBaseExporterDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebBaseExporterDescriptionMetadata.b = function (a) {
        if (WebBaseExporterDescriptionMetadata.a == null) {
            WebBaseExporterDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebBaseExporterDescriptionMetadata.c(WebBaseExporterDescriptionMetadata.a);
        }
        if (a.k(WebBaseExporterDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebBaseExporterDescriptionMetadata.a);
        WebBaseEventArgsDescriptionMetadata.d(a);
        WebRowExportingEventArgsDescriptionMetadata.d(a);
        WebColumnExportingEventArgsDescriptionMetadata.d(a);
    };
    WebBaseExporterDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:BaseExporter");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__skipSuffix", "Boolean");
        a.item("ExportEndedRef", "EventRef::exportEnded:customEvent");
        a.item("RowExportingRef", "EventRef::rowExporting:customEvent");
        a.item("ColumnExportingRef", "EventRef::columnExporting:customEvent");
    };
    WebBaseExporterDescriptionMetadata.d = function (a) {
        WebBaseExporterDescriptionMetadata.b(a);
        a.ad("WebBaseExporter", WebBaseExporterDescriptionMetadata.a);
    };
    WebBaseExporterDescriptionMetadata.$t = markType(WebBaseExporterDescriptionMetadata, 'WebBaseExporterDescriptionMetadata');
    WebBaseExporterDescriptionMetadata.a = null;
    return WebBaseExporterDescriptionMetadata;
}(Base));
export { WebBaseExporterDescriptionMetadata };
/**
 * @hidden
 */
var WebCellTypeDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebCellTypeDescriptionMetadata, _super);
    function WebCellTypeDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebCellTypeDescriptionMetadata.b = function (a) {
        if (WebCellTypeDescriptionMetadata.a == null) {
            WebCellTypeDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebCellTypeDescriptionMetadata.c(WebCellTypeDescriptionMetadata.a);
        }
        if (a.k(WebCellTypeDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebCellTypeDescriptionMetadata.a);
        WebColumnDescriptionMetadata.d(a);
        WebRowTypeDescriptionMetadata.d(a);
        WebGridBaseDirectiveDescriptionMetadata.d(a);
        WebGridCellIdentifierDescriptionMetadata.d(a);
        WebGridValidationStateDescriptionMetadata.d(a);
    };
    WebCellTypeDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:CellType");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("__manageCollectionInMarkup", "Boolean");
        a.item("Value", "Unknown");
        a.item("EditValue", "Unknown");
        a.item("Selected", "Boolean");
        a.item("Active", "Boolean");
        a.item("Editable", "Boolean");
        a.item("EditMode", "Boolean");
        a.item("Column", "ExportedType:WebColumn");
        a.item("Row", "ExportedType:WebRowType");
        a.item("Grid", "ExportedType:WebGridBaseDirective");
        a.item("Id", "ExportedType:WebGridCellIdentifier");
        a.item("CellID", "Unknown");
        a.item("Validation", "ExportedType:WebGridValidationState");
        a.item("Readonly", "Boolean");
        a.item("Title", "Unknown");
        a.item("Width", "String");
        a.item("VisibleColumnIndex", "Number:double");
    };
    WebCellTypeDescriptionMetadata.d = function (a) {
        WebCellTypeDescriptionMetadata.b(a);
        a.ae("WebCellType", function () { return new WebCellTypeDescription(); });
        a.ad("WebCellType", WebCellTypeDescriptionMetadata.a);
    };
    WebCellTypeDescriptionMetadata.$t = markType(WebCellTypeDescriptionMetadata, 'WebCellTypeDescriptionMetadata');
    WebCellTypeDescriptionMetadata.a = null;
    return WebCellTypeDescriptionMetadata;
}(Base));
export { WebCellTypeDescriptionMetadata };
/**
 * @hidden
 */
var WebColumnExportingEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebColumnExportingEventArgsDescriptionMetadata, _super);
    function WebColumnExportingEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebColumnExportingEventArgsDescriptionMetadata.b = function (a) {
        if (WebColumnExportingEventArgsDescriptionMetadata.a == null) {
            WebColumnExportingEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebColumnExportingEventArgsDescriptionMetadata.c(WebColumnExportingEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebColumnExportingEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebColumnExportingEventArgsDescriptionMetadata.a);
        WebColumnExportingEventArgsDetailDescriptionMetadata.d(a);
    };
    WebColumnExportingEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:ColumnExportingEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebColumnExportingEventArgsDetail");
    };
    WebColumnExportingEventArgsDescriptionMetadata.d = function (a) {
        WebColumnExportingEventArgsDescriptionMetadata.b(a);
        a.ae("WebColumnExportingEventArgs", function () { return new WebColumnExportingEventArgsDescription(); });
        a.ad("WebColumnExportingEventArgs", WebColumnExportingEventArgsDescriptionMetadata.a);
    };
    WebColumnExportingEventArgsDescriptionMetadata.$t = markType(WebColumnExportingEventArgsDescriptionMetadata, 'WebColumnExportingEventArgsDescriptionMetadata');
    WebColumnExportingEventArgsDescriptionMetadata.a = null;
    return WebColumnExportingEventArgsDescriptionMetadata;
}(Base));
export { WebColumnExportingEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebColumnExportingEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebColumnExportingEventArgsDetailDescriptionMetadata, _super);
    function WebColumnExportingEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebColumnExportingEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebColumnExportingEventArgsDetailDescriptionMetadata.a == null) {
            WebColumnExportingEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebColumnExportingEventArgsDetailDescriptionMetadata.c(WebColumnExportingEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebColumnExportingEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebColumnExportingEventArgsDetailDescriptionMetadata.a);
        WebGridBaseDirectiveDescriptionMetadata.d(a);
    };
    WebColumnExportingEventArgsDetailDescriptionMetadata.c = function (a) {
        WebBaseEventArgsDetailDescriptionMetadata.c(a);
        a.item("__qualifiedNameTS", "String:ColumnExportingEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Header", "String");
        a.item("Field", "String");
        a.item("ColumnIndex", "Number:double");
        a.item("Cancel", "Boolean");
        a.item("SkipFormatter", "Boolean");
        a.item("Grid", "ExportedType:WebGridBaseDirective");
    };
    WebColumnExportingEventArgsDetailDescriptionMetadata.d = function (a) {
        WebColumnExportingEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebColumnExportingEventArgsDetail", function () { return new WebColumnExportingEventArgsDetailDescription(); });
        a.ad("WebColumnExportingEventArgsDetail", WebColumnExportingEventArgsDetailDescriptionMetadata.a);
    };
    WebColumnExportingEventArgsDetailDescriptionMetadata.$t = markType(WebColumnExportingEventArgsDetailDescriptionMetadata, 'WebColumnExportingEventArgsDetailDescriptionMetadata');
    WebColumnExportingEventArgsDetailDescriptionMetadata.a = null;
    return WebColumnExportingEventArgsDetailDescriptionMetadata;
}(Base));
export { WebColumnExportingEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebGridBaseDirectiveDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridBaseDirectiveDescriptionMetadata, _super);
    function WebGridBaseDirectiveDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridBaseDirectiveDescriptionMetadata.b = function (a) {
        if (WebGridBaseDirectiveDescriptionMetadata.a == null) {
            WebGridBaseDirectiveDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridBaseDirectiveDescriptionMetadata.c(WebGridBaseDirectiveDescriptionMetadata.a);
        }
        if (a.k(WebGridBaseDirectiveDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridBaseDirectiveDescriptionMetadata.a);
        WebDataCloneStrategyDescriptionMetadata.d(a);
        WebClipboardOptionsDescriptionMetadata.d(a);
        WebGridResourceStringsDescriptionMetadata.d(a);
        WebFilteringExpressionsTreeDescriptionMetadata.d(a);
        WebPinningConfigDescriptionMetadata.d(a);
        WebFilteringStrategyDescriptionMetadata.d(a);
        WebGridSortingStrategyDescriptionMetadata.d(a);
        WebSortingOptionsDescriptionMetadata.d(a);
        WebSortingExpressionDescriptionMetadata.d(a);
        WebOverlayOutletDirectiveDescriptionMetadata.d(a);
        WebFilteringExpressionsTreeEventArgsDescriptionMetadata.d(a);
        WebGridScrollEventArgsDescriptionMetadata.d(a);
        WebGridCellEventArgsDescriptionMetadata.d(a);
        WebGridRowEventArgsDescriptionMetadata.d(a);
        WebGridFormGroupCreatedEventArgsDescriptionMetadata.d(a);
        WebGridValidationStatusEventArgsDescriptionMetadata.d(a);
        WebRowSelectionEventArgsDescriptionMetadata.d(a);
        WebColumnSelectionEventArgsDescriptionMetadata.d(a);
        WebPinColumnCancellableEventArgsDescriptionMetadata.d(a);
        WebPinColumnEventArgsDescriptionMetadata.d(a);
        WebGridEditEventArgsDescriptionMetadata.d(a);
        WebGridEditDoneEventArgsDescriptionMetadata.d(a);
        WebColumnComponentEventArgsDescriptionMetadata.d(a);
        WebColumnsAutoGeneratedEventArgsDescriptionMetadata.d(a);
        WebSortingEventArgsDescriptionMetadata.d(a);
        WebSortingExpressionEventArgsDescriptionMetadata.d(a);
        WebFilteringEventArgsDescriptionMetadata.d(a);
        WebRowDataEventArgsDescriptionMetadata.d(a);
        WebRowDataCancelableEventArgsDescriptionMetadata.d(a);
        WebColumnResizeEventArgsDescriptionMetadata.d(a);
        WebGridContextMenuEventArgsDescriptionMetadata.d(a);
        WebColumnVisibilityChangingEventArgsDescriptionMetadata.d(a);
        WebColumnVisibilityChangedEventArgsDescriptionMetadata.d(a);
        WebColumnMovingStartEventArgsDescriptionMetadata.d(a);
        WebColumnMovingEventArgsDescriptionMetadata.d(a);
        WebColumnMovingEndEventArgsDescriptionMetadata.d(a);
        WebGridKeydownEventArgsDescriptionMetadata.d(a);
        WebRowDragStartEventArgsDescriptionMetadata.d(a);
        WebRowDragEndEventArgsDescriptionMetadata.d(a);
        WebGridClipboardEventEventArgsDescriptionMetadata.d(a);
        WebComponentArrayDataValueChangedEventArgsDescriptionMetadata.d(a);
        WebRowToggleEventArgsDescriptionMetadata.d(a);
        WebPinRowEventArgsDescriptionMetadata.d(a);
        WebActiveNodeChangeEventArgsDescriptionMetadata.d(a);
        WebGridToolbarExportEventArgsDescriptionMetadata.d(a);
        WebGridSelectionRangeEventArgsDescriptionMetadata.d(a);
        VoidEventArgsDescriptionMetadata.d(a);
        WebForOfDataChangingEventArgsDescriptionMetadata.d(a);
    };
    WebGridBaseDirectiveDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridBaseDirective");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__skipSuffix", "Boolean");
        a.item("SnackbarDisplayTime", "Number:double");
        a.item("AutoGenerate", "Boolean");
        a.item("AutoGenerateExclude", "Array:string");
        a.item("Moving", "Boolean");
        a.item("EmptyGridTemplateRef", "(w:EmptyGridTemplate,wf:EmptyGridTemplate)TemplateRef::object");
        a.item("AddRowEmptyTemplateRef", "(w:AddRowEmptyTemplate,wf:AddRowEmptyTemplate)TemplateRef::object");
        a.item("LoadingGridTemplateRef", "(w:LoadingGridTemplate,wf:LoadingGridTemplate)TemplateRef::object");
        a.item("SummaryRowHeight", "Number:double");
        a.item("DataCloneStrategy", "ExportedType:WebDataCloneStrategy");
        a.item("ClipboardOptions", "ExportedType:WebClipboardOptions");
        a.item("RowClassesRef", "(w:RowClasses,wf:RowClasses)DataRef::object");
        a.item("RowStylesRef", "(w:RowStyles,wf:RowStyles)DataRef::object");
        a.item("PrimaryKey", "String");
        a.item("ColumnList", "Collection:WebColumn:ColumnCollection:WebColumn");
        a.item("ColumnList@ngQueryList", "columnList");
        a.item("ActionStripComponents", "Collection:WebActionStrip:ActionStripCollection:WebActionStrip");
        a.item("ActionStripComponents@ngQueryList", "actionStripComponents");
        a.item("DragGhostCustomTemplateRef", "(w:DragGhostCustomTemplate,wf:DragGhostCustomTemplate)TemplateRef::object");
        a.item("RowEditTextTemplateRef", "(w:RowEditTextTemplate,wf:RowEditTextTemplate)TemplateRef::object");
        a.item("RowAddTextTemplateRef", "(w:RowAddTextTemplate,wf:RowAddTextTemplate)TemplateRef::object");
        a.item("RowEditActionsTemplateRef", "(w:RowEditActionsTemplate,wf:RowEditActionsTemplate)TemplateRef::object");
        a.item("RowExpandedIndicatorTemplateRef", "(w:RowExpandedIndicatorTemplate,wf:RowExpandedIndicatorTemplate)TemplateRef::object");
        a.item("RowCollapsedIndicatorTemplateRef", "(w:RowCollapsedIndicatorTemplate,wf:RowCollapsedIndicatorTemplate)TemplateRef::object");
        a.item("HeaderExpandedIndicatorTemplateRef", "(w:HeaderExpandedIndicatorTemplate,wf:HeaderExpandedIndicatorTemplate)TemplateRef::object");
        a.item("HeaderCollapsedIndicatorTemplateRef", "(w:HeaderCollapsedIndicatorTemplate,wf:HeaderCollapsedIndicatorTemplate)TemplateRef::object");
        a.item("ExcelStyleHeaderIconTemplateRef", "(w:ExcelStyleHeaderIconTemplate,wf:ExcelStyleHeaderIconTemplate)TemplateRef::object");
        a.item("SortAscendingHeaderIconTemplateRef", "(w:SortAscendingHeaderIconTemplate,wf:SortAscendingHeaderIconTemplate)TemplateRef::object");
        a.item("SortDescendingHeaderIconTemplateRef", "(w:SortDescendingHeaderIconTemplate,wf:SortDescendingHeaderIconTemplate)TemplateRef::object");
        a.item("SortHeaderIconTemplateRef", "(w:SortHeaderIconTemplate,wf:SortHeaderIconTemplate)TemplateRef::object");
        a.item("Toolbar", "Collection:WebGridToolbar:GridToolbarCollection:WebGridToolbar");
        a.item("Toolbar@ngQueryList", "toolbar");
        a.item("PaginationComponents", "Collection:WebPaginator:PaginatorCollection:WebPaginator");
        a.item("PaginationComponents@ngQueryList", "paginationComponents");
        a.item("ResourceStrings", "ExportedType:WebGridResourceStrings");
        a.item("FilteringLogic", "ExportedType:string:FilteringLogic");
        a.item("FilteringLogic@names", "And;Or");
        a.item("FilteringExpressionsTree", "ExportedType:WebFilteringExpressionsTree");
        a.item("FilteringExpressionsTree@mustSetInCode", "WebComponents;Blazor");
        a.item("AdvancedFilteringExpressionsTree", "ExportedType:WebFilteringExpressionsTree");
        a.item("Locale", "String");
        a.item("PagingMode", "ExportedType:string:GridPagingMode");
        a.item("PagingMode@names", "Local;Remote");
        a.item("HideRowSelectors", "Boolean");
        a.item("RowDraggable", "Boolean");
        a.item("ValidationTrigger", "ExportedType:string:GridValidationTrigger");
        a.item("ValidationTrigger@stringUnion", "WebComponents;React");
        a.item("ValidationTrigger@names", "Change;Blur");
        a.item("RowEditable", "Boolean");
        a.item("Height", "String");
        a.item("Width", "String");
        a.item("RowHeight", "Number:double");
        a.item("ColumnWidth", "String");
        a.item("EmptyGridMessage", "String");
        a.item("IsLoading", "Boolean");
        a.item("ShouldGenerate", "Boolean");
        a.item("EmptyFilteredGridMessage", "String");
        a.item("Pinning", "ExportedType:WebPinningConfig");
        a.item("Pinning@mustSetInCode", "WebComponents;Blazor;React");
        a.item("AllowFiltering", "Boolean");
        a.item("AllowAdvancedFiltering", "Boolean");
        a.item("FilterMode", "ExportedType:string:FilterMode");
        a.item("FilterMode@stringUnion", "WebComponents;React");
        a.item("FilterMode@names", "QuickFilter;ExcelStyleFilter");
        a.item("SummaryPosition", "ExportedType:string:GridSummaryPosition");
        a.item("SummaryPosition@stringUnion", "WebComponents;React");
        a.item("SummaryPosition@names", "Top;Bottom");
        a.item("SummaryCalculationMode", "ExportedType:string:GridSummaryCalculationMode");
        a.item("SummaryCalculationMode@stringUnion", "WebComponents;React");
        a.item("SummaryCalculationMode@names", "RootLevelOnly;ChildLevelsOnly;RootAndChildLevels");
        a.item("ShowSummaryOnCollapse", "Boolean");
        a.item("FilterStrategy", "ExportedType:WebFilteringStrategy");
        a.item("SortStrategy", "ExportedType:WebGridSortingStrategy");
        a.item("SortingOptions", "ExportedType:WebSortingOptions");
        a.item("SelectedRows", "Array:object");
        a.item("HeadSelectorTemplateRef", "(w:HeadSelectorTemplate,wf:HeadSelectorTemplate)TemplateRef::object");
        a.item("RowSelectorTemplateRef", "(w:RowSelectorTemplate,wf:RowSelectorTemplate)TemplateRef::object");
        a.item("DragIndicatorIconTemplateRef", "(w:DragIndicatorIconTemplate,wf:DragIndicatorIconTemplate)TemplateRef::object");
        a.item("SortingExpressions", "Array:WebSortingExpressionDescription:SortingExpression");
        a.item("SortingExpressions@mustSetInCode", "WebComponents;Blazor;React");
        a.item("BatchEditing", "Boolean");
        a.item("CellSelection", "ExportedType:string:GridSelectionMode");
        a.item("CellSelection@stringUnion", "WebComponents;React");
        a.item("CellSelection@names", "None;Single;Multiple;MultipleCascade");
        a.item("RowSelection", "ExportedType:string:GridSelectionMode");
        a.item("RowSelection@stringUnion", "WebComponents;React");
        a.item("RowSelection@names", "None;Single;Multiple;MultipleCascade");
        a.item("ColumnSelection", "ExportedType:string:GridSelectionMode");
        a.item("ColumnSelection@stringUnion", "WebComponents;React");
        a.item("ColumnSelection@names", "None;Single;Multiple;MultipleCascade");
        a.item("Outlet", "ExportedType:WebOverlayOutletDirective");
        a.item("TotalRecords", "Number:double");
        a.item("SelectRowOnClick", "Boolean");
        a.item("ActualColumnList", "Collection:WebColumn:ColumnCollection:WebColumn");
        a.item("StateComponents", "Collection:WebGridState:StateCollection:WebGridState");
        a.item("StateComponents@ngQueryList", "stateComponents");
        a.item("FilteringExpressionsTreeChangeRef", "EventRef::filteringExpressionsTreeChange:customEvent");
        a.item("AdvancedFilteringExpressionsTreeChangeRef", "EventRef::advancedFilteringExpressionsTreeChange:customEvent");
        a.item("GridScrollRef", "EventRef::gridScroll:customEvent");
        a.item("CellClickRef", "EventRef::cellClick:customEvent");
        a.item("RowClickRef", "EventRef::rowClick:customEvent");
        a.item("FormGroupCreatedRef", "EventRef::formGroupCreated:customEvent");
        a.item("ValidationStatusChangeRef", "EventRef::validationStatusChange:customEvent");
        a.item("SelectedRef", "EventRef::selected:customEvent");
        a.item("RowSelectionChangingRef", "EventRef::rowSelectionChanging:customEvent");
        a.item("ColumnSelectionChangingRef", "EventRef::columnSelectionChanging:customEvent");
        a.item("ColumnPinRef", "EventRef::columnPin:customEvent");
        a.item("ColumnPinnedRef", "EventRef::columnPinned:customEvent");
        a.item("CellEditEnterRef", "EventRef::cellEditEnter:customEvent");
        a.item("CellEditExitRef", "EventRef::cellEditExit:customEvent");
        a.item("CellEditRef", "EventRef::cellEdit:customEvent");
        a.item("CellEditDoneRef", "EventRef::cellEditDone:customEvent");
        a.item("RowEditEnterRef", "EventRef::rowEditEnter:customEvent");
        a.item("RowEditRef", "EventRef::rowEdit:customEvent");
        a.item("RowEditDoneRef", "EventRef::rowEditDone:customEvent");
        a.item("RowEditExitRef", "EventRef::rowEditExit:customEvent");
        a.item("ColumnInitRef", "EventRef::columnInit:customEvent");
        a.item("ColumnsAutogeneratedRef", "EventRef::columnsAutogenerated:customEvent");
        a.item("SortingRef", "EventRef::sorting:customEvent");
        a.item("SortingDoneRef", "EventRef::sortingDone:customEvent");
        a.item("FilteringRef", "EventRef::filtering:customEvent");
        a.item("FilteringDoneRef", "EventRef::filteringDone:customEvent");
        a.item("RowAddedRef", "EventRef::rowAdded:customEvent");
        a.item("RowDeletedRef", "EventRef::rowDeleted:customEvent");
        a.item("RowDeleteRef", "EventRef::rowDelete:customEvent");
        a.item("RowAddRef", "EventRef::rowAdd:customEvent");
        a.item("ColumnResizedRef", "EventRef::columnResized:customEvent");
        a.item("ContextMenuRef", "EventRef::contextMenu:customEvent");
        a.item("DoubleClickRef", "EventRef::doubleClick:customEvent");
        a.item("ColumnVisibilityChangingRef", "EventRef::columnVisibilityChanging:customEvent");
        a.item("ColumnVisibilityChangedRef", "EventRef::columnVisibilityChanged:customEvent");
        a.item("ColumnMovingStartRef", "EventRef::columnMovingStart:customEvent");
        a.item("ColumnMovingRef", "EventRef::columnMoving:customEvent");
        a.item("ColumnMovingEndRef", "EventRef::columnMovingEnd:customEvent");
        a.item("GridKeydownRef", "EventRef::gridKeydown:customEvent");
        a.item("RowDragStartRef", "EventRef::rowDragStart:customEvent");
        a.item("RowDragEndRef", "EventRef::rowDragEnd:customEvent");
        a.item("GridCopyRef", "EventRef::gridCopy:customEvent");
        a.item("SelectedRowsChangeRef", "EventRef::selectedRowsChange:customEvent");
        a.item("RowToggleRef", "EventRef::rowToggle:customEvent");
        a.item("RowPinningRef", "EventRef::rowPinning:customEvent");
        a.item("RowPinnedRef", "EventRef::rowPinned:customEvent");
        a.item("ActiveNodeChangeRef", "EventRef::activeNodeChange:customEvent");
        a.item("SortingExpressionsChangeRef", "EventRef::sortingExpressionsChange:customEvent");
        a.item("ToolbarExportingRef", "EventRef::toolbarExporting:customEvent");
        a.item("RangeSelectedRef", "EventRef::rangeSelected:customEvent");
        a.item("RenderedRef", "EventRef::rendered:customEvent");
        a.item("DataChangingRef", "EventRef::dataChanging:customEvent");
        a.item("DataChangedRef", "EventRef::dataChanged:customEvent");
        WebGridBaseDirectiveDescriptionMetadata.e(a);
    };
    WebGridBaseDirectiveDescriptionMetadata.d = function (a) {
        WebGridBaseDirectiveDescriptionMetadata.b(a);
        a.ad("WebGridBaseDirective", WebGridBaseDirectiveDescriptionMetadata.a);
    };
    WebGridBaseDirectiveDescriptionMetadata.e = function (a) {
        a.item("AutoGenerate", "*Boolean");
        a.item("ColumnsAutogeneratedRef", "*EventRef::columnsAutogenerated:customEvent");
    };
    WebGridBaseDirectiveDescriptionMetadata.$t = markType(WebGridBaseDirectiveDescriptionMetadata, 'WebGridBaseDirectiveDescriptionMetadata');
    WebGridBaseDirectiveDescriptionMetadata.a = null;
    return WebGridBaseDirectiveDescriptionMetadata;
}(Base));
export { WebGridBaseDirectiveDescriptionMetadata };
/**
 * @hidden
 */
var WebGridContextMenuEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridContextMenuEventArgsDescriptionMetadata, _super);
    function WebGridContextMenuEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridContextMenuEventArgsDescriptionMetadata.b = function (a) {
        if (WebGridContextMenuEventArgsDescriptionMetadata.a == null) {
            WebGridContextMenuEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridContextMenuEventArgsDescriptionMetadata.c(WebGridContextMenuEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebGridContextMenuEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridContextMenuEventArgsDescriptionMetadata.a);
        WebGridContextMenuEventArgsDetailDescriptionMetadata.d(a);
    };
    WebGridContextMenuEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridContextMenuEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebGridContextMenuEventArgsDetail");
    };
    WebGridContextMenuEventArgsDescriptionMetadata.d = function (a) {
        WebGridContextMenuEventArgsDescriptionMetadata.b(a);
        a.ae("WebGridContextMenuEventArgs", function () { return new WebGridContextMenuEventArgsDescription(); });
        a.ad("WebGridContextMenuEventArgs", WebGridContextMenuEventArgsDescriptionMetadata.a);
    };
    WebGridContextMenuEventArgsDescriptionMetadata.$t = markType(WebGridContextMenuEventArgsDescriptionMetadata, 'WebGridContextMenuEventArgsDescriptionMetadata');
    WebGridContextMenuEventArgsDescriptionMetadata.a = null;
    return WebGridContextMenuEventArgsDescriptionMetadata;
}(Base));
export { WebGridContextMenuEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebGridContextMenuEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridContextMenuEventArgsDetailDescriptionMetadata, _super);
    function WebGridContextMenuEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridContextMenuEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebGridContextMenuEventArgsDetailDescriptionMetadata.a == null) {
            WebGridContextMenuEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridContextMenuEventArgsDetailDescriptionMetadata.c(WebGridContextMenuEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebGridContextMenuEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridContextMenuEventArgsDetailDescriptionMetadata.a);
        WebCellTypeDescriptionMetadata.d(a);
        WebRowTypeDescriptionMetadata.d(a);
    };
    WebGridContextMenuEventArgsDetailDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridContextMenuEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Cell", "ExportedType:WebCellType");
        a.item("Event", "Unknown");
        a.item("Row", "ExportedType:WebRowType");
    };
    WebGridContextMenuEventArgsDetailDescriptionMetadata.d = function (a) {
        WebGridContextMenuEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebGridContextMenuEventArgsDetail", function () { return new WebGridContextMenuEventArgsDetailDescription(); });
        a.ad("WebGridContextMenuEventArgsDetail", WebGridContextMenuEventArgsDetailDescriptionMetadata.a);
    };
    WebGridContextMenuEventArgsDetailDescriptionMetadata.$t = markType(WebGridContextMenuEventArgsDetailDescriptionMetadata, 'WebGridContextMenuEventArgsDetailDescriptionMetadata');
    WebGridContextMenuEventArgsDetailDescriptionMetadata.a = null;
    return WebGridContextMenuEventArgsDetailDescriptionMetadata;
}(Base));
export { WebGridContextMenuEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebGridRowEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridRowEventArgsDescriptionMetadata, _super);
    function WebGridRowEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridRowEventArgsDescriptionMetadata.b = function (a) {
        if (WebGridRowEventArgsDescriptionMetadata.a == null) {
            WebGridRowEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridRowEventArgsDescriptionMetadata.c(WebGridRowEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebGridRowEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridRowEventArgsDescriptionMetadata.a);
        WebGridRowEventArgsDetailDescriptionMetadata.d(a);
    };
    WebGridRowEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridRowEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebGridRowEventArgsDetail");
    };
    WebGridRowEventArgsDescriptionMetadata.d = function (a) {
        WebGridRowEventArgsDescriptionMetadata.b(a);
        a.ae("WebGridRowEventArgs", function () { return new WebGridRowEventArgsDescription(); });
        a.ad("WebGridRowEventArgs", WebGridRowEventArgsDescriptionMetadata.a);
    };
    WebGridRowEventArgsDescriptionMetadata.$t = markType(WebGridRowEventArgsDescriptionMetadata, 'WebGridRowEventArgsDescriptionMetadata');
    WebGridRowEventArgsDescriptionMetadata.a = null;
    return WebGridRowEventArgsDescriptionMetadata;
}(Base));
export { WebGridRowEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebGridRowEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridRowEventArgsDetailDescriptionMetadata, _super);
    function WebGridRowEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridRowEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebGridRowEventArgsDetailDescriptionMetadata.a == null) {
            WebGridRowEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridRowEventArgsDetailDescriptionMetadata.c(WebGridRowEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebGridRowEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridRowEventArgsDetailDescriptionMetadata.a);
        WebRowTypeDescriptionMetadata.d(a);
    };
    WebGridRowEventArgsDetailDescriptionMetadata.c = function (a) {
        WebBaseEventArgsDetailDescriptionMetadata.c(a);
        a.item("__qualifiedNameTS", "String:GridRowEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Row", "ExportedType:WebRowType");
        a.item("Event", "Unknown");
    };
    WebGridRowEventArgsDetailDescriptionMetadata.d = function (a) {
        WebGridRowEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebGridRowEventArgsDetail", function () { return new WebGridRowEventArgsDetailDescription(); });
        a.ad("WebGridRowEventArgsDetail", WebGridRowEventArgsDetailDescriptionMetadata.a);
    };
    WebGridRowEventArgsDetailDescriptionMetadata.$t = markType(WebGridRowEventArgsDetailDescriptionMetadata, 'WebGridRowEventArgsDetailDescriptionMetadata');
    WebGridRowEventArgsDetailDescriptionMetadata.a = null;
    return WebGridRowEventArgsDetailDescriptionMetadata;
}(Base));
export { WebGridRowEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebGridCellEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridCellEventArgsDescriptionMetadata, _super);
    function WebGridCellEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridCellEventArgsDescriptionMetadata.b = function (a) {
        if (WebGridCellEventArgsDescriptionMetadata.a == null) {
            WebGridCellEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridCellEventArgsDescriptionMetadata.c(WebGridCellEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebGridCellEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridCellEventArgsDescriptionMetadata.a);
        WebGridCellEventArgsDetailDescriptionMetadata.d(a);
    };
    WebGridCellEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridCellEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebGridCellEventArgsDetail");
    };
    WebGridCellEventArgsDescriptionMetadata.d = function (a) {
        WebGridCellEventArgsDescriptionMetadata.b(a);
        a.ae("WebGridCellEventArgs", function () { return new WebGridCellEventArgsDescription(); });
        a.ad("WebGridCellEventArgs", WebGridCellEventArgsDescriptionMetadata.a);
    };
    WebGridCellEventArgsDescriptionMetadata.$t = markType(WebGridCellEventArgsDescriptionMetadata, 'WebGridCellEventArgsDescriptionMetadata');
    WebGridCellEventArgsDescriptionMetadata.a = null;
    return WebGridCellEventArgsDescriptionMetadata;
}(Base));
export { WebGridCellEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebGridCellEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridCellEventArgsDetailDescriptionMetadata, _super);
    function WebGridCellEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridCellEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebGridCellEventArgsDetailDescriptionMetadata.a == null) {
            WebGridCellEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridCellEventArgsDetailDescriptionMetadata.c(WebGridCellEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebGridCellEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridCellEventArgsDetailDescriptionMetadata.a);
        WebCellTypeDescriptionMetadata.d(a);
    };
    WebGridCellEventArgsDetailDescriptionMetadata.c = function (a) {
        WebBaseEventArgsDetailDescriptionMetadata.c(a);
        a.item("__qualifiedNameTS", "String:GridCellEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Cell", "ExportedType:WebCellType");
        a.item("Event", "Unknown");
    };
    WebGridCellEventArgsDetailDescriptionMetadata.d = function (a) {
        WebGridCellEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebGridCellEventArgsDetail", function () { return new WebGridCellEventArgsDetailDescription(); });
        a.ad("WebGridCellEventArgsDetail", WebGridCellEventArgsDetailDescriptionMetadata.a);
    };
    WebGridCellEventArgsDetailDescriptionMetadata.$t = markType(WebGridCellEventArgsDetailDescriptionMetadata, 'WebGridCellEventArgsDetailDescriptionMetadata');
    WebGridCellEventArgsDetailDescriptionMetadata.a = null;
    return WebGridCellEventArgsDetailDescriptionMetadata;
}(Base));
export { WebGridCellEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebGridEditDoneEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridEditDoneEventArgsDescriptionMetadata, _super);
    function WebGridEditDoneEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridEditDoneEventArgsDescriptionMetadata.b = function (a) {
        if (WebGridEditDoneEventArgsDescriptionMetadata.a == null) {
            WebGridEditDoneEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridEditDoneEventArgsDescriptionMetadata.c(WebGridEditDoneEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebGridEditDoneEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridEditDoneEventArgsDescriptionMetadata.a);
        WebGridEditDoneEventArgsDetailDescriptionMetadata.d(a);
    };
    WebGridEditDoneEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridEditDoneEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebGridEditDoneEventArgsDetail");
    };
    WebGridEditDoneEventArgsDescriptionMetadata.d = function (a) {
        WebGridEditDoneEventArgsDescriptionMetadata.b(a);
        a.ae("WebGridEditDoneEventArgs", function () { return new WebGridEditDoneEventArgsDescription(); });
        a.ad("WebGridEditDoneEventArgs", WebGridEditDoneEventArgsDescriptionMetadata.a);
    };
    WebGridEditDoneEventArgsDescriptionMetadata.$t = markType(WebGridEditDoneEventArgsDescriptionMetadata, 'WebGridEditDoneEventArgsDescriptionMetadata');
    WebGridEditDoneEventArgsDescriptionMetadata.a = null;
    return WebGridEditDoneEventArgsDescriptionMetadata;
}(Base));
export { WebGridEditDoneEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebGridEditDoneEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridEditDoneEventArgsDetailDescriptionMetadata, _super);
    function WebGridEditDoneEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridEditDoneEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebGridEditDoneEventArgsDetailDescriptionMetadata.a == null) {
            WebGridEditDoneEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridEditDoneEventArgsDetailDescriptionMetadata.c(WebGridEditDoneEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebGridEditDoneEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridEditDoneEventArgsDetailDescriptionMetadata.a);
        WebGridCellIdentifierDescriptionMetadata.d(a);
        WebColumnDescriptionMetadata.d(a);
        WebGridBaseDirectiveDescriptionMetadata.d(a);
    };
    WebGridEditDoneEventArgsDetailDescriptionMetadata.c = function (a) {
        WebBaseEventArgsDetailDescriptionMetadata.c(a);
        a.item("__qualifiedNameTS", "String:GridEditDoneEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("RowID", "Unknown");
        a.item("PrimaryKey", "Unknown");
        a.item("RowKey", "Unknown");
        a.item("CellID", "ExportedType:WebGridCellIdentifier");
        a.item("RowData", "Unknown");
        a.item("OldValue", "Unknown");
        a.item("NewValue", "Unknown");
        a.item("Column", "ExportedType:WebColumn");
        a.item("Owner", "ExportedType:WebGridBaseDirective");
        a.item("IsAddRow", "Boolean");
        a.item("Valid", "Boolean");
    };
    WebGridEditDoneEventArgsDetailDescriptionMetadata.d = function (a) {
        WebGridEditDoneEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebGridEditDoneEventArgsDetail", function () { return new WebGridEditDoneEventArgsDetailDescription(); });
        a.ad("WebGridEditDoneEventArgsDetail", WebGridEditDoneEventArgsDetailDescriptionMetadata.a);
    };
    WebGridEditDoneEventArgsDetailDescriptionMetadata.$t = markType(WebGridEditDoneEventArgsDetailDescriptionMetadata, 'WebGridEditDoneEventArgsDetailDescriptionMetadata');
    WebGridEditDoneEventArgsDetailDescriptionMetadata.a = null;
    return WebGridEditDoneEventArgsDetailDescriptionMetadata;
}(Base));
export { WebGridEditDoneEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebGridEditEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridEditEventArgsDescriptionMetadata, _super);
    function WebGridEditEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridEditEventArgsDescriptionMetadata.b = function (a) {
        if (WebGridEditEventArgsDescriptionMetadata.a == null) {
            WebGridEditEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridEditEventArgsDescriptionMetadata.c(WebGridEditEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebGridEditEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridEditEventArgsDescriptionMetadata.a);
        WebGridEditEventArgsDetailDescriptionMetadata.d(a);
    };
    WebGridEditEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridEditEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebGridEditEventArgsDetail");
    };
    WebGridEditEventArgsDescriptionMetadata.d = function (a) {
        WebGridEditEventArgsDescriptionMetadata.b(a);
        a.ae("WebGridEditEventArgs", function () { return new WebGridEditEventArgsDescription(); });
        a.ad("WebGridEditEventArgs", WebGridEditEventArgsDescriptionMetadata.a);
    };
    WebGridEditEventArgsDescriptionMetadata.$t = markType(WebGridEditEventArgsDescriptionMetadata, 'WebGridEditEventArgsDescriptionMetadata');
    WebGridEditEventArgsDescriptionMetadata.a = null;
    return WebGridEditEventArgsDescriptionMetadata;
}(Base));
export { WebGridEditEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebGridEditEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridEditEventArgsDetailDescriptionMetadata, _super);
    function WebGridEditEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridEditEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebGridEditEventArgsDetailDescriptionMetadata.a == null) {
            WebGridEditEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridEditEventArgsDetailDescriptionMetadata.c(WebGridEditEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebGridEditEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridEditEventArgsDetailDescriptionMetadata.a);
        WebGridCellIdentifierDescriptionMetadata.d(a);
        WebColumnDescriptionMetadata.d(a);
        WebGridBaseDirectiveDescriptionMetadata.d(a);
    };
    WebGridEditEventArgsDetailDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridEditEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Cancel", "Boolean");
        a.item("RowID", "Unknown");
        a.item("PrimaryKey", "Unknown");
        a.item("RowKey", "Unknown");
        a.item("CellID", "ExportedType:WebGridCellIdentifier");
        a.item("RowData", "Unknown");
        a.item("OldValue", "Unknown");
        a.item("NewValue", "Unknown");
        a.item("Column", "ExportedType:WebColumn");
        a.item("Owner", "ExportedType:WebGridBaseDirective");
        a.item("IsAddRow", "Boolean");
        a.item("Valid", "Boolean");
    };
    WebGridEditEventArgsDetailDescriptionMetadata.d = function (a) {
        WebGridEditEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebGridEditEventArgsDetail", function () { return new WebGridEditEventArgsDetailDescription(); });
        a.ad("WebGridEditEventArgsDetail", WebGridEditEventArgsDetailDescriptionMetadata.a);
    };
    WebGridEditEventArgsDetailDescriptionMetadata.$t = markType(WebGridEditEventArgsDetailDescriptionMetadata, 'WebGridEditEventArgsDetailDescriptionMetadata');
    WebGridEditEventArgsDetailDescriptionMetadata.a = null;
    return WebGridEditEventArgsDetailDescriptionMetadata;
}(Base));
export { WebGridEditEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebGridFormGroupCreatedEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridFormGroupCreatedEventArgsDescriptionMetadata, _super);
    function WebGridFormGroupCreatedEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridFormGroupCreatedEventArgsDescriptionMetadata.b = function (a) {
        if (WebGridFormGroupCreatedEventArgsDescriptionMetadata.a == null) {
            WebGridFormGroupCreatedEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridFormGroupCreatedEventArgsDescriptionMetadata.c(WebGridFormGroupCreatedEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebGridFormGroupCreatedEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridFormGroupCreatedEventArgsDescriptionMetadata.a);
        WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.d(a);
    };
    WebGridFormGroupCreatedEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridFormGroupCreatedEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebGridFormGroupCreatedEventArgsDetail");
    };
    WebGridFormGroupCreatedEventArgsDescriptionMetadata.d = function (a) {
        WebGridFormGroupCreatedEventArgsDescriptionMetadata.b(a);
        a.ae("WebGridFormGroupCreatedEventArgs", function () { return new WebGridFormGroupCreatedEventArgsDescription(); });
        a.ad("WebGridFormGroupCreatedEventArgs", WebGridFormGroupCreatedEventArgsDescriptionMetadata.a);
    };
    WebGridFormGroupCreatedEventArgsDescriptionMetadata.$t = markType(WebGridFormGroupCreatedEventArgsDescriptionMetadata, 'WebGridFormGroupCreatedEventArgsDescriptionMetadata');
    WebGridFormGroupCreatedEventArgsDescriptionMetadata.a = null;
    return WebGridFormGroupCreatedEventArgsDescriptionMetadata;
}(Base));
export { WebGridFormGroupCreatedEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata, _super);
    function WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a == null) {
            WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.c(WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a);
        WebGridBaseDirectiveDescriptionMetadata.d(a);
    };
    WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridFormGroupCreatedEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Owner", "ExportedType:WebGridBaseDirective");
    };
    WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.d = function (a) {
        WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebGridFormGroupCreatedEventArgsDetail", function () { return new WebGridFormGroupCreatedEventArgsDetailDescription(); });
        a.ad("WebGridFormGroupCreatedEventArgsDetail", WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a);
    };
    WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.$t = markType(WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata, 'WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata');
    WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a = null;
    return WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata;
}(Base));
export { WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebGridToolbarExportEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridToolbarExportEventArgsDescriptionMetadata, _super);
    function WebGridToolbarExportEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridToolbarExportEventArgsDescriptionMetadata.b = function (a) {
        if (WebGridToolbarExportEventArgsDescriptionMetadata.a == null) {
            WebGridToolbarExportEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridToolbarExportEventArgsDescriptionMetadata.c(WebGridToolbarExportEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebGridToolbarExportEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridToolbarExportEventArgsDescriptionMetadata.a);
        WebGridToolbarExportEventArgsDetailDescriptionMetadata.d(a);
    };
    WebGridToolbarExportEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridToolbarExportEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("__isTSPlainInterface", "Boolean");
        a.item("Detail", "ExportedType:WebGridToolbarExportEventArgsDetail");
    };
    WebGridToolbarExportEventArgsDescriptionMetadata.d = function (a) {
        WebGridToolbarExportEventArgsDescriptionMetadata.b(a);
        a.ae("WebGridToolbarExportEventArgs", function () { return new WebGridToolbarExportEventArgsDescription(); });
        a.ad("WebGridToolbarExportEventArgs", WebGridToolbarExportEventArgsDescriptionMetadata.a);
    };
    WebGridToolbarExportEventArgsDescriptionMetadata.$t = markType(WebGridToolbarExportEventArgsDescriptionMetadata, 'WebGridToolbarExportEventArgsDescriptionMetadata');
    WebGridToolbarExportEventArgsDescriptionMetadata.a = null;
    return WebGridToolbarExportEventArgsDescriptionMetadata;
}(Base));
export { WebGridToolbarExportEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebGridToolbarExportEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridToolbarExportEventArgsDetailDescriptionMetadata, _super);
    function WebGridToolbarExportEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridToolbarExportEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebGridToolbarExportEventArgsDetailDescriptionMetadata.a == null) {
            WebGridToolbarExportEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridToolbarExportEventArgsDetailDescriptionMetadata.c(WebGridToolbarExportEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebGridToolbarExportEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridToolbarExportEventArgsDetailDescriptionMetadata.a);
        WebGridBaseDirectiveDescriptionMetadata.d(a);
        WebBaseExporterDescriptionMetadata.d(a);
        WebExporterOptionsBaseDescriptionMetadata.d(a);
    };
    WebGridToolbarExportEventArgsDetailDescriptionMetadata.c = function (a) {
        WebBaseEventArgsDetailDescriptionMetadata.c(a);
        a.item("__qualifiedNameTS", "String:GridToolbarExportEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("__isTSPlainInterface", "Boolean");
        a.item("Grid", "ExportedType:WebGridBaseDirective");
        a.item("Exporter", "ExportedType:WebBaseExporter");
        a.item("Options", "ExportedType:WebExporterOptionsBase");
        a.item("Cancel", "Boolean");
    };
    WebGridToolbarExportEventArgsDetailDescriptionMetadata.d = function (a) {
        WebGridToolbarExportEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebGridToolbarExportEventArgsDetail", function () { return new WebGridToolbarExportEventArgsDetailDescription(); });
        a.ad("WebGridToolbarExportEventArgsDetail", WebGridToolbarExportEventArgsDetailDescriptionMetadata.a);
    };
    WebGridToolbarExportEventArgsDetailDescriptionMetadata.$t = markType(WebGridToolbarExportEventArgsDetailDescriptionMetadata, 'WebGridToolbarExportEventArgsDetailDescriptionMetadata');
    WebGridToolbarExportEventArgsDetailDescriptionMetadata.a = null;
    return WebGridToolbarExportEventArgsDetailDescriptionMetadata;
}(Base));
export { WebGridToolbarExportEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebGridValidationStatusEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridValidationStatusEventArgsDescriptionMetadata, _super);
    function WebGridValidationStatusEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridValidationStatusEventArgsDescriptionMetadata.b = function (a) {
        if (WebGridValidationStatusEventArgsDescriptionMetadata.a == null) {
            WebGridValidationStatusEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridValidationStatusEventArgsDescriptionMetadata.c(WebGridValidationStatusEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebGridValidationStatusEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridValidationStatusEventArgsDescriptionMetadata.a);
        WebGridValidationStatusEventArgsDetailDescriptionMetadata.d(a);
    };
    WebGridValidationStatusEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridValidationStatusEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebGridValidationStatusEventArgsDetail");
    };
    WebGridValidationStatusEventArgsDescriptionMetadata.d = function (a) {
        WebGridValidationStatusEventArgsDescriptionMetadata.b(a);
        a.ae("WebGridValidationStatusEventArgs", function () { return new WebGridValidationStatusEventArgsDescription(); });
        a.ad("WebGridValidationStatusEventArgs", WebGridValidationStatusEventArgsDescriptionMetadata.a);
    };
    WebGridValidationStatusEventArgsDescriptionMetadata.$t = markType(WebGridValidationStatusEventArgsDescriptionMetadata, 'WebGridValidationStatusEventArgsDescriptionMetadata');
    WebGridValidationStatusEventArgsDescriptionMetadata.a = null;
    return WebGridValidationStatusEventArgsDescriptionMetadata;
}(Base));
export { WebGridValidationStatusEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebGridValidationStatusEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebGridValidationStatusEventArgsDetailDescriptionMetadata, _super);
    function WebGridValidationStatusEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGridValidationStatusEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebGridValidationStatusEventArgsDetailDescriptionMetadata.a == null) {
            WebGridValidationStatusEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebGridValidationStatusEventArgsDetailDescriptionMetadata.c(WebGridValidationStatusEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebGridValidationStatusEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebGridValidationStatusEventArgsDetailDescriptionMetadata.a);
        WebGridBaseDirectiveDescriptionMetadata.d(a);
    };
    WebGridValidationStatusEventArgsDetailDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:GridValidationStatusEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Status", "ExportedType:string:ValidationStatus");
        a.item("Status@stringUnion", "WebComponents;React");
        a.item("Status@names", "VALID;INVALID");
        a.item("Owner", "ExportedType:WebGridBaseDirective");
    };
    WebGridValidationStatusEventArgsDetailDescriptionMetadata.d = function (a) {
        WebGridValidationStatusEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebGridValidationStatusEventArgsDetail", function () { return new WebGridValidationStatusEventArgsDetailDescription(); });
        a.ad("WebGridValidationStatusEventArgsDetail", WebGridValidationStatusEventArgsDetailDescriptionMetadata.a);
    };
    WebGridValidationStatusEventArgsDetailDescriptionMetadata.$t = markType(WebGridValidationStatusEventArgsDetailDescriptionMetadata, 'WebGridValidationStatusEventArgsDetailDescriptionMetadata');
    WebGridValidationStatusEventArgsDetailDescriptionMetadata.a = null;
    return WebGridValidationStatusEventArgsDetailDescriptionMetadata;
}(Base));
export { WebGridValidationStatusEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebPinRowEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebPinRowEventArgsDescriptionMetadata, _super);
    function WebPinRowEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebPinRowEventArgsDescriptionMetadata.b = function (a) {
        if (WebPinRowEventArgsDescriptionMetadata.a == null) {
            WebPinRowEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebPinRowEventArgsDescriptionMetadata.c(WebPinRowEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebPinRowEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebPinRowEventArgsDescriptionMetadata.a);
        WebPinRowEventArgsDetailDescriptionMetadata.d(a);
    };
    WebPinRowEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:PinRowEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebPinRowEventArgsDetail");
    };
    WebPinRowEventArgsDescriptionMetadata.d = function (a) {
        WebPinRowEventArgsDescriptionMetadata.b(a);
        a.ae("WebPinRowEventArgs", function () { return new WebPinRowEventArgsDescription(); });
        a.ad("WebPinRowEventArgs", WebPinRowEventArgsDescriptionMetadata.a);
    };
    WebPinRowEventArgsDescriptionMetadata.$t = markType(WebPinRowEventArgsDescriptionMetadata, 'WebPinRowEventArgsDescriptionMetadata');
    WebPinRowEventArgsDescriptionMetadata.a = null;
    return WebPinRowEventArgsDescriptionMetadata;
}(Base));
export { WebPinRowEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebPinRowEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebPinRowEventArgsDetailDescriptionMetadata, _super);
    function WebPinRowEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebPinRowEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebPinRowEventArgsDetailDescriptionMetadata.a == null) {
            WebPinRowEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebPinRowEventArgsDetailDescriptionMetadata.c(WebPinRowEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebPinRowEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebPinRowEventArgsDetailDescriptionMetadata.a);
        WebRowTypeDescriptionMetadata.d(a);
    };
    WebPinRowEventArgsDetailDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:PinRowEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("RowID", "Unknown");
        a.item("RowKey", "Unknown");
        a.item("Row", "ExportedType:WebRowType");
        a.item("InsertAtIndex", "Number:double");
        a.item("IsPinned", "Boolean");
        a.item("Owner", "Unknown");
        a.item("Cancel", "Boolean");
    };
    WebPinRowEventArgsDetailDescriptionMetadata.d = function (a) {
        WebPinRowEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebPinRowEventArgsDetail", function () { return new WebPinRowEventArgsDetailDescription(); });
        a.ad("WebPinRowEventArgsDetail", WebPinRowEventArgsDetailDescriptionMetadata.a);
    };
    WebPinRowEventArgsDetailDescriptionMetadata.$t = markType(WebPinRowEventArgsDetailDescriptionMetadata, 'WebPinRowEventArgsDetailDescriptionMetadata');
    WebPinRowEventArgsDetailDescriptionMetadata.a = null;
    return WebPinRowEventArgsDetailDescriptionMetadata;
}(Base));
export { WebPinRowEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebRowDataCancelableEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebRowDataCancelableEventArgsDescriptionMetadata, _super);
    function WebRowDataCancelableEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebRowDataCancelableEventArgsDescriptionMetadata.b = function (a) {
        if (WebRowDataCancelableEventArgsDescriptionMetadata.a == null) {
            WebRowDataCancelableEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebRowDataCancelableEventArgsDescriptionMetadata.c(WebRowDataCancelableEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebRowDataCancelableEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebRowDataCancelableEventArgsDescriptionMetadata.a);
        WebRowDataCancelableEventArgsDetailDescriptionMetadata.d(a);
    };
    WebRowDataCancelableEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:RowDataCancelableEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebRowDataCancelableEventArgsDetail");
    };
    WebRowDataCancelableEventArgsDescriptionMetadata.d = function (a) {
        WebRowDataCancelableEventArgsDescriptionMetadata.b(a);
        a.ae("WebRowDataCancelableEventArgs", function () { return new WebRowDataCancelableEventArgsDescription(); });
        a.ad("WebRowDataCancelableEventArgs", WebRowDataCancelableEventArgsDescriptionMetadata.a);
    };
    WebRowDataCancelableEventArgsDescriptionMetadata.$t = markType(WebRowDataCancelableEventArgsDescriptionMetadata, 'WebRowDataCancelableEventArgsDescriptionMetadata');
    WebRowDataCancelableEventArgsDescriptionMetadata.a = null;
    return WebRowDataCancelableEventArgsDescriptionMetadata;
}(Base));
export { WebRowDataCancelableEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebRowDataCancelableEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebRowDataCancelableEventArgsDetailDescriptionMetadata, _super);
    function WebRowDataCancelableEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebRowDataCancelableEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebRowDataCancelableEventArgsDetailDescriptionMetadata.a == null) {
            WebRowDataCancelableEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebRowDataCancelableEventArgsDetailDescriptionMetadata.c(WebRowDataCancelableEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebRowDataCancelableEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebRowDataCancelableEventArgsDetailDescriptionMetadata.a);
        WebGridCellIdentifierDescriptionMetadata.d(a);
        WebGridBaseDirectiveDescriptionMetadata.d(a);
    };
    WebRowDataCancelableEventArgsDetailDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:RowDataCancelableEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("CellID", "ExportedType:WebGridCellIdentifier");
        a.item("OldValue", "Unknown");
        a.item("NewValue", "Unknown");
        a.item("IsAddRow", "Boolean");
        a.item("Owner", "ExportedType:WebGridBaseDirective");
        a.item("Data", "Unknown");
        a.item("RowData", "Unknown");
        a.item("PrimaryKey", "Unknown");
        a.item("RowKey", "Unknown");
    };
    WebRowDataCancelableEventArgsDetailDescriptionMetadata.d = function (a) {
        WebRowDataCancelableEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebRowDataCancelableEventArgsDetail", function () { return new WebRowDataCancelableEventArgsDetailDescription(); });
        a.ad("WebRowDataCancelableEventArgsDetail", WebRowDataCancelableEventArgsDetailDescriptionMetadata.a);
    };
    WebRowDataCancelableEventArgsDetailDescriptionMetadata.$t = markType(WebRowDataCancelableEventArgsDetailDescriptionMetadata, 'WebRowDataCancelableEventArgsDetailDescriptionMetadata');
    WebRowDataCancelableEventArgsDetailDescriptionMetadata.a = null;
    return WebRowDataCancelableEventArgsDetailDescriptionMetadata;
}(Base));
export { WebRowDataCancelableEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebRowDragEndEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebRowDragEndEventArgsDescriptionMetadata, _super);
    function WebRowDragEndEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebRowDragEndEventArgsDescriptionMetadata.b = function (a) {
        if (WebRowDragEndEventArgsDescriptionMetadata.a == null) {
            WebRowDragEndEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebRowDragEndEventArgsDescriptionMetadata.c(WebRowDragEndEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebRowDragEndEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebRowDragEndEventArgsDescriptionMetadata.a);
        WebRowDragEndEventArgsDetailDescriptionMetadata.d(a);
    };
    WebRowDragEndEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:RowDragEndEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebRowDragEndEventArgsDetail");
    };
    WebRowDragEndEventArgsDescriptionMetadata.d = function (a) {
        WebRowDragEndEventArgsDescriptionMetadata.b(a);
        a.ae("WebRowDragEndEventArgs", function () { return new WebRowDragEndEventArgsDescription(); });
        a.ad("WebRowDragEndEventArgs", WebRowDragEndEventArgsDescriptionMetadata.a);
    };
    WebRowDragEndEventArgsDescriptionMetadata.$t = markType(WebRowDragEndEventArgsDescriptionMetadata, 'WebRowDragEndEventArgsDescriptionMetadata');
    WebRowDragEndEventArgsDescriptionMetadata.a = null;
    return WebRowDragEndEventArgsDescriptionMetadata;
}(Base));
export { WebRowDragEndEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebRowDragEndEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebRowDragEndEventArgsDetailDescriptionMetadata, _super);
    function WebRowDragEndEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebRowDragEndEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebRowDragEndEventArgsDetailDescriptionMetadata.a == null) {
            WebRowDragEndEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebRowDragEndEventArgsDetailDescriptionMetadata.c(WebRowDragEndEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebRowDragEndEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebRowDragEndEventArgsDetailDescriptionMetadata.a);
        WebRowTypeDescriptionMetadata.d(a);
    };
    WebRowDragEndEventArgsDetailDescriptionMetadata.c = function (a) {
        WebBaseEventArgsDetailDescriptionMetadata.c(a);
        a.item("__qualifiedNameTS", "String:RowDragEndEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("DragDirective", "Unknown");
        a.item("DragData", "ExportedType:WebRowType");
        a.item("Animation", "Boolean");
    };
    WebRowDragEndEventArgsDetailDescriptionMetadata.d = function (a) {
        WebRowDragEndEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebRowDragEndEventArgsDetail", function () { return new WebRowDragEndEventArgsDetailDescription(); });
        a.ad("WebRowDragEndEventArgsDetail", WebRowDragEndEventArgsDetailDescriptionMetadata.a);
    };
    WebRowDragEndEventArgsDetailDescriptionMetadata.$t = markType(WebRowDragEndEventArgsDetailDescriptionMetadata, 'WebRowDragEndEventArgsDetailDescriptionMetadata');
    WebRowDragEndEventArgsDetailDescriptionMetadata.a = null;
    return WebRowDragEndEventArgsDetailDescriptionMetadata;
}(Base));
export { WebRowDragEndEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebRowDragStartEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebRowDragStartEventArgsDescriptionMetadata, _super);
    function WebRowDragStartEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebRowDragStartEventArgsDescriptionMetadata.b = function (a) {
        if (WebRowDragStartEventArgsDescriptionMetadata.a == null) {
            WebRowDragStartEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebRowDragStartEventArgsDescriptionMetadata.c(WebRowDragStartEventArgsDescriptionMetadata.a);
        }
        if (a.k(WebRowDragStartEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebRowDragStartEventArgsDescriptionMetadata.a);
        WebRowDragStartEventArgsDetailDescriptionMetadata.d(a);
    };
    WebRowDragStartEventArgsDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:RowDragStartEventArgs");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Detail", "ExportedType:WebRowDragStartEventArgsDetail");
    };
    WebRowDragStartEventArgsDescriptionMetadata.d = function (a) {
        WebRowDragStartEventArgsDescriptionMetadata.b(a);
        a.ae("WebRowDragStartEventArgs", function () { return new WebRowDragStartEventArgsDescription(); });
        a.ad("WebRowDragStartEventArgs", WebRowDragStartEventArgsDescriptionMetadata.a);
    };
    WebRowDragStartEventArgsDescriptionMetadata.$t = markType(WebRowDragStartEventArgsDescriptionMetadata, 'WebRowDragStartEventArgsDescriptionMetadata');
    WebRowDragStartEventArgsDescriptionMetadata.a = null;
    return WebRowDragStartEventArgsDescriptionMetadata;
}(Base));
export { WebRowDragStartEventArgsDescriptionMetadata };
/**
 * @hidden
 */
var WebRowDragStartEventArgsDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebRowDragStartEventArgsDetailDescriptionMetadata, _super);
    function WebRowDragStartEventArgsDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebRowDragStartEventArgsDetailDescriptionMetadata.b = function (a) {
        if (WebRowDragStartEventArgsDetailDescriptionMetadata.a == null) {
            WebRowDragStartEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebRowDragStartEventArgsDetailDescriptionMetadata.c(WebRowDragStartEventArgsDetailDescriptionMetadata.a);
        }
        if (a.k(WebRowDragStartEventArgsDetailDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebRowDragStartEventArgsDetailDescriptionMetadata.a);
        WebRowTypeDescriptionMetadata.d(a);
    };
    WebRowDragStartEventArgsDetailDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:RowDragStartEventArgsDetail");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("DragDirective", "Unknown");
        a.item("DragData", "ExportedType:WebRowType");
        a.item("Cancel", "Boolean");
        a.item("Owner", "Unknown");
    };
    WebRowDragStartEventArgsDetailDescriptionMetadata.d = function (a) {
        WebRowDragStartEventArgsDetailDescriptionMetadata.b(a);
        a.ae("WebRowDragStartEventArgsDetail", function () { return new WebRowDragStartEventArgsDetailDescription(); });
        a.ad("WebRowDragStartEventArgsDetail", WebRowDragStartEventArgsDetailDescriptionMetadata.a);
    };
    WebRowDragStartEventArgsDetailDescriptionMetadata.$t = markType(WebRowDragStartEventArgsDetailDescriptionMetadata, 'WebRowDragStartEventArgsDetailDescriptionMetadata');
    WebRowDragStartEventArgsDetailDescriptionMetadata.a = null;
    return WebRowDragStartEventArgsDetailDescriptionMetadata;
}(Base));
export { WebRowDragStartEventArgsDetailDescriptionMetadata };
/**
 * @hidden
 */
var WebRowTypeDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WebRowTypeDescriptionMetadata, _super);
    function WebRowTypeDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebRowTypeDescriptionMetadata.b = function (a) {
        if (WebRowTypeDescriptionMetadata.a == null) {
            WebRowTypeDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            WebRowTypeDescriptionMetadata.c(WebRowTypeDescriptionMetadata.a);
        }
        if (a.k(WebRowTypeDescriptionMetadata.a)) {
            return;
        }
        a.ac(WebRowTypeDescriptionMetadata.a);
        WebGroupByRecordDescriptionMetadata.d(a);
        WebGridValidationStateDescriptionMetadata.d(a);
        WebCellTypeDescriptionMetadata.d(a);
        WebRowTypeDescriptionMetadata.d(a);
        WebTreeGridRecordDescriptionMetadata.d(a);
        WebGridBaseDirectiveDescriptionMetadata.d(a);
    };
    WebRowTypeDescriptionMetadata.c = function (a) {
        a.item("__qualifiedNameTS", "String:RowType");
        a.item("__packageNameWC", "String:grids");
        a.item("__skipModuleRegisterWebComponents", "Boolean");
        a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
        a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
        a.item("__marshalByValue", "Boolean");
        a.item("__skipSuffix", "Boolean");
        a.item("Index", "Number:double");
        a.item("ViewIndex", "Number:double");
        a.item("IsGroupByRow", "Boolean");
        a.item("IsSummaryRow", "Boolean");
        a.item("GroupRow", "ExportedType:WebGroupByRecord");
        a.item("Key", "Unknown");
        a.item("Validation", "ExportedType:WebGridValidationState");
        a.item("Data", "Unknown");
        a.item("Cells", "Array:WebCellTypeDescription:CellType");
        a.item("Disabled", "Boolean");
        a.item("Pinned", "Boolean");
        a.item("Selected", "Boolean");
        a.item("Expanded", "Boolean");
        a.item("Deleted", "Boolean");
        a.item("InEditMode", "Boolean");
        a.item("Children", "Array:WebRowTypeDescription:RowType");
        a.item("RowParent", "(wc:Parent)ExportedType:WebRowType");
        a.item("HasChildren", "Boolean");
        a.item("TreeRow", "ExportedType:WebTreeGridRecord");
        a.item("AddRowUI", "Boolean");
        a.item("Focused", "Boolean");
        a.item("Grid", "ExportedType:WebGridBaseDirective");
    };
    WebRowTypeDescriptionMetadata.d = function (a) {
        WebRowTypeDescriptionMetadata.b(a);
        a.ae("WebRowType", function () { return new WebRowTypeDescription(); });
        a.ad("WebRowType", WebRowTypeDescriptionMetadata.a);
    };
    WebRowTypeDescriptionMetadata.$t = markType(WebRowTypeDescriptionMetadata, 'WebRowTypeDescriptionMetadata');
    WebRowTypeDescriptionMetadata.a = null;
    return WebRowTypeDescriptionMetadata;
}(Base));
export { WebRowTypeDescriptionMetadata };
