/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, INotifyPropertyChanged_$type, PropertyChangedEventArgs, markType } from "./type";
import { ILegendContext_$type } from "./ILegendContext";
/**
 * @hidden
 */
export let DataContext = /*@__PURE__*/ (() => {
    class DataContext extends Base {
        constructor() {
            super(...arguments);
            this.c = 0;
            this.g = null;
            this.d = null;
            this.j = null;
            this.l = null;
            this.e = null;
            this.k = null;
            this.a = 0;
            this.f = null;
            this.m = null;
            this.propertyChanged = null;
        }
        get series() {
            return this.g;
        }
        set series(a) {
            this.g = a;
        }
        get item() {
            return this.d;
        }
        set item(a) {
            if (a != this.d) {
                this.d = a;
                this.i("Item");
            }
        }
        get actualItemBrush() {
            return this.j;
        }
        set actualItemBrush(a) {
            if (a != this.j) {
                this.j = a;
                this.i("ActualItemBrush");
            }
        }
        get outline() {
            return this.l;
        }
        set outline(a) {
            if (a != this.l) {
                this.l = a;
                this.i("Outline");
            }
        }
        get itemLabel() {
            return this.e;
        }
        set itemLabel(a) {
            if (a != this.e) {
                this.e = a;
                this.i("ItemLabel");
            }
        }
        get itemBrush() {
            return this.k;
        }
        set itemBrush(a) {
            if (a != this.k) {
                this.k = a;
                this.i("ItemBrush");
            }
        }
        get thickness() {
            return this.a;
        }
        set thickness(a) {
            if (a != this.a) {
                this.a = a;
                this.i("Thickness");
            }
        }
        get legendLabel() {
            return this.f;
        }
        set legendLabel(a) {
            if (a != this.f) {
                this.f = a;
                this.i("LegendLabel");
            }
        }
        i(a) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        flatten() {
            let series_ = this.series;
            let item_ = this.item;
            let actualItemBrush_ = this.actualItemBrush;
            let outline_ = this.outline;
            let itemLabel_ = this.itemLabel;
            let itemBrush_ = this.itemBrush;
            let thickness_ = this.thickness;
            return { item: item_, itemBrush: actualItemBrush_, outline: outline_, itemLabel: itemLabel_, thickness: thickness_ };
        }
    }
    DataContext.$t = /*@__PURE__*/ markType(DataContext, 'DataContext', Base.$, [ILegendContext_$type, INotifyPropertyChanged_$type]);
    return DataContext;
})();
