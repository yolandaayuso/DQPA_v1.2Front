/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { NativeUIElementBridge } from "./NativeUIElementBridge";
import { runOn, markType } from "./type";
import { NativeUISliderValueChangedEventArgs } from "./NativeUISliderValueChangedEventArgs";
/**
 * @hidden
 */
export let IgcSliderBridge = /*@__PURE__*/ (() => {
    class IgcSliderBridge extends NativeUIElementBridge {
        constructor() {
            super(...arguments);
            this.u = null;
            this.s = null;
            this.w = null;
            this.v = null;
            this.t = null;
            this.x = null;
        }
        addHandler(a, b, c, d) {
            switch (c) {
                case 0:
                    {
                        let e = a;
                        this.v = e.listen("igcInput", runOn(this, this.z));
                        this.t = d;
                        this.x = b;
                    }
                    break;
                case 4:
                    {
                        let f = a;
                        this.u = f.listen("igcChange", runOn(this, this.y));
                        this.s = d;
                        this.w = b;
                    }
                    break;
            }
        }
        z(a) {
            if (this.t != null) {
                let b = new NativeUISliderValueChangedEventArgs();
                this.t(this.x, b);
            }
        }
        y(a) {
            if (this.s != null) {
                let b = new NativeUISliderValueChangedEventArgs();
                this.s(this.w, b);
            }
        }
        getValue(a, b) {
            switch (b) {
                case 12: return a.getProperty("min");
                case 13: return a.getProperty("max");
                case 14: return a.getProperty("step");
                case 2: return a.getProperty("value");
            }
            return null;
        }
        removeHandler(a, b, c, d) {
            switch (c) {
                case 0:
                    if (this.v != null) {
                        this.v();
                    }
                    this.t = null;
                    this.x = null;
                    break;
                case 4:
                    if (this.u != null) {
                        this.u();
                    }
                    this.s = null;
                    this.w = null;
                    break;
            }
        }
        setValue(a, b, c) {
            switch (b) {
                case 12:
                    a.setProperty("min", c);
                    break;
                case 13:
                    a.setProperty("max", c);
                    break;
                case 14:
                    a.setProperty("step", c);
                    break;
                case 2:
                    a.setProperty("value", c);
                    break;
            }
        }
    }
    IgcSliderBridge.$t = /*@__PURE__*/ markType(IgcSliderBridge, 'IgcSliderBridge', NativeUIElementBridge.$);
    return IgcSliderBridge;
})();
