/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { PanelBridge } from "./PanelBridge";
import { INativeUIAbsolutePanelBridge_$type } from "./INativeUIAbsolutePanelBridge";
import { markType } from "./type";
import { stringReplace } from "./string";
/**
 * @hidden
 */
export let AbsolutePanelBridge = /*@__PURE__*/ (() => {
    class AbsolutePanelBridge extends PanelBridge {
        constructor() {
            super();
        }
        addHandler(a, b, c, d) {
        }
        getX(a, b) {
            let c = b.an.getStyleProperty("left");
            stringReplace(c, "px", "");
            let d = parseFloat(c);
            return d;
        }
        getY(a, b) {
            let c = b.an.getStyleProperty("top");
            stringReplace(c, "px", "");
            let d = parseFloat(c);
            return d;
        }
        getValue(a, b) {
            switch (b) {
            }
            return super.getValue(a, b);
        }
        removeHandler(a, b, c, d) {
        }
        setX(a, b, c) {
            b.an.setStyleProperty("position", "absolute");
            b.an.setStyleProperty("left", c.toString() + "px");
        }
        setY(a, b, c) {
            b.an.setStyleProperty("position", "absolute");
            b.an.setStyleProperty("top", c.toString() + "px");
        }
        setValue(a, b, c) {
            super.setValue(a, b, c);
            switch (b) {
            }
        }
        getChildAt(a, b) {
            return this.s.apply(this, arguments);
        }
        removeChildAt(a, b) {
            this.y.apply(this, arguments);
        }
        addChild(a, b) {
            this.v.apply(this, arguments);
        }
        insertChild(a, b, c) {
            this.w.apply(this, arguments);
        }
        removeChild(a, b) {
            this.x.apply(this, arguments);
        }
        getChildrenCount(a) {
            return this.u.apply(this, arguments);
        }
    }
    AbsolutePanelBridge.$t = /*@__PURE__*/ markType(AbsolutePanelBridge, 'AbsolutePanelBridge', PanelBridge.$, [INativeUIAbsolutePanelBridge_$type]);
    return AbsolutePanelBridge;
})();
