/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataGridFilterDialogDescription = /*@__PURE__*/ (() => {
    class DataGridFilterDialogDescription extends Description {
        get_type() {
            return "DataGridFilterDialog";
        }
        get type() {
            return this.get_type();
        }
        constructor() {
            super();
            this.h = false;
            this.k = 0;
            this.j = 0;
            this.t = null;
            this.l = 0;
            this.p = null;
            this.u = null;
            this.q = null;
            this.s = null;
            this.r = null;
            this.v = null;
        }
        get isAnimationEnabled() {
            return this.h;
        }
        set isAnimationEnabled(a) {
            this.h = a;
            this.g("IsAnimationEnabled");
        }
        get pixelScalingRatio() {
            return this.k;
        }
        set pixelScalingRatio(a) {
            this.k = a;
            this.g("PixelScalingRatio");
        }
        get actualPixelScalingRatio() {
            return this.j;
        }
        set actualPixelScalingRatio(a) {
            this.j = a;
            this.g("ActualPixelScalingRatio");
        }
        get iconColor() {
            return this.t;
        }
        set iconColor(a) {
            this.t = a;
            this.g("IconColor");
        }
        get viewSize() {
            return this.l;
        }
        set viewSize(a) {
            this.l = a;
            this.g("ViewSize");
        }
        get commandCompletedRef() {
            return this.p;
        }
        set commandCompletedRef(a) {
            this.p = a;
            this.g("CommandCompletedRef");
        }
        get invalidateActionsRef() {
            return this.u;
        }
        set invalidateActionsRef(a) {
            this.u = a;
            this.g("InvalidateActionsRef");
        }
        get dialogOpeningRef() {
            return this.q;
        }
        set dialogOpeningRef(a) {
            this.q = a;
            this.g("DialogOpeningRef");
        }
        get filterChangingRef() {
            return this.s;
        }
        set filterChangingRef(a) {
            this.s = a;
            this.g("FilterChangingRef");
        }
        get filterChangedRef() {
            return this.r;
        }
        set filterChangedRef(a) {
            this.r = a;
            this.g("FilterChangedRef");
        }
        get renderCompletedRef() {
            return this.v;
        }
        set renderCompletedRef(a) {
            this.v = a;
            this.g("RenderCompletedRef");
        }
    }
    DataGridFilterDialogDescription.$t = /*@__PURE__*/ markType(DataGridFilterDialogDescription, 'DataGridFilterDialogDescription', Description.$);
    return DataGridFilterDialogDescription;
})();
