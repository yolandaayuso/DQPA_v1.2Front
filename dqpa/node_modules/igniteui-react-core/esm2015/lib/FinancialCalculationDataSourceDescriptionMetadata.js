/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { CalculatedColumnDescriptionMetadata } from "./CalculatedColumnDescriptionMetadata";
import { FinancialCalculationDataSourceDescription } from "./FinancialCalculationDataSourceDescription";
/**
 * @hidden
 */
export let FinancialCalculationDataSourceDescriptionMetadata = /*@__PURE__*/ (() => {
    class FinancialCalculationDataSourceDescriptionMetadata extends Base {
        static b(a) {
            if (FinancialCalculationDataSourceDescriptionMetadata.a == null) {
                FinancialCalculationDataSourceDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                FinancialCalculationDataSourceDescriptionMetadata.c(FinancialCalculationDataSourceDescriptionMetadata.a);
            }
            if (a.k(FinancialCalculationDataSourceDescriptionMetadata.a)) {
                return;
            }
            a.ac(FinancialCalculationDataSourceDescriptionMetadata.a);
            CalculatedColumnDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("TypicalColumn", "ExportedType:CalculatedColumn");
            a.item("TrueRange", "ExportedType:CalculatedColumn");
            a.item("TrueLow", "ExportedType:CalculatedColumn");
            a.item("Period", "Number:int");
            a.item("ShortPeriod", "Number:int");
            a.item("LongPeriod", "Number:int");
            a.item("Count", "Number:int");
            a.item("CalculateFrom", "Number:int");
            a.item("CalculateCount", "Number:int");
            a.item("Multiplier", "Number:double");
            a.item("MinimumValue", "Number:double");
            a.item("MaximumValue", "Number:double");
            a.item("SpecifiesRange", "Boolean");
        }
        static d(a) {
            FinancialCalculationDataSourceDescriptionMetadata.b(a);
            a.ae("FinancialCalculationDataSource", () => new FinancialCalculationDataSourceDescription());
            a.ad("FinancialCalculationDataSource", FinancialCalculationDataSourceDescriptionMetadata.a);
        }
    }
    FinancialCalculationDataSourceDescriptionMetadata.$t = /*@__PURE__*/ markType(FinancialCalculationDataSourceDescriptionMetadata, 'FinancialCalculationDataSourceDescriptionMetadata');
    FinancialCalculationDataSourceDescriptionMetadata.a = null;
    return FinancialCalculationDataSourceDescriptionMetadata;
})();
