/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebComponentValueChangedEventArgsDescriptionMetadata } from "./WebComponentValueChangedEventArgsDescriptionMetadata";
import { VoidEventArgsDescriptionMetadata } from "./VoidEventArgsDescriptionMetadata";
import { WebTextareaDescription } from "./WebTextareaDescription";
/**
 * @hidden
 */
export let WebTextareaDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebTextareaDescriptionMetadata extends Base {
        static b(a) {
            if (WebTextareaDescriptionMetadata.a == null) {
                WebTextareaDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebTextareaDescriptionMetadata.c(WebTextareaDescriptionMetadata.a);
            }
            if (a.k(WebTextareaDescriptionMetadata.a)) {
                return;
            }
            a.ac(WebTextareaDescriptionMetadata.a);
            WebComponentValueChangedEventArgsDescriptionMetadata.d(a);
            VoidEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:Textarea");
            a.item("__tagNameWC", "String:igc-textarea");
            a.item("__skipModuleRegisterWebComponents", "Boolean");
            a.item("__importTypesWebComponents", "String:igniteui-webcomponents");
            a.item("Autocomplete", "String");
            a.item("Autocapitalize", "ExportedType:string:TextareaAutocapitalize");
            a.item("Autocapitalize@stringUnion", "WebComponents;React");
            a.item("Autocapitalize@names", "Off;None;On;Sentences;Words;Characters");
            a.item("InputMode", "ExportedType:string:TextareaInputMode");
            a.item("InputMode@stringUnion", "WebComponents;React");
            a.item("InputMode@names", "None;Text;Decimal;Numeric;Tel;Search;Email;Url");
            a.item("Label", "String");
            a.item("MaxLength", "Number:double");
            a.item("MinLength", "Number:double");
            a.item("Outlined", "Boolean");
            a.item("Placeholder", "String");
            a.item("ReadOnly", "Boolean");
            a.item("Resize", "ExportedType:string:TextareaResize");
            a.item("Resize@stringUnion", "WebComponents;React");
            a.item("Resize@names", "Vertical;Auto;None");
            a.item("Rows", "Number:double");
            a.item("Value", "String");
            a.item("Spellcheck", "Boolean");
            a.item("Wrap", "ExportedType:string:TextareaWrap");
            a.item("Wrap@stringUnion", "WebComponents;React");
            a.item("Wrap@names", "Soft;Hard;Off");
            a.item("ValidateOnly", "Boolean");
            a.item("Disabled", "Boolean");
            a.item("Required", "Boolean");
            a.item("DefaultValue", "Unknown");
            a.item("Name", "String");
            a.item("Invalid", "Boolean");
            a.item("InputRef", "EventRef::input");
            a.item("ChangeRef", "EventRef::change");
            a.item("FocusRef", "EventRef::focus:skipWCPrefix");
            a.item("BlurRef", "EventRef::blur:skipWCPrefix");
        }
        static d(a) {
            WebTextareaDescriptionMetadata.b(a);
            a.ae("WebTextarea", () => new WebTextareaDescription());
            a.ad("WebTextarea", WebTextareaDescriptionMetadata.a);
        }
    }
    WebTextareaDescriptionMetadata.$t = /*@__PURE__*/ markType(WebTextareaDescriptionMetadata, 'WebTextareaDescriptionMetadata');
    WebTextareaDescriptionMetadata.a = null;
    return WebTextareaDescriptionMetadata;
})();
