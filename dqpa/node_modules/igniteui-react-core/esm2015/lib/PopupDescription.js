/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let PopupDescription = /*@__PURE__*/ (() => {
    class PopupDescription extends Description {
        get_type() {
            return "Popup";
        }
        get type() {
            return this.get_type();
        }
        constructor() {
            super();
            this.l = false;
            this.ae = 0;
            this.h = false;
            this.am = null;
            this.af = 0;
            this.ad = 0;
            this.al = null;
            this.ak = null;
            this.aj = null;
            this.an = null;
            this.z = 0;
            this.m = false;
            this.i = false;
            this.n = false;
            this.as = null;
            this.ar = null;
            this.aa = 0;
            this.o = false;
            this.j = false;
            this.k = false;
            this.p = false;
            this.ap = null;
            this.aq = null;
            this.at = null;
            this.au = null;
            this.ao = null;
        }
        get isFocusable() {
            return this.l;
        }
        set isFocusable(a) {
            this.l = a;
            this.g("IsFocusable");
        }
        get animationDuration() {
            return this.ae;
        }
        set animationDuration(a) {
            this.ae = a;
            this.g("AnimationDuration");
        }
        get animationEnabled() {
            return this.h;
        }
        set animationEnabled(a) {
            this.h = a;
            this.g("AnimationEnabled");
        }
        get animationType() {
            return this.am;
        }
        set animationType(a) {
            this.am = a;
            this.g("AnimationType");
        }
        get elevation() {
            return this.af;
        }
        set elevation(a) {
            this.af = a;
            this.g("Elevation");
        }
        get actualElevation() {
            return this.ad;
        }
        set actualElevation(a) {
            this.ad = a;
            this.g("ActualElevation");
        }
        get actualUmbraShadowColor() {
            return this.al;
        }
        set actualUmbraShadowColor(a) {
            this.al = a;
            this.g("ActualUmbraShadowColor");
        }
        get actualPenumbraShadowColor() {
            return this.ak;
        }
        set actualPenumbraShadowColor(a) {
            this.ak = a;
            this.g("ActualPenumbraShadowColor");
        }
        get actualAmbientShadowColor() {
            return this.aj;
        }
        set actualAmbientShadowColor(a) {
            this.aj = a;
            this.g("ActualAmbientShadowColor");
        }
        get background() {
            return this.an;
        }
        set background(a) {
            this.an = a;
            this.g("Background");
        }
        get cornerRadius() {
            return this.z;
        }
        set cornerRadius(a) {
            this.z = a;
            this.g("CornerRadius");
        }
        get isHitTestVisible() {
            return this.m;
        }
        set isHitTestVisible(a) {
            this.m = a;
            this.g("IsHitTestVisible");
        }
        get disableHitTestDuringAnimation() {
            return this.i;
        }
        set disableHitTestDuringAnimation(a) {
            this.i = a;
            this.g("DisableHitTestDuringAnimation");
        }
        get isPointerEnabled() {
            return this.n;
        }
        set isPointerEnabled(a) {
            this.n = a;
            this.g("IsPointerEnabled");
        }
        get pointerPosition() {
            return this.as;
        }
        set pointerPosition(a) {
            this.as = a;
            this.g("PointerPosition");
        }
        get pointerBackground() {
            return this.ar;
        }
        set pointerBackground(a) {
            this.ar = a;
            this.g("PointerBackground");
        }
        get pointerSize() {
            return this.aa;
        }
        set pointerSize(a) {
            this.aa = a;
            this.g("PointerSize");
        }
        get isShowing() {
            return this.o;
        }
        set isShowing(a) {
            this.o = a;
            this.g("IsShowing");
        }
        get isClosing() {
            return this.j;
        }
        set isClosing(a) {
            this.j = a;
            this.g("IsClosing");
        }
        get isFixed() {
            return this.k;
        }
        set isFixed(a) {
            this.k = a;
            this.g("IsFixed");
        }
        get useTopLayer() {
            return this.p;
        }
        set useTopLayer(a) {
            this.p = a;
            this.g("UseTopLayer");
        }
        get onClosedRef() {
            return this.ap;
        }
        set onClosedRef(a) {
            this.ap = a;
            this.g("OnClosedRef");
        }
        get onPopupRef() {
            return this.aq;
        }
        set onPopupRef(a) {
            this.aq = a;
            this.g("OnPopupRef");
        }
        get popupGotFocusRef() {
            return this.at;
        }
        set popupGotFocusRef(a) {
            this.at = a;
            this.g("PopupGotFocusRef");
        }
        get popupLostFocusRef() {
            return this.au;
        }
        set popupLostFocusRef(a) {
            this.au = a;
            this.g("PopupLostFocusRef");
        }
        get measuringContentSizeRef() {
            return this.ao;
        }
        set measuringContentSizeRef(a) {
            this.ao = a;
            this.g("MeasuringContentSizeRef");
        }
    }
    PopupDescription.$t = /*@__PURE__*/ markType(PopupDescription, 'PopupDescription', Description.$);
    return PopupDescription;
})();
