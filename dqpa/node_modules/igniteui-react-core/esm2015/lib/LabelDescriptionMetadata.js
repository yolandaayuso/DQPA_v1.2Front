/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { InputGroupItemDescriptionMetadata } from "./InputGroupItemDescriptionMetadata";
import { LabelDescription } from "./LabelDescription";
/**
 * @hidden
 */
export let LabelDescriptionMetadata = /*@__PURE__*/ (() => {
    class LabelDescriptionMetadata extends Base {
        static b(a) {
            if (LabelDescriptionMetadata.a == null) {
                LabelDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                LabelDescriptionMetadata.c(LabelDescriptionMetadata.a);
            }
            if (a.k(LabelDescriptionMetadata.a)) {
                return;
            }
            a.ac(LabelDescriptionMetadata.a);
        }
        static c(a) {
            InputGroupItemDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:XLabel");
            a.item("BaseTheme", "ExportedType:string:BaseControlTheme");
            a.item("BaseTheme@names", "Default;DenaliLight;MaterialLight;SlingshotLight;SlingshotDark;RevealLight;RevealDark");
            a.item("Density", "ExportedType:string:ControlDisplayDensity");
            a.item("Density@names", "Auto;Comfortable;Cosy;Compact;Minimal");
            a.item("ActualDensity", "ExportedType:string:ControlDisplayDensity");
            a.item("ActualDensity@names", "Auto;Comfortable;Cosy;Compact;Minimal");
            a.item("ActualTextColor", "Brush");
            a.item("ActualHighlightTextColor", "Brush");
            a.item("ActualHoverHighlightTextColor", "Brush");
            a.item("ActualHoverTextColor", "Brush");
            a.item("TextColor", "Brush");
            a.item("HighlightTextColor", "Brush");
            a.item("HoverHighlightTextColor", "Brush");
            a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
            a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
            a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontFamily/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
            a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontFamily/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
            a.item("HoverTextColor", "Brush");
            a.item("Id", "String");
            a.item("Display", "String");
            a.item("FlexDirection", "String");
            a.item("FlexGrow", "String");
            a.item("AlignItems", "String");
            a.item("AlignSelf", "String");
            a.item("TabIndex", "Number:int");
            a.item("For", "(w:ForAttribute,xam:ForAttribute,wf:ForAttribute)String");
            a.item("AriaLabel", "String");
            a.item("Text", "String");
            a.item("IsHover", "Boolean");
            a.item("Value", "Boolean");
            a.item("Disabled", "(w:IsDisabled,xam:IsDisabled,wf:IsDisabled)Boolean");
        }
        static d(a) {
            LabelDescriptionMetadata.b(a);
            a.ae("Label", () => new LabelDescription());
            a.ad("Label", LabelDescriptionMetadata.a);
        }
    }
    LabelDescriptionMetadata.$t = /*@__PURE__*/ markType(LabelDescriptionMetadata, 'LabelDescriptionMetadata');
    LabelDescriptionMetadata.a = null;
    return LabelDescriptionMetadata;
})();
