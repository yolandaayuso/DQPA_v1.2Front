/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { NativeUIContainer } from "./NativeUIContainer";
import { NativeUIBoxSizing_$type } from "./NativeUIBoxSizing";
import { enumGetBox, EnumUtil, markType } from "./type";
import { NativeUIPlaceContent_$type } from "./NativeUIPlaceContent";
/**
 * @hidden
 */
export let NativeUIGrid = /*@__PURE__*/ (() => {
    class NativeUIGrid extends NativeUIContainer {
        constructor() {
            super(...arguments);
            this.bt = null;
        }
        get_e() {
            return 7;
        }
        get b1() {
            return this.br.getRowDefinitionsCount(this.am);
        }
        get bx() {
            return this.br.getColumnDefinitionsCount(this.am);
        }
        get br() {
            return this.d;
        }
        get bs() {
            let a = this.ag(38);
            return EnumUtil.getEnumValue(NativeUIBoxSizing_$type, a);
        }
        set bs(a) {
            this.a4(38, enumGetBox(NativeUIBoxSizing_$type, a));
        }
        get bv() {
            let a = this.ag(72);
            return EnumUtil.getEnumValue(NativeUIPlaceContent_$type, a);
        }
        set bv(a) {
            this.a4(72, enumGetBox(NativeUIPlaceContent_$type, a));
        }
        get bw() {
            return this.ag(37);
        }
        set bw(a) {
            this.a4(37, a);
        }
        b4(a, b, c) {
            this.br.addRowDefinition(this.am, a, b, c);
        }
        b5(a, b, c, d) {
            this.br.addRowDefinitionWithMin(this.am, a, b, c, d);
        }
        ce(a, b, c) {
            this.br.updateRowDefinition(this.am, a, b, c);
        }
        b2(a, b, c) {
            this.br.addColumnDefinition(this.am, a, b, c);
        }
        b3(a, b, c, d) {
            this.br.addColumnDefinitionWithMin(this.am, a, b, c, d);
        }
        cd(a, b, c) {
            this.br.updateColumnDefinition(this.am, a, b, c);
        }
        b6(a, b, c) {
            this.br.insertColumnDefinition(this.am, a, b, c);
        }
        b7(a, b, c, d) {
            this.br.insertColumnDefinitionWithMin(this.am, a, b, c, d);
        }
        cc(a, b) {
            this.br.setRow(this.am, a, b);
        }
        ca(a, b) {
            this.br.setColumn(this.am, a, b);
        }
        cb(a, b) {
            this.br.setColumnSpan(this.am, a, b);
        }
        b0(a) {
            return this.br.getRow(this.am, a);
        }
        by(a) {
            return this.br.getColumn(this.am, a);
        }
        bz(a) {
            return this.br.getColumnSpan(this.am, a);
        }
        b9(a) {
            this.br.removeRowDefinition(this.am, a);
        }
        b8(a) {
            this.br.removeColumnDefinition(this.am, a);
        }
        get bu() {
            return this.bt;
        }
        set bu(a) {
            let b = this.bt;
            this.bt = a;
            if (this.bt != b) {
                if (b != null) {
                    this.a2(1, b);
                }
                if (this.bt != null) {
                    this.aq(1, this.bt);
                }
            }
        }
    }
    NativeUIGrid.$t = /*@__PURE__*/ markType(NativeUIGrid, 'NativeUIGrid', NativeUIContainer.$);
    return NativeUIGrid;
})();
