/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { BrushScaleDescriptionMetadata } from "./BrushScaleDescriptionMetadata";
import { AssigningShapeStyleEventArgsDescriptionMetadata } from "./AssigningShapeStyleEventArgsDescriptionMetadata";
import { AssigningShapeMarkerStyleEventArgsDescriptionMetadata } from "./AssigningShapeMarkerStyleEventArgsDescriptionMetadata";
import { StyleShapeEventArgsDescriptionMetadata } from "./StyleShapeEventArgsDescriptionMetadata";
import { SeriesDescriptionMetadata } from "./SeriesDescriptionMetadata";
/**
 * @hidden
 */
export let ShapeSeriesBaseDescriptionMetadata = /*@__PURE__*/ (() => {
    class ShapeSeriesBaseDescriptionMetadata extends Base {
        static b(a) {
            if (ShapeSeriesBaseDescriptionMetadata.a == null) {
                ShapeSeriesBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                ShapeSeriesBaseDescriptionMetadata.c(ShapeSeriesBaseDescriptionMetadata.a);
            }
            if (a.k(ShapeSeriesBaseDescriptionMetadata.a)) {
                return;
            }
            a.ac(ShapeSeriesBaseDescriptionMetadata.a);
            BrushScaleDescriptionMetadata.d(a);
            AssigningShapeStyleEventArgsDescriptionMetadata.d(a);
            AssigningShapeMarkerStyleEventArgsDescriptionMetadata.d(a);
            StyleShapeEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            SeriesDescriptionMetadata.c(a);
            a.item("IsCustomShapeStyleAllowed", "Boolean");
            a.item("IsCustomShapeMarkerStyleAllowed", "Boolean");
            a.item("FillMemberPath", "String");
            a.item("FillScale", "ExportedType:BrushScale");
            a.item("FillScale@mustSetInCode", "WebComponents;Blazor;React;Angular");
            a.item("FillScaleUseGlobalValues", "Boolean");
            a.item("ActualItemSearchMode", "ExportedType:string:ShapeItemSearchMode");
            a.item("ActualItemSearchMode@names", "Auto;ClosestBoundingBox;ClosestShape;ClosestPointOnClosestShape;None");
            a.item("ItemSearchMode", "ExportedType:string:ShapeItemSearchMode");
            a.item("ItemSearchMode@names", "Auto;ClosestBoundingBox;ClosestShape;ClosestPointOnClosestShape;None");
            a.item("ItemSearchThreshold", "Number:int");
            a.item("ItemSearchPointsThreshold", "Number:int");
            a.item("ShapeMemberPath", "String");
            a.item("HighlightedShapeMemberPath", "String");
            a.item("XAxisRef", "(w:XAxis,wf:XAxis)DataRef::object");
            a.item("XAxisRef@nameBinding", "true");
            a.item("YAxisRef", "(w:YAxis,wf:YAxis)DataRef::object");
            a.item("YAxisRef@nameBinding", "true");
            a.item("ShapeFilterResolution", "Number:double");
            a.item("AssigningShapeStyleRef", "EventRef::assigningShapeStyle");
            a.item("AssigningShapeMarkerStyleRef", "EventRef::assigningShapeMarkerStyle");
            a.item("StyleShapeRef", "EventRef::styleShape");
        }
        static d(a) {
            ShapeSeriesBaseDescriptionMetadata.b(a);
            a.ad("ShapeSeriesBase", ShapeSeriesBaseDescriptionMetadata.a);
        }
    }
    ShapeSeriesBaseDescriptionMetadata.$t = /*@__PURE__*/ markType(ShapeSeriesBaseDescriptionMetadata, 'ShapeSeriesBaseDescriptionMetadata');
    ShapeSeriesBaseDescriptionMetadata.a = null;
    return ShapeSeriesBaseDescriptionMetadata;
})();
