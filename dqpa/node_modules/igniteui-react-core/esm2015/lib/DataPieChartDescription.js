/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DataPieBaseChartDescription } from "./DataPieBaseChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataPieChartDescription = /*@__PURE__*/ (() => {
    class DataPieChartDescription extends DataPieBaseChartDescription {
        get_type() {
            return "DataPieChart";
        }
        constructor() {
            super();
            this.yd = 0;
            this.ye = 0;
            this.yl = null;
            this.yo = null;
            this.yi = null;
            this.yb = false;
            this.ym = null;
            this.yn = null;
            this.yk = null;
            this.yp = null;
            this.yj = null;
            this.yh = null;
        }
        get transitionInDuration() {
            return this.yd;
        }
        set transitionInDuration(a) {
            this.yd = a;
            this.g("TransitionInDuration");
        }
        get transitionOutDuration() {
            return this.ye;
        }
        set transitionOutDuration(a) {
            this.ye = a;
            this.g("TransitionOutDuration");
        }
        get transitionInEasingFunctionRef() {
            return this.yl;
        }
        set transitionInEasingFunctionRef(a) {
            this.yl = a;
            this.g("TransitionInEasingFunctionRef");
        }
        get transitionOutEasingFunctionRef() {
            return this.yo;
        }
        set transitionOutEasingFunctionRef(a) {
            this.yo = a;
            this.g("TransitionOutEasingFunctionRef");
        }
        get chartType() {
            return this.yi;
        }
        set chartType(a) {
            this.yi = a;
            this.g("ChartType");
        }
        get isTransitionInEnabled() {
            return this.yb;
        }
        set isTransitionInEnabled(a) {
            this.yb = a;
            this.g("IsTransitionInEnabled");
        }
        get transitionInMode() {
            return this.ym;
        }
        set transitionInMode(a) {
            this.ym = a;
            this.g("TransitionInMode");
        }
        get transitionInSpeedType() {
            return this.yn;
        }
        set transitionInSpeedType(a) {
            this.yn = a;
            this.g("TransitionInSpeedType");
        }
        get tooltipTemplateRef() {
            return this.yk;
        }
        set tooltipTemplateRef(a) {
            this.yk = a;
            this.g("TooltipTemplateRef");
        }
        get width() {
            return this.yp;
        }
        set width(a) {
            this.yp = a;
            this.g("Width");
        }
        get height() {
            return this.yj;
        }
        set height(a) {
            this.yj = a;
            this.g("Height");
        }
        get background() {
            return this.yh;
        }
        set background(a) {
            this.yh = a;
            this.g("Background");
        }
    }
    DataPieChartDescription.$t = /*@__PURE__*/ markType(DataPieChartDescription, 'DataPieChartDescription', DataPieBaseChartDescription.$);
    return DataPieChartDescription;
})();
