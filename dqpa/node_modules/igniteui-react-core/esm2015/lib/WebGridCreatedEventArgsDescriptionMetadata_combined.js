/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebGridCreatedEventArgsDescription } from "./WebGridCreatedEventArgsDescription";
import { WebHierarchicalGridDescriptionMetadata } from "./WebHierarchicalGridDescriptionMetadata";
import { WebBaseEventArgsDetailDescriptionMetadata } from "./WebBaseEventArgsDetailDescriptionMetadata";
import { WebGridCreatedEventArgsDetailDescription } from "./WebGridCreatedEventArgsDetailDescription";
import { WebDataCloneStrategyDescriptionMetadata } from "./WebDataCloneStrategyDescriptionMetadata";
import { WebClipboardOptionsDescriptionMetadata } from "./WebClipboardOptionsDescriptionMetadata";
import { WebGridResourceStringsDescriptionMetadata } from "./WebGridResourceStringsDescriptionMetadata";
import { WebFilteringExpressionsTreeDescriptionMetadata } from "./WebFilteringExpressionsTreeDescriptionMetadata";
import { WebPinningConfigDescriptionMetadata } from "./WebPinningConfigDescriptionMetadata";
import { WebFilteringStrategyDescriptionMetadata } from "./WebFilteringStrategyDescriptionMetadata";
import { WebGridSortingStrategyDescriptionMetadata } from "./WebGridSortingStrategyDescriptionMetadata";
import { WebSortingOptionsDescriptionMetadata } from "./WebSortingOptionsDescriptionMetadata";
import { WebSortingExpressionDescriptionMetadata } from "./WebSortingExpressionDescriptionMetadata";
import { WebForOfStateEventArgsDescriptionMetadata } from "./WebForOfStateEventArgsDescriptionMetadata";
import { WebFilteringExpressionsTreeEventArgsDescriptionMetadata } from "./WebFilteringExpressionsTreeEventArgsDescriptionMetadata";
import { WebGridScrollEventArgsDescriptionMetadata } from "./WebGridScrollEventArgsDescriptionMetadata";
import { WebGridCellEventArgsDescriptionMetadata } from "./WebGridCellEventArgsDescriptionMetadata";
import { WebGridRowEventArgsDescriptionMetadata } from "./WebGridRowEventArgsDescriptionMetadata";
import { WebGridFormGroupCreatedEventArgsDescriptionMetadata } from "./WebGridFormGroupCreatedEventArgsDescriptionMetadata";
import { WebGridValidationStatusEventArgsDescriptionMetadata } from "./WebGridValidationStatusEventArgsDescriptionMetadata";
import { WebRowSelectionEventArgsDescriptionMetadata } from "./WebRowSelectionEventArgsDescriptionMetadata";
import { WebColumnSelectionEventArgsDescriptionMetadata } from "./WebColumnSelectionEventArgsDescriptionMetadata";
import { WebPinColumnCancellableEventArgsDescriptionMetadata } from "./WebPinColumnCancellableEventArgsDescriptionMetadata";
import { WebPinColumnEventArgsDescriptionMetadata } from "./WebPinColumnEventArgsDescriptionMetadata";
import { WebGridEditEventArgsDescriptionMetadata } from "./WebGridEditEventArgsDescriptionMetadata";
import { WebGridEditDoneEventArgsDescriptionMetadata } from "./WebGridEditDoneEventArgsDescriptionMetadata";
import { WebColumnComponentEventArgsDescriptionMetadata } from "./WebColumnComponentEventArgsDescriptionMetadata";
import { WebColumnsAutoGeneratedEventArgsDescriptionMetadata } from "./WebColumnsAutoGeneratedEventArgsDescriptionMetadata";
import { WebSortingEventArgsDescriptionMetadata } from "./WebSortingEventArgsDescriptionMetadata";
import { WebSortingExpressionEventArgsDescriptionMetadata } from "./WebSortingExpressionEventArgsDescriptionMetadata";
import { WebFilteringEventArgsDescriptionMetadata } from "./WebFilteringEventArgsDescriptionMetadata";
import { WebRowDataEventArgsDescriptionMetadata } from "./WebRowDataEventArgsDescriptionMetadata";
import { WebRowDataCancelableEventArgsDescriptionMetadata } from "./WebRowDataCancelableEventArgsDescriptionMetadata";
import { WebColumnResizeEventArgsDescriptionMetadata } from "./WebColumnResizeEventArgsDescriptionMetadata";
import { WebGridContextMenuEventArgsDescriptionMetadata } from "./WebGridContextMenuEventArgsDescriptionMetadata";
import { WebColumnVisibilityChangingEventArgsDescriptionMetadata } from "./WebColumnVisibilityChangingEventArgsDescriptionMetadata";
import { WebColumnVisibilityChangedEventArgsDescriptionMetadata } from "./WebColumnVisibilityChangedEventArgsDescriptionMetadata";
import { WebColumnMovingStartEventArgsDescriptionMetadata } from "./WebColumnMovingStartEventArgsDescriptionMetadata";
import { WebColumnMovingEventArgsDescriptionMetadata } from "./WebColumnMovingEventArgsDescriptionMetadata";
import { WebColumnMovingEndEventArgsDescriptionMetadata } from "./WebColumnMovingEndEventArgsDescriptionMetadata";
import { WebGridKeydownEventArgsDescriptionMetadata } from "./WebGridKeydownEventArgsDescriptionMetadata";
import { WebRowDragStartEventArgsDescriptionMetadata } from "./WebRowDragStartEventArgsDescriptionMetadata";
import { WebRowDragEndEventArgsDescriptionMetadata } from "./WebRowDragEndEventArgsDescriptionMetadata";
import { WebGridClipboardEventEventArgsDescriptionMetadata } from "./WebGridClipboardEventEventArgsDescriptionMetadata";
import { WebComponentArrayDataValueChangedEventArgsDescriptionMetadata } from "./WebComponentArrayDataValueChangedEventArgsDescriptionMetadata";
import { WebRowToggleEventArgsDescriptionMetadata } from "./WebRowToggleEventArgsDescriptionMetadata";
import { WebPinRowEventArgsDescriptionMetadata } from "./WebPinRowEventArgsDescriptionMetadata";
import { WebActiveNodeChangeEventArgsDescriptionMetadata } from "./WebActiveNodeChangeEventArgsDescriptionMetadata";
import { WebGridToolbarExportEventArgsDescriptionMetadata } from "./WebGridToolbarExportEventArgsDescriptionMetadata";
import { WebGridSelectionRangeEventArgsDescriptionMetadata } from "./WebGridSelectionRangeEventArgsDescriptionMetadata";
import { VoidEventArgsDescriptionMetadata } from "./VoidEventArgsDescriptionMetadata";
import { WebForOfDataChangingEventArgsDescriptionMetadata } from "./WebForOfDataChangingEventArgsDescriptionMetadata";
import { WebRowIslandDescription } from "./WebRowIslandDescription";
/**
 * @hidden
 */
export let WebGridCreatedEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridCreatedEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridCreatedEventArgsDescriptionMetadata.a == null) {
                WebGridCreatedEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridCreatedEventArgsDescriptionMetadata.c(WebGridCreatedEventArgsDescriptionMetadata.a);
            }
            if (a.k(WebGridCreatedEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.ac(WebGridCreatedEventArgsDescriptionMetadata.a);
            WebGridCreatedEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:GridCreatedEventArgs");
            a.item("__packageNameWC", "String:grids");
            a.item("__skipModuleRegisterWebComponents", "Boolean");
            a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
            a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
            a.item("__marshalByValue", "Boolean");
            a.item("__skipSuffix", "Boolean");
            a.item("Detail", "ExportedType:WebGridCreatedEventArgsDetail");
        }
        static d(a) {
            WebGridCreatedEventArgsDescriptionMetadata.b(a);
            a.ae("WebGridCreatedEventArgs", () => new WebGridCreatedEventArgsDescription());
            a.ad("WebGridCreatedEventArgs", WebGridCreatedEventArgsDescriptionMetadata.a);
        }
    }
    WebGridCreatedEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridCreatedEventArgsDescriptionMetadata, 'WebGridCreatedEventArgsDescriptionMetadata');
    WebGridCreatedEventArgsDescriptionMetadata.a = null;
    return WebGridCreatedEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridCreatedEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridCreatedEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridCreatedEventArgsDetailDescriptionMetadata.a == null) {
                WebGridCreatedEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridCreatedEventArgsDetailDescriptionMetadata.c(WebGridCreatedEventArgsDetailDescriptionMetadata.a);
            }
            if (a.k(WebGridCreatedEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.ac(WebGridCreatedEventArgsDetailDescriptionMetadata.a);
            WebRowIslandDescriptionMetadata.d(a);
            WebHierarchicalGridDescriptionMetadata.d(a);
        }
        static c(a) {
            WebBaseEventArgsDetailDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:GridCreatedEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__skipModuleRegisterWebComponents", "Boolean");
            a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
            a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
            a.item("__marshalByValue", "Boolean");
            a.item("__skipSuffix", "Boolean");
            a.item("Owner", "ExportedType:WebRowIsland");
            a.item("ParentID", "Unknown");
            a.item("Grid", "ExportedType:WebHierarchicalGrid");
        }
        static d(a) {
            WebGridCreatedEventArgsDetailDescriptionMetadata.b(a);
            a.ae("WebGridCreatedEventArgsDetail", () => new WebGridCreatedEventArgsDetailDescription());
            a.ad("WebGridCreatedEventArgsDetail", WebGridCreatedEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebGridCreatedEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridCreatedEventArgsDetailDescriptionMetadata, 'WebGridCreatedEventArgsDetailDescriptionMetadata');
    WebGridCreatedEventArgsDetailDescriptionMetadata.a = null;
    return WebGridCreatedEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebRowIslandDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebRowIslandDescriptionMetadata extends Base {
        static b(a) {
            if (WebRowIslandDescriptionMetadata.a == null) {
                WebRowIslandDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebRowIslandDescriptionMetadata.c(WebRowIslandDescriptionMetadata.a);
            }
            if (a.k(WebRowIslandDescriptionMetadata.a)) {
                return;
            }
            a.ac(WebRowIslandDescriptionMetadata.a);
            WebDataCloneStrategyDescriptionMetadata.d(a);
            WebClipboardOptionsDescriptionMetadata.d(a);
            WebGridResourceStringsDescriptionMetadata.d(a);
            WebFilteringExpressionsTreeDescriptionMetadata.d(a);
            WebPinningConfigDescriptionMetadata.d(a);
            WebFilteringStrategyDescriptionMetadata.d(a);
            WebGridSortingStrategyDescriptionMetadata.d(a);
            WebSortingOptionsDescriptionMetadata.d(a);
            WebSortingExpressionDescriptionMetadata.d(a);
            WebGridCreatedEventArgsDescriptionMetadata.d(a);
            WebForOfStateEventArgsDescriptionMetadata.d(a);
            WebFilteringExpressionsTreeEventArgsDescriptionMetadata.d(a);
            WebGridScrollEventArgsDescriptionMetadata.d(a);
            WebGridCellEventArgsDescriptionMetadata.d(a);
            WebGridRowEventArgsDescriptionMetadata.d(a);
            WebGridFormGroupCreatedEventArgsDescriptionMetadata.d(a);
            WebGridValidationStatusEventArgsDescriptionMetadata.d(a);
            WebRowSelectionEventArgsDescriptionMetadata.d(a);
            WebColumnSelectionEventArgsDescriptionMetadata.d(a);
            WebPinColumnCancellableEventArgsDescriptionMetadata.d(a);
            WebPinColumnEventArgsDescriptionMetadata.d(a);
            WebGridEditEventArgsDescriptionMetadata.d(a);
            WebGridEditDoneEventArgsDescriptionMetadata.d(a);
            WebColumnComponentEventArgsDescriptionMetadata.d(a);
            WebColumnsAutoGeneratedEventArgsDescriptionMetadata.d(a);
            WebSortingEventArgsDescriptionMetadata.d(a);
            WebSortingExpressionEventArgsDescriptionMetadata.d(a);
            WebFilteringEventArgsDescriptionMetadata.d(a);
            WebRowDataEventArgsDescriptionMetadata.d(a);
            WebRowDataCancelableEventArgsDescriptionMetadata.d(a);
            WebColumnResizeEventArgsDescriptionMetadata.d(a);
            WebGridContextMenuEventArgsDescriptionMetadata.d(a);
            WebColumnVisibilityChangingEventArgsDescriptionMetadata.d(a);
            WebColumnVisibilityChangedEventArgsDescriptionMetadata.d(a);
            WebColumnMovingStartEventArgsDescriptionMetadata.d(a);
            WebColumnMovingEventArgsDescriptionMetadata.d(a);
            WebColumnMovingEndEventArgsDescriptionMetadata.d(a);
            WebGridKeydownEventArgsDescriptionMetadata.d(a);
            WebRowDragStartEventArgsDescriptionMetadata.d(a);
            WebRowDragEndEventArgsDescriptionMetadata.d(a);
            WebGridClipboardEventEventArgsDescriptionMetadata.d(a);
            WebComponentArrayDataValueChangedEventArgsDescriptionMetadata.d(a);
            WebRowToggleEventArgsDescriptionMetadata.d(a);
            WebPinRowEventArgsDescriptionMetadata.d(a);
            WebActiveNodeChangeEventArgsDescriptionMetadata.d(a);
            WebGridToolbarExportEventArgsDescriptionMetadata.d(a);
            WebGridSelectionRangeEventArgsDescriptionMetadata.d(a);
            VoidEventArgsDescriptionMetadata.d(a);
            WebForOfDataChangingEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:RowIsland");
            a.item("__tagNameWC", "String:igc-row-island");
            a.item("__packageNameWC", "String:grids");
            a.item("__skipModuleRegisterWebComponents", "Boolean");
            a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
            a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
            a.item("__manageCollectionInMarkup", "Boolean");
            a.item("__manageItemInMarkup", "Boolean");
            a.item("__mustUseNGParentAnchor", "Boolean");
            a.item("ChildDataKey", "String");
            a.item("ChildLayoutList", "Collection:WebRowIsland:RowIslandCollection:WebRowIsland");
            a.item("ActionStripComponents", "Collection:WebActionStrip:ActionStripCollection:WebActionStrip");
            a.item("ActionStripComponents@ngQueryList", "actionStripComponents");
            a.item("ExpandChildren", "Boolean");
            a.item("HasChildrenKey", "String");
            a.item("ShowExpandAll", "Boolean");
            a.item("BatchEditing", "Boolean");
            a.item("SnackbarDisplayTime", "Number:double");
            a.item("AutoGenerate", "Boolean");
            a.item("AutoGenerateExclude", "Array:string");
            a.item("Moving", "Boolean");
            a.item("EmptyGridTemplateRef", "(w:EmptyGridTemplate,wf:EmptyGridTemplate)TemplateRef::object");
            a.item("AddRowEmptyTemplateRef", "(w:AddRowEmptyTemplate,wf:AddRowEmptyTemplate)TemplateRef::object");
            a.item("LoadingGridTemplateRef", "(w:LoadingGridTemplate,wf:LoadingGridTemplate)TemplateRef::object");
            a.item("SummaryRowHeight", "Number:double");
            a.item("DataCloneStrategy", "ExportedType:WebDataCloneStrategy");
            a.item("ClipboardOptions", "ExportedType:WebClipboardOptions");
            a.item("RowClassesRef", "(w:RowClasses,wf:RowClasses)DataRef::object");
            a.item("RowStylesRef", "(w:RowStyles,wf:RowStyles)DataRef::object");
            a.item("PrimaryKey", "String");
            a.item("ColumnList", "Collection:WebColumn:ColumnCollection:WebColumn");
            a.item("ColumnList@ngQueryList", "columnList");
            a.item("DragGhostCustomTemplateRef", "(w:DragGhostCustomTemplate,wf:DragGhostCustomTemplate)TemplateRef::object");
            a.item("RowEditTextTemplateRef", "(w:RowEditTextTemplate,wf:RowEditTextTemplate)TemplateRef::object");
            a.item("RowAddTextTemplateRef", "(w:RowAddTextTemplate,wf:RowAddTextTemplate)TemplateRef::object");
            a.item("RowEditActionsTemplateRef", "(w:RowEditActionsTemplate,wf:RowEditActionsTemplate)TemplateRef::object");
            a.item("RowExpandedIndicatorTemplateRef", "(w:RowExpandedIndicatorTemplate,wf:RowExpandedIndicatorTemplate)TemplateRef::object");
            a.item("RowCollapsedIndicatorTemplateRef", "(w:RowCollapsedIndicatorTemplate,wf:RowCollapsedIndicatorTemplate)TemplateRef::object");
            a.item("HeaderExpandedIndicatorTemplateRef", "(w:HeaderExpandedIndicatorTemplate,wf:HeaderExpandedIndicatorTemplate)TemplateRef::object");
            a.item("HeaderCollapsedIndicatorTemplateRef", "(w:HeaderCollapsedIndicatorTemplate,wf:HeaderCollapsedIndicatorTemplate)TemplateRef::object");
            a.item("ExcelStyleHeaderIconTemplateRef", "(w:ExcelStyleHeaderIconTemplate,wf:ExcelStyleHeaderIconTemplate)TemplateRef::object");
            a.item("SortAscendingHeaderIconTemplateRef", "(w:SortAscendingHeaderIconTemplate,wf:SortAscendingHeaderIconTemplate)TemplateRef::object");
            a.item("SortDescendingHeaderIconTemplateRef", "(w:SortDescendingHeaderIconTemplate,wf:SortDescendingHeaderIconTemplate)TemplateRef::object");
            a.item("SortHeaderIconTemplateRef", "(w:SortHeaderIconTemplate,wf:SortHeaderIconTemplate)TemplateRef::object");
            a.item("Toolbar", "Collection:WebGridToolbar:GridToolbarCollection:WebGridToolbar");
            a.item("Toolbar@ngQueryList", "toolbar");
            a.item("PaginationComponents", "Collection:WebPaginator:PaginatorCollection:WebPaginator");
            a.item("PaginationComponents@ngQueryList", "paginationComponents");
            a.item("ResourceStrings", "ExportedType:WebGridResourceStrings");
            a.item("FilteringLogic", "ExportedType:string:FilteringLogic");
            a.item("FilteringLogic@names", "And;Or");
            a.item("FilteringExpressionsTree", "ExportedType:WebFilteringExpressionsTree");
            a.item("FilteringExpressionsTree@mustSetInCode", "WebComponents;Blazor");
            a.item("AdvancedFilteringExpressionsTree", "ExportedType:WebFilteringExpressionsTree");
            a.item("Locale", "String");
            a.item("PagingMode", "ExportedType:string:GridPagingMode");
            a.item("PagingMode@names", "Local;Remote");
            a.item("HideRowSelectors", "Boolean");
            a.item("RowDraggable", "Boolean");
            a.item("ValidationTrigger", "ExportedType:string:GridValidationTrigger");
            a.item("ValidationTrigger@stringUnion", "WebComponents;React");
            a.item("ValidationTrigger@names", "Change;Blur");
            a.item("RowEditable", "Boolean");
            a.item("Height", "String");
            a.item("Width", "String");
            a.item("RowHeight", "Number:double");
            a.item("ColumnWidth", "String");
            a.item("EmptyGridMessage", "String");
            a.item("IsLoading", "Boolean");
            a.item("ShouldGenerate", "Boolean");
            a.item("EmptyFilteredGridMessage", "String");
            a.item("Pinning", "ExportedType:WebPinningConfig");
            a.item("Pinning@mustSetInCode", "WebComponents;Blazor;React");
            a.item("AllowFiltering", "Boolean");
            a.item("AllowAdvancedFiltering", "Boolean");
            a.item("FilterMode", "ExportedType:string:FilterMode");
            a.item("FilterMode@stringUnion", "WebComponents;React");
            a.item("FilterMode@names", "QuickFilter;ExcelStyleFilter");
            a.item("SummaryPosition", "ExportedType:string:GridSummaryPosition");
            a.item("SummaryPosition@stringUnion", "WebComponents;React");
            a.item("SummaryPosition@names", "Top;Bottom");
            a.item("SummaryCalculationMode", "ExportedType:string:GridSummaryCalculationMode");
            a.item("SummaryCalculationMode@stringUnion", "WebComponents;React");
            a.item("SummaryCalculationMode@names", "RootLevelOnly;ChildLevelsOnly;RootAndChildLevels");
            a.item("ShowSummaryOnCollapse", "Boolean");
            a.item("FilterStrategy", "ExportedType:WebFilteringStrategy");
            a.item("SortStrategy", "ExportedType:WebGridSortingStrategy");
            a.item("SortingOptions", "ExportedType:WebSortingOptions");
            a.item("SelectedRows", "Array:object");
            a.item("HeadSelectorTemplateRef", "(w:HeadSelectorTemplate,wf:HeadSelectorTemplate)TemplateRef::object");
            a.item("RowSelectorTemplateRef", "(w:RowSelectorTemplate,wf:RowSelectorTemplate)TemplateRef::object");
            a.item("DragIndicatorIconTemplateRef", "(w:DragIndicatorIconTemplate,wf:DragIndicatorIconTemplate)TemplateRef::object");
            a.item("SortingExpressions", "Array:WebSortingExpressionDescription:SortingExpression");
            a.item("SortingExpressions@mustSetInCode", "WebComponents;Blazor;React");
            a.item("CellSelection", "ExportedType:string:GridSelectionMode");
            a.item("CellSelection@stringUnion", "WebComponents;React");
            a.item("CellSelection@names", "None;Single;Multiple;MultipleCascade");
            a.item("RowSelection", "ExportedType:string:GridSelectionMode");
            a.item("RowSelection@stringUnion", "WebComponents;React");
            a.item("RowSelection@names", "None;Single;Multiple;MultipleCascade");
            a.item("ColumnSelection", "ExportedType:string:GridSelectionMode");
            a.item("ColumnSelection@stringUnion", "WebComponents;React");
            a.item("ColumnSelection@names", "None;Single;Multiple;MultipleCascade");
            a.item("TotalRecords", "Number:double");
            a.item("SelectRowOnClick", "Boolean");
            a.item("Name", "String");
            a.item("GridCreatedRef", "EventRef::gridCreated:customEvent");
            a.item("GridInitializedRef", "EventRef::gridInitialized:customEvent");
            a.item("DataPreLoadRef", "EventRef::dataPreLoad:customEvent");
            a.item("FilteringExpressionsTreeChangeRef", "EventRef::filteringExpressionsTreeChange:customEvent");
            a.item("AdvancedFilteringExpressionsTreeChangeRef", "EventRef::advancedFilteringExpressionsTreeChange:customEvent");
            a.item("GridScrollRef", "EventRef::gridScroll:customEvent");
            a.item("CellClickRef", "EventRef::cellClick:customEvent");
            a.item("RowClickRef", "EventRef::rowClick:customEvent");
            a.item("FormGroupCreatedRef", "EventRef::formGroupCreated:customEvent");
            a.item("ValidationStatusChangeRef", "EventRef::validationStatusChange:customEvent");
            a.item("SelectedRef", "EventRef::selected:customEvent");
            a.item("RowSelectionChangingRef", "EventRef::rowSelectionChanging:customEvent");
            a.item("ColumnSelectionChangingRef", "EventRef::columnSelectionChanging:customEvent");
            a.item("ColumnPinRef", "EventRef::columnPin:customEvent");
            a.item("ColumnPinnedRef", "EventRef::columnPinned:customEvent");
            a.item("CellEditEnterRef", "EventRef::cellEditEnter:customEvent");
            a.item("CellEditExitRef", "EventRef::cellEditExit:customEvent");
            a.item("CellEditRef", "EventRef::cellEdit:customEvent");
            a.item("CellEditDoneRef", "EventRef::cellEditDone:customEvent");
            a.item("RowEditEnterRef", "EventRef::rowEditEnter:customEvent");
            a.item("RowEditRef", "EventRef::rowEdit:customEvent");
            a.item("RowEditDoneRef", "EventRef::rowEditDone:customEvent");
            a.item("RowEditExitRef", "EventRef::rowEditExit:customEvent");
            a.item("ColumnInitRef", "EventRef::columnInit:customEvent");
            a.item("ColumnsAutogeneratedRef", "EventRef::columnsAutogenerated:customEvent");
            a.item("SortingRef", "EventRef::sorting:customEvent");
            a.item("SortingDoneRef", "EventRef::sortingDone:customEvent");
            a.item("FilteringRef", "EventRef::filtering:customEvent");
            a.item("FilteringDoneRef", "EventRef::filteringDone:customEvent");
            a.item("RowAddedRef", "EventRef::rowAdded:customEvent");
            a.item("RowDeletedRef", "EventRef::rowDeleted:customEvent");
            a.item("RowDeleteRef", "EventRef::rowDelete:customEvent");
            a.item("RowAddRef", "EventRef::rowAdd:customEvent");
            a.item("ColumnResizedRef", "EventRef::columnResized:customEvent");
            a.item("ContextMenuRef", "EventRef::contextMenu:customEvent");
            a.item("DoubleClickRef", "EventRef::doubleClick:customEvent");
            a.item("ColumnVisibilityChangingRef", "EventRef::columnVisibilityChanging:customEvent");
            a.item("ColumnVisibilityChangedRef", "EventRef::columnVisibilityChanged:customEvent");
            a.item("ColumnMovingStartRef", "EventRef::columnMovingStart:customEvent");
            a.item("ColumnMovingRef", "EventRef::columnMoving:customEvent");
            a.item("ColumnMovingEndRef", "EventRef::columnMovingEnd:customEvent");
            a.item("GridKeydownRef", "EventRef::gridKeydown:customEvent");
            a.item("RowDragStartRef", "EventRef::rowDragStart:customEvent");
            a.item("RowDragEndRef", "EventRef::rowDragEnd:customEvent");
            a.item("GridCopyRef", "EventRef::gridCopy:customEvent");
            a.item("SelectedRowsChangeRef", "EventRef::selectedRowsChange:customEvent");
            a.item("RowToggleRef", "EventRef::rowToggle:customEvent");
            a.item("RowPinningRef", "EventRef::rowPinning:customEvent");
            a.item("RowPinnedRef", "EventRef::rowPinned:customEvent");
            a.item("ActiveNodeChangeRef", "EventRef::activeNodeChange:customEvent");
            a.item("SortingExpressionsChangeRef", "EventRef::sortingExpressionsChange:customEvent");
            a.item("ToolbarExportingRef", "EventRef::toolbarExporting:customEvent");
            a.item("RangeSelectedRef", "EventRef::rangeSelected:customEvent");
            a.item("RenderedRef", "EventRef::rendered:customEvent");
            a.item("DataChangingRef", "EventRef::dataChanging:customEvent");
            a.item("DataChangedRef", "EventRef::dataChanged:customEvent");
        }
        static d(a) {
            WebRowIslandDescriptionMetadata.b(a);
            a.ae("WebRowIsland", () => new WebRowIslandDescription());
            a.ad("WebRowIsland", WebRowIslandDescriptionMetadata.a);
        }
    }
    WebRowIslandDescriptionMetadata.$t = /*@__PURE__*/ markType(WebRowIslandDescriptionMetadata, 'WebRowIslandDescriptionMetadata');
    WebRowIslandDescriptionMetadata.a = null;
    return WebRowIslandDescriptionMetadata;
})();
