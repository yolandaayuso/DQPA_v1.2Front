/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "./type";
import { INativeUIElementFactory_$type } from "./INativeUIElementFactory";
import { DOMWindowBridge } from "./DOMWindowBridge";
import { NativeUIWindow } from "./NativeUIWindow";
import { NativeUIComponent } from "./NativeUIComponent";
import { GridBridge } from "./GridBridge";
import { NativeUIGrid } from "./NativeUIGrid";
import { AbsolutePanelBridge } from "./AbsolutePanelBridge";
import { NativeUIAbsolutePanel } from "./NativeUIAbsolutePanel";
import { IgcCheckboxBridge } from "./IgcCheckboxBridge";
import { NativeUICheckbox } from "./NativeUICheckbox";
import { IgcSliderBridge } from "./IgcSliderBridge";
import { NativeUISlider } from "./NativeUISlider";
import { IgcDropdownBridge } from "./IgcDropdownBridge";
import { NativeUIDropDown } from "./NativeUIDropDown";
import { SpanBridge } from "./SpanBridge";
import { NativeUILabel } from "./NativeUILabel";
import { IgcInputBridge } from "./IgcInputBridge";
import { NativeUIInput } from "./NativeUIInput";
import { IgcButtonBridge } from "./IgcButtonBridge";
import { NativeUIButton } from "./NativeUIButton";
import { IgcIconButtonBridge } from "./IgcIconButtonBridge";
import { NativeUIIconButton } from "./NativeUIIconButton";
import { DivBridge } from "./DivBridge";
import { NativeUIContent } from "./NativeUIContent";
/**
 * @hidden
 */
export let NativeUIInputsFactory = /*@__PURE__*/ (() => {
    class NativeUIInputsFactory extends Base {
        constructor() {
            super(...arguments);
            this.c = 0;
        }
        static get b() {
            if (NativeUIInputsFactory.a == null) {
                NativeUIInputsFactory.a = new NativeUIInputsFactory();
                NativeUIWindow.b = new DOMWindowBridge();
            }
            return NativeUIInputsFactory.a;
        }
        static n() {
            NativeUIComponent.as(NativeUIInputsFactory.b);
        }
        static o(a) {
            NativeUIInputsFactory.b.c = a;
            NativeUIComponent.as(NativeUIInputsFactory.b);
        }
        get flavor() {
            return this.c;
        }
        supportsComponent(a) {
            switch (a) {
                case 0: return true;
                case 1: return true;
                case 2: return true;
                case 3: return true;
                case 4: return true;
                case 5: return true;
                case 6: return true;
                case 7: return true;
                case 8: return false;
                case 9: return true;
                case 10: return true;
            }
            return false;
        }
        createComponentSync(a, b, c) {
            this.createComponent(a, b, c);
        }
        createComponent(a, b, c) {
            switch (b) {
                case 0:
                    this.g(a, c);
                    break;
                case 1:
                    this.e(a, c);
                    break;
                case 2:
                    this.k(a, c);
                    break;
                case 3:
                    this.l(a, c);
                    break;
                case 4:
                    this.h(a, c);
                    break;
                case 5:
                    this.m(a, c);
                    break;
                case 6:
                    this.f(a, c);
                    break;
                case 7:
                    this.i(a, c);
                    break;
                case 9:
                    this.d(a, c);
                    break;
                case 10:
                    this.j(a, c);
                    break;
                case 8: break;
            }
        }
        i(a, b) {
            let c = a;
            let d = c.createElement("div");
            d.setStyleProperty("display", "grid");
            d.setStyleProperty("border-style", "solid");
            d.setStyleProperty("border-width", "0px");
            d.setStyleProperty("grid-template-rows", "minmax(0, 1fr)");
            d.setStyleProperty("grid-template-columns", "minmax(0, 1fr)");
            let e = new GridBridge();
            let f = new NativeUIGrid();
            f.an = d;
            f.d = e;
            b(f);
        }
        d(a, b) {
            let c = a;
            let d = c.createElement("div");
            let e = new AbsolutePanelBridge();
            let f = new NativeUIAbsolutePanel();
            f.an = d;
            f.d = e;
            b(f);
        }
        f(a, b) {
            let c = a;
            let d = c.createElement("igc-checkbox");
            let e = new IgcCheckboxBridge();
            let f = new NativeUICheckbox();
            f.an = d;
            f.d = e;
            b(f);
        }
        m(a, b) {
            let c = a;
            let d = c.createElement("igc-slider");
            d.setProperty("hideTooltip", true);
            let e = new IgcSliderBridge();
            let f = new NativeUISlider();
            f.an = d;
            f.d = e;
            b(f);
        }
        h(a, b) {
            let c = a;
            let d = c.createElement("igc-dropdown");
            let e = c.createElement("igc-input");
            e.setAttribute("slot", "target");
            d.listen("igcChange", (ev_) => {
                let f = ev_.originalEvent.detail.value;
                e.setProperty("value", f);
            });
            d.append(e);
            let f = new IgcDropdownBridge(c);
            let g = new NativeUIDropDown();
            g.an = d;
            g.d = f;
            b(g);
        }
        l(a, b) {
            let c = a;
            let d = c.createElement("span");
            let e = new SpanBridge();
            let f = new NativeUILabel();
            f.an = d;
            f.d = e;
            b(f);
        }
        k(a, b) {
            let c = a;
            let d = c.createElement("igc-input");
            let e = new IgcInputBridge();
            let f = new NativeUIInput();
            f.an = d;
            f.d = e;
            b(f);
        }
        e(a, b) {
            let c = a;
            let d = c.createElement("igc-button");
            let e = new IgcButtonBridge();
            let f = new NativeUIButton();
            f.an = d;
            f.d = e;
            b(f);
        }
        j(a, b) {
            let c = a;
            let d = c.createElement("igc-icon-button");
            let e = new IgcIconButtonBridge();
            let f = new NativeUIIconButton();
            f.an = d;
            f.d = e;
            b(f);
        }
        g(a, b) {
            let c = a;
            let d = c.createElement("div");
            d.setStyleProperty("display", "grid");
            d.setStyleProperty("border-style", "solid");
            d.setStyleProperty("border-width", "0px");
            d.setStyleProperty("grid-template-rows", "minmax(0, 1fr)");
            d.setStyleProperty("grid-template-columns", "minmax(0, 1fr)");
            let e = new DivBridge();
            let f = new NativeUIContent();
            f.an = d;
            f.d = e;
            b(f);
        }
    }
    NativeUIInputsFactory.$t = /*@__PURE__*/ markType(NativeUIInputsFactory, 'NativeUIInputsFactory', Base.$, [INativeUIElementFactory_$type]);
    NativeUIInputsFactory.a = null;
    return NativeUIInputsFactory;
})();
