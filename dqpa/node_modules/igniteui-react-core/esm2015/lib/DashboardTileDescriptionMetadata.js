/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { DashboardTileChangingContentEventArgsDescriptionMetadata } from "./DashboardTileChangingContentEventArgsDescriptionMetadata";
import { DashboardTileFilterStringErrorsParsingEventArgsDescriptionMetadata } from "./DashboardTileFilterStringErrorsParsingEventArgsDescriptionMetadata";
import { DashboardTileDescription } from "./DashboardTileDescription";
/**
 * @hidden
 */
export let DashboardTileDescriptionMetadata = /*@__PURE__*/ (() => {
    class DashboardTileDescriptionMetadata extends Base {
        static b(a) {
            if (DashboardTileDescriptionMetadata.a == null) {
                DashboardTileDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DashboardTileDescriptionMetadata.c(DashboardTileDescriptionMetadata.a);
            }
            if (a.k(DashboardTileDescriptionMetadata.a)) {
                return;
            }
            a.ac(DashboardTileDescriptionMetadata.a);
            DashboardTileChangingContentEventArgsDescriptionMetadata.d(a);
            DashboardTileFilterStringErrorsParsingEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("Customizations", "Collection:DashboardTileCustomization:DashboardTileCustomizationCollection:DashboardTileCustomization");
            a.item("TileTitle", "String");
            a.item("InitialSortDescriptions", "Collection:DashboardTileSortDescription:DashboardTileSortDescriptionCollection:DashboardTileSortDescription");
            a.item("InitialGroupSortDescriptions", "Collection:DashboardTileSortDescription:DashboardTileSortDescriptionCollection:DashboardTileSortDescription");
            a.item("InitialGroupDescriptions", "Collection:DashboardTileSortDescription:DashboardTileSortDescriptionCollection:DashboardTileSortDescription");
            a.item("InitialFilterExpressions", "Collection:FilterExpression:FilterExpressionCollection:FilterExpression");
            a.item("InitialHighlightFilterExpressions", "Collection:FilterExpression:FilterExpressionCollection:FilterExpression");
            a.item("InitialSummaryDescriptions", "Collection:DashboardTileSummaryDescription:DashboardTileSummaryDescriptionCollection:DashboardTileSummaryDescription");
            a.item("InitialSorts", "String");
            a.item("GroupSorts", "String");
            a.item("InitialGroups", "String");
            a.item("InitialFilter", "String");
            a.item("InitialHighlightFilter", "String");
            a.item("InitialSummaries", "String");
            a.item("SortDescriptions", "Collection:DashboardTileSortDescription:DashboardTileSortDescriptionCollection:DashboardTileSortDescription");
            a.item("GroupSortDescriptions", "Collection:DashboardTileSortDescription:DashboardTileSortDescriptionCollection:DashboardTileSortDescription");
            a.item("GroupDescriptions", "Collection:DashboardTileSortDescription:DashboardTileSortDescriptionCollection:DashboardTileSortDescription");
            a.item("FilterExpressions", "Collection:FilterExpression:FilterExpressionCollection:FilterExpression");
            a.item("HighlightFilterExpressions", "Collection:FilterExpression:FilterExpressionCollection:FilterExpression");
            a.item("SummaryDescriptions", "Collection:DashboardTileSummaryDescription:DashboardTileSummaryDescriptionCollection:DashboardTileSummaryDescription");
            a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:DataSource)DataRef::object");
            a.item("DataSource", "(w:ItemsSource,xam:ItemsSource)ExportedType:BaseDataSource:BaseDataSource");
            a.item("HighlightedDataSourceRef", "(w:HighlightedItemsSource,xam:HighlightedItemsSource,wf:HighlightedDataSource)DataRef::object");
            a.item("HighlightedDataSource", "(w:HighlightedItemsSource,xam:HighlightedItemsSource)ExportedType:BaseDataSource:BaseDataSource");
            a.item("ShouldDisplayMockData", "Boolean");
            a.item("ShouldAvoidAxisAnnotationCollisions", "Boolean");
            a.item("TrendLineType", "ExportedType:string:TrendLineType");
            a.item("TrendLineType@names", "None;LinearFit;QuadraticFit;CubicFit;QuarticFit;QuinticFit;LogarithmicFit;ExponentialFit;PowerLawFit;SimpleAverage;ExponentialAverage;ModifiedAverage;CumulativeAverage;WeightedAverage");
            a.item("ShouldUseSkeletonStyleForMockData", "Boolean");
            a.item("HighlightedValuesDisplayMode", "ExportedType:string:SeriesHighlightedValuesDisplayMode");
            a.item("HighlightedValuesDisplayMode@names", "Auto;Hidden;Overlay");
            a.item("IncludedProperties", "Array:string");
            a.item("ValidVisualizationTypes", "Array:string:DashboardTileVisualizationType");
            a.item("ValidVisualizationTypes@names", "Auto;AreaChart;BarChart;BubbleChart;BulletGraph;CandlestickChart;ChoroplethMap;RadialGauge;ColumnChart;DoughnutChart;FunnelChart;Grid;HeatmapMap;HighDensityMap;KPI;LinearGauge;LineChart;Map;OHLCChart;PieChart;PolarChart;RadialLineChart;ScatterMap;ScatterChart;SparklineChart;SplineAreaChart;SplineChart;StackedAreaChart;StackedBarChart;StackedColumnChart;StepAreaChart;StepLineChart;TextGauge;TextView;TimeSeriesChart;Treemap");
            a.item("ExcludedProperties", "Array:string");
            a.item("Brushes", "BrushCollection:string");
            a.item("Outlines", "BrushCollection:string");
            a.item("SelectedSeriesItems", "Collection:ChartSelection:ChartSelectedItemCollection:ChartSelection");
            a.item("ActualBrushes", "BrushCollection:string");
            a.item("ActualOutlines", "BrushCollection:string");
            a.item("CategoryAxisMajorStroke", "Brush");
            a.item("ValueLines", "Collection:string:ValueModeCollection:ValueLayerValueMode");
            a.item("ValueLines@names", "Auto;Minimum;Maximum;Average;GlobalMinimum;GlobalMaximum;GlobalAverage");
            a.item("ValueLinesBrushes", "BrushCollection:string");
            a.item("AutoCalloutsVisible", "Boolean");
            a.item("CrosshairsAnnotationEnabled", "Boolean");
            a.item("FinalValueAnnotationsVisible", "Boolean");
            a.item("CrosshairsDisplayMode", "ExportedType:string:CrosshairsDisplayMode");
            a.item("CrosshairsDisplayMode@names", "Auto;None;Horizontal;Vertical;Both");
            a.item("VisualizationType", "ExportedType:string:DashboardTileVisualizationType");
            a.item("VisualizationType@names", "Auto;AreaChart;BarChart;BubbleChart;BulletGraph;CandlestickChart;ChoroplethMap;RadialGauge;ColumnChart;DoughnutChart;FunnelChart;Grid;HeatmapMap;HighDensityMap;KPI;LinearGauge;LineChart;Map;OHLCChart;PieChart;PolarChart;RadialLineChart;ScatterMap;ScatterChart;SparklineChart;SplineAreaChart;SplineChart;StackedAreaChart;StackedBarChart;StackedColumnChart;StepAreaChart;StepLineChart;TextGauge;TextView;TimeSeriesChart;Treemap");
            a.item("ValidVisualizationTypePriorityThreshold", "Number:double");
            a.item("BaseTheme", "ExportedType:string:BaseControlTheme");
            a.item("BaseTheme@names", "Default;DenaliLight;MaterialLight;SlingshotLight;SlingshotDark;RevealLight;RevealDark");
            a.item("Density", "ExportedType:string:ControlDisplayDensity");
            a.item("Density@names", "Auto;Comfortable;Cosy;Compact;Minimal");
            a.item("BackgroundColor", "Brush");
            a.item("ChangingContentRef", "EventRef::changingContent");
            a.item("FilterStringErrorsParsingRef", "EventRef::filterStringErrorsParsing");
            DashboardTileDescriptionMetadata.e(a);
        }
        static d(a) {
            DashboardTileDescriptionMetadata.b(a);
            a.ae("DashboardTile", () => new DashboardTileDescription());
            a.ad("DashboardTile", DashboardTileDescriptionMetadata.a);
        }
        static e(a) {
            a.item("_qualifiedName", "String:Infragistics.Controls.Dashboards.XamDashboardTile");
            a.item("Width", "(w:Width/DimensionTransform,xam:Width/DimensionTransform)String");
            a.item("Height", "(w:Height/DimensionTransform,xam:Height/DimensionTransform)String");
        }
    }
    DashboardTileDescriptionMetadata.$t = /*@__PURE__*/ markType(DashboardTileDescriptionMetadata, 'DashboardTileDescriptionMetadata');
    DashboardTileDescriptionMetadata.a = null;
    return DashboardTileDescriptionMetadata;
})();
