/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let ToolActionInfoDescription = /*@__PURE__*/ (() => {
    class ToolActionInfoDescription extends Description {
        get_type() {
            return "ToolActionInfo";
        }
        get type() {
            return this.get_type();
        }
        constructor() {
            super();
            this.av = null;
            this.ap = null;
            this.an = null;
            this.ao = null;
            this.z = 0;
            this.aa = 0;
            this.y = 0;
            this.ab = 0;
            this.au = null;
            this.ay = null;
            this.aw = null;
            this.at = null;
            this.as = null;
            this.u = 0;
            this.v = 0;
            this.w = 0;
            this.t = 0;
            this.x = 0;
            this.s = 0;
            this.n = false;
            this.o = false;
            this.ax = null;
            this.ar = null;
            this.m = false;
            this.aq = null;
            this.h = null;
            this.i = null;
        }
        get parentId() {
            return this.av;
        }
        set parentId(a) {
            this.av = a;
            this.g("ParentId");
        }
        get commandId() {
            return this.ap;
        }
        set commandId(a) {
            this.ap = a;
            this.g("CommandId");
        }
        get commandArgument() {
            return this.an;
        }
        set commandArgument(a) {
            this.an = a;
            this.g("CommandArgument");
        }
        get commandArgumentValueRef() {
            return this.ao;
        }
        set commandArgumentValueRef(a) {
            this.ao = a;
            this.g("CommandArgumentValueRef");
        }
        get paddingLeft() {
            return this.z;
        }
        set paddingLeft(a) {
            this.z = a;
            this.g("PaddingLeft");
        }
        get paddingRight() {
            return this.aa;
        }
        set paddingRight(a) {
            this.aa = a;
            this.g("PaddingRight");
        }
        get paddingBottom() {
            return this.y;
        }
        set paddingBottom(a) {
            this.y = a;
            this.g("PaddingBottom");
        }
        get paddingTop() {
            return this.ab;
        }
        set paddingTop(a) {
            this.ab = a;
            this.g("PaddingTop");
        }
        get name() {
            return this.au;
        }
        set name(a) {
            this.au = a;
            this.g("Name");
        }
        get title() {
            return this.ay;
        }
        set title(a) {
            this.ay = a;
            this.g("Title");
        }
        get subtitle() {
            return this.aw;
        }
        set subtitle(a) {
            this.aw = a;
            this.g("Subtitle");
        }
        get iconName() {
            return this.at;
        }
        set iconName(a) {
            this.at = a;
            this.g("IconName");
        }
        get iconCollectionName() {
            return this.as;
        }
        set iconCollectionName(a) {
            this.as = a;
            this.g("IconCollectionName");
        }
        get iconViewBoxLeft() {
            return this.u;
        }
        set iconViewBoxLeft(a) {
            this.u = a;
            this.g("IconViewBoxLeft");
        }
        get iconViewBoxTop() {
            return this.v;
        }
        set iconViewBoxTop(a) {
            this.v = a;
            this.g("IconViewBoxTop");
        }
        get iconViewBoxWidth() {
            return this.w;
        }
        set iconViewBoxWidth(a) {
            this.w = a;
            this.g("IconViewBoxWidth");
        }
        get iconViewBoxHeight() {
            return this.t;
        }
        set iconViewBoxHeight(a) {
            this.t = a;
            this.g("IconViewBoxHeight");
        }
        get iconWidth() {
            return this.x;
        }
        set iconWidth(a) {
            this.x = a;
            this.g("IconWidth");
        }
        get iconHeight() {
            return this.s;
        }
        set iconHeight(a) {
            this.s = a;
            this.g("IconHeight");
        }
        get isDisabled() {
            return this.n;
        }
        set isDisabled(a) {
            this.n = a;
            this.g("IsDisabled");
        }
        get isHighlighted() {
            return this.o;
        }
        set isHighlighted(a) {
            this.o = a;
            this.g("IsHighlighted");
        }
        get textColor() {
            return this.ax;
        }
        set textColor(a) {
            this.ax = a;
            this.g("TextColor");
        }
        get disabledTextColor() {
            return this.ar;
        }
        set disabledTextColor(a) {
            this.ar = a;
            this.g("DisabledTextColor");
        }
        get closeOnExecute() {
            return this.m;
        }
        set closeOnExecute(a) {
            this.m = a;
            this.g("CloseOnExecute");
        }
        get density() {
            return this.aq;
        }
        set density(a) {
            this.aq = a;
            this.g("Density");
        }
        get actions() {
            return this.h;
        }
        set actions(a) {
            this.h = a;
            this.g("Actions");
        }
        get contextBindings() {
            return this.i;
        }
        set contextBindings(a) {
            this.i = a;
            this.g("ContextBindings");
        }
    }
    ToolActionInfoDescription.$t = /*@__PURE__*/ markType(ToolActionInfoDescription, 'ToolActionInfoDescription', Description.$);
    ToolActionInfoDescription.__marshalByValue = true;
    ToolActionInfoDescription.__marshalByValueAlias = "ToolActionInfo";
    return ToolActionInfoDescription;
})();
