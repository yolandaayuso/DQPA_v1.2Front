/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { SliceClickEventArgsDescriptionMetadata } from "./SliceClickEventArgsDescriptionMetadata";
import { HoleDimensionsChangedEventArgsDescriptionMetadata } from "./HoleDimensionsChangedEventArgsDescriptionMetadata";
import { DoughnutChartDescription } from "./DoughnutChartDescription";
/**
 * @hidden
 */
export let DoughnutChartDescriptionMetadata = /*@__PURE__*/ (() => {
    class DoughnutChartDescriptionMetadata extends Base {
        static e(a) {
            a.item("DataSourceRef", "(w:ItemsSource)DataRef:String");
            a.item("_qualifiedName", "String:Infragistics.Controls.Charts.XamDoughnutChart");
            a.item("Background", "(wf:BackColor/ColorTransform)Brush");
            a.item("Width", "(w:Width/DimensionTransform,xam:Width/DimensionTransform)String");
            a.item("Height", "(w:Height/DimensionTransform,xam:Height/DimensionTransform)String");
        }
        static b(a) {
            if (DoughnutChartDescriptionMetadata.a == null) {
                DoughnutChartDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DoughnutChartDescriptionMetadata.c(DoughnutChartDescriptionMetadata.a);
            }
            if (a.k(DoughnutChartDescriptionMetadata.a)) {
                return;
            }
            a.ac(DoughnutChartDescriptionMetadata.a);
            SliceClickEventArgsDescriptionMetadata.d(a);
            HoleDimensionsChangedEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("AllowSliceSelection", "Boolean");
            a.item("IsSurfaceInteractionDisabled", "Boolean");
            a.item("AllowSliceExplosion", "Boolean");
            a.item("Series", "Collection:RingSeriesBase:RingSeriesCollection:RingSeriesBase");
            a.item("InnerExtent", "Number:double");
            a.item("SelectedSliceFill", "(w:SelectedStyle.Fill,wf:SelectedSliceFill)String");
            a.item("SelectedSliceStroke", "(w:SelectedStyle.Stroke,wf:SelectedSliceStroke)String");
            a.item("SelectedSliceStrokeThickness", "(w:SelectedStyle.StrokeThickness,wf:SelectedSliceStrokeThickness)Number:double");
            a.item("SelectedSliceOpacity", "(w:SelectedStyle.Opacity,wf:SelectedSliceOpacity)Number:double");
            a.item("PixelScalingRatio", "Number:double");
            a.item("ActualPixelScalingRatio", "Number:double");
            a.item("SliceClickRef", "EventRef::sliceClick");
            a.item("HoleDimensionsChangedRef", "EventRef::holeDimensionsChanged");
            DoughnutChartDescriptionMetadata.e(a);
        }
        static d(a) {
            DoughnutChartDescriptionMetadata.b(a);
            a.ae("DoughnutChart", () => new DoughnutChartDescription());
            a.ad("DoughnutChart", DoughnutChartDescriptionMetadata.a);
        }
    }
    DoughnutChartDescriptionMetadata.$t = /*@__PURE__*/ markType(DoughnutChartDescriptionMetadata, 'DoughnutChartDescriptionMetadata');
    DoughnutChartDescriptionMetadata.a = null;
    return DoughnutChartDescriptionMetadata;
})();
