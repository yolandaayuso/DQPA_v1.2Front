/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { TreemapNodeStylingEventArgsDescriptionMetadata } from "./TreemapNodeStylingEventArgsDescriptionMetadata";
import { TreemapNodePointerEventArgsDescriptionMetadata } from "./TreemapNodePointerEventArgsDescriptionMetadata";
import { TreemapDescription } from "./TreemapDescription";
/**
 * @hidden
 */
export let TreemapDescriptionMetadata = /*@__PURE__*/ (() => {
    class TreemapDescriptionMetadata extends Base {
        static b(a) {
            if (TreemapDescriptionMetadata.a == null) {
                TreemapDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                TreemapDescriptionMetadata.c(TreemapDescriptionMetadata.a);
            }
            if (a.k(TreemapDescriptionMetadata.a)) {
                return;
            }
            a.ac(TreemapDescriptionMetadata.a);
            TreemapNodeStylingEventArgsDescriptionMetadata.d(a);
            TreemapNodePointerEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("ValueMemberPath", "String");
            a.item("RootTitle", "String");
            a.item("BreadcrumbSequence", "String");
            a.item("ParentIdMemberPath", "String");
            a.item("LabelMemberPath", "String");
            a.item("CustomValueMemberPath", "String");
            a.item("IdMemberPath", "String");
            a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,j:dataSource,wf:ItemsSource)DataRef::object");
            a.item("HighlightedDataSourceRef", "(w:HighlightedItemsSource,xam:HighlightedItemsSource,j:highlightedDataSource,wf:HighlightedItemsSource)DataRef::object");
            a.item("HighlightedValueMemberPath", "String");
            a.item("HighlightedValueOpacity", "Number:double");
            a.item("HighlightedValuesDisplayMode", "ExportedType:string:TreemapHighlightedValueDisplayMode");
            a.item("HighlightedValuesDisplayMode@names", "Auto;Overlay;Hidden");
            a.item("FillBrushes", "BrushCollection:string");
            a.item("StyleMappings", "Collection:TreemapNodeStyleMapping:TreemapNodeStyleMappingCollection:TreemapNodeStyleMapping");
            a.item("FillScaleMode", "ExportedType:string:TreemapFillScaleMode");
            a.item("FillScaleMode@names", "Sum;GlobalSum;Value;GlobalValue");
            a.item("IsFillScaleLogarithmic", "Boolean");
            a.item("FillScaleLogarithmBase", "Number:int");
            a.item("FillScaleMinimumValue", "Number:double");
            a.item("FillScaleMaximumValue", "Number:double");
            a.item("LabelVerticalFitMode", "ExportedType:string:TreemapLabelVerticalFitMode");
            a.item("LabelVerticalFitMode@names", "Auto;Show;Hide");
            a.item("LabelHorizontalFitMode", "ExportedType:string:TreemapLabelHorizontalFitMode");
            a.item("LabelHorizontalFitMode@names", "Auto;Ellipsis;Hide");
            a.item("OverlayHeaderHoverBackground", "Brush");
            a.item("HeaderHoverBackground", "Brush");
            a.item("HeaderBackground", "Brush");
            a.item("OverlayHeaderBackground", "Brush");
            a.item("HeaderTextColor", "Brush");
            a.item("HeaderDarkTextColor", "Brush");
            a.item("TextColor", "Brush");
            a.item("DarkTextColor", "Brush");
            a.item("HeaderHoverTextColor", "Brush");
            a.item("HeaderHoverDarkTextColor", "Brush");
            a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
            a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
            a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontFamily/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
            a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontFamily/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
            a.item("HeaderFontFamily", "(w:HeaderFontFamily/FontFamilyTransform,xam:HeaderFontFamily,wf:HeaderFontFamily,web:headerTextStyle/FontFamilyTransform)String");
            a.item("HeaderFontSize", "(w:HeaderFontSize,xam:HeaderFontSize,wf:HeaderFontSize,web:headerTextStyle/FontSizeTransform)Number:double");
            a.item("HeaderFontStyle", "(w:HeaderFontStyle/FontStyleTransform,xam:HeaderFontFamily/FontStyleTransform,wf:HeaderFontFamily/FontStyleTransform,web:headerTextStyle/FontStyleTransform)String");
            a.item("HeaderFontWeight", "(w:HeaderFontWeight/FontWeightTransform,xam:HeaderFontFamily/FontWeightTransform,wf:HeaderFontFamily/FontWeightTransform,web:headerTextStyle/FontWeightTransform)String");
            a.item("HeaderDisplayMode", "ExportedType:string:TreemapHeaderDisplayMode");
            a.item("HeaderDisplayMode@names", "Auto;Header;Overlay");
            a.item("HeaderLabelLeftMargin", "Number:double");
            a.item("HeaderLabelTopMargin", "Number:double");
            a.item("HeaderLabelRightMargin", "Number:double");
            a.item("HeaderLabelBottomMargin", "Number:double");
            a.item("OverlayHeaderLabelLeftMargin", "Number:double");
            a.item("OverlayHeaderLabelTopMargin", "Number:double");
            a.item("OverlayHeaderLabelRightMargin", "Number:double");
            a.item("OverlayHeaderLabelBottomMargin", "Number:double");
            a.item("LabelLeftMargin", "Number:double");
            a.item("LabelTopMargin", "Number:double");
            a.item("LabelRightMargin", "Number:double");
            a.item("LabelBottomMargin", "Number:double");
            a.item("ParentNodeLeftMargin", "Number:double");
            a.item("ParentNodeTopMargin", "Number:double");
            a.item("ParentNodeRightMargin", "Number:double");
            a.item("ParentNodeBottomMargin", "Number:double");
            a.item("ParentNodeLeftPadding", "Number:double");
            a.item("ParentNodeTopPadding", "Number:double");
            a.item("ParentNodeRightPadding", "Number:double");
            a.item("ParentNodeBottomPadding", "Number:double");
            a.item("LabelHorizontalAlignment", "ExportedType:string:HorizontalAlignment");
            a.item("LabelHorizontalAlignment@names", "Left;Center;Right;Stretch");
            a.item("LabelVerticalAlignment", "ExportedType:string:VerticalAlignment");
            a.item("LabelVerticalAlignment@names", "Top;Center;Bottom;Stretch");
            a.item("HeaderHeight", "Number:double");
            a.item("Outline", "Brush");
            a.item("StrokeThickness", "Number:double");
            a.item("NodeOpacity", "Number:double");
            a.item("LayoutOrientation", "ExportedType:string:TreemapOrientation");
            a.item("LayoutOrientation@names", "Horizontal;Vertical");
            a.item("LayoutType", "ExportedType:string:TreemapLayoutType");
            a.item("LayoutType@names", "Squarified;SliceAndDice;Stripped");
            a.item("MinimumDisplaySize", "Number:double");
            a.item("TransitionDuration", "Number:int");
            a.item("PixelScalingRatio", "Number:double");
            a.item("ActualPixelScalingRatio", "Number:double");
            a.item("InteractionPixelScalingRatio", "Number:double");
            a.item("ActualInteractionPixelScalingRatio", "Number:double");
            a.item("HighlightingTransitionDuration", "Number:int");
            a.item("HighlightingMode", "ExportedType:string:TreemapHighlightingMode");
            a.item("HighlightingMode@names", "Auto;None;Brighten;FadeOthers");
            a.item("ActualHighlightingMode", "ExportedType:string:TreemapHighlightingMode");
            a.item("ActualHighlightingMode@names", "Auto;None;Brighten;FadeOthers");
            a.item("HighlightingFadeOpacity", "Number:double");
            a.item("FocusItemRef", "(w:FocusItem,wf:FocusItem)DataRef");
            a.item("NodeStylingRef", "EventRef::nodeStyling");
            a.item("NodeRenderStylingRef", "EventRef::nodeRenderStyling");
            a.item("NodePointerOverRef", "EventRef::nodePointerOver");
            a.item("NodePointerEnterRef", "EventRef::nodePointerEnter");
            a.item("NodePointerLeaveRef", "EventRef::nodePointerLeave");
            a.item("NodePointerPressedRef", "EventRef::nodePointerPressed");
            a.item("NodePointerReleasedRef", "EventRef::nodePointerReleased");
            TreemapDescriptionMetadata.e(a);
        }
        static d(a) {
            TreemapDescriptionMetadata.b(a);
            a.ae("Treemap", () => new TreemapDescription());
            a.ad("Treemap", TreemapDescriptionMetadata.a);
        }
        static e(a) {
            a.item("_qualifiedName", "String:Infragistics.Controls.Charts.XamTreemap");
            a.item("Width", "(w:Width/DimensionTransform,xam:Width/DimensionTransform)String");
            a.item("Height", "(w:Height/DimensionTransform,xam:Height/DimensionTransform)String");
            a.item("Background", "(wf:BackColor/ColorTransform)Brush");
        }
    }
    TreemapDescriptionMetadata.$t = /*@__PURE__*/ markType(TreemapDescriptionMetadata, 'TreemapDescriptionMetadata');
    TreemapDescriptionMetadata.a = null;
    return TreemapDescriptionMetadata;
})();
