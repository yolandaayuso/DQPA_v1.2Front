/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { SortIndicatorRenderCompletedEventArgsDescriptionMetadata } from "./SortIndicatorRenderCompletedEventArgsDescriptionMetadata";
import { DataGridSortIndicatorDescription } from "./DataGridSortIndicatorDescription";
/**
 * @hidden
 */
export let DataGridSortIndicatorDescriptionMetadata = /*@__PURE__*/ (() => {
    class DataGridSortIndicatorDescriptionMetadata extends Base {
        static b(a) {
            if (DataGridSortIndicatorDescriptionMetadata.a == null) {
                DataGridSortIndicatorDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DataGridSortIndicatorDescriptionMetadata.c(DataGridSortIndicatorDescriptionMetadata.a);
            }
            if (a.k(DataGridSortIndicatorDescriptionMetadata.a)) {
                return;
            }
            a.ac(DataGridSortIndicatorDescriptionMetadata.a);
            SortIndicatorRenderCompletedEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("SortDirection", "ExportedType:string:ColumnSortDirection");
            a.item("SortDirection@names", "None;Ascending;Descending");
            a.item("IconColor", "Brush");
            a.item("IsAnimationEnabled", "Boolean");
            a.item("PixelScalingRatio", "Number:double");
            a.item("ActualPixelScalingRatio", "Number:double");
            a.item("SortIndicatorStyle", "ExportedType:string:SortIndicatorStyle");
            a.item("SortIndicatorStyle@names", "Default;FadingUpDownArrows;FadingSimpleUpDownArrows;Unset");
            a.item("RenderCompletedRef", "EventRef::renderCompleted");
        }
        static d(a) {
            DataGridSortIndicatorDescriptionMetadata.b(a);
            a.ae("DataGridSortIndicator", () => new DataGridSortIndicatorDescription());
            a.ad("DataGridSortIndicator", DataGridSortIndicatorDescriptionMetadata.a);
        }
    }
    DataGridSortIndicatorDescriptionMetadata.$t = /*@__PURE__*/ markType(DataGridSortIndicatorDescriptionMetadata, 'DataGridSortIndicatorDescriptionMetadata');
    DataGridSortIndicatorDescriptionMetadata.a = null;
    return DataGridSortIndicatorDescriptionMetadata;
})();
