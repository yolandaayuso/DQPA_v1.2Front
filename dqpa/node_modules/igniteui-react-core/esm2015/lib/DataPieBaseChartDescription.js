/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { RadialBaseChartDescription } from "./RadialBaseChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataPieBaseChartDescription = /*@__PURE__*/ (() => {
    class DataPieBaseChartDescription extends RadialBaseChartDescription {
        get_type() {
            return "DataPieBaseChart";
        }
        constructor() {
            super();
            this.xn = null;
            this.wa = null;
            this.xf = null;
            this.v8 = null;
            this.xk = null;
            this.v9 = null;
            this.xd = null;
            this.v7 = null;
            this.wp = 0;
            this.xp = null;
            this.xo = null;
            this.xg = null;
            this.w9 = null;
            this.xr = null;
            this.xc = null;
            this.xb = null;
            this.xj = null;
            this.wq = 0;
            this.xi = null;
            this.xa = null;
            this.wh = false;
            this.xq = null;
            this.wn = 0;
            this.wo = 0;
            this.wt = 0;
            this.wi = false;
            this.w7 = 0;
            this.wv = 0;
            this.wu = 0;
            this.ww = 0;
            this.wr = 0;
            this.ws = 0;
            this.xm = null;
            this.xl = null;
            this.xe = null;
            this.wf = false;
            this.wg = false;
            this.xh = null;
        }
        get sliceLabelFormat() {
            return this.xn;
        }
        set sliceLabelFormat(a) {
            this.xn = a;
            this.g("SliceLabelFormat");
        }
        get sliceLabelFormatSpecifiers() {
            return this.wa;
        }
        set sliceLabelFormatSpecifiers(a) {
            this.wa = a;
            this.g("SliceLabelFormatSpecifiers");
        }
        get legendSliceLabelFormat() {
            return this.xf;
        }
        set legendSliceLabelFormat(a) {
            this.xf = a;
            this.g("LegendSliceLabelFormat");
        }
        get legendSliceLabelFormatSpecifiers() {
            return this.v8;
        }
        set legendSliceLabelFormatSpecifiers(a) {
            this.v8 = a;
            this.g("LegendSliceLabelFormatSpecifiers");
        }
        get othersSliceLabelFormat() {
            return this.xk;
        }
        set othersSliceLabelFormat(a) {
            this.xk = a;
            this.g("OthersSliceLabelFormat");
        }
        get othersSliceLabelFormatSpecifiers() {
            return this.v9;
        }
        set othersSliceLabelFormatSpecifiers(a) {
            this.v9 = a;
            this.g("OthersSliceLabelFormatSpecifiers");
        }
        get legendOthersSliceLabelFormat() {
            return this.xd;
        }
        set legendOthersSliceLabelFormat(a) {
            this.xd = a;
            this.g("LegendOthersSliceLabelFormat");
        }
        get legendOthersSliceLabelFormatSpecifiers() {
            return this.v7;
        }
        set legendOthersSliceLabelFormatSpecifiers(a) {
            this.v7 = a;
            this.g("LegendOthersSliceLabelFormatSpecifiers");
        }
        get innerExtent() {
            return this.wp;
        }
        set innerExtent(a) {
            this.wp = a;
            this.g("InnerExtent");
        }
        get sweepDirection() {
            return this.xp;
        }
        set sweepDirection(a) {
            this.xp = a;
            this.g("SweepDirection");
        }
        get sliceLabelPositionMode() {
            return this.xo;
        }
        set sliceLabelPositionMode(a) {
            this.xo = a;
            this.g("SliceLabelPositionMode");
        }
        get lightSliceLabelColor() {
            return this.xg;
        }
        set lightSliceLabelColor(a) {
            this.xg = a;
            this.g("LightSliceLabelColor");
        }
        get darkSliceLabelColor() {
            return this.w9;
        }
        set darkSliceLabelColor(a) {
            this.w9 = a;
            this.g("DarkSliceLabelColor");
        }
        get valueMemberPath() {
            return this.xr;
        }
        set valueMemberPath(a) {
            this.xr = a;
            this.g("ValueMemberPath");
        }
        get legendLabelMemberPath() {
            return this.xc;
        }
        set legendLabelMemberPath(a) {
            this.xc = a;
            this.g("LegendLabelMemberPath");
        }
        get legendEmptyValuesMode() {
            return this.xb;
        }
        set legendEmptyValuesMode(a) {
            this.xb = a;
            this.g("LegendEmptyValuesMode");
        }
        get othersCategoryType() {
            return this.xj;
        }
        set othersCategoryType(a) {
            this.xj = a;
            this.g("OthersCategoryType");
        }
        get othersCategoryThreshold() {
            return this.wq;
        }
        set othersCategoryThreshold(a) {
            this.wq = a;
            this.g("OthersCategoryThreshold");
        }
        get othersCategoryText() {
            return this.xi;
        }
        set othersCategoryText(a) {
            this.xi = a;
            this.g("OthersCategoryText");
        }
        get labelMemberPath() {
            return this.xa;
        }
        set labelMemberPath(a) {
            this.xa = a;
            this.g("LabelMemberPath");
        }
        get valueAxisFavorLabellingScaleEnd() {
            return this.wh;
        }
        set valueAxisFavorLabellingScaleEnd(a) {
            this.wh = a;
            this.g("ValueAxisFavorLabellingScaleEnd");
        }
        get valueAxisAutoRangeBufferMode() {
            return this.xq;
        }
        set valueAxisAutoRangeBufferMode(a) {
            this.xq = a;
            this.g("ValueAxisAutoRangeBufferMode");
        }
        get angleAxisInterval() {
            return this.wn;
        }
        set angleAxisInterval(a) {
            this.wn = a;
            this.g("AngleAxisInterval");
        }
        get angleAxisMinorInterval() {
            return this.wo;
        }
        set angleAxisMinorInterval(a) {
            this.wo = a;
            this.g("AngleAxisMinorInterval");
        }
        get valueAxisInterval() {
            return this.wt;
        }
        set valueAxisInterval(a) {
            this.wt = a;
            this.g("ValueAxisInterval");
        }
        get valueAxisIsLogarithmic() {
            return this.wi;
        }
        set valueAxisIsLogarithmic(a) {
            this.wi = a;
            this.g("ValueAxisIsLogarithmic");
        }
        get valueAxisLogarithmBase() {
            return this.w7;
        }
        set valueAxisLogarithmBase(a) {
            this.w7 = a;
            this.g("ValueAxisLogarithmBase");
        }
        get valueAxisMinimumValue() {
            return this.wv;
        }
        set valueAxisMinimumValue(a) {
            this.wv = a;
            this.g("ValueAxisMinimumValue");
        }
        get valueAxisMaximumValue() {
            return this.wu;
        }
        set valueAxisMaximumValue(a) {
            this.wu = a;
            this.g("ValueAxisMaximumValue");
        }
        get valueAxisMinorInterval() {
            return this.ww;
        }
        set valueAxisMinorInterval(a) {
            this.ww = a;
            this.g("ValueAxisMinorInterval");
        }
        get radiusExtent() {
            return this.wr;
        }
        set radiusExtent(a) {
            this.wr = a;
            this.g("RadiusExtent");
        }
        get startAngle() {
            return this.ws;
        }
        set startAngle(a) {
            this.ws = a;
            this.g("StartAngle");
        }
        get sliceLabelContentSeparator() {
            return this.xm;
        }
        set sliceLabelContentSeparator(a) {
            this.xm = a;
            this.g("SliceLabelContentSeparator");
        }
        get sliceLabelContentMode() {
            return this.xl;
        }
        set sliceLabelContentMode(a) {
            this.xl = a;
            this.g("SliceLabelContentMode");
        }
        get legendSliceLabelContentMode() {
            return this.xe;
        }
        set legendSliceLabelContentMode(a) {
            this.xe = a;
            this.g("LegendSliceLabelContentMode");
        }
        get angleAxisFavorLabellingScaleEnd() {
            return this.wf;
        }
        set angleAxisFavorLabellingScaleEnd(a) {
            this.wf = a;
            this.g("AngleAxisFavorLabellingScaleEnd");
        }
        get valueAxisAbbreviateLargeNumbers() {
            return this.wg;
        }
        set valueAxisAbbreviateLargeNumbers(a) {
            this.wg = a;
            this.g("ValueAxisAbbreviateLargeNumbers");
        }
        get markerCollision() {
            return this.xh;
        }
        set markerCollision(a) {
            this.xh = a;
            this.g("MarkerCollision");
        }
    }
    DataPieBaseChartDescription.$t = /*@__PURE__*/ markType(DataPieBaseChartDescription, 'DataPieBaseChartDescription', RadialBaseChartDescription.$);
    return DataPieBaseChartDescription;
})();
