/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ImageTilesReadyEventArgsDescriptionMetadata } from "./ImageTilesReadyEventArgsDescriptionMetadata";
import { SeriesViewerDescriptionMetadata } from "./SeriesViewerDescriptionMetadata";
import { GeographicMapDescription } from "./GeographicMapDescription";
import { ImagesChangedEventArgsDescriptionMetadata } from "./ImagesChangedEventArgsDescriptionMetadata";
import { CancellingMultiScaleImageEventArgsDescriptionMetadata } from "./CancellingMultiScaleImageEventArgsDescriptionMetadata";
import { DownloadingMultiScaleImageEventArgsDescriptionMetadata } from "./DownloadingMultiScaleImageEventArgsDescriptionMetadata";
/**
 * @hidden
 */
export let GeographicMapDescriptionMetadata = /*@__PURE__*/ (() => {
    class GeographicMapDescriptionMetadata extends Base {
        static b(a) {
            if (GeographicMapDescriptionMetadata.a == null) {
                GeographicMapDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                GeographicMapDescriptionMetadata.c(GeographicMapDescriptionMetadata.a);
            }
            if (a.k(GeographicMapDescriptionMetadata.a)) {
                return;
            }
            a.ac(GeographicMapDescriptionMetadata.a);
            GeographicMapImageryDescriptionMetadata.d(a);
            ImageTilesReadyEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            SeriesViewerDescriptionMetadata.c(a);
            a.item("Zoomable", "Boolean");
            a.item("ResizeBehavior", "ExportedType:string:MapResizeBehavior");
            a.item("ResizeBehavior@names", "Auto;MaintainTopLeftPosition;MaintainCenterPosition");
            a.item("IsHorizontalWrappingEnabled", "Boolean");
            a.item("BackgroundTilingMode", "ExportedType:string:MapBackgroundTilingMode");
            a.item("BackgroundTilingMode@names", "Auto;NonWrapped;Wrapped");
            a.item("UseWorldRectForZoomBounds", "Boolean");
            a.item("SuppressZoomResetOnWorldRectChange", "Boolean");
            a.item("WorldRect", "Rect");
            a.item("ActualWorldRect", "Rect");
            a.item("BackgroundContent", "ExportedType:GeographicMapImagery");
            a.item("WindowScale", "Number:double");
            a.item("ActualWindowScale", "Number:double");
            a.item("ImageTilesReadyRef", "EventRef::imageTilesReady");
            GeographicMapDescriptionMetadata.e(a);
        }
        static d(a) {
            GeographicMapDescriptionMetadata.b(a);
            a.ae("GeographicMap", () => new GeographicMapDescription());
            a.ad("GeographicMap", GeographicMapDescriptionMetadata.a);
        }
        static e(a) {
            a.item("_qualifiedName", "String:Infragistics.Controls.Maps.XamGeographicMap");
            a.item("Width", "(w:Width/DimensionTransform,xam:Width/DimensionTransform)String");
            a.item("Height", "(w:Height/DimensionTransform,xam:Height/DimensionTransform)String");
        }
    }
    GeographicMapDescriptionMetadata.$t = /*@__PURE__*/ markType(GeographicMapDescriptionMetadata, 'GeographicMapDescriptionMetadata');
    GeographicMapDescriptionMetadata.a = null;
    return GeographicMapDescriptionMetadata;
})();
/**
 * @hidden
 */
export let GeographicMapImageryDescriptionMetadata = /*@__PURE__*/ (() => {
    class GeographicMapImageryDescriptionMetadata extends Base {
        static b(a) {
            if (GeographicMapImageryDescriptionMetadata.a == null) {
                GeographicMapImageryDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                GeographicMapImageryDescriptionMetadata.c(GeographicMapImageryDescriptionMetadata.a);
            }
            if (a.k(GeographicMapImageryDescriptionMetadata.a)) {
                return;
            }
            a.ac(GeographicMapImageryDescriptionMetadata.a);
            GeographicMapDescriptionMetadata.d(a);
            ImageTilesReadyEventArgsDescriptionMetadata.d(a);
            ImagesChangedEventArgsDescriptionMetadata.d(a);
            CancellingMultiScaleImageEventArgsDescriptionMetadata.d(a);
            DownloadingMultiScaleImageEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("WindowRect", "Rect");
            a.item("GeographicMap", "ExportedType:XamGeographicMap");
            a.item("Referer", "String");
            a.item("IsHorizontalWrappingEnabled", "Boolean");
            a.item("UserAgent", "String");
            a.item("Opacity", "Number:double");
            a.item("ImageTilesReadyRef", "EventRef::imageTilesReady");
            a.item("ImagesChangedRef", "EventRef::imagesChanged");
            a.item("CancellingImageRef", "EventRef::cancellingImage");
            a.item("DownloadingImageRef", "EventRef::downloadingImage");
        }
        static d(a) {
            GeographicMapImageryDescriptionMetadata.b(a);
            a.ad("GeographicMapImagery", GeographicMapImageryDescriptionMetadata.a);
        }
    }
    GeographicMapImageryDescriptionMetadata.$t = /*@__PURE__*/ markType(GeographicMapImageryDescriptionMetadata, 'GeographicMapImageryDescriptionMetadata');
    GeographicMapImageryDescriptionMetadata.a = null;
    return GeographicMapImageryDescriptionMetadata;
})();
