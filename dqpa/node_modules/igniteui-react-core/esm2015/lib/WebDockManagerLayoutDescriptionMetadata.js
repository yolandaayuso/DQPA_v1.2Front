/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebSplitPaneDescriptionMetadata } from "./WebSplitPaneDescriptionMetadata";
import { WebDockManagerLayoutDescription } from "./WebDockManagerLayoutDescription";
/**
 * @hidden
 */
export let WebDockManagerLayoutDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebDockManagerLayoutDescriptionMetadata extends Base {
        static b(a) {
            if (WebDockManagerLayoutDescriptionMetadata.a == null) {
                WebDockManagerLayoutDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebDockManagerLayoutDescriptionMetadata.c(WebDockManagerLayoutDescriptionMetadata.a);
            }
            if (a.k(WebDockManagerLayoutDescriptionMetadata.a)) {
                return;
            }
            a.ac(WebDockManagerLayoutDescriptionMetadata.a);
            WebSplitPaneDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:DockManagerLayout");
            a.item("__skipModuleRegisterWebComponents", "Boolean");
            a.item("__importTypesWebComponents", "String:igniteui-webcomponents");
            a.item("__marshalByValue", "Boolean");
            a.item("__skipSuffix", "Boolean");
            a.item("Name", "String");
            a.item("RootPane", "ExportedType:WebSplitPane");
            a.item("FloatingPanes", "Collection:WebSplitPane:SplitPaneCollection:WebSplitPane");
        }
        static d(a) {
            WebDockManagerLayoutDescriptionMetadata.b(a);
            a.ae("WebDockManagerLayout", () => new WebDockManagerLayoutDescription());
            a.ad("WebDockManagerLayout", WebDockManagerLayoutDescriptionMetadata.a);
        }
    }
    WebDockManagerLayoutDescriptionMetadata.$t = /*@__PURE__*/ markType(WebDockManagerLayoutDescriptionMetadata, 'WebDockManagerLayoutDescriptionMetadata');
    WebDockManagerLayoutDescriptionMetadata.a = null;
    return WebDockManagerLayoutDescriptionMetadata;
})();
