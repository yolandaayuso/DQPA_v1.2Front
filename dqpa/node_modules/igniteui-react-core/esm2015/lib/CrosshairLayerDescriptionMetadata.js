/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AnnotationLayerDescriptionMetadata } from "./AnnotationLayerDescriptionMetadata";
import { CrosshairLayerDescription } from "./CrosshairLayerDescription";
/**
 * @hidden
 */
export let CrosshairLayerDescriptionMetadata = /*@__PURE__*/ (() => {
    class CrosshairLayerDescriptionMetadata extends Base {
        static b(a) {
            if (CrosshairLayerDescriptionMetadata.a == null) {
                CrosshairLayerDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                CrosshairLayerDescriptionMetadata.c(CrosshairLayerDescriptionMetadata.a);
            }
            if (a.k(CrosshairLayerDescriptionMetadata.a)) {
                return;
            }
            a.ac(CrosshairLayerDescriptionMetadata.a);
        }
        static c(a) {
            AnnotationLayerDescriptionMetadata.c(a);
            a.item("HorizontalLineStroke", "Brush");
            a.item("VerticalLineStroke", "Brush");
            a.item("TargetSeriesName", "String");
            a.item("TargetSeriesRef", "(w:TargetSeries,wf:TargetSeries)DataRef::object");
            a.item("UseInterpolation", "Boolean");
            a.item("IsAxisAnnotationEnabled", "Boolean");
            a.item("XAxisAnnotationTextColor", "Brush");
            a.item("XAxisAnnotationBackground", "Brush");
            a.item("XAxisAnnotationBackgroundCornerRadius", "Number:double");
            a.item("XAxisAnnotationInterpolatedValuePrecision", "Number:int");
            a.item("XAxisAnnotationOutline", "Brush");
            a.item("XAxisAnnotationPaddingLeft", "Number:double");
            a.item("XAxisAnnotationPaddingTop", "Number:double");
            a.item("XAxisAnnotationPaddingRight", "Number:double");
            a.item("XAxisAnnotationPaddingBottom", "Number:double");
            a.item("YAxisAnnotationPaddingLeft", "Number:double");
            a.item("YAxisAnnotationPaddingTop", "Number:double");
            a.item("YAxisAnnotationPaddingRight", "Number:double");
            a.item("YAxisAnnotationPaddingBottom", "Number:double");
            a.item("XAxisAnnotationStrokeThickness", "Number:double");
            a.item("YAxisAnnotationTextColor", "Brush");
            a.item("YAxisAnnotationBackground", "Brush");
            a.item("YAxisAnnotationBackgroundCornerRadius", "Number:double");
            a.item("YAxisAnnotationInterpolatedValuePrecision", "Number:int");
            a.item("YAxisAnnotationOutline", "Brush");
            a.item("YAxisAnnotationStrokeThickness", "Number:double");
            a.item("VerticalLineVisibility", "ExportedType:string:Visibility");
            a.item("VerticalLineVisibility@names", "Visible;Collapsed");
            a.item("HorizontalLineVisibility", "ExportedType:string:Visibility");
            a.item("HorizontalLineVisibility@names", "Visible;Collapsed");
            a.item("SkipUnknownValues", "Boolean");
            a.item("XAxisAnnotationFormatLabelRef", "EventRef::xAxisAnnotationFormatLabel");
            a.item("YAxisAnnotationFormatLabelRef", "EventRef::yAxisAnnotationFormatLabel");
        }
        static d(a) {
            CrosshairLayerDescriptionMetadata.b(a);
            a.ae("CrosshairLayer", () => new CrosshairLayerDescription());
            a.ad("CrosshairLayer", CrosshairLayerDescriptionMetadata.a);
        }
    }
    CrosshairLayerDescriptionMetadata.$t = /*@__PURE__*/ markType(CrosshairLayerDescriptionMetadata, 'CrosshairLayerDescriptionMetadata');
    CrosshairLayerDescriptionMetadata.a = null;
    return CrosshairLayerDescriptionMetadata;
})();
