/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GeographicShapeSeriesBaseDescription } from "./GeographicShapeSeriesBaseDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let GeographicShapeSeriesDescription = /*@__PURE__*/ (() => {
    class GeographicShapeSeriesDescription extends GeographicShapeSeriesBaseDescription {
        get_type() {
            return "GeographicShapeSeries";
        }
        constructor() {
            super();
            this.gf = null;
            this.gd = null;
            this.ge = null;
            this.fz = 0;
            this.fy = 0;
            this.gc = null;
            this.ga = null;
            this.f8 = null;
            this.gb = null;
            this.f6 = null;
            this.f9 = null;
            this.fx = 0;
            this.f7 = null;
            this.f5 = null;
            this.f3 = null;
            this.f4 = null;
            this.gg = null;
        }
        get shapeStyleSelectorRef() {
            return this.gf;
        }
        set shapeStyleSelectorRef(a) {
            this.gf = a;
            this.g("ShapeStyleSelectorRef");
        }
        get shapeFill() {
            return this.gd;
        }
        set shapeFill(a) {
            this.gd = a;
            this.g("ShapeFill");
        }
        get shapeStroke() {
            return this.ge;
        }
        set shapeStroke(a) {
            this.ge = a;
            this.g("ShapeStroke");
        }
        get shapeStrokeThickness() {
            return this.fz;
        }
        set shapeStrokeThickness(a) {
            this.fz = a;
            this.g("ShapeStrokeThickness");
        }
        get shapeOpacity() {
            return this.fy;
        }
        set shapeOpacity(a) {
            this.fy = a;
            this.g("ShapeOpacity");
        }
        get markerType() {
            return this.gc;
        }
        set markerType(a) {
            this.gc = a;
            this.g("MarkerType");
        }
        get markerOutlineMode() {
            return this.ga;
        }
        set markerOutlineMode(a) {
            this.ga = a;
            this.g("MarkerOutlineMode");
        }
        get markerFillMode() {
            return this.f8;
        }
        set markerFillMode(a) {
            this.f8 = a;
            this.g("MarkerFillMode");
        }
        get markerTemplateRef() {
            return this.gb;
        }
        set markerTemplateRef(a) {
            this.gb = a;
            this.g("MarkerTemplateRef");
        }
        get markerBrush() {
            return this.f6;
        }
        set markerBrush(a) {
            this.f6 = a;
            this.g("MarkerBrush");
        }
        get markerOutline() {
            return this.f9;
        }
        set markerOutline(a) {
            this.f9 = a;
            this.g("MarkerOutline");
        }
        get markerThickness() {
            return this.fx;
        }
        set markerThickness(a) {
            this.fx = a;
            this.g("MarkerThickness");
        }
        get markerCollisionAvoidance() {
            return this.f7;
        }
        set markerCollisionAvoidance(a) {
            this.f7 = a;
            this.g("MarkerCollisionAvoidance");
        }
        get actualMarkerTemplateRef() {
            return this.f5;
        }
        set actualMarkerTemplateRef(a) {
            this.f5 = a;
            this.g("ActualMarkerTemplateRef");
        }
        get actualMarkerBrush() {
            return this.f3;
        }
        set actualMarkerBrush(a) {
            this.f3 = a;
            this.g("ActualMarkerBrush");
        }
        get actualMarkerOutline() {
            return this.f4;
        }
        set actualMarkerOutline(a) {
            this.f4 = a;
            this.g("ActualMarkerOutline");
        }
        get styleShapeRef() {
            return this.gg;
        }
        set styleShapeRef(a) {
            this.gg = a;
            this.g("StyleShapeRef");
        }
    }
    GeographicShapeSeriesDescription.$t = /*@__PURE__*/ markType(GeographicShapeSeriesDescription, 'GeographicShapeSeriesDescription', GeographicShapeSeriesBaseDescription.$);
    return GeographicShapeSeriesDescription;
})();
