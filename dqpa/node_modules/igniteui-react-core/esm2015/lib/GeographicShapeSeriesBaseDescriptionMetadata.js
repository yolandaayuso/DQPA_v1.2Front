/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { BrushScaleDescriptionMetadata } from "./BrushScaleDescriptionMetadata";
import { ShapeDataSourceDescriptionMetadata } from "./ShapeDataSourceDescriptionMetadata";
import { AssigningShapeStyleEventArgsDescriptionMetadata } from "./AssigningShapeStyleEventArgsDescriptionMetadata";
import { AssigningShapeMarkerStyleEventArgsDescriptionMetadata } from "./AssigningShapeMarkerStyleEventArgsDescriptionMetadata";
import { GeographicMapSeriesHostDescriptionMetadata } from "./GeographicMapSeriesHostDescriptionMetadata";
/**
 * @hidden
 */
export let GeographicShapeSeriesBaseDescriptionMetadata = /*@__PURE__*/ (() => {
    class GeographicShapeSeriesBaseDescriptionMetadata extends Base {
        static b(a) {
            if (GeographicShapeSeriesBaseDescriptionMetadata.a == null) {
                GeographicShapeSeriesBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                GeographicShapeSeriesBaseDescriptionMetadata.c(GeographicShapeSeriesBaseDescriptionMetadata.a);
            }
            if (a.k(GeographicShapeSeriesBaseDescriptionMetadata.a)) {
                return;
            }
            a.ac(GeographicShapeSeriesBaseDescriptionMetadata.a);
            BrushScaleDescriptionMetadata.d(a);
            ShapeDataSourceDescriptionMetadata.d(a);
            AssigningShapeStyleEventArgsDescriptionMetadata.d(a);
            AssigningShapeMarkerStyleEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            GeographicMapSeriesHostDescriptionMetadata.c(a);
            a.item("ShapeMemberPath", "String");
            a.item("IsCustomShapeStyleAllowed", "Boolean");
            a.item("IsCustomShapeMarkerStyleAllowed", "Boolean");
            a.item("ItemSearchMode", "ExportedType:string:ShapeItemSearchMode");
            a.item("ItemSearchMode@names", "Auto;ClosestBoundingBox;ClosestShape;ClosestPointOnClosestShape;None");
            a.item("ItemSearchThreshold", "Number:int");
            a.item("FillMemberPath", "String");
            a.item("FillScale", "ExportedType:BrushScale");
            a.item("FillScale@mustSetInCode", "WebComponents;Blazor;React;Angular");
            a.item("FillScaleUseGlobalValues", "Boolean");
            a.item("ItemSearchPointsThreshold", "Number:int");
            a.item("ShapefileDataSource", "ExportedType:ShapefileConverter");
            a.item("ShapeFilterResolution", "Number:double");
            a.item("AssigningShapeStyleRef", "EventRef::assigningShapeStyle");
            a.item("AssigningShapeMarkerStyleRef", "EventRef::assigningShapeMarkerStyle");
        }
        static d(a) {
            GeographicShapeSeriesBaseDescriptionMetadata.b(a);
            a.ad("GeographicShapeSeriesBase", GeographicShapeSeriesBaseDescriptionMetadata.a);
        }
    }
    GeographicShapeSeriesBaseDescriptionMetadata.$t = /*@__PURE__*/ markType(GeographicShapeSeriesBaseDescriptionMetadata, 'GeographicShapeSeriesBaseDescriptionMetadata');
    GeographicShapeSeriesBaseDescriptionMetadata.a = null;
    return GeographicShapeSeriesBaseDescriptionMetadata;
})();
