/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { GotFocusEventArgsDescriptionMetadata } from "./GotFocusEventArgsDescriptionMetadata";
import { LostFocusEventArgsDescriptionMetadata } from "./LostFocusEventArgsDescriptionMetadata";
import { MultiColumnComboBoxTextChangedEventArgsDescriptionMetadata } from "./MultiColumnComboBoxTextChangedEventArgsDescriptionMetadata";
import { MultiColumnComboBoxValueChangedEventArgsDescriptionMetadata } from "./MultiColumnComboBoxValueChangedEventArgsDescriptionMetadata";
import { KeyEventArgsDescriptionMetadata } from "./KeyEventArgsDescriptionMetadata";
import { InputChangeEventArgsDescriptionMetadata } from "./InputChangeEventArgsDescriptionMetadata";
import { MultiColumnComboBoxDescription } from "./MultiColumnComboBoxDescription";
/**
 * @hidden
 */
export let MultiColumnComboBoxDescriptionMetadata = /*@__PURE__*/ (() => {
    class MultiColumnComboBoxDescriptionMetadata extends Base {
        static b(a) {
            if (MultiColumnComboBoxDescriptionMetadata.a == null) {
                MultiColumnComboBoxDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                MultiColumnComboBoxDescriptionMetadata.c(MultiColumnComboBoxDescriptionMetadata.a);
            }
            if (a.k(MultiColumnComboBoxDescriptionMetadata.a)) {
                return;
            }
            a.ac(MultiColumnComboBoxDescriptionMetadata.a);
            GotFocusEventArgsDescriptionMetadata.d(a);
            LostFocusEventArgsDescriptionMetadata.d(a);
            MultiColumnComboBoxTextChangedEventArgsDescriptionMetadata.d(a);
            MultiColumnComboBoxValueChangedEventArgsDescriptionMetadata.d(a);
            KeyEventArgsDescriptionMetadata.d(a);
            InputChangeEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("ShowClearButton", "Boolean");
            a.item("Fields", "Array:string");
            a.item("BackgroundColor", "Brush");
            a.item("ActualBackgroundColor", "Brush");
            a.item("BaseTheme", "ExportedType:string:BaseControlTheme");
            a.item("BaseTheme@names", "Default;DenaliLight;MaterialLight;SlingshotLight;SlingshotDark;RevealLight;RevealDark");
            a.item("ActualBaseTheme", "ExportedType:string:BaseControlTheme");
            a.item("ActualBaseTheme@names", "Default;DenaliLight;MaterialLight;SlingshotLight;SlingshotDark;RevealLight;RevealDark");
            a.item("BorderColor", "Brush");
            a.item("ActualBorderColor", "Brush");
            a.item("BorderWidth", "Number:double");
            a.item("ActualBorderWidth", "Number:double");
            a.item("ColumnHeadersVisible", "Boolean");
            a.item("ContentPaddingBottom", "(w:ContentPadding.Bottom,wf:ContentPaddingBottom)Number:double");
            a.item("ContentPaddingLeft", "(w:ContentPadding.Left,wf:ContentPaddingLeft)Number:double");
            a.item("ContentPaddingRight", "(w:ContentPadding.Right,wf:ContentPaddingRight)Number:double");
            a.item("ContentPaddingTop", "(w:ContentPadding.Top,wf:ContentPaddingTop)Number:double");
            a.item("ActualContentPaddingBottom", "(w:ActualContentPadding.Bottom,wf:ActualContentPaddingBottom)Number:double");
            a.item("ActualContentPaddingLeft", "(w:ActualContentPadding.Left,wf:ActualContentPaddingLeft)Number:double");
            a.item("ActualContentPaddingRight", "(w:ActualContentPadding.Right,wf:ActualContentPaddingRight)Number:double");
            a.item("ActualContentPaddingTop", "(w:ActualContentPadding.Top,wf:ActualContentPaddingTop)Number:double");
            a.item("CornerRadiusBottomRight", "(w:CornerRadius.BottomRight,wf:CornerRadiusBottomRight)Number:double");
            a.item("CornerRadiusBottomLeft", "(w:CornerRadius.BottomLeft,wf:CornerRadiusBottomLeft)Number:double");
            a.item("CornerRadiusTopLeft", "(w:CornerRadius.TopLeft,wf:CornerRadiusTopLeft)Number:double");
            a.item("CornerRadiusTopRight", "(w:CornerRadius.TopRight,wf:CornerRadiusTopRight)Number:double");
            a.item("ActualCornerRadiusBottomRight", "(w:ActualCornerRadius.BottomRight,wf:ActualCornerRadiusBottomRight)Number:double");
            a.item("ActualCornerRadiusBottomLeft", "(w:ActualCornerRadius.BottomLeft,wf:ActualCornerRadiusBottomLeft)Number:double");
            a.item("ActualCornerRadiusTopLeft", "(w:ActualCornerRadius.TopLeft,wf:ActualCornerRadiusTopLeft)Number:double");
            a.item("ActualCornerRadiusTopRight", "(w:ActualCornerRadius.TopRight,wf:ActualCornerRadiusTopRight)Number:double");
            a.item("DataSourceDesiredProperties", "Array:string");
            a.item("Density", "ExportedType:string:ControlDisplayDensity");
            a.item("Density@names", "Auto;Comfortable;Cosy;Compact;Minimal");
            a.item("ActualDensity", "ExportedType:string:ControlDisplayDensity");
            a.item("ActualDensity@names", "Auto;Comfortable;Cosy;Compact;Minimal");
            a.item("DropDownButtonVisible", "Boolean");
            a.item("FocusBorderColor", "Brush");
            a.item("ActualFocusBorderColor", "Brush");
            a.item("FocusBorderWidth", "Number:double");
            a.item("ActualFocusBorderWidth", "Number:double");
            a.item("FocusUnderlineColor", "Brush");
            a.item("ActualFocusUnderlineColor", "Brush");
            a.item("FocusUnderlineOpacity", "Number:double");
            a.item("ActualFocusUnderlineOpacity", "Number:double");
            a.item("FocusUnderlineRippleOpacity", "Number:double");
            a.item("ActualFocusUnderlineRippleOpacity", "Number:double");
            a.item("HoverUnderlineColor", "Brush");
            a.item("ActualHoverUnderlineColor", "Brush");
            a.item("HoverUnderlineOpacity", "Number:double");
            a.item("ActualHoverUnderlineOpacity", "Number:double");
            a.item("HoverUnderlineWidth", "Number:double");
            a.item("ActualHoverUnderlineWidth", "Number:double");
            a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)DataRef::object");
            a.item("Label", "String");
            a.item("LabelTextColor", "Brush");
            a.item("ActualLabelTextColor", "Brush");
            a.item("LabelFontFamily", "(w:LabelFontFamily/FontFamilyTransform,xam:LabelFontFamily,wf:LabelFontFamily,web:labelTextStyle/FontFamilyTransform)String");
            a.item("LabelFontSize", "(w:LabelFontSize,xam:LabelFontSize,wf:LabelFontSize,web:labelTextStyle/FontSizeTransform)Number:double");
            a.item("LabelFontStyle", "(w:LabelFontStyle/FontStyleTransform,xam:LabelFontFamily/FontStyleTransform,wf:LabelFontFamily/FontStyleTransform,web:labelTextStyle/FontStyleTransform)String");
            a.item("LabelFontWeight", "(w:LabelFontWeight/FontWeightTransform,xam:LabelFontFamily/FontWeightTransform,wf:LabelFontFamily/FontWeightTransform,web:labelTextStyle/FontWeightTransform)String");
            a.item("ActualLabelVisible", "Boolean");
            a.item("NoMatchesFoundLabel", "String");
            a.item("ActualNoMatchesFoundLabel", "String");
            a.item("NoMatchesFoundLabelBackgroundColor", "Brush");
            a.item("ActualNoMatchesFoundLabelBackgroundColor", "Brush");
            a.item("NoMatchesFoundLabelTextColor", "Brush");
            a.item("ActualNoMatchesFoundLabelTextColor", "Brush");
            a.item("NoMatchesFoundLabelFontFamily", "(w:NoMatchesFoundLabelFontFamily/FontFamilyTransform,xam:NoMatchesFoundLabelFontFamily,wf:NoMatchesFoundLabelFontFamily,web:noMatchesFoundLabelTextStyle/FontFamilyTransform)String");
            a.item("NoMatchesFoundLabelFontSize", "(w:NoMatchesFoundLabelFontSize,xam:NoMatchesFoundLabelFontSize,wf:NoMatchesFoundLabelFontSize,web:noMatchesFoundLabelTextStyle/FontSizeTransform)Number:double");
            a.item("NoMatchesFoundLabelFontStyle", "(w:NoMatchesFoundLabelFontStyle/FontStyleTransform,xam:NoMatchesFoundLabelFontFamily/FontStyleTransform,wf:NoMatchesFoundLabelFontFamily/FontStyleTransform,web:noMatchesFoundLabelTextStyle/FontStyleTransform)String");
            a.item("NoMatchesFoundLabelFontWeight", "(w:NoMatchesFoundLabelFontWeight/FontWeightTransform,xam:NoMatchesFoundLabelFontFamily/FontWeightTransform,wf:NoMatchesFoundLabelFontFamily/FontWeightTransform,web:noMatchesFoundLabelTextStyle/FontWeightTransform)String");
            a.item("Placeholder", "String");
            a.item("RowSeparatorsVisible", "Boolean");
            a.item("TextColor", "Brush");
            a.item("ActualTextColor", "Brush");
            a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
            a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
            a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontFamily/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
            a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontFamily/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
            a.item("UnderlineColor", "Brush");
            a.item("ActualUnderlineColor", "Brush");
            a.item("UnderlineOpacity", "Number:double");
            a.item("ActualUnderlineOpacity", "Number:double");
            a.item("UnderlineRippleColor", "Brush");
            a.item("ActualUnderlineRippleColor", "Brush");
            a.item("UnderlineRippleOpacity", "Number:double");
            a.item("ActualUnderlineRippleOpacity", "Number:double");
            a.item("UnderlineRippleWidth", "Number:double");
            a.item("ActualUnderlineRippleWidth", "Number:double");
            a.item("UnderlineWidth", "Number:double");
            a.item("ActualUnderlineWidth", "Number:double");
            a.item("AllowFilter", "Boolean");
            a.item("SortMode", "ExportedType:string:SortMode");
            a.item("SortMode@names", "SortByOneColumnOnly;SortByMultipleColumns;SortByOneColumnOnlyTriState;SortByMultipleColumnsTriState;None");
            a.item("TextField", "String");
            a.item("Text", "String");
            a.item("ValueField", "Array:string");
            a.item("ActualValueField", "Array:string");
            a.item("Value", "Unknown");
            a.item("IsFixed", "Boolean");
            a.item("OpenAsChild", "Boolean");
            a.item("UseTopLayer", "Boolean");
            a.item("GotFocusRef", "EventRef::gotFocus");
            a.item("LostFocusRef", "EventRef::lostFocus");
            a.item("TextValueChangedRef", "EventRef::textValueChanged");
            a.item("SelectedValueChangedRef", "EventRef::selectedValueChanged");
            a.item("KeyDownRef", "EventRef::keyDown");
            a.item("ChangeRef", "EventRef::change");
            a.item("ChangingRef", "EventRef::changing");
            a.item("TextChangeRef", "EventRef::textChange");
            a.item("ValueChangeRef", "EventRef::valueChange");
            MultiColumnComboBoxDescriptionMetadata.e(a);
        }
        static d(a) {
            MultiColumnComboBoxDescriptionMetadata.b(a);
            a.ae("MultiColumnComboBox", () => new MultiColumnComboBoxDescription());
            a.ad("MultiColumnComboBox", MultiColumnComboBoxDescriptionMetadata.a);
        }
        static e(a) {
            a.item("DefaultColumnWidth", "Number:double");
        }
    }
    MultiColumnComboBoxDescriptionMetadata.$t = /*@__PURE__*/ markType(MultiColumnComboBoxDescriptionMetadata, 'MultiColumnComboBoxDescriptionMetadata');
    MultiColumnComboBoxDescriptionMetadata.a = null;
    return MultiColumnComboBoxDescriptionMetadata;
})();
