/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AxisDescriptionMetadata } from "./AxisDescriptionMetadata";
/**
 * @hidden
 */
export let NumericAxisBaseDescriptionMetadata = /*@__PURE__*/ (() => {
    class NumericAxisBaseDescriptionMetadata extends Base {
        static b(a) {
            if (NumericAxisBaseDescriptionMetadata.a == null) {
                NumericAxisBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                NumericAxisBaseDescriptionMetadata.c(NumericAxisBaseDescriptionMetadata.a);
            }
            if (a.k(NumericAxisBaseDescriptionMetadata.a)) {
                return;
            }
            a.ac(NumericAxisBaseDescriptionMetadata.a);
        }
        static c(a) {
            AxisDescriptionMetadata.c(a);
            a.item("AutoRangeBufferMode", "ExportedType:string:AxisRangeBufferMode");
            a.item("AutoRangeBufferMode@names", "Auto;Series;SeriesMinimum;SeriesMaximum;None");
            a.item("MinimumValue", "Number:double");
            a.item("ActualMinimumValue", "Number:double");
            a.item("ActualVisibleMinimumValue", "Number:double");
            a.item("MaximumValue", "Number:double");
            a.item("ActualMaximumValue", "Number:double");
            a.item("ActualVisibleMaximumValue", "Number:double");
            a.item("Interval", "Number:double");
            a.item("ActualInterval", "Number:double");
            a.item("ActualMaxPrecision", "Number:int");
            a.item("MaxPrecision", "Number:int");
            a.item("ShouldApplyMaxPrecisionWhenZoomed", "Boolean");
            a.item("MinorInterval", "Number:double");
            a.item("ActualMinorInterval", "Number:double");
            a.item("ReferenceValue", "Number:double");
            a.item("IsLogarithmic", "Boolean");
            a.item("ActualIsLogarithmic", "Boolean");
            a.item("FavorLabellingScaleEnd", "Boolean");
            a.item("LogarithmBase", "Number:int");
            a.item("FormatAbbreviatedLabelRef", "(w:FormatAbbreviatedLabel,wf:FormatAbbreviatedLabel)MethodRef");
            a.item("AbbreviatedLabelFormat", "String");
            a.item("AbbreviatedLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("AbbreviatedLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("IsFormattingAbbreviatedLargeNumber", "Boolean");
            a.item("AbbreviateLargeNumbers", "Boolean");
            a.item("ActualMinimumValueChangeRef", "EventRef::actualMinimumValueChange");
            a.item("ActualMaximumValueChangeRef", "EventRef::actualMaximumValueChange");
            a.item("ActualIntervalChangeRef", "EventRef::actualIntervalChange");
            a.item("ActualMinorIntervalChangeRef", "EventRef::actualMinorIntervalChange");
        }
        static d(a) {
            NumericAxisBaseDescriptionMetadata.b(a);
            a.ad("NumericAxisBase", NumericAxisBaseDescriptionMetadata.a);
        }
    }
    NumericAxisBaseDescriptionMetadata.$t = /*@__PURE__*/ markType(NumericAxisBaseDescriptionMetadata, 'NumericAxisBaseDescriptionMetadata');
    NumericAxisBaseDescriptionMetadata.a = null;
    return NumericAxisBaseDescriptionMetadata;
})();
