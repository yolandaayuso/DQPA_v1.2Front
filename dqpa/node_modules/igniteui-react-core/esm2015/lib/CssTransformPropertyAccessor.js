/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { UIElementPropertyAccessor } from "./UIElementPropertyAccessor";
import { typeCast, markType } from "./type";
import { MatrixTransform } from "./MatrixTransform";
import { Matrix } from "./Matrix";
import { TransformMatrixHelpler } from "./TransformMatrixHelpler";
import { stringReplace } from "./string";
/**
 * @hidden
 */
export let CssTransformPropertyAccessor = /*@__PURE__*/ (() => {
    class CssTransformPropertyAccessor extends UIElementPropertyAccessor {
        constructor(a) {
            super();
            this.d = null;
            this.d = a;
        }
        b(a) {
            let b = a;
            let c = b.getStyleProperty(this.d);
            if (c == null || c.length == 0) {
                return null;
            }
            c = stringReplace(stringReplace(c, "matrix(", ""), ")", "");
            let d = c.split(',');
            if (d.length != 6) {
                let e = new Matrix();
                e.k = 0;
                e.j = 1;
                e.l = 0;
                e.m = 1;
                e.n = 0;
                e.o = 0;
                return e;
            }
            let f = parseFloat(d[0].trim());
            let g = parseFloat(d[1].trim());
            let h = parseFloat(d[2].trim());
            let i = parseFloat(d[3].trim());
            let j = parseFloat(d[4].trim());
            let k = parseFloat(d[5].trim());
            let l = new MatrixTransform();
            let m = new Matrix();
            m.j = f;
            m.k = g;
            m.l = h;
            m.m = i;
            m.n = j;
            m.o = k;
            l.j = m;
            return l;
        }
        c(a, b) {
            let c = null;
            if (typeCast(MatrixTransform.$, b) !== null) {
                c = b;
            }
            else {
                c = new MatrixTransform();
                c.j = TransformMatrixHelpler.f(b);
            }
            let d = a;
            if (c == null || c.j == null) {
                d.setStyleProperty(this.d, "");
                return;
            }
            let e = c.j;
            let f = "matrix(" + e.j + ", " + e.k + ", " + e.l + ", " + e.m + ", " + e.n + ", " + e.o + ")";
            d.setStyleProperty(this.d, f);
        }
    }
    CssTransformPropertyAccessor.$t = /*@__PURE__*/ markType(CssTransformPropertyAccessor, 'CssTransformPropertyAccessor', UIElementPropertyAccessor.$);
    return CssTransformPropertyAccessor;
})();
