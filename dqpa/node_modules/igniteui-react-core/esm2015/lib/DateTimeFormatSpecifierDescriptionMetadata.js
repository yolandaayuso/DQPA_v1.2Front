/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { FormatSpecifierDescriptionMetadata } from "./FormatSpecifierDescriptionMetadata";
import { DateTimeFormatSpecifierDescription } from "./DateTimeFormatSpecifierDescription";
/**
 * @hidden
 */
export let DateTimeFormatSpecifierDescriptionMetadata = /*@__PURE__*/ (() => {
    class DateTimeFormatSpecifierDescriptionMetadata extends Base {
        static b(a) {
            if (DateTimeFormatSpecifierDescriptionMetadata.a == null) {
                DateTimeFormatSpecifierDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DateTimeFormatSpecifierDescriptionMetadata.c(DateTimeFormatSpecifierDescriptionMetadata.a);
            }
            if (a.k(DateTimeFormatSpecifierDescriptionMetadata.a)) {
                return;
            }
            a.ac(DateTimeFormatSpecifierDescriptionMetadata.a);
        }
        static c(a) {
            FormatSpecifierDescriptionMetadata.c(a);
            a.item("Locale", "String");
            a.item("DateStyle", "String");
            a.item("TimeStyle", "String");
            a.item("FractionalSecondDigits", "Number:int");
            a.item("Calendar", "String");
            a.item("DayPeriod", "String");
            a.item("NumberingSystem", "String");
            a.item("LocaleMatcher", "String");
            a.item("TimeZone", "String");
            a.item("Hour12", "String");
            a.item("HourCycle", "String");
            a.item("FormatMatcher", "String");
            a.item("WeekDay", "String");
            a.item("Era", "String");
            a.item("Year", "String");
            a.item("Month", "String");
            a.item("Day", "String");
            a.item("Hour", "String");
            a.item("Minute", "String");
            a.item("Second", "String");
            a.item("TimeZoneName", "String");
            DateTimeFormatSpecifierDescriptionMetadata.e(a);
        }
        static d(a) {
            DateTimeFormatSpecifierDescriptionMetadata.b(a);
            a.ae("DateTimeFormatSpecifier", () => new DateTimeFormatSpecifierDescription());
            a.ad("DateTimeFormatSpecifier", DateTimeFormatSpecifierDescriptionMetadata.a);
        }
        static e(a) {
            a.item("__importTypesWebComponents", "String:igniteui-webcomponents-core");
            a.item("__importTypesReact", "String:igniteui-react-core");
            a.item("__importTypesAngular", "String:igniteui-angular-core");
            a.item("__skipSuffix", "Boolean");
        }
    }
    DateTimeFormatSpecifierDescriptionMetadata.$t = /*@__PURE__*/ markType(DateTimeFormatSpecifierDescriptionMetadata, 'DateTimeFormatSpecifierDescriptionMetadata');
    DateTimeFormatSpecifierDescriptionMetadata.a = null;
    return DateTimeFormatSpecifierDescriptionMetadata;
})();
