/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Point_$type, markType } from "./type";
/**
 * @hidden
 */
export let LineEquation = /*@__PURE__*/ (() => {
    class LineEquation extends Base {
        constructor(a, ..._rest) {
            super();
            this.a = false;
            this.e = 0;
            this.g = null;
            this.f = null;
            this.b = 0;
            this.c = 0;
            this.d = 0;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = [{ $type: Point_$type, x: c, y: d }, { $type: Point_$type, x: e, y: f }];
                        {
                            let i = g[0];
                            let j = g[1];
                            this.g = i;
                            this.f = j;
                            this.e = (this.f.y - this.g.y) / (this.f.x - this.g.x);
                            this.b = -this.e;
                            this.c = 1;
                            this.d = this.g.y - this.e * this.g.x;
                            this.a = Math.abs(this.f.x - this.g.x) < 9.9999997473787516E-06;
                        }
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.g = c;
                        this.f = d;
                        this.e = (this.f.y - this.g.y) / (this.f.x - this.g.x);
                        this.b = -this.e;
                        this.c = 1;
                        this.d = this.g.y - this.e * this.g.x;
                        this.a = Math.abs(this.f.x - this.g.x) < 9.9999997473787516E-06;
                    }
                    break;
            }
        }
    }
    LineEquation.$t = /*@__PURE__*/ markType(LineEquation, 'LineEquation');
    return LineEquation;
})();
