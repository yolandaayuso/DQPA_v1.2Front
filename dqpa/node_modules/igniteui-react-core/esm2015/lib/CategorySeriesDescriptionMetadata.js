/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AssigningCategoryStyleEventArgsDescriptionMetadata } from "./AssigningCategoryStyleEventArgsDescriptionMetadata";
import { AssigningCategoryMarkerStyleEventArgsDescriptionMetadata } from "./AssigningCategoryMarkerStyleEventArgsDescriptionMetadata";
import { MarkerSeriesDescriptionMetadata } from "./MarkerSeriesDescriptionMetadata";
/**
 * @hidden
 */
export let CategorySeriesDescriptionMetadata = /*@__PURE__*/ (() => {
    class CategorySeriesDescriptionMetadata extends Base {
        static b(a) {
            if (CategorySeriesDescriptionMetadata.a == null) {
                CategorySeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                CategorySeriesDescriptionMetadata.c(CategorySeriesDescriptionMetadata.a);
            }
            if (a.k(CategorySeriesDescriptionMetadata.a)) {
                return;
            }
            a.ac(CategorySeriesDescriptionMetadata.a);
            AssigningCategoryStyleEventArgsDescriptionMetadata.d(a);
            AssigningCategoryMarkerStyleEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            MarkerSeriesDescriptionMetadata.c(a);
            a.item("IsCustomCategoryStyleAllowed", "Boolean");
            a.item("IsCustomCategoryMarkerStyleAllowed", "Boolean");
            a.item("CategoryCollisionMode", "ExportedType:string:CategoryCollisionMode");
            a.item("CategoryCollisionMode@names", "WholeColumn;MatchHeight");
            a.item("UseHighMarkerFidelity", "Boolean");
            a.item("TransitionInMode", "ExportedType:string:CategoryTransitionInMode");
            a.item("TransitionInMode@names", "Auto;FromZero;SweepFromLeft;SweepFromRight;SweepFromTop;SweepFromBottom;SweepFromCenter;AccordionFromLeft;AccordionFromRight;AccordionFromTop;AccordionFromBottom;Expand;SweepFromCategoryAxisMinimum;SweepFromCategoryAxisMaximum;SweepFromValueAxisMinimum;SweepFromValueAxisMaximum;AccordionFromCategoryAxisMinimum;AccordionFromCategoryAxisMaximum;AccordionFromValueAxisMinimum;AccordionFromValueAxisMaximum;FromParent");
            a.item("IsTransitionInEnabled", "Boolean");
            a.item("AssigningCategoryStyleRef", "EventRef::assigningCategoryStyle");
            a.item("AssigningCategoryMarkerStyleRef", "EventRef::assigningCategoryMarkerStyle");
        }
        static d(a) {
            CategorySeriesDescriptionMetadata.b(a);
            a.ad("CategorySeries", CategorySeriesDescriptionMetadata.a);
        }
    }
    CategorySeriesDescriptionMetadata.$t = /*@__PURE__*/ markType(CategorySeriesDescriptionMetadata, 'CategorySeriesDescriptionMetadata');
    CategorySeriesDescriptionMetadata.a = null;
    return CategorySeriesDescriptionMetadata;
})();
