/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, markType } from "./type";
import { ISchedulableRender_$type } from "./ISchedulableRender";
/**
 * @hidden
 */
export let SchedulableRenderWrapper = /*@__PURE__*/ (() => {
    class SchedulableRenderWrapper extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        get b() {
            return this.a;
        }
        get d() {
            let a = this.b;
            return a != null;
        }
        get isDirty() {
            let a = this.b;
            return a != null ? a.isDirty : false;
        }
        set isDirty(a) {
            let b = this.b;
            if (b != null) {
                b.isDirty = a;
            }
        }
        undirty(a) {
            let b = this.b;
            if (b != null) {
                b.undirty(a);
            }
        }
        get index() {
            let a = this.b;
            return a != null ? a.index : 0;
        }
        postRender() {
            let a = this.b;
            if (a != null) {
                a.postRender();
            }
        }
        preRender() {
            let a = this.b;
            if (a != null) {
                a.preRender();
            }
        }
        isValid() {
            let a = this.b;
            if (a != null) {
                a.isValid();
            }
            return false;
        }
        equals(a) {
            let b = typeCast(SchedulableRenderWrapper.$, a);
            if (b == null) {
                return super.equals(a);
            }
            let c = b.b;
            let d = this.b;
            return Base.equalsStatic(c, d);
        }
    }
    SchedulableRenderWrapper.$t = /*@__PURE__*/ markType(SchedulableRenderWrapper, 'SchedulableRenderWrapper', Base.$, [ISchedulableRender_$type]);
    return SchedulableRenderWrapper;
})();
