/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let HighlightingInfoDescription = /*@__PURE__*/ (() => {
    class HighlightingInfoDescription extends Description {
        get_type() {
            return "HighlightingInfo";
        }
        get type() {
            return this.get_type();
        }
        constructor() {
            super();
            this.q = 0;
            this.p = 0;
            this.u = null;
            this.n = 0;
            this.j = false;
            this.i = false;
            this.h = false;
            this.t = null;
        }
        get startIndex() {
            return this.q;
        }
        set startIndex(a) {
            this.q = a;
            this.g("StartIndex");
        }
        get endIndex() {
            return this.p;
        }
        set endIndex(a) {
            this.p = a;
            this.g("EndIndex");
        }
        get state() {
            return this.u;
        }
        set state(a) {
            this.u = a;
            this.g("State");
        }
        get progress() {
            return this.n;
        }
        set progress(a) {
            this.n = a;
            this.g("Progress");
        }
        get isMarker() {
            return this.j;
        }
        set isMarker(a) {
            this.j = a;
            this.g("IsMarker");
        }
        get isFullRange() {
            return this.i;
        }
        set isFullRange(a) {
            this.i = a;
            this.g("IsFullRange");
        }
        get isExclusive() {
            return this.h;
        }
        set isExclusive(a) {
            this.h = a;
            this.g("IsExclusive");
        }
        get contextRef() {
            return this.t;
        }
        set contextRef(a) {
            this.t = a;
            this.g("ContextRef");
        }
    }
    HighlightingInfoDescription.$t = /*@__PURE__*/ markType(HighlightingInfoDescription, 'HighlightingInfoDescription', Description.$);
    return HighlightingInfoDescription;
})();
