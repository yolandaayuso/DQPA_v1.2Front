/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { DataPieBaseChartDescriptionMetadata } from "./DataPieBaseChartDescriptionMetadata";
import { DataPieChartDescription } from "./DataPieChartDescription";
/**
 * @hidden
 */
export let DataPieChartDescriptionMetadata = /*@__PURE__*/ (() => {
    class DataPieChartDescriptionMetadata extends Base {
        static b(a) {
            if (DataPieChartDescriptionMetadata.a == null) {
                DataPieChartDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DataPieChartDescriptionMetadata.c(DataPieChartDescriptionMetadata.a);
            }
            if (a.k(DataPieChartDescriptionMetadata.a)) {
                return;
            }
            a.ac(DataPieChartDescriptionMetadata.a);
        }
        static c(a) {
            DataPieBaseChartDescriptionMetadata.c(a);
            a.item("TransitionInDuration", "Number:int");
            a.item("TransitionOutDuration", "Number:int");
            a.item("TransitionInEasingFunctionRef", "(w:TransitionInEasingFunction,wf:TransitionInEasingFunction)MethodRef");
            a.item("TransitionOutEasingFunctionRef", "(w:TransitionOutEasingFunction,wf:TransitionOutEasingFunction)MethodRef");
            a.item("ChartType", "ExportedType:string:DataPieChartType");
            a.item("ChartType@names", "Auto;PieSingleRing");
            a.item("IsTransitionInEnabled", "Boolean");
            a.item("TransitionInMode", "ExportedType:string:CategoryTransitionInMode");
            a.item("TransitionInMode@names", "Auto;FromZero;SweepFromLeft;SweepFromRight;SweepFromTop;SweepFromBottom;SweepFromCenter;AccordionFromLeft;AccordionFromRight;AccordionFromTop;AccordionFromBottom;Expand;SweepFromCategoryAxisMinimum;SweepFromCategoryAxisMaximum;SweepFromValueAxisMinimum;SweepFromValueAxisMaximum;AccordionFromCategoryAxisMinimum;AccordionFromCategoryAxisMaximum;AccordionFromValueAxisMinimum;AccordionFromValueAxisMaximum;FromParent");
            a.item("TransitionInSpeedType", "ExportedType:string:TransitionInSpeedType");
            a.item("TransitionInSpeedType@names", "Auto;Normal;ValueScaled;IndexScaled;Random");
            DataPieChartDescriptionMetadata.e(a);
        }
        static d(a) {
            DataPieChartDescriptionMetadata.b(a);
            a.ae("DataPieChart", () => new DataPieChartDescription());
            a.ad("DataPieChart", DataPieChartDescriptionMetadata.a);
        }
        static e(a) {
            a.item("TooltipTemplateRef", "(w:ToolTip)DataRef:String");
            a.item("_qualifiedName", "String:Infragistics.Controls.Charts.XamDataPieChart");
            a.item("Width", "(w:Width/DimensionTransform,xam:Width/DimensionTransform)String");
            a.item("Height", "(w:Height/DimensionTransform,xam:Height/DimensionTransform)String");
            a.item("Background", "(wf:BackColor/ColorTransform)Brush");
        }
    }
    DataPieChartDescriptionMetadata.$t = /*@__PURE__*/ markType(DataPieChartDescriptionMetadata, 'DataPieChartDescriptionMetadata');
    DataPieChartDescriptionMetadata.a = null;
    return DataPieChartDescriptionMetadata;
})();
