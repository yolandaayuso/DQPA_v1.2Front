/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebDockManagerPaneDescriptionMetadata } from "./WebDockManagerPaneDescriptionMetadata";
import { WebContentPaneDescription } from "./WebContentPaneDescription";
/**
 * @hidden
 */
export let WebContentPaneDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebContentPaneDescriptionMetadata extends Base {
        static b(a) {
            if (WebContentPaneDescriptionMetadata.a == null) {
                WebContentPaneDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebContentPaneDescriptionMetadata.c(WebContentPaneDescriptionMetadata.a);
            }
            if (a.k(WebContentPaneDescriptionMetadata.a)) {
                return;
            }
            a.ac(WebContentPaneDescriptionMetadata.a);
        }
        static c(a) {
            WebDockManagerPaneDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:ContentPane");
            a.item("__skipModuleRegisterWebComponents", "Boolean");
            a.item("__importTypesWebComponents", "String:igniteui-webcomponents");
            a.item("__marshalByValue", "Boolean");
            a.item("__skipSuffix", "Boolean");
            a.item("Id", "String");
            a.item("PaneType", "(wc:Type)ExportedType:string:DockManagerPaneType");
            a.item("PaneType@names", "SplitPane;ContentPane;TabGroupPane;DocumentHost");
            a.item("ContentId", "String");
            a.item("Header", "String");
            a.item("HeaderId", "String");
            a.item("TabHeaderId", "String");
            a.item("UnpinnedHeaderId", "String");
            a.item("FloatingHeaderId", "String");
            a.item("Size", "Number:double");
            a.item("AllowClose", "Boolean");
            a.item("AllowMaximize", "Boolean");
            a.item("AllowPinning", "Boolean");
            a.item("AllowDocking", "Boolean");
            a.item("AcceptsInnerDock", "Boolean");
            a.item("AllowFloating", "Boolean");
            a.item("UnpinnedSize", "Number:double");
            a.item("IsPinned", "Boolean");
            a.item("IsMaximized", "Boolean");
            a.item("UnpinnedLocation", "ExportedType:string:UnpinnedLocation");
            a.item("UnpinnedLocation@stringUnion", "WebComponents;React");
            a.item("UnpinnedLocation@names", "Top;Bottom;Left;Right");
            a.item("Hidden", "Boolean");
            a.item("Disabled", "Boolean");
            a.item("DocumentOnly", "Boolean");
            WebContentPaneDescriptionMetadata.e(a);
        }
        static d(a) {
            WebContentPaneDescriptionMetadata.b(a);
            a.ae("WebContentPane", () => new WebContentPaneDescription());
            a.ad("WebContentPane", WebContentPaneDescriptionMetadata.a);
        }
        static e(a) {
            a.item("__preferUnsuffixed", "Boolean");
        }
    }
    WebContentPaneDescriptionMetadata.$t = /*@__PURE__*/ markType(WebContentPaneDescriptionMetadata, 'WebContentPaneDescriptionMetadata');
    WebContentPaneDescriptionMetadata.a = null;
    return WebContentPaneDescriptionMetadata;
})();
