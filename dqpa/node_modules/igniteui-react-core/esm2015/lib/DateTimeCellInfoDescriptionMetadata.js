/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { CellInfoDescriptionMetadata } from "./CellInfoDescriptionMetadata";
import { DateTimeCellInfoDescription } from "./DateTimeCellInfoDescription";
/**
 * @hidden
 */
export let DateTimeCellInfoDescriptionMetadata = /*@__PURE__*/ (() => {
    class DateTimeCellInfoDescriptionMetadata extends Base {
        static b(a) {
            if (DateTimeCellInfoDescriptionMetadata.a == null) {
                DateTimeCellInfoDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DateTimeCellInfoDescriptionMetadata.c(DateTimeCellInfoDescriptionMetadata.a);
            }
            if (a.k(DateTimeCellInfoDescriptionMetadata.a)) {
                return;
            }
            a.ac(DateTimeCellInfoDescriptionMetadata.a);
        }
        static c(a) {
            CellInfoDescriptionMetadata.c(a);
            a.item("DateTimeValue", "Date");
            a.item("FormatStringOverride", "String");
            a.item("FormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("FormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("FormatOverrideRef", "(w:FormatOverride,wf:FormatOverride)DataRef");
            a.item("DateTimeFormat", "ExportedType:string:DateTimeFormats");
            a.item("DateTimeFormat@names", "DateShort;DateLong;TimeShort;TimeLong;DateTimeShort;DateTimeLong");
            a.item("IsOffsetValue", "Boolean");
        }
        static d(a) {
            DateTimeCellInfoDescriptionMetadata.b(a);
            a.ae("DateTimeCellInfo", () => new DateTimeCellInfoDescription());
            a.ad("DateTimeCellInfo", DateTimeCellInfoDescriptionMetadata.a);
        }
    }
    DateTimeCellInfoDescriptionMetadata.$t = /*@__PURE__*/ markType(DateTimeCellInfoDescriptionMetadata, 'DateTimeCellInfoDescriptionMetadata');
    DateTimeCellInfoDescriptionMetadata.a = null;
    return DateTimeCellInfoDescriptionMetadata;
})();
