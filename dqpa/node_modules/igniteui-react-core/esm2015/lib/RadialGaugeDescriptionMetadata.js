/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AlignRadialGaugeLabelEventArgsDescriptionMetadata } from "./AlignRadialGaugeLabelEventArgsDescriptionMetadata";
import { FormatRadialGaugeLabelEventArgsDescriptionMetadata } from "./FormatRadialGaugeLabelEventArgsDescriptionMetadata";
import { DoubleValueChangedEventArgsDescriptionMetadata } from "./DoubleValueChangedEventArgsDescriptionMetadata";
import { RadialGaugeDescription } from "./RadialGaugeDescription";
/**
 * @hidden
 */
export let RadialGaugeDescriptionMetadata = /*@__PURE__*/ (() => {
    class RadialGaugeDescriptionMetadata extends Base {
        static e(a) {
            a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:TextStyle/FontFamilyTransform)String");
            a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:TextStyle/FontSizeTransform)Number:double");
            a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontStyle/FontStyleTransform,wf:FontStyle/FontStyleTransform,web:TextStyle/FontStyleTransform)String");
            a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontStyle/FontWeightTransform,wf:FontStyle/FontWeightTransform,web:TextStyle/FontWeightTransform)String");
            a.item("_qualifiedName", "String:Infragistics.Controls.Gauges.XamRadialGauge");
            a.item("Width", "(w:Width/DimensionTransform,xam:Width/DimensionTransform)String");
            a.item("Height", "(w:Height/DimensionTransform,xam:Height/DimensionTransform)String");
            a.item("LegendRef", "(w:Legend)DataRef:String");
            a.item("Background", "(wf:BackColor/ColorTransform)Brush");
        }
        static b(a) {
            if (RadialGaugeDescriptionMetadata.a == null) {
                RadialGaugeDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                RadialGaugeDescriptionMetadata.c(RadialGaugeDescriptionMetadata.a);
            }
            if (a.k(RadialGaugeDescriptionMetadata.a)) {
                return;
            }
            a.ac(RadialGaugeDescriptionMetadata.a);
            AlignRadialGaugeLabelEventArgsDescriptionMetadata.d(a);
            FormatRadialGaugeLabelEventArgsDescriptionMetadata.d(a);
            DoubleValueChangedEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("RangeBrushes", "BrushCollection:string");
            a.item("RangeOutlines", "BrushCollection:string");
            a.item("MinimumValue", "Number:double");
            a.item("ActualMinimumValue", "Number:double");
            a.item("MaximumValue", "Number:double");
            a.item("ActualMaximumValue", "Number:double");
            a.item("Interval", "Number:double");
            a.item("CenterX", "Number:double");
            a.item("CenterY", "Number:double");
            a.item("Value", "Number:double");
            a.item("HighlightValue", "Number:double");
            a.item("ActualHighlightValueOpacity", "Number:double");
            a.item("HighlightValueOpacity", "Number:double");
            a.item("ActualHighlightValueDisplayMode", "ExportedType:string:HighlightedValueDisplayMode");
            a.item("ActualHighlightValueDisplayMode@names", "Auto;Hidden;Overlay");
            a.item("HighlightValueDisplayMode", "ExportedType:string:HighlightedValueDisplayMode");
            a.item("HighlightValueDisplayMode@names", "Auto;Hidden;Overlay");
            a.item("ScaleStartAngle", "Number:double");
            a.item("ScaleEndAngle", "Number:double");
            a.item("ScaleSweepDirection", "ExportedType:string:SweepDirection");
            a.item("ScaleSweepDirection@names", "Counterclockwise;Clockwise");
            a.item("TransitionDuration", "Number:int");
            a.item("TransitionEasingFunctionRef", "(w:TransitionEasingFunction,wf:TransitionEasingFunction)MethodRef");
            a.item("NeedleBrush", "Brush");
            a.item("NeedleOutline", "Brush");
            a.item("NeedleStartExtent", "Number:double");
            a.item("NeedleEndExtent", "Number:double");
            a.item("NeedleShape", "ExportedType:string:RadialGaugeNeedleShape");
            a.item("NeedleShape@names", "None;Rectangle;Triangle;Needle;Trapezoid;RectangleWithBulb;TriangleWithBulb;NeedleWithBulb;TrapezoidWithBulb");
            a.item("NeedleStartWidthRatio", "Number:double");
            a.item("NeedleEndWidthRatio", "Number:double");
            a.item("NeedleBaseFeatureWidthRatio", "Number:double");
            a.item("NeedleBaseFeatureExtent", "Number:double");
            a.item("NeedlePointFeatureWidthRatio", "Number:double");
            a.item("NeedlePointFeatureExtent", "Number:double");
            a.item("NeedlePivotWidthRatio", "Number:double");
            a.item("NeedlePivotInnerWidthRatio", "Number:double");
            a.item("NeedlePivotShape", "ExportedType:string:RadialGaugePivotShape");
            a.item("NeedlePivotShape@names", "None;Circle;CircleWithHole;CircleOverlay;CircleOverlayWithHole;CircleUnderlay;CircleUnderlayWithHole");
            a.item("ScaleStartExtent", "Number:double");
            a.item("NeedlePivotBrush", "Brush");
            a.item("NeedlePivotOutline", "Brush");
            a.item("NeedleStrokeThickness", "Number:double");
            a.item("NeedlePivotStrokeThickness", "Number:double");
            a.item("ScaleEndExtent", "Number:double");
            a.item("LabelExtent", "Number:double");
            a.item("LabelInterval", "Number:double");
            a.item("TickStartExtent", "Number:double");
            a.item("TickEndExtent", "Number:double");
            a.item("TickStrokeThickness", "Number:double");
            a.item("TickBrush", "Brush");
            a.item("FontBrush", "Brush");
            a.item("MinorTickStartExtent", "Number:double");
            a.item("MinorTickEndExtent", "Number:double");
            a.item("MinorTickStrokeThickness", "Number:double");
            a.item("MinorTickBrush", "Brush");
            a.item("MinorTickCount", "Number:double");
            a.item("ScaleBrush", "Brush");
            a.item("BackingBrush", "Brush");
            a.item("BackingOutline", "Brush");
            a.item("BackingStrokeThickness", "Number:double");
            a.item("BackingOuterExtent", "Number:double");
            a.item("BackingOversweep", "Number:double");
            a.item("ScaleOversweep", "Number:double");
            a.item("ScaleOversweepShape", "ExportedType:string:RadialGaugeScaleOversweepShape");
            a.item("ScaleOversweepShape@names", "Auto;Circular;Fitted");
            a.item("BackingCornerRadius", "Number:double");
            a.item("BackingInnerExtent", "Number:double");
            a.item("BackingShape", "ExportedType:string:RadialGaugeBackingShape");
            a.item("BackingShape@names", "Circular;Fitted");
            a.item("Ranges", "Collection:RadialGaugeRange:RadialGaugeRangeCollection:RadialGaugeRange");
            a.item("RadiusMultiplier", "Number:double");
            a.item("DuplicateLabelOmissionStrategy", "ExportedType:string:RadialGaugeDuplicateLabelOmissionStrategy");
            a.item("DuplicateLabelOmissionStrategy@names", "OmitLast;OmitFirst;OmitNeither;OmitBoth");
            a.item("IsNeedleDraggingEnabled", "Boolean");
            a.item("IsNeedleDraggingConstrained", "Boolean");
            a.item("IsHighlightNeedleDraggingEnabled", "Boolean");
            a.item("IsHighlightNeedleDraggingConstrained", "Boolean");
            a.item("Font", "String");
            a.item("LabelFormat", "String");
            a.item("LabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("LabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("TransitionProgress", "Number:double");
            a.item("PixelScalingRatio", "Number:double");
            a.item("ActualPixelScalingRatio", "Number:double");
            a.item("OpticalScalingRatio", "Number:double");
            a.item("OpticalScalingEnabled", "Boolean");
            a.item("OpticalScalingSize", "Number:double");
            a.item("TitleText", "String");
            a.item("SubtitleText", "String");
            a.item("TitleAngle", "Number:double");
            a.item("SubtitleAngle", "Number:double");
            a.item("TitleExtent", "Number:double");
            a.item("SubtitleExtent", "Number:double");
            a.item("TitleBrush", "Brush");
            a.item("SubtitleBrush", "Brush");
            a.item("TitleDisplaysValue", "Boolean");
            a.item("SubtitleDisplaysValue", "Boolean");
            a.item("TitleSnapsToNeedlePivot", "Boolean");
            a.item("SubtitleSnapsToNeedlePivot", "Boolean");
            a.item("SubtitleFormat", "String");
            a.item("SubtitleFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("SubtitleFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("TitleFormat", "String");
            a.item("TitleFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("TitleFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("HighlightLabelText", "String");
            a.item("HighlightLabelAngle", "Number:double");
            a.item("HighlightLabelExtent", "Number:double");
            a.item("HighlightLabelBrush", "Brush");
            a.item("HighlightLabelDisplaysValue", "Boolean");
            a.item("HighlightLabelSnapsToNeedlePivot", "Boolean");
            a.item("HighlightLabelFormat", "String");
            a.item("HighlightLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("HighlightLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("HighlightLabelFontFamily", "(w:HighlightLabelFontFamily/FontFamilyTransform,xam:HighlightLabelFontFamily,wf:HighlightLabelFontFamily,web:highlightLabelTextStyle/FontFamilyTransform)String");
            a.item("HighlightLabelFontSize", "(w:HighlightLabelFontSize,xam:HighlightLabelFontSize,wf:HighlightLabelFontSize,web:highlightLabelTextStyle/FontSizeTransform)Number:double");
            a.item("HighlightLabelFontStyle", "(w:HighlightLabelFontStyle/FontStyleTransform,xam:HighlightLabelFontFamily/FontStyleTransform,wf:HighlightLabelFontFamily/FontStyleTransform,web:highlightLabelTextStyle/FontStyleTransform)String");
            a.item("HighlightLabelFontWeight", "(w:HighlightLabelFontWeight/FontWeightTransform,xam:HighlightLabelFontFamily/FontWeightTransform,wf:HighlightLabelFontFamily/FontWeightTransform,web:highlightLabelTextStyle/FontWeightTransform)String");
            a.item("SubtitleFontFamily", "(w:SubtitleFontFamily/FontFamilyTransform,xam:SubtitleFontFamily,wf:SubtitleFontFamily,web:subtitleTextStyle/FontFamilyTransform)String");
            a.item("SubtitleFontSize", "(w:SubtitleFontSize,xam:SubtitleFontSize,wf:SubtitleFontSize,web:subtitleTextStyle/FontSizeTransform)Number:double");
            a.item("SubtitleFontStyle", "(w:SubtitleFontStyle/FontStyleTransform,xam:SubtitleFontFamily/FontStyleTransform,wf:SubtitleFontFamily/FontStyleTransform,web:subtitleTextStyle/FontStyleTransform)String");
            a.item("SubtitleFontWeight", "(w:SubtitleFontWeight/FontWeightTransform,xam:SubtitleFontFamily/FontWeightTransform,wf:SubtitleFontFamily/FontWeightTransform,web:subtitleTextStyle/FontWeightTransform)String");
            a.item("TitleFontFamily", "(w:TitleFontFamily/FontFamilyTransform,xam:TitleFontFamily,wf:TitleFontFamily,web:titleTextStyle/FontFamilyTransform)String");
            a.item("TitleFontSize", "(w:TitleFontSize,xam:TitleFontSize,wf:TitleFontSize,web:titleTextStyle/FontSizeTransform)Number:double");
            a.item("TitleFontStyle", "(w:TitleFontStyle/FontStyleTransform,xam:TitleFontFamily/FontStyleTransform,wf:TitleFontFamily/FontStyleTransform,web:titleTextStyle/FontStyleTransform)String");
            a.item("TitleFontWeight", "(w:TitleFontWeight/FontWeightTransform,xam:TitleFontFamily/FontWeightTransform,wf:TitleFontFamily/FontWeightTransform,web:titleTextStyle/FontWeightTransform)String");
            a.item("AlignTitleRef", "EventRef::alignTitle");
            a.item("AlignSubtitleRef", "EventRef::alignSubtitle");
            a.item("AlignHighlightLabelRef", "EventRef::alignHighlightLabel");
            a.item("FormatTitleRef", "EventRef::formatTitle");
            a.item("FormatSubtitleRef", "EventRef::formatSubtitle");
            a.item("FormatHighlightLabelRef", "EventRef::formatHighlightLabel");
            a.item("FormatLabelRef", "EventRef::formatLabel");
            a.item("AlignLabelRef", "EventRef::alignLabel");
            a.item("ValueChangedRef", "EventRef::valueChanged");
            a.item("HighlightValueChangedRef", "EventRef::highlightValueChanged");
            a.item("ActualMinimumValueChangeRef", "EventRef::actualMinimumValueChange");
            a.item("ActualMaximumValueChangeRef", "EventRef::actualMaximumValueChange");
            RadialGaugeDescriptionMetadata.e(a);
        }
        static d(a) {
            RadialGaugeDescriptionMetadata.b(a);
            a.ae("RadialGauge", () => new RadialGaugeDescription());
            a.ad("RadialGauge", RadialGaugeDescriptionMetadata.a);
        }
    }
    RadialGaugeDescriptionMetadata.$t = /*@__PURE__*/ markType(RadialGaugeDescriptionMetadata, 'RadialGaugeDescriptionMetadata');
    RadialGaugeDescriptionMetadata.a = null;
    return RadialGaugeDescriptionMetadata;
})();
