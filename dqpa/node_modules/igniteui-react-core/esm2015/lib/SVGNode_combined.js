/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "./type";
import { List$1 } from "./List$1";
import { BrushUtil } from "./BrushUtil";
import { isNaN_ } from "./number";
/**
 * @hidden
 */
export let SVGNode = /*@__PURE__*/ (() => {
    class SVGNode extends Base {
        constructor(a) {
            super();
            this.c = 0;
            this.g = null;
            this.h = null;
            this.f = null;
            this.b = null;
            this.e = null;
            this.e = new List$1(SVGNode.$, 0);
            this.b = a;
        }
        a(a) {
            return null;
        }
        d() {
            return this.c == 4 || this.c == 3 || this.c == 5 || this.c == 6 || this.c == 7 || this.c == 1 || this.c == 2;
        }
    }
    SVGNode.$t = /*@__PURE__*/ markType(SVGNode, 'SVGNode');
    return SVGNode;
})();
/**
 * @hidden
 */
export let SVGPresentationNode = /*@__PURE__*/ (() => {
    class SVGPresentationNode extends SVGNode {
        get l() {
            return this.j;
        }
        set l(a) {
            this.j = a;
            if (this.j != null) {
                this.j.c = this;
                this.j.a = 0;
            }
        }
        get m() {
            return this.k;
        }
        set m(a) {
            this.k = a;
            if (this.k != null) {
                this.k.c = this;
                this.k.a = 1;
            }
        }
        get s() {
            return this.o;
        }
        set s(a) {
            this.o = a;
        }
        get p() {
            return this.n;
        }
        set p(a) {
            this.n = a;
        }
        constructor(a) {
            super(a);
            this.j = null;
            this.k = null;
            this.t = 0;
            this.r = 0;
            this.v = 0;
            this.u = 0;
            this.q = 0;
            this.i = null;
            this.o = NaN;
            this.n = NaN;
            this.t = 1;
            this.r = 4;
            this.q = 1;
            this.l = ((() => {
                let $ret = new SVGBrush();
                $ret.b = 1;
                $ret.c = this;
                $ret.a = 0;
                return $ret;
            })());
            this.m = ((() => {
                let $ret = new SVGBrush();
                $ret.b = 1;
                $ret.c = this;
                $ret.a = 1;
                return $ret;
            })());
        }
        a(a) {
            if (this.b == null) {
                return null;
            }
            let b = this.b;
            while (b != null) {
                if (b.d()) {
                    let c = b;
                    if (a == 0 && c.l != null) {
                        switch (c.l.b) {
                            case 0:
                            case 2: return c.l;
                        }
                    }
                    else if (a == 1 && c.m != null) {
                        switch (c.m.b) {
                            case 0:
                            case 2: return c.m;
                        }
                    }
                }
                b = b.b;
            }
            return super.a(a);
        }
    }
    SVGPresentationNode.$t = /*@__PURE__*/ markType(SVGPresentationNode, 'SVGPresentationNode', SVGNode.$);
    return SVGPresentationNode;
})();
/**
 * @hidden
 */
export let SVGBrush = /*@__PURE__*/ (() => {
    class SVGBrush extends Base {
        constructor() {
            super(...arguments);
            this.e = null;
            this.b = 0;
            this.c = null;
            this.a = 0;
        }
        f(a) {
            switch (this.b) {
                case 0: return null;
                case 1:
                    {
                        if (this.c != null) {
                            let b = this.c.a(this.a);
                            if (b != null) {
                                switch (b.b) {
                                    case 0: return null;
                                    case 1: return this.d(a);
                                    default: return this.d(b.e);
                                }
                            }
                        }
                        return this.d(a);
                    }
                default: return this.d(this.e);
            }
        }
        d(a) {
            if (this.c.d()) {
                let b = this.c;
                if (this.a == 0 && !isNaN_(b.p)) {
                    return BrushUtil.q(a, b.p);
                }
                else if (this.a == 1 && !isNaN_(b.s)) {
                    return BrushUtil.q(a, b.s);
                }
            }
            return a;
        }
    }
    SVGBrush.$t = /*@__PURE__*/ markType(SVGBrush, 'SVGBrush');
    return SVGBrush;
})();
