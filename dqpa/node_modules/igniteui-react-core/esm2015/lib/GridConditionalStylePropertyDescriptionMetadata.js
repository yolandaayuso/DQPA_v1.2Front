/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { FilterExpressionDescriptionMetadata } from "./FilterExpressionDescriptionMetadata";
import { GridConditionFilterStringErrorsParsingEventArgsDescriptionMetadata } from "./GridConditionFilterStringErrorsParsingEventArgsDescriptionMetadata";
import { GridConditionalStylePropertyDescription } from "./GridConditionalStylePropertyDescription";
/**
 * @hidden
 */
export let GridConditionalStylePropertyDescriptionMetadata = /*@__PURE__*/ (() => {
    class GridConditionalStylePropertyDescriptionMetadata extends Base {
        static b(a) {
            if (GridConditionalStylePropertyDescriptionMetadata.a == null) {
                GridConditionalStylePropertyDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                GridConditionalStylePropertyDescriptionMetadata.c(GridConditionalStylePropertyDescriptionMetadata.a);
            }
            if (a.k(GridConditionalStylePropertyDescriptionMetadata.a)) {
                return;
            }
            a.ac(GridConditionalStylePropertyDescriptionMetadata.a);
            FilterExpressionDescriptionMetadata.d(a);
            GridConditionFilterStringErrorsParsingEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("StylingType", "ExportedType:string:GridConditionalStylePropertyStylingType");
            a.item("StylingType@names", "DirectSet;ScaledValue;ValueColorGradient;ValueSelector");
            a.item("MinimumType", "ExportedType:string:GridConditionalStyleBoundType");
            a.item("MinimumType@names", "Value;Percent");
            a.item("MaximumType", "ExportedType:string:GridConditionalStyleBoundType");
            a.item("MaximumType@names", "Value;Percent");
            a.item("PropertyName", "String");
            a.item("InputValueExpression", "ExportedType:IFilterExpression");
            a.item("InputValueExpressionString", "String");
            a.item("ActualInputValueExpression", "ExportedType:IFilterExpression");
            a.item("MinimumInputValueExpression", "ExportedType:IFilterExpression");
            a.item("MinimumInputValueExpressionString", "String");
            a.item("ActualMinimumInputValueExpression", "ExportedType:IFilterExpression");
            a.item("MaximumInputValueExpression", "ExportedType:IFilterExpression");
            a.item("MaximumInputValueExpressionString", "String");
            a.item("ActualMaximumInputValueExpression", "ExportedType:IFilterExpression");
            a.item("SumInputValueExpression", "ExportedType:IFilterExpression");
            a.item("SumInputValueExpressionString", "String");
            a.item("ActualSumInputValueExpression", "ExportedType:IFilterExpression");
            a.item("ValueRef", "(w:Value,wf:Value)DataRef");
            a.item("ShouldSetValue", "Boolean");
            a.item("MinimumColor", "Brush");
            a.item("MaximumColor", "Brush");
            a.item("MinimumInputValueRef", "(w:MinimumInputValue,wf:MinimumInputValue)DataRef");
            a.item("MaximumInputValueRef", "(w:MaximumInputValue,wf:MaximumInputValue)DataRef");
            a.item("SumInputValueRef", "(w:SumInputValue,wf:SumInputValue)DataRef");
            a.item("ColorCollection", "BrushCollection:string");
            a.item("ValueCollectionRef", "(w:ValueCollection,wf:ValueCollection)DataRef:object");
            a.item("FilterStringErrorsParsingRef", "EventRef::filterStringErrorsParsing");
        }
        static d(a) {
            GridConditionalStylePropertyDescriptionMetadata.b(a);
            a.ae("GridConditionalStyleProperty", () => new GridConditionalStylePropertyDescription());
            a.ad("GridConditionalStyleProperty", GridConditionalStylePropertyDescriptionMetadata.a);
        }
    }
    GridConditionalStylePropertyDescriptionMetadata.$t = /*@__PURE__*/ markType(GridConditionalStylePropertyDescriptionMetadata, 'GridConditionalStylePropertyDescriptionMetadata');
    GridConditionalStylePropertyDescriptionMetadata.a = null;
    return GridConditionalStylePropertyDescriptionMetadata;
})();
