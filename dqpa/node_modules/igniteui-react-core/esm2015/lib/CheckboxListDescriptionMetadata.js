/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { CheckedChangedEventArgsDescriptionMetadata } from "./CheckedChangedEventArgsDescriptionMetadata";
import { CheckboxListIndexTypeChangedEventArgsDescriptionMetadata } from "./CheckboxListIndexTypeChangedEventArgsDescriptionMetadata";
import { CheckboxListKeysClearedEventArgsDescriptionMetadata } from "./CheckboxListKeysClearedEventArgsDescriptionMetadata";
import { SelectAllCheckboxChangedEventArgsDescriptionMetadata } from "./SelectAllCheckboxChangedEventArgsDescriptionMetadata";
import { CheckboxListDescription } from "./CheckboxListDescription";
/**
 * @hidden
 */
export let CheckboxListDescriptionMetadata = /*@__PURE__*/ (() => {
    class CheckboxListDescriptionMetadata extends Base {
        static b(a) {
            if (CheckboxListDescriptionMetadata.a == null) {
                CheckboxListDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                CheckboxListDescriptionMetadata.c(CheckboxListDescriptionMetadata.a);
            }
            if (a.k(CheckboxListDescriptionMetadata.a)) {
                return;
            }
            a.ac(CheckboxListDescriptionMetadata.a);
            CheckedChangedEventArgsDescriptionMetadata.d(a);
            CheckboxListIndexTypeChangedEventArgsDescriptionMetadata.d(a);
            CheckboxListKeysClearedEventArgsDescriptionMetadata.d(a);
            SelectAllCheckboxChangedEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("Keys", "Collection:PrimaryKeyValue:GridSelectedKeysCollection:PrimaryKeyValue");
            a.item("PrimaryKey", "Array:string");
            a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)DataRef::object");
            a.item("DataMemberPath", "String");
            a.item("SelectedMemberPath", "String");
            a.item("FilterPlaceholderText", "String");
            a.item("SearchInputType", "ExportedType:string:InputGroupDisplayType");
            a.item("SearchInputType@names", "Line;Box;Border;Search");
            a.item("RowHeight", "Number:int");
            a.item("CellFontFamily", "(w:CellFontFamily/FontFamilyTransform,xam:CellFontFamily,wf:CellFontFamily,web:cellTextStyle/FontFamilyTransform)String");
            a.item("CellFontSize", "(w:CellFontSize,xam:CellFontSize,wf:CellFontSize,web:cellTextStyle/FontSizeTransform)Number:double");
            a.item("CellFontStyle", "(w:CellFontStyle/FontStyleTransform,xam:CellFontFamily/FontStyleTransform,wf:CellFontFamily/FontStyleTransform,web:cellTextStyle/FontStyleTransform)String");
            a.item("CellFontWeight", "(w:CellFontWeight/FontWeightTransform,xam:CellFontFamily/FontWeightTransform,wf:CellFontFamily/FontWeightTransform,web:cellTextStyle/FontWeightTransform)String");
            a.item("IndexType", "ExportedType:string:CheckboxListIndexType");
            a.item("IndexType@names", "Selected;DeSelected");
            a.item("BaseTheme", "ExportedType:string:BaseControlTheme");
            a.item("BaseTheme@names", "Default;DenaliLight;MaterialLight;SlingshotLight;SlingshotDark;RevealLight;RevealDark");
            a.item("Density", "ExportedType:string:ControlDisplayDensity");
            a.item("Density@names", "Auto;Comfortable;Cosy;Compact;Minimal");
            a.item("SearchIconColor", "Brush");
            a.item("SearchBackgroundColor", "Brush");
            a.item("SearchTextColor", "Brush");
            a.item("SearchBorderColor", "Brush");
            a.item("SearchFontFamily", "(w:SearchFontFamily/FontFamilyTransform,xam:SearchFontFamily,wf:SearchFontFamily,web:searchTextStyle/FontFamilyTransform)String");
            a.item("SearchFontSize", "(w:SearchFontSize,xam:SearchFontSize,wf:SearchFontSize,web:searchTextStyle/FontSizeTransform)Number:double");
            a.item("SearchFontStyle", "(w:SearchFontStyle/FontStyleTransform,xam:SearchFontFamily/FontStyleTransform,wf:SearchFontFamily/FontStyleTransform,web:searchTextStyle/FontStyleTransform)String");
            a.item("SearchFontWeight", "(w:SearchFontWeight/FontWeightTransform,xam:SearchFontFamily/FontWeightTransform,wf:SearchFontFamily/FontWeightTransform,web:searchTextStyle/FontWeightTransform)String");
            a.item("CheckboxTickColor", "Brush");
            a.item("CheckboxCheckedBackgroundColor", "Brush");
            a.item("CheckboxUncheckedBackgroundColor", "Brush");
            a.item("CheckboxCheckedBorderColor", "Brush");
            a.item("CheckboxUncheckedBorderColor", "Brush");
            a.item("ScrollbarStyle", "ExportedType:string:ScrollbarStyle");
            a.item("ScrollbarStyle@names", "Default;Fading;Thin");
            a.item("ScrollbarBackground", "Brush");
            a.item("SelectAllCaption", "String");
            a.item("SelectAllCaptionTextColor", "Brush");
            a.item("ActualSelectAllCaptionTextColor", "Brush");
            a.item("ShowSelectAll", "Boolean");
            a.item("BackgroundColor", "Brush");
            a.item("RowHoverBackgroundColor", "Brush");
            a.item("TextColor", "Brush");
            a.item("ShowFilter", "Boolean");
            a.item("IsRowHoverEnabled", "Boolean");
            a.item("SelectedKeyAddedRef", "EventRef::selectedKeyAdded");
            a.item("SelectedKeyRemovedRef", "EventRef::selectedKeyRemoved");
            a.item("CheckedChangedRef", "EventRef::checkedChanged");
            a.item("IndexTypeChangedRef", "EventRef::indexTypeChanged");
            a.item("KeysClearedRef", "EventRef::keysCleared");
            a.item("SelectAllCheckboxChangedRef", "EventRef::selectAllCheckboxChanged");
        }
        static d(a) {
            CheckboxListDescriptionMetadata.b(a);
            a.ae("CheckboxList", () => new CheckboxListDescription());
            a.ad("CheckboxList", CheckboxListDescriptionMetadata.a);
        }
    }
    CheckboxListDescriptionMetadata.$t = /*@__PURE__*/ markType(CheckboxListDescriptionMetadata, 'CheckboxListDescriptionMetadata');
    CheckboxListDescriptionMetadata.a = null;
    return CheckboxListDescriptionMetadata;
})();
