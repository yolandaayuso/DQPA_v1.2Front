/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { SvgIconCollection } from "./SvgIconCollection";
/**
 * @hidden
 */
export let SvgIconRegistry = /*@__PURE__*/ (() => {
    class SvgIconRegistry extends Base {
        constructor() {
            super(...arguments);
            this.d = new Dictionary$2(String_$type, SvgIconCollection.$, 0);
            this.e = new Dictionary$2(String_$type, SvgIconCollection.$, 0);
            this.f = new Dictionary$2(String_$type, SvgIconCollection.$, 0);
        }
        static get instance() {
            if (SvgIconRegistry.b == null) {
                SvgIconRegistry.b = new SvgIconRegistry();
            }
            return SvgIconRegistry.b;
        }
        addSvgPathString(a, b, c) {
            if (a == null) {
                a = "default";
            }
            if (!this.d.containsKey(a)) {
                this.d.item(a, ((() => {
                    let $ret = new SvgIconCollection();
                    $ret.g = a;
                    return $ret;
                })()));
            }
            this.d.item(a).j(b, c);
        }
        getSvgPathString(a, b) {
            if (a == null) {
                a = "default";
            }
            if (this.d.containsKey(a)) {
                return this.d.item(a).f(b);
            }
            return null;
        }
        addSvgPathsString(a, b, c) {
            if (a == null) {
                a = "default";
            }
            if (!this.d.containsKey(a)) {
                this.d.item(a, ((() => {
                    let $ret = new SvgIconCollection();
                    $ret.g = a;
                    return $ret;
                })()));
            }
            this.d.item(a).i(b, c);
        }
        getSvgPathsString(a, b) {
            if (a == null) {
                a = "default";
            }
            if (this.d.containsKey(a)) {
                return this.d.item(a).a(b);
            }
            return null;
        }
        addDataURLString(a, b, c) {
            if (a == null) {
                a = "default";
            }
            if (!this.e.containsKey(a)) {
                this.e.item(a, ((() => {
                    let $ret = new SvgIconCollection();
                    $ret.g = a;
                    return $ret;
                })()));
            }
            this.e.item(a).j(b, c);
        }
        getDataURLString(a, b) {
            if (a == null) {
                a = "default";
            }
            if (this.e.containsKey(a)) {
                return this.e.item(a).f(b);
            }
            return null;
        }
        addIconSource(a, b, c) {
            if (a == null) {
                a = "default";
            }
            if (!this.f.containsKey(a)) {
                this.f.item(a, ((() => {
                    let $ret = new SvgIconCollection();
                    $ret.g = a;
                    return $ret;
                })()));
            }
            this.f.item(a).h(b, c);
        }
        getIconSource(a, b) {
            if (a == null) {
                a = "default";
            }
            if (this.f.containsKey(a)) {
                return this.f.item(a).e(b);
            }
            return null;
        }
    }
    SvgIconRegistry.$t = /*@__PURE__*/ markType(SvgIconRegistry, 'SvgIconRegistry');
    SvgIconRegistry.b = null;
    return SvgIconRegistry;
})();
