/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { DataLegendSeriesValueInfoDescription } from "./DataLegendSeriesValueInfoDescription";
/**
 * @hidden
 */
export let DataLegendSeriesValueInfoDescriptionMetadata = /*@__PURE__*/ (() => {
    class DataLegendSeriesValueInfoDescriptionMetadata extends Base {
        static b(a) {
            if (DataLegendSeriesValueInfoDescriptionMetadata.a == null) {
                DataLegendSeriesValueInfoDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DataLegendSeriesValueInfoDescriptionMetadata.c(DataLegendSeriesValueInfoDescriptionMetadata.a);
            }
            if (a.k(DataLegendSeriesValueInfoDescriptionMetadata.a)) {
                return;
            }
            a.ac(DataLegendSeriesValueInfoDescriptionMetadata.a);
        }
        static c(a) {
            a.item("Value", "Number:double");
            a.item("ValueNegativePrefix", "String");
            a.item("ValueNegativeSuffix", "String");
            a.item("ValuePositivePrefix", "String");
            a.item("ValuePositiveSuffix", "String");
            a.item("FormatWithSeriesColor", "Brush");
            a.item("FormatMinFractions", "Number:int");
            a.item("FormatMaxFractions", "Number:int");
            a.item("FormatUsePositiveColor", "Boolean");
            a.item("FormatUseNegativeColor", "Boolean");
            a.item("FormatAllowCurrency", "Boolean");
            a.item("FormatAllowPercent", "Boolean");
            a.item("FormatAllowDecimal", "Boolean");
            a.item("FormatAllowInteger", "Boolean");
            a.item("FormatAllowAbbreviation", "Boolean");
            a.item("ValueType", "ExportedType:string:DataLegendSeriesValueType");
            a.item("ValueType@names", "Value;Low;High;Open;Close;TypicalPrice;Average;Range;Volume;Change;Angle;Radius;Fill;XValue;YValue;Summary");
            a.item("Index", "Number:int");
            a.item("OrderIndex", "Number:int");
            a.item("IsExcludeByDefault", "Boolean");
            a.item("AllowUnits", "Boolean");
            a.item("AllowLabels", "Boolean");
            a.item("MemberPath", "String");
            a.item("MemberLabel", "String");
            a.item("MemberSymbol", "String");
            a.item("MemberUnit", "String");
        }
        static d(a) {
            DataLegendSeriesValueInfoDescriptionMetadata.b(a);
            a.ae("DataLegendSeriesValueInfo", () => new DataLegendSeriesValueInfoDescription());
            a.ad("DataLegendSeriesValueInfo", DataLegendSeriesValueInfoDescriptionMetadata.a);
        }
    }
    DataLegendSeriesValueInfoDescriptionMetadata.$t = /*@__PURE__*/ markType(DataLegendSeriesValueInfoDescriptionMetadata, 'DataLegendSeriesValueInfoDescriptionMetadata');
    DataLegendSeriesValueInfoDescriptionMetadata.a = null;
    return DataLegendSeriesValueInfoDescriptionMetadata;
})();
