/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { PropertyUpdatedEventArgsDescriptionMetadata } from "./PropertyUpdatedEventArgsDescriptionMetadata";
import { StackedFragmentSeriesDescription } from "./StackedFragmentSeriesDescription";
/**
 * @hidden
 */
export let StackedFragmentSeriesDescriptionMetadata = /*@__PURE__*/ (() => {
    class StackedFragmentSeriesDescriptionMetadata extends Base {
        static b(a) {
            if (StackedFragmentSeriesDescriptionMetadata.a == null) {
                StackedFragmentSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                StackedFragmentSeriesDescriptionMetadata.c(StackedFragmentSeriesDescriptionMetadata.a);
            }
            if (a.k(StackedFragmentSeriesDescriptionMetadata.a)) {
                return;
            }
            a.ac(StackedFragmentSeriesDescriptionMetadata.a);
            PropertyUpdatedEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)DataRef::object");
            a.item("HighlightedDataSourceRef", "(w:HighlightedItemsSource,xam:HighlightedItemsSource,wf:HighlightedItemsSource)DataRef::object");
            a.item("Brush", "Brush");
            a.item("ActualBrush", "Brush");
            a.item("DashArray", "DoubleCollection:double");
            a.item("IsDropShadowEnabled", "Boolean");
            a.item("ActualIsDropShadowEnabled", "Boolean");
            a.item("ShadowBlur", "Number:double");
            a.item("ActualShadowBlur", "Number:double");
            a.item("ShadowColor", "Color");
            a.item("ActualShadowColor", "Color");
            a.item("UseSingleShadow", "Boolean");
            a.item("ActualUseSingleShadow", "Boolean");
            a.item("ShadowOffsetX", "Number:double");
            a.item("ActualShadowOffsetX", "Number:double");
            a.item("ShadowOffsetY", "Number:double");
            a.item("ActualShadowOffsetY", "Number:double");
            a.item("LineCap", "ExportedType:string:PenLineCap");
            a.item("LineCap@names", "Flat;Square;Round;Triangle");
            a.item("ActualLineCap", "ExportedType:string:PenLineCap");
            a.item("ActualLineCap@names", "Flat;Square;Round;Triangle");
            a.item("LegendItemBadgeTemplateRef", "(w:LegendItemBadgeTemplate,wf:LegendItemBadgeTemplate)DataRef::object");
            a.item("ActualLegendItemBadgeTemplateRef", "(w:ActualLegendItemBadgeTemplate,wf:ActualLegendItemBadgeTemplate)DataRef::object");
            a.item("LegendItemTemplateRef", "(w:LegendItemTemplate,wf:LegendItemTemplate)DataRef::object");
            a.item("ActualLegendItemTemplateRef", "(w:ActualLegendItemTemplate,wf:ActualLegendItemTemplate)DataRef::object");
            a.item("LegendItemVisibility", "ExportedType:string:Visibility");
            a.item("LegendItemVisibility@names", "Visible;Collapsed");
            a.item("ActualLegendItemVisibility", "ExportedType:string:Visibility");
            a.item("ActualLegendItemVisibility@names", "Visible;Collapsed");
            a.item("LegendItemBadgeShape", "ExportedType:string:LegendItemBadgeShape");
            a.item("LegendItemBadgeShape@names", "Automatic;Circle;Line;Square;Marker;Bar;Column;Hidden");
            a.item("LegendItemBadgeMode", "ExportedType:string:LegendItemBadgeMode");
            a.item("LegendItemBadgeMode@names", "Simplified;MatchSeries");
            a.item("ActualLegendItemBadgeShape", "ExportedType:string:LegendItemBadgeShape");
            a.item("ActualLegendItemBadgeShape@names", "Automatic;Circle;Line;Square;Marker;Bar;Column;Hidden");
            a.item("ActualLegendItemBadgeMode", "ExportedType:string:LegendItemBadgeMode");
            a.item("ActualLegendItemBadgeMode@names", "Simplified;MatchSeries");
            a.item("MarkerBrush", "Brush");
            a.item("ActualMarkerBrush", "Brush");
            a.item("MarkerOutline", "Brush");
            a.item("ActualMarkerOutline", "Brush");
            a.item("MarkerTemplateRef", "(w:MarkerTemplate,wf:MarkerTemplate)DataRef::object");
            a.item("ActualMarkerTemplateRef", "(w:ActualMarkerTemplate,wf:ActualMarkerTemplate)DataRef::object");
            a.item("MarkerType", "ExportedType:string:MarkerType");
            a.item("MarkerType@names", "Unset;None;Automatic;Circle;Triangle;Pyramid;Square;Diamond;Pentagon;Hexagon;Tetragram;Pentagram;Hexagram;Hidden");
            a.item("ActualMarkerType", "ExportedType:string:MarkerType");
            a.item("ActualMarkerType@names", "Unset;None;Automatic;Circle;Triangle;Pyramid;Square;Diamond;Pentagon;Hexagon;Tetragram;Pentagram;Hexagram;Hidden");
            a.item("MarkerFillMode", "ExportedType:string:MarkerFillMode");
            a.item("MarkerFillMode@names", "Auto;Normal;MatchMarkerOutline");
            a.item("ActualMarkerFillMode", "ExportedType:string:MarkerFillMode");
            a.item("ActualMarkerFillMode@names", "Auto;Normal;MatchMarkerOutline");
            a.item("MarkerOutlineMode", "ExportedType:string:MarkerOutlineMode");
            a.item("MarkerOutlineMode@names", "Auto;Normal;MatchMarkerBrush");
            a.item("ActualMarkerOutlineMode", "ExportedType:string:MarkerOutlineMode");
            a.item("ActualMarkerOutlineMode@names", "Auto;Normal;MatchMarkerBrush");
            a.item("Name", "String");
            a.item("Opacity", "Number:double");
            a.item("ActualOpacity", "Number:double");
            a.item("Outline", "Brush");
            a.item("ActualOutline", "Brush");
            a.item("AreaFillOpacity", "Number:double");
            a.item("ActualAreaFillOpacity", "Number:double");
            a.item("MarkerFillOpacity", "Number:double");
            a.item("ActualMarkerFillOpacity", "Number:double");
            a.item("OutlineMode", "ExportedType:string:SeriesOutlineMode");
            a.item("OutlineMode@names", "Auto;Visible;Collapsed");
            a.item("ActualOutlineMode", "ExportedType:string:SeriesOutlineMode");
            a.item("ActualOutlineMode@names", "Auto;Visible;Collapsed");
            a.item("HighlightingFadeOpacity", "Number:double");
            a.item("ActualHighlightingFadeOpacity", "Number:double");
            a.item("ActualHighlightedValuesDisplayMode", "ExportedType:string:SeriesHighlightedValuesDisplayMode");
            a.item("ActualHighlightedValuesDisplayMode@names", "Auto;Hidden;Overlay");
            a.item("RadiusX", "Number:double");
            a.item("ActualRadiusX", "Number:double");
            a.item("ActualIsSplineShapePartOfRange", "Boolean");
            a.item("IsSplineShapePartOfRange", "Boolean");
            a.item("RadiusY", "Number:double");
            a.item("ActualRadiusY", "Number:double");
            a.item("Thickness", "Number:double");
            a.item("ActualThickness", "Number:double");
            a.item("MarkerThickness", "Number:double");
            a.item("ActualMarkerThickness", "Number:double");
            a.item("Title", "Unknown");
            a.item("TransitionEasingFunctionRef", "(w:TransitionEasingFunction,wf:TransitionEasingFunction)MethodRef");
            a.item("TransitionDuration", "Number:int");
            a.item("TransitionInDuration", "Number:int");
            a.item("TransitionInEasingFunctionRef", "(w:TransitionInEasingFunction,wf:TransitionInEasingFunction)MethodRef");
            a.item("TransitionInMode", "ExportedType:string:CategoryTransitionInMode");
            a.item("TransitionInMode@names", "Auto;FromZero;SweepFromLeft;SweepFromRight;SweepFromTop;SweepFromBottom;SweepFromCenter;AccordionFromLeft;AccordionFromRight;AccordionFromTop;AccordionFromBottom;Expand;SweepFromCategoryAxisMinimum;SweepFromCategoryAxisMaximum;SweepFromValueAxisMinimum;SweepFromValueAxisMaximum;AccordionFromCategoryAxisMinimum;AccordionFromCategoryAxisMaximum;AccordionFromValueAxisMinimum;AccordionFromValueAxisMaximum;FromParent");
            a.item("IsTransitionInEnabled", "Boolean");
            a.item("TransitionInSpeedType", "ExportedType:string:TransitionInSpeedType");
            a.item("TransitionInSpeedType@names", "Auto;Normal;ValueScaled;IndexScaled;Random");
            a.item("ActualIsTransitionInEnabled", "Boolean");
            a.item("ActualTransitionInDuration", "Number:int");
            a.item("ActualTransitionInMode", "ExportedType:string:CategoryTransitionInMode");
            a.item("ActualTransitionInMode@names", "Auto;FromZero;SweepFromLeft;SweepFromRight;SweepFromTop;SweepFromBottom;SweepFromCenter;AccordionFromLeft;AccordionFromRight;AccordionFromTop;AccordionFromBottom;Expand;SweepFromCategoryAxisMinimum;SweepFromCategoryAxisMaximum;SweepFromValueAxisMinimum;SweepFromValueAxisMaximum;AccordionFromCategoryAxisMinimum;AccordionFromCategoryAxisMaximum;AccordionFromValueAxisMinimum;AccordionFromValueAxisMaximum;FromParent");
            a.item("ActualTransitionInSpeedType", "ExportedType:string:TransitionInSpeedType");
            a.item("ActualTransitionInSpeedType@names", "Auto;Normal;ValueScaled;IndexScaled;Random");
            a.item("ActualTransitionInEasingFunctionRef", "(w:ActualTransitionInEasingFunction,wf:ActualTransitionInEasingFunction)MethodRef");
            a.item("ActualTransitionEasingFunctionRef", "(w:ActualTransitionEasingFunction,wf:ActualTransitionEasingFunction)MethodRef");
            a.item("ActualTransitionDuration", "Number:int");
            a.item("ValueMemberPath", "String");
            a.item("ValueMemberAsLegendLabel", "String");
            a.item("ValueMemberAsLegendUnit", "String");
            a.item("ActualValueMemberAsLegendLabel", "String");
            a.item("ActualValueMemberAsLegendUnit", "String");
            a.item("DataLegendGroup", "String");
            a.item("HighlightedValuesDataLegendGroup", "String");
            a.item("ActualDataLegendGroup", "String");
            a.item("ActualHighlightedValuesDataLegendGroup", "String");
            a.item("Visibility", "ExportedType:string:Visibility");
            a.item("Visibility@names", "Visible;Collapsed");
            a.item("ActualVisibility", "ExportedType:string:Visibility");
            a.item("ActualVisibility@names", "Visible;Collapsed");
            a.item("ParentOrLocalBrush", "Brush");
            a.item("PropertyUpdatedRef", "EventRef::propertyUpdated");
        }
        static d(a) {
            StackedFragmentSeriesDescriptionMetadata.b(a);
            a.ae("StackedFragmentSeries", () => new StackedFragmentSeriesDescription());
            a.ad("StackedFragmentSeries", StackedFragmentSeriesDescriptionMetadata.a);
        }
    }
    StackedFragmentSeriesDescriptionMetadata.$t = /*@__PURE__*/ markType(StackedFragmentSeriesDescriptionMetadata, 'StackedFragmentSeriesDescriptionMetadata');
    StackedFragmentSeriesDescriptionMetadata.a = null;
    return StackedFragmentSeriesDescriptionMetadata;
})();
