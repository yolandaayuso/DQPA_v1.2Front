/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let FinancialChartDescription = /*@__PURE__*/ (() => {
    class FinancialChartDescription extends XYChartDescription {
        get tooltipTemplateRef() {
            return this.y1;
        }
        set tooltipTemplateRef(a) {
            this.y1 = a;
            this.g("TooltipTemplateRef");
        }
        get width() {
            return this.y3;
        }
        set width(a) {
            this.y3 = a;
            this.g("Width");
        }
        get height() {
            return this.y0;
        }
        set height(a) {
            this.y0 = a;
            this.g("Height");
        }
        get background() {
            return this.yy;
        }
        set background(a) {
            this.yy = a;
            this.g("Background");
        }
        get_type() {
            return "FinancialChart";
        }
        constructor() {
            super();
            this.y1 = null;
            this.y3 = null;
            this.y0 = null;
            this.yy = null;
            this.xn = 0;
            this.wz = false;
            this.xr = 0;
            this.w7 = false;
            this.yq = 0;
            this.xy = 0;
            this.x0 = 0;
            this.xz = 0;
            this.x1 = 0;
            this.y2 = null;
            this.y4 = null;
            this.xt = 0;
            this.xw = 0;
            this.xu = 0;
            this.xv = 0;
            this.xx = 0;
            this.y6 = null;
            this.w1 = false;
            this.yz = null;
            this.y5 = null;
            this.w3 = false;
            this.wb = null;
            this.wg = null;
            this.w5 = false;
            this.xq = 0;
            this.w4 = false;
            this.w6 = false;
            this.y7 = null;
            this.wc = null;
            this.wd = null;
            this.we = null;
            this.wf = null;
            this.wj = null;
            this.wi = null;
            this.wa = null;
            this.v8 = null;
            this.xs = 0;
            this.xp = 0;
            this.xo = 0;
            this.xm = 0;
            this.v9 = null;
            this.ym = 0;
            this.xl = 0;
            this.yp = 0;
            this.yn = 0;
            this.yl = 0;
            this.yo = 0;
            this.wh = null;
            this.v7 = null;
            this.w2 = false;
            this.y8 = null;
            this.x2 = 0;
            this.w0 = false;
            this.xi = new Date();
            this.xh = new Date();
            this.wk = null;
            this.yx = null;
        }
        get leftMargin() {
            return this.xn;
        }
        set leftMargin(a) {
            this.xn = a;
            this.g("LeftMargin");
        }
        get isHorizontalZoomEnabled() {
            return this.wz;
        }
        set isHorizontalZoomEnabled(a) {
            this.wz = a;
            this.g("IsHorizontalZoomEnabled");
        }
        get toolbarHeight() {
            return this.xr;
        }
        set toolbarHeight(a) {
            this.xr = a;
            this.g("ToolbarHeight");
        }
        get yAxisIsLogarithmic() {
            return this.w7;
        }
        set yAxisIsLogarithmic(a) {
            this.w7 = a;
            this.g("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.yq;
        }
        set yAxisLogarithmBase(a) {
            this.yq = a;
            this.g("YAxisLogarithmBase");
        }
        get yAxisInterval() {
            return this.xy;
        }
        set yAxisInterval(a) {
            this.xy = a;
            this.g("YAxisInterval");
        }
        get yAxisMinimumValue() {
            return this.x0;
        }
        set yAxisMinimumValue(a) {
            this.x0 = a;
            this.g("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.xz;
        }
        set yAxisMaximumValue(a) {
            this.xz = a;
            this.g("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.x1;
        }
        set yAxisMinorInterval(a) {
            this.x1 = a;
            this.g("YAxisMinorInterval");
        }
        get volumeType() {
            return this.y2;
        }
        set volumeType(a) {
            this.y2 = a;
            this.g("VolumeType");
        }
        get xAxisMode() {
            return this.y4;
        }
        set xAxisMode(a) {
            this.y4 = a;
            this.g("XAxisMode");
        }
        get xAxisZoomMaximumCategoryRange() {
            return this.xt;
        }
        set xAxisZoomMaximumCategoryRange(a) {
            this.xt = a;
            this.g("XAxisZoomMaximumCategoryRange");
        }
        get xAxisZoomToCategoryStart() {
            return this.xw;
        }
        set xAxisZoomToCategoryStart(a) {
            this.xw = a;
            this.g("XAxisZoomToCategoryStart");
        }
        get xAxisZoomMaximumItemSpan() {
            return this.xu;
        }
        set xAxisZoomMaximumItemSpan(a) {
            this.xu = a;
            this.g("XAxisZoomMaximumItemSpan");
        }
        get xAxisZoomToCategoryRange() {
            return this.xv;
        }
        set xAxisZoomToCategoryRange(a) {
            this.xv = a;
            this.g("XAxisZoomToCategoryRange");
        }
        get xAxisZoomToItemSpan() {
            return this.xx;
        }
        set xAxisZoomToItemSpan(a) {
            this.xx = a;
            this.g("XAxisZoomToItemSpan");
        }
        get yAxisMode() {
            return this.y6;
        }
        set yAxisMode(a) {
            this.y6 = a;
            this.g("YAxisMode");
        }
        get isToolbarVisible() {
            return this.w1;
        }
        set isToolbarVisible(a) {
            this.w1 = a;
            this.g("IsToolbarVisible");
        }
        get chartType() {
            return this.yz;
        }
        set chartType(a) {
            this.yz = a;
            this.g("ChartType");
        }
        get yAxisLabelHorizontalAlignment() {
            return this.y5;
        }
        set yAxisLabelHorizontalAlignment(a) {
            this.y5 = a;
            this.g("YAxisLabelHorizontalAlignment");
        }
        get isWindowSyncedToVisibleRange() {
            return this.w3;
        }
        set isWindowSyncedToVisibleRange(a) {
            this.w3 = a;
            this.g("IsWindowSyncedToVisibleRange");
        }
        get indicatorTypes() {
            return this.wb;
        }
        set indicatorTypes(a) {
            this.wb = a;
            this.g("IndicatorTypes");
        }
        get overlayTypes() {
            return this.wg;
        }
        set overlayTypes(a) {
            this.wg = a;
            this.g("OverlayTypes");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.w5;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.w5 = a;
            this.g("YAxisAbbreviateLargeNumbers");
        }
        get resolution() {
            return this.xq;
        }
        set resolution(a) {
            this.xq = a;
            this.g("Resolution");
        }
        get xAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.w4;
        }
        set xAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.w4 = a;
            this.g("XAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get yAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.w6;
        }
        set yAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.w6 = a;
            this.g("YAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get zoomSliderType() {
            return this.y7;
        }
        set zoomSliderType(a) {
            this.y7 = a;
            this.g("ZoomSliderType");
        }
        get negativeBrushes() {
            return this.wc;
        }
        set negativeBrushes(a) {
            this.wc = a;
            this.g("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.wd;
        }
        set negativeOutlines(a) {
            this.wd = a;
            this.g("NegativeOutlines");
        }
        get overlayBrushes() {
            return this.we;
        }
        set overlayBrushes(a) {
            this.we = a;
            this.g("OverlayBrushes");
        }
        get overlayOutlines() {
            return this.wf;
        }
        set overlayOutlines(a) {
            this.wf = a;
            this.g("OverlayOutlines");
        }
        get volumeOutlines() {
            return this.wj;
        }
        set volumeOutlines(a) {
            this.wj = a;
            this.g("VolumeOutlines");
        }
        get volumeBrushes() {
            return this.wi;
        }
        set volumeBrushes(a) {
            this.wi = a;
            this.g("VolumeBrushes");
        }
        get indicatorNegativeBrushes() {
            return this.wa;
        }
        set indicatorNegativeBrushes(a) {
            this.wa = a;
            this.g("IndicatorNegativeBrushes");
        }
        get indicatorBrushes() {
            return this.v8;
        }
        set indicatorBrushes(a) {
            this.v8 = a;
            this.g("IndicatorBrushes");
        }
        get volumeThickness() {
            return this.xs;
        }
        set volumeThickness(a) {
            this.xs = a;
            this.g("VolumeThickness");
        }
        get overlayThickness() {
            return this.xp;
        }
        set overlayThickness(a) {
            this.xp = a;
            this.g("OverlayThickness");
        }
        get overlayMultiplier() {
            return this.xo;
        }
        set overlayMultiplier(a) {
            this.xo = a;
            this.g("OverlayMultiplier");
        }
        get indicatorThickness() {
            return this.xm;
        }
        set indicatorThickness(a) {
            this.xm = a;
            this.g("IndicatorThickness");
        }
        get indicatorDisplayTypes() {
            return this.v9;
        }
        set indicatorDisplayTypes(a) {
            this.v9 = a;
            this.g("IndicatorDisplayTypes");
        }
        get indicatorPeriod() {
            return this.ym;
        }
        set indicatorPeriod(a) {
            this.ym = a;
            this.g("IndicatorPeriod");
        }
        get indicatorMultiplier() {
            return this.xl;
        }
        set indicatorMultiplier(a) {
            this.xl = a;
            this.g("IndicatorMultiplier");
        }
        get indicatorSmoothingPeriod() {
            return this.yp;
        }
        set indicatorSmoothingPeriod(a) {
            this.yp = a;
            this.g("IndicatorSmoothingPeriod");
        }
        get indicatorShortPeriod() {
            return this.yn;
        }
        set indicatorShortPeriod(a) {
            this.yn = a;
            this.g("IndicatorShortPeriod");
        }
        get indicatorLongPeriod() {
            return this.yl;
        }
        set indicatorLongPeriod(a) {
            this.yl = a;
            this.g("IndicatorLongPeriod");
        }
        get indicatorSignalPeriod() {
            return this.yo;
        }
        set indicatorSignalPeriod(a) {
            this.yo = a;
            this.g("IndicatorSignalPeriod");
        }
        get rangeSelectorOptions() {
            return this.wh;
        }
        set rangeSelectorOptions(a) {
            this.wh = a;
            this.g("RangeSelectorOptions");
        }
        get customIndicatorNames() {
            return this.v7;
        }
        set customIndicatorNames(a) {
            this.v7 = a;
            this.g("CustomIndicatorNames");
        }
        get isVerticalZoomEnabled() {
            return this.w2;
        }
        set isVerticalZoomEnabled(a) {
            this.w2 = a;
            this.g("IsVerticalZoomEnabled");
        }
        get zoomSliderXAxisMajorStroke() {
            return this.y8;
        }
        set zoomSliderXAxisMajorStroke(a) {
            this.y8 = a;
            this.g("ZoomSliderXAxisMajorStroke");
        }
        get zoomSliderXAxisMajorStrokeThickness() {
            return this.x2;
        }
        set zoomSliderXAxisMajorStrokeThickness(a) {
            this.x2 = a;
            this.g("ZoomSliderXAxisMajorStrokeThickness");
        }
        get isLegendVisible() {
            return this.w0;
        }
        set isLegendVisible(a) {
            this.w0 = a;
            this.g("IsLegendVisible");
        }
        get xAxisMinimumValue() {
            return this.xi;
        }
        set xAxisMinimumValue(a) {
            this.xi = a;
            this.g("XAxisMinimumValue");
        }
        get xAxisMaximumValue() {
            return this.xh;
        }
        set xAxisMaximumValue(a) {
            this.xh = a;
            this.g("XAxisMaximumValue");
        }
        get xAxisBreaks() {
            return this.wk;
        }
        set xAxisBreaks(a) {
            this.wk = a;
            this.g("XAxisBreaks");
        }
        get applyCustomIndicatorsRef() {
            return this.yx;
        }
        set applyCustomIndicatorsRef(a) {
            this.yx = a;
            this.g("ApplyCustomIndicatorsRef");
        }
    }
    FinancialChartDescription.$t = /*@__PURE__*/ markType(FinancialChartDescription, 'FinancialChartDescription', XYChartDescription.$);
    return FinancialChartDescription;
})();
