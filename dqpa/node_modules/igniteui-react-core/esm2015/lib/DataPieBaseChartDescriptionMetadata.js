/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { RadialBaseChartDescriptionMetadata } from "./RadialBaseChartDescriptionMetadata";
/**
 * @hidden
 */
export let DataPieBaseChartDescriptionMetadata = /*@__PURE__*/ (() => {
    class DataPieBaseChartDescriptionMetadata extends Base {
        static b(a) {
            if (DataPieBaseChartDescriptionMetadata.a == null) {
                DataPieBaseChartDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DataPieBaseChartDescriptionMetadata.c(DataPieBaseChartDescriptionMetadata.a);
            }
            if (a.k(DataPieBaseChartDescriptionMetadata.a)) {
                return;
            }
            a.ac(DataPieBaseChartDescriptionMetadata.a);
        }
        static c(a) {
            RadialBaseChartDescriptionMetadata.c(a);
            a.item("SliceLabelFormat", "String");
            a.item("SliceLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("SliceLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("LegendSliceLabelFormat", "String");
            a.item("LegendSliceLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("LegendSliceLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("OthersSliceLabelFormat", "String");
            a.item("OthersSliceLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("OthersSliceLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("LegendOthersSliceLabelFormat", "String");
            a.item("LegendOthersSliceLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("LegendOthersSliceLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("InnerExtent", "Number:double");
            a.item("SweepDirection", "ExportedType:string:PieChartSweepDirection");
            a.item("SweepDirection@names", "Auto;Clockwise;Counterclockwise");
            a.item("SliceLabelPositionMode", "ExportedType:string:CalloutCollisionMode");
            a.item("SliceLabelPositionMode@names", "Auto;SimulatedAnnealing;Greedy;GreedyCenterOfMass;RadialBestFit;RadialInsideEnd;RadialOutsideEnd;RadialCenter");
            a.item("LightSliceLabelColor", "Brush");
            a.item("DarkSliceLabelColor", "Brush");
            a.item("ValueMemberPath", "String");
            a.item("LegendLabelMemberPath", "String");
            a.item("LegendEmptyValuesMode", "ExportedType:string:LegendEmptyValuesMode");
            a.item("LegendEmptyValuesMode@names", "AlwaysHidden;AlwaysVisible;ShowWhenNoOthersCategory");
            a.item("OthersCategoryType", "ExportedType:string:OthersCategoryType");
            a.item("OthersCategoryType@names", "Number;Percent");
            a.item("OthersCategoryThreshold", "Number:double");
            a.item("OthersCategoryText", "String");
            a.item("LabelMemberPath", "String");
            a.item("ValueAxisFavorLabellingScaleEnd", "Boolean");
            a.item("ValueAxisAutoRangeBufferMode", "ExportedType:string:AxisRangeBufferMode");
            a.item("ValueAxisAutoRangeBufferMode@names", "Auto;Series;SeriesMinimum;SeriesMaximum;None");
            a.item("AngleAxisInterval", "Number:double");
            a.item("AngleAxisMinorInterval", "Number:double");
            a.item("ValueAxisInterval", "Number:double");
            a.item("ValueAxisIsLogarithmic", "Boolean");
            a.item("ValueAxisLogarithmBase", "Number:int");
            a.item("ValueAxisMinimumValue", "Number:double");
            a.item("ValueAxisMaximumValue", "Number:double");
            a.item("ValueAxisMinorInterval", "Number:double");
            a.item("RadiusExtent", "Number:double");
            a.item("StartAngle", "Number:double");
            a.item("SliceLabelContentSeparator", "String");
            a.item("SliceLabelContentMode", "ExportedType:string:RadialLabelMode");
            a.item("SliceLabelContentMode@names", "Auto;Normal;Value;Percentage;ValueAndPercentage;Label;LabelAndValue;LabelAndPercentage;LabelAndValueAndPercentage");
            a.item("LegendSliceLabelContentMode", "ExportedType:string:RadialLabelMode");
            a.item("LegendSliceLabelContentMode@names", "Auto;Normal;Value;Percentage;ValueAndPercentage;Label;LabelAndValue;LabelAndPercentage;LabelAndValueAndPercentage");
            a.item("AngleAxisFavorLabellingScaleEnd", "Boolean");
            a.item("ValueAxisAbbreviateLargeNumbers", "Boolean");
            a.item("MarkerCollision", "ExportedType:string:CollisionAvoidanceType");
            a.item("MarkerCollision@names", "None;Omit;Fade;OmitAndShift;FadeAndShift");
        }
        static d(a) {
            DataPieBaseChartDescriptionMetadata.b(a);
            a.ad("DataPieBaseChart", DataPieBaseChartDescriptionMetadata.a);
        }
    }
    DataPieBaseChartDescriptionMetadata.$t = /*@__PURE__*/ markType(DataPieBaseChartDescriptionMetadata, 'DataPieBaseChartDescriptionMetadata');
    DataPieBaseChartDescriptionMetadata.a = null;
    return DataPieBaseChartDescriptionMetadata;
})();
