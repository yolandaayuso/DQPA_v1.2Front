/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { OperatorSelectorValueChangedEventArgsDescription } from "./OperatorSelectorValueChangedEventArgsDescription";
/**
 * @hidden
 */
export let OperatorSelectorValueChangedEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class OperatorSelectorValueChangedEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (OperatorSelectorValueChangedEventArgsDescriptionMetadata.a == null) {
                OperatorSelectorValueChangedEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                OperatorSelectorValueChangedEventArgsDescriptionMetadata.c(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);
            }
            if (a.k(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.ac(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);
        }
        static c(a) {
            a.item("OldValue", "ExportedType:string:ColumnComparisonConditionOperatorType");
            a.item("OldValue@names", "Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom");
            a.item("NewValue", "ExportedType:string:ColumnComparisonConditionOperatorType");
            a.item("NewValue@names", "Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom");
        }
        static d(a) {
            OperatorSelectorValueChangedEventArgsDescriptionMetadata.b(a);
            a.ae("OperatorSelectorValueChangedEventArgs", () => new OperatorSelectorValueChangedEventArgsDescription());
            a.ad("OperatorSelectorValueChangedEventArgs", OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);
        }
    }
    OperatorSelectorValueChangedEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(OperatorSelectorValueChangedEventArgsDescriptionMetadata, 'OperatorSelectorValueChangedEventArgsDescriptionMetadata');
    OperatorSelectorValueChangedEventArgsDescriptionMetadata.a = null;
    return OperatorSelectorValueChangedEventArgsDescriptionMetadata;
})();
