/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ColorEditorPanelSelectedValueChangedEventArgsDescriptionMetadata } from "./ColorEditorPanelSelectedValueChangedEventArgsDescriptionMetadata";
import { ColorEditorPanelDescription } from "./ColorEditorPanelDescription";
/**
 * @hidden
 */
export let ColorEditorPanelDescriptionMetadata = /*@__PURE__*/ (() => {
    class ColorEditorPanelDescriptionMetadata extends Base {
        static b(a) {
            if (ColorEditorPanelDescriptionMetadata.a == null) {
                ColorEditorPanelDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                ColorEditorPanelDescriptionMetadata.c(ColorEditorPanelDescriptionMetadata.a);
            }
            if (a.k(ColorEditorPanelDescriptionMetadata.a)) {
                return;
            }
            a.ac(ColorEditorPanelDescriptionMetadata.a);
            ColorEditorPanelSelectedValueChangedEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("Value", "Brush");
            a.item("Density", "ExportedType:string:ControlDisplayDensity");
            a.item("Density@names", "Auto;Comfortable;Cosy;Compact;Minimal");
            a.item("BaseTheme", "ExportedType:string:BaseControlTheme");
            a.item("BaseTheme@names", "Default;DenaliLight;MaterialLight;SlingshotLight;SlingshotDark;RevealLight;RevealDark");
            a.item("BackgroundColor", "Brush");
            a.item("SelectedColorBorderColor", "Brush");
            a.item("SelectedFocusDateBackgroundColor", "Brush");
            a.item("FocusColorBorderColor", "Brush");
            a.item("HoverBackgroundColor", "Brush");
            a.item("TextColor", "Brush");
            a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
            a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
            a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontFamily/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
            a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontFamily/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
            a.item("PixelScalingRatio", "Number:double");
            a.item("ActualPixelScalingRatio", "Number:double");
            a.item("ValueChangedRef", "EventRef::valueChanged");
            a.item("ValueChangingRef", "EventRef::valueChanging");
        }
        static d(a) {
            ColorEditorPanelDescriptionMetadata.b(a);
            a.ae("ColorEditorPanel", () => new ColorEditorPanelDescription());
            a.ad("ColorEditorPanel", ColorEditorPanelDescriptionMetadata.a);
        }
    }
    ColorEditorPanelDescriptionMetadata.$t = /*@__PURE__*/ markType(ColorEditorPanelDescriptionMetadata, 'ColorEditorPanelDescriptionMetadata');
    ColorEditorPanelDescriptionMetadata.a = null;
    return ColorEditorPanelDescriptionMetadata;
})();
