/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FormatSpecifier } from "./FormatSpecifier";
import { Dictionary$2 } from "./Dictionary$2";
import { String_$type, markType } from "./type";
import { stringIsNullOrEmpty } from "./string";
/**
 * @hidden
 */
export let NumberFormatSpecifier = /*@__PURE__*/ (() => {
    class NumberFormatSpecifier extends FormatSpecifier {
        constructor() {
            super();
            this.g = new Dictionary$2(String_$type, String_$type, 0);
            this._locale = null;
            this._compactDisplay = null;
            this._currency = null;
            this._currencyDisplay = null;
            this._currencySign = null;
            this._currencyCode = null;
            this._localeMatcher = null;
            this._notation = null;
            this._numberingSystem = null;
            this._signDisplay = null;
            this._style = null;
            this._unit = null;
            this._unitDisplay = null;
            this._useGrouping = false;
            this._minimumIntegerDigits = 0;
            this._minimumFractionDigits = 0;
            this._maximumFractionDigits = 0;
            this._minimumSignificantDigits = 0;
            this._maximumSignificantDigits = 0;
            this.useGrouping = true;
            this.minimumIntegerDigits = -1;
            this.minimumFractionDigits = -1;
            this.maximumFractionDigits = -1;
            this.minimumSignificantDigits = -1;
            this.maximumSignificantDigits = -1;
            this.z();
        }
        z() {
            this.g = new Dictionary$2(String_$type, String_$type, 0);
            this.g.addItem("ps-AF", "AFN");
            this.g.addItem("prs-AF", "AFN");
            this.g.addItem("sq-AL", "ALL");
            this.g.addItem("ar-DZ", "DZD");
            this.g.addItem("es-AR", "ARS");
            this.g.addItem("hy-AM", "AMD");
            this.g.addItem("pt-AO", "AOA");
            this.g.addItem("en-AU", "AUD");
            this.g.addItem("de-AT", "EUR");
            this.g.addItem("az-AZ", "AZN");
            this.g.addItem("Lt-az-AZ", "AZN");
            this.g.addItem("Cy-az-AZ", "AZN");
            this.g.addItem("ar-BH", "BHD");
            this.g.addItem("eu-ES", "EUR");
            this.g.addItem("be-BY", "BYN");
            this.g.addItem("nl-BE", "EUR");
            this.g.addItem("fr-BE", "EUR");
            this.g.addItem("en-BZ", "BZD");
            this.g.addItem("es-BO", "BOV");
            this.g.addItem("pt-BR", "BRL");
            this.g.addItem("ms-BN", "USD");
            this.g.addItem("bg-BG", "BGN");
            this.g.addItem("km-KH", "KHR");
            this.g.addItem("en-CA", "CAD");
            this.g.addItem("fr-CA", "CAD");
            this.g.addItem("en-CB", "USA");
            this.g.addItem("ca-ES", "EUR");
            this.g.addItem("es-CL", "CLP");
            this.g.addItem("zh-CN", "CNY");
            this.g.addItem("zh-CHS", "CNY");
            this.g.addItem("zh-CHT", "CNY");
            this.g.addItem("es-CO", "COU");
            this.g.addItem("es-CR", "CRC");
            this.g.addItem("hr-HR", "HRK");
            this.g.addItem("cs-CZ", "CZK");
            this.g.addItem("da-DK", "DKK");
            this.g.addItem("es-DO", "DOP");
            this.g.addItem("es-EC", "USD");
            this.g.addItem("ar-EG", "USD");
            this.g.addItem("es-SV", "SVC");
            this.g.addItem("et-EE", "EUR");
            this.g.addItem("fo-FO", "DKK");
            this.g.addItem("kl-GL", "DKK");
            this.g.addItem("fi-FI", "EUR");
            this.g.addItem("sv-FI", "EUR");
            this.g.addItem("fr-FR", "EUR");
            this.g.addItem("gl-ES", "EUR");
            this.g.addItem("ka-GE", "GEL");
            this.g.addItem("de-DE", "EUR");
            this.g.addItem("el-GR", "EUR");
            this.g.addItem("es-GT", "GTQ");
            this.g.addItem("es-HN", "HNL");
            this.g.addItem("zh-HK", "HKD");
            this.g.addItem("hu-HU", "HUF");
            this.g.addItem("is-IS", "ISK");
            this.g.addItem("gu-IN", "INR");
            this.g.addItem("hi-IN", "INR");
            this.g.addItem("kn-IN", "INR");
            this.g.addItem("kok-IN", "INR");
            this.g.addItem("mr-IN", "INR");
            this.g.addItem("pa-IN", "INR");
            this.g.addItem("sa-IN", "INR");
            this.g.addItem("ta-IN", "INR");
            this.g.addItem("te-IN", "INR");
            this.g.addItem("id-ID", "IDR");
            this.g.addItem("fa-IR", "IRR");
            this.g.addItem("ar-IQ", "IQD");
            this.g.addItem("en-IE", "EUR");
            this.g.addItem("he-IL", "ILS");
            this.g.addItem("it-IT", "EUR");
            this.g.addItem("en-JM", "JMD");
            this.g.addItem("ja-JP", "JPY");
            this.g.addItem("ar-JO", "JOD");
            this.g.addItem("kk-KZ", "KZT");
            this.g.addItem("ky-KZ", "KZT");
            this.g.addItem("sw-KE", "KES");
            this.g.addItem("ko-KR", "KPW");
            this.g.addItem("ar-KW", "KWD");
            this.g.addItem("ky-KG", "KGS");
            this.g.addItem("lv-LV", "EUR");
            this.g.addItem("ar-LB", "LBP");
            this.g.addItem("ar-LY", "LYD");
            this.g.addItem("de-LI", "CHF");
            this.g.addItem("lt-LT", "EUR");
            this.g.addItem("fr-LU", "EUR");
            this.g.addItem("de-LU", "EUR");
            this.g.addItem("zh-MO", "MOP");
            this.g.addItem("ms-MY", "MYR");
            this.g.addItem("div-MV", "MVR");
            this.g.addItem("es-MX", "MXN");
            this.g.addItem("fr-MC", "EUR");
            this.g.addItem("mn-MN", "MNT");
            this.g.addItem("sr-Latn-ME", "EUR");
            this.g.addItem("ar-MA", "MAD");
            this.g.addItem("mk-MK", "MKD");
            this.g.addItem("en-NZ", "NZD");
            this.g.addItem("es-NI", "NIO");
            this.g.addItem("nb-NO", "NOK");
            this.g.addItem("nn-NO", "NOK");
            this.g.addItem("ar-OM", "OMR");
            this.g.addItem("ur-PK", "PKR");
            this.g.addItem("es-PA", "PAB");
            this.g.addItem("es-PY", "PYG");
            this.g.addItem("es-PE", "PEN");
            this.g.addItem("en-PH", "PHP");
            this.g.addItem("pl-PL", "PLN");
            this.g.addItem("pt-PT", "EUR");
            this.g.addItem("es-PR", "USD");
            this.g.addItem("ar-QA", "QAR");
            this.g.addItem("ro-RO", "RON");
            this.g.addItem("ru-RU", "RUB");
            this.g.addItem("tt-RU", "RUB");
            this.g.addItem("ar-SA", "SAR");
            this.g.addItem("sr-SP", "RSD");
            this.g.addItem("Lt-sr-SP", "RSD");
            this.g.addItem("Cy-sr-SP", "XOF");
            this.g.addItem("zh-SG", "SGD");
            this.g.addItem("sk-SK", "EUR");
            this.g.addItem("sl-SI", "EUR");
            this.g.addItem("af-ZA", "ZAR");
            this.g.addItem("en-ZA", "ZAR");
            this.g.addItem("es-ES", "EUR");
            this.g.addItem("sv-SE", "EUR");
            this.g.addItem("si-LK", "LKR");
            this.g.addItem("fr-CH", "CHF");
            this.g.addItem("de-CH", "CHF");
            this.g.addItem("it-CH", "CHF");
            this.g.addItem("ar-SY", "SYP");
            this.g.addItem("syr-SY", "SYP");
            this.g.addItem("zh-TW", "TWD");
            this.g.addItem("th-TH", "THB");
            this.g.addItem("nl-NL", "EUR");
            this.g.addItem("en-TT", "TTD");
            this.g.addItem("ar-TN", "TND");
            this.g.addItem("tr-TR", "TRY");
            this.g.addItem("tk-TM", "TMT");
            this.g.addItem("uk-UA", "UAH");
            this.g.addItem("ar-AE", "AED");
            this.g.addItem("en-GB", "GBP");
            this.g.addItem("en-US", "USD");
            this.g.addItem("es-UY", "UYU");
            this.g.addItem("uz-UZ", "UZS");
            this.g.addItem("Cy-uz-UZ", "UZS");
            this.g.addItem("Lt-uz-UZ", "UZS");
            this.g.addItem("es-VE", "VED");
            this.g.addItem("vi-VN", "VND");
            this.g.addItem("ar-YE", "YER");
            this.g.addItem("en-ZW", "ZWL");
        }
        toIntl() {
            let a = {};
            if (this.compactDisplay != null) {
                this.aa(a, "compactDisplay", this.compactDisplay);
            }
            if (this.currency != null) {
                this.aa(a, "currency", this.currency);
            }
            if (this.currencyDisplay != null) {
                this.aa(a, "currencyDisplay", this.currencyDisplay);
            }
            if (this.currencySign != null) {
                this.aa(a, "currencySign", this.currencySign);
            }
            if (this.localeMatcher != null) {
                this.aa(a, "localeMatcher", this.localeMatcher);
            }
            if (this.notation != null) {
                this.aa(a, "notation", this.notation);
            }
            if (this.numberingSystem != null) {
                this.aa(a, "numberingSystem", this.numberingSystem);
            }
            if (this.signDisplay != null) {
                this.aa(a, "signDisplay", this.signDisplay);
            }
            if (this.style != null) {
                this.aa(a, "style", this.style);
            }
            if (this.unit != null) {
                this.aa(a, "unit", this.unit);
            }
            if (this.unitDisplay != null) {
                this.aa(a, "unitDisplay", this.unitDisplay);
            }
            if (this.useGrouping != true) {
                this.aa(a, "useGrouping", this.useGrouping);
            }
            if (this.minimumIntegerDigits != -1) {
                this.aa(a, "minimumIntegerDigits", this.minimumIntegerDigits);
            }
            if (this.minimumFractionDigits != -1) {
                this.aa(a, "minimumFractionDigits", this.minimumFractionDigits);
            }
            if (this.maximumFractionDigits != -1) {
                this.aa(a, "maximumFractionDigits", this.maximumFractionDigits);
            }
            if (this.minimumSignificantDigits != -1) {
                this.aa(a, "minimumSignificantDigits", this.minimumSignificantDigits);
            }
            if (this.maximumSignificantDigits != -1) {
                this.aa(a, "maximumSignificantDigits", this.maximumSignificantDigits);
            }
            let locale_ = stringIsNullOrEmpty(this.locale) ? this.getLocalCulture() : this.locale;
            if (this.style == "currency") {
                if (this.currencyCode != null) {
                    this.aa(a, "currency", this.currencyCode);
                }
                else if (this.g.containsKey(locale_)) {
                    this.aa(a, "currency", this.g.item(locale_));
                }
            }
            let options_ = a;
            return new Intl.NumberFormat(locale_, options_);
        }
        aa(options_, propertyName_, value_) {
            options_[propertyName_] = value_;
        }
        c() {
            return this.toIntl();
        }
        get locale() {
            return this._locale;
        }
        set locale(a) {
            this._locale = a;
        }
        get compactDisplay() {
            return this._compactDisplay;
        }
        set compactDisplay(a) {
            this._compactDisplay = a;
        }
        get currency() {
            return this._currency;
        }
        set currency(a) {
            this._currency = a;
        }
        get currencyDisplay() {
            return this._currencyDisplay;
        }
        set currencyDisplay(a) {
            this._currencyDisplay = a;
        }
        get currencySign() {
            return this._currencySign;
        }
        set currencySign(a) {
            this._currencySign = a;
        }
        get currencyCode() {
            return this._currencyCode;
        }
        set currencyCode(a) {
            this._currencyCode = a;
        }
        get localeMatcher() {
            return this._localeMatcher;
        }
        set localeMatcher(a) {
            this._localeMatcher = a;
        }
        get notation() {
            return this._notation;
        }
        set notation(a) {
            this._notation = a;
        }
        get numberingSystem() {
            return this._numberingSystem;
        }
        set numberingSystem(a) {
            this._numberingSystem = a;
        }
        get signDisplay() {
            return this._signDisplay;
        }
        set signDisplay(a) {
            this._signDisplay = a;
        }
        get style() {
            return this._style;
        }
        set style(a) {
            this._style = a;
        }
        get unit() {
            return this._unit;
        }
        set unit(a) {
            this._unit = a;
        }
        get unitDisplay() {
            return this._unitDisplay;
        }
        set unitDisplay(a) {
            this._unitDisplay = a;
        }
        get useGrouping() {
            return this._useGrouping;
        }
        set useGrouping(a) {
            this._useGrouping = a;
        }
        get minimumIntegerDigits() {
            return this._minimumIntegerDigits;
        }
        set minimumIntegerDigits(a) {
            this._minimumIntegerDigits = a;
        }
        get minimumFractionDigits() {
            return this._minimumFractionDigits;
        }
        set minimumFractionDigits(a) {
            this._minimumFractionDigits = a;
        }
        get maximumFractionDigits() {
            return this._maximumFractionDigits;
        }
        set maximumFractionDigits(a) {
            this._maximumFractionDigits = a;
        }
        get minimumSignificantDigits() {
            return this._minimumSignificantDigits;
        }
        set minimumSignificantDigits(a) {
            this._minimumSignificantDigits = a;
        }
        get maximumSignificantDigits() {
            return this._maximumSignificantDigits;
        }
        set maximumSignificantDigits(a) {
            this._maximumSignificantDigits = a;
        }
    }
    NumberFormatSpecifier.$t = /*@__PURE__*/ markType(NumberFormatSpecifier, 'NumberFormatSpecifier', FormatSpecifier.$);
    return NumberFormatSpecifier;
})();
