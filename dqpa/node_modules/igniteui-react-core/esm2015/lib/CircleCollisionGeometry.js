/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CollisionGeometry } from "./CollisionGeometry";
import { CollisionRect } from "./CollisionRect";
import { Point_$type, markType } from "./type";
import { GeometryUtil } from "./GeometryUtil";
/**
 * @hidden
 */
export let CircleCollisionGeometry = /*@__PURE__*/ (() => {
    class CircleCollisionGeometry extends CollisionGeometry {
        get_type() {
            return 0;
        }
        get type() {
            return this.get_type();
        }
        constructor(a, b, c) {
            super();
            this.h = 0;
            this.i = 0;
            this.j = 0;
            this.g = CollisionRect.empty;
            this.h = a;
            this.i = b;
            this.j = c;
        }
        get_boundingBox() {
            if (this.g.isEmpty) {
                this.g = new CollisionRect(1, this.h - this.j, this.i - this.j, this.j + this.j, this.j + this.j);
            }
            return this.g;
        }
        get boundingBox() {
            return this.get_boundingBox();
        }
        d(a) {
            let b = { $type: Point_$type, x: a.left, y: a.top };
            let c = { $type: Point_$type, x: a.right, y: a.top };
            let d = { $type: Point_$type, x: a.right, y: a.bottom };
            let e = { $type: Point_$type, x: a.left, y: a.bottom };
            let f = { $type: Point_$type, x: this.h, y: this.i };
            let g = this.j;
            return GeometryUtil.c(b, f, g) || GeometryUtil.c(c, f, g) || GeometryUtil.c(d, f, g) || GeometryUtil.c(e, f, g);
        }
    }
    CircleCollisionGeometry.$t = /*@__PURE__*/ markType(CircleCollisionGeometry, 'CircleCollisionGeometry', CollisionGeometry.$);
    return CircleCollisionGeometry;
})();
