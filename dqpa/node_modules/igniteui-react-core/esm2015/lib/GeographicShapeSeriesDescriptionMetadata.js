/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { StyleShapeEventArgsDescriptionMetadata } from "./StyleShapeEventArgsDescriptionMetadata";
import { GeographicShapeSeriesBaseDescriptionMetadata } from "./GeographicShapeSeriesBaseDescriptionMetadata";
import { GeographicShapeSeriesDescription } from "./GeographicShapeSeriesDescription";
/**
 * @hidden
 */
export let GeographicShapeSeriesDescriptionMetadata = /*@__PURE__*/ (() => {
    class GeographicShapeSeriesDescriptionMetadata extends Base {
        static b(a) {
            if (GeographicShapeSeriesDescriptionMetadata.a == null) {
                GeographicShapeSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                GeographicShapeSeriesDescriptionMetadata.c(GeographicShapeSeriesDescriptionMetadata.a);
            }
            if (a.k(GeographicShapeSeriesDescriptionMetadata.a)) {
                return;
            }
            a.ac(GeographicShapeSeriesDescriptionMetadata.a);
            StyleShapeEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            GeographicShapeSeriesBaseDescriptionMetadata.c(a);
            a.item("ShapeStyleSelectorRef", "(w:ShapeStyleSelector,wf:ShapeStyleSelector)DataRef::object");
            a.item("ShapeFill", "(w:ShapeStyle.Fill,wf:ShapeFill)String");
            a.item("ShapeStroke", "(w:ShapeStyle.Stroke,wf:ShapeStroke)String");
            a.item("ShapeStrokeThickness", "(w:ShapeStyle.StrokeThickness,wf:ShapeStrokeThickness)Number:double");
            a.item("ShapeOpacity", "(w:ShapeStyle.Opacity,wf:ShapeOpacity)Number:double");
            a.item("MarkerType", "ExportedType:string:MarkerType");
            a.item("MarkerType@names", "Unset;None;Automatic;Circle;Triangle;Pyramid;Square;Diamond;Pentagon;Hexagon;Tetragram;Pentagram;Hexagram;Hidden");
            a.item("MarkerOutlineMode", "ExportedType:string:MarkerOutlineMode");
            a.item("MarkerOutlineMode@names", "Auto;Normal;MatchMarkerBrush");
            a.item("MarkerFillMode", "ExportedType:string:MarkerFillMode");
            a.item("MarkerFillMode@names", "Auto;Normal;MatchMarkerOutline");
            a.item("MarkerTemplateRef", "(w:MarkerTemplate,wf:MarkerTemplate)DataRef::object");
            a.item("MarkerBrush", "Brush");
            a.item("MarkerOutline", "Brush");
            a.item("MarkerThickness", "Number:double");
            a.item("MarkerCollisionAvoidance", "ExportedType:string:CollisionAvoidanceType");
            a.item("MarkerCollisionAvoidance@names", "None;Omit;Fade;OmitAndShift;FadeAndShift");
            a.item("ActualMarkerTemplateRef", "(w:ActualMarkerTemplate,wf:ActualMarkerTemplate)DataRef::object");
            a.item("ActualMarkerBrush", "Brush");
            a.item("ActualMarkerOutline", "Brush");
            a.item("StyleShapeRef", "EventRef::styleShape");
        }
        static d(a) {
            GeographicShapeSeriesDescriptionMetadata.b(a);
            a.ae("GeographicShapeSeries", () => new GeographicShapeSeriesDescription());
            a.ad("GeographicShapeSeries", GeographicShapeSeriesDescriptionMetadata.a);
        }
    }
    GeographicShapeSeriesDescriptionMetadata.$t = /*@__PURE__*/ markType(GeographicShapeSeriesDescriptionMetadata, 'GeographicShapeSeriesDescriptionMetadata');
    GeographicShapeSeriesDescriptionMetadata.a = null;
    return GeographicShapeSeriesDescriptionMetadata;
})();
