/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "./type";
/**
 * @hidden
 */
export let ExpressionSyntax = /*@__PURE__*/ (() => {
    class ExpressionSyntax extends Base {
        static c(a, b, c, ...d) {
            return null;
        }
        static a(a, ...b) {
            return null;
        }
        static b(a, b) {
            return null;
        }
        static d(a) {
            return null;
        }
        static e(a, b) {
            return null;
        }
    }
    ExpressionSyntax.$t = /*@__PURE__*/ markType(ExpressionSyntax, 'ExpressionSyntax');
    return ExpressionSyntax;
})();
/**
 * @hidden
 */
export let LambdaExpression = /*@__PURE__*/ (() => {
    class LambdaExpression extends ExpressionSyntax {
    }
    LambdaExpression.$t = /*@__PURE__*/ markType(LambdaExpression, 'LambdaExpression', ExpressionSyntax.$);
    return LambdaExpression;
})();
/**
 * @hidden
 */
export let MemberExpression = /*@__PURE__*/ (() => {
    class MemberExpression extends ExpressionSyntax {
        constructor() {
            super(...arguments);
            this.f = null;
        }
        g(a) {
            return null;
        }
    }
    MemberExpression.$t = /*@__PURE__*/ markType(MemberExpression, 'MemberExpression', ExpressionSyntax.$);
    return MemberExpression;
})();
/**
 * @hidden
 */
export let MethodCallExpression = /*@__PURE__*/ (() => {
    class MethodCallExpression extends ExpressionSyntax {
        constructor() {
            super(...arguments);
            this.f = null;
            this.g = null;
        }
        h(a, b) {
            return null;
        }
    }
    MethodCallExpression.$t = /*@__PURE__*/ markType(MethodCallExpression, 'MethodCallExpression', ExpressionSyntax.$);
    return MethodCallExpression;
})();
/**
 * @hidden
 */
export let ParameterExpression = /*@__PURE__*/ (() => {
    class ParameterExpression extends ExpressionSyntax {
        constructor() {
            super(...arguments);
            this.f = false;
            this.g = null;
        }
    }
    ParameterExpression.$t = /*@__PURE__*/ markType(ParameterExpression, 'ParameterExpression', ExpressionSyntax.$);
    return ParameterExpression;
})();
