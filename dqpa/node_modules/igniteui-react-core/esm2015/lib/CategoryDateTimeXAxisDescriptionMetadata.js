/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { TimeAxisBaseDescriptionMetadata } from "./TimeAxisBaseDescriptionMetadata";
import { CategoryDateTimeXAxisDescription } from "./CategoryDateTimeXAxisDescription";
/**
 * @hidden
 */
export let CategoryDateTimeXAxisDescriptionMetadata = /*@__PURE__*/ (() => {
    class CategoryDateTimeXAxisDescriptionMetadata extends Base {
        static b(a) {
            if (CategoryDateTimeXAxisDescriptionMetadata.a == null) {
                CategoryDateTimeXAxisDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                CategoryDateTimeXAxisDescriptionMetadata.c(CategoryDateTimeXAxisDescriptionMetadata.a);
            }
            if (a.k(CategoryDateTimeXAxisDescriptionMetadata.a)) {
                return;
            }
            a.ac(CategoryDateTimeXAxisDescriptionMetadata.a);
        }
        static c(a) {
            TimeAxisBaseDescriptionMetadata.c(a);
            a.item("UnevenlySpacedLabels", "Boolean");
            a.item("DisplayType", "ExportedType:string:TimeAxisDisplayType");
            a.item("DisplayType@names", "Continuous;Discrete");
            a.item("Interval", "Number:long");
            a.item("ActualInterval", "Number:long");
            a.item("MinorInterval", "Number:long");
            a.item("ActualMinorInterval", "Number:long");
            a.item("ActualIntervalChangeRef", "EventRef::actualIntervalChange");
            a.item("ActualMinorIntervalChangeRef", "EventRef::actualMinorIntervalChange");
        }
        static d(a) {
            CategoryDateTimeXAxisDescriptionMetadata.b(a);
            a.ae("CategoryDateTimeXAxis", () => new CategoryDateTimeXAxisDescription());
            a.ad("CategoryDateTimeXAxis", CategoryDateTimeXAxisDescriptionMetadata.a);
        }
    }
    CategoryDateTimeXAxisDescriptionMetadata.$t = /*@__PURE__*/ markType(CategoryDateTimeXAxisDescriptionMetadata, 'CategoryDateTimeXAxisDescriptionMetadata');
    CategoryDateTimeXAxisDescriptionMetadata.a = null;
    return CategoryDateTimeXAxisDescriptionMetadata;
})();
