/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "./type";
import { List$1 } from "./List$1";
import { IKeyFrameAnimation_$type } from "./IKeyFrameAnimation";
/**
 * @hidden
 */
export let PopupAnimation = /*@__PURE__*/ (() => {
    class PopupAnimation extends Base {
        constructor() {
            super();
            this.d = 0;
            this.a = false;
            this.b = false;
            this.c = null;
            this.c = new List$1(IKeyFrameAnimation_$type, 0);
        }
        f() {
            for (let a = 0; a < this.c.count; a++) {
                let b = this.c._inner[a];
                for (let c = 0; c < b.effect.h.length; c++) {
                    for (let d = 0; d < b.effect.h[c].b.length; d++) {
                        let e = b.effect.h[c].b[d].a;
                        for (let f = 0; f < b.effect.f.length; f++) {
                            if (b.effect.f[f] == e) {
                                b.effect.g[f].c(b.effect.a4, b.effect.h[c].b[d].d);
                            }
                        }
                    }
                }
            }
        }
        h(a) {
            this.a = false;
            this.d = 0;
            this.b = true;
            for (let b = 0; b < this.c.count; b++) {
                this.c._inner[b].play();
                this.c._inner[b].finished.f((c) => {
                    this.d++;
                    if (this.d == this.c.count && a != null) {
                        this.b = false;
                        a(this.a);
                    }
                });
            }
        }
        e() {
            this.a = true;
            for (let a = 0; a < this.c.count; a++) {
                if (this.c._inner[a].playState == 1) {
                    this.c._inner[a].cancel();
                }
            }
        }
        i() {
            for (let a = 0; a < this.c.count; a++) {
                this.c._inner[a].reverse();
            }
        }
        g() {
            for (let a = 0; a < this.c.count; a++) {
                this.c._inner[a].commitStyles();
            }
        }
    }
    PopupAnimation.$t = /*@__PURE__*/ markType(PopupAnimation, 'PopupAnimation');
    return PopupAnimation;
})();
