/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AxisAnnotationDescription } from "./AxisAnnotationDescription";
/**
 * @hidden
 */
export let AxisAnnotationDescriptionMetadata = /*@__PURE__*/ (() => {
    class AxisAnnotationDescriptionMetadata extends Base {
        static b(a) {
            if (AxisAnnotationDescriptionMetadata.a == null) {
                AxisAnnotationDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                AxisAnnotationDescriptionMetadata.c(AxisAnnotationDescriptionMetadata.a);
            }
            if (a.k(AxisAnnotationDescriptionMetadata.a)) {
                return;
            }
            a.ac(AxisAnnotationDescriptionMetadata.a);
        }
        static c(a) {
            a.item("ValueRef", "(w:Value,wf:Value)DataRef");
            a.item("Text", "String");
            a.item("BackgroundCornerRadius", "Number:double");
            a.item("LabelFormat", "String");
            a.item("LabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("LabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("FormatLabelRef", "(w:FormatLabel,wf:FormatLabel)MethodRef");
            a.item("TextColor", "Brush");
            a.item("Background", "Brush");
            a.item("Outline", "Brush");
            a.item("StrokeThickness", "Number:double");
            a.item("BackgroundPaddingLeft", "Number:double");
            a.item("BackgroundPaddingTop", "Number:double");
            a.item("BackgroundPaddingRight", "Number:double");
            a.item("BackgroundPaddingBottom", "Number:double");
        }
        static d(a) {
            AxisAnnotationDescriptionMetadata.b(a);
            a.ae("AxisAnnotation", () => new AxisAnnotationDescription());
            a.ad("AxisAnnotation", AxisAnnotationDescriptionMetadata.a);
        }
    }
    AxisAnnotationDescriptionMetadata.$t = /*@__PURE__*/ markType(AxisAnnotationDescriptionMetadata, 'AxisAnnotationDescriptionMetadata');
    AxisAnnotationDescriptionMetadata.a = null;
    return AxisAnnotationDescriptionMetadata;
})();
