//
// System.IO.StreamWriter.cs
//
// Authors:
//   Dietmar Maurer (dietmar@ximian.com)
//   Paolo Molaro (lupus@ximian.com)
//
// (C) Ximian, Inc.  http://www.ximian.com
//
//
// Copyright (C) 2004 Novell, Inc (http://www.novell.com)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
import { Stream, markType } from "./type";
/**
 * @hidden
 */
export let NullStream = /*@__PURE__*/ (() => {
    class NullStream extends Stream {
        get_canRead() {
            return true;
        }
        get canRead() {
            return this.get_canRead();
        }
        get_canSeek() {
            return true;
        }
        get canSeek() {
            return this.get_canSeek();
        }
        get_canWrite() {
            return true;
        }
        get canWrite() {
            return this.get_canWrite();
        }
        get_length() {
            return 0;
        }
        get length() {
            return this.get_length();
        }
        get_position() {
            return 0;
        }
        set_position(a) {
        }
        get position() {
            return this.get_position();
        }
        set position(a) {
            this.set_position(a);
        }
        flush() {
        }
        read(a, b, c) {
            return 0;
        }
        readByte() {
            return -1;
        }
        seek(a, b) {
            return 0;
        }
        setLength(a) {
        }
        write(a, b, c) {
        }
        writeByte(a) {
        }
    }
    NullStream.$t = /*@__PURE__*/ markType(NullStream, 'NullStream', Stream.$);
    return NullStream;
})();
