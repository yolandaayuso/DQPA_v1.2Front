/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebFilteringExpressionsTreeOrFilteringExpressionDescriptionMetadata } from "./WebFilteringExpressionsTreeOrFilteringExpressionDescriptionMetadata";
import { WebFilteringExpressionsTreeDescription } from "./WebFilteringExpressionsTreeDescription";
/**
 * @hidden
 */
export let WebFilteringExpressionsTreeDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebFilteringExpressionsTreeDescriptionMetadata extends Base {
        static b(a) {
            if (WebFilteringExpressionsTreeDescriptionMetadata.a == null) {
                WebFilteringExpressionsTreeDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebFilteringExpressionsTreeDescriptionMetadata.c(WebFilteringExpressionsTreeDescriptionMetadata.a);
            }
            if (a.k(WebFilteringExpressionsTreeDescriptionMetadata.a)) {
                return;
            }
            a.ac(WebFilteringExpressionsTreeDescriptionMetadata.a);
            WebFilteringExpressionsTreeOrFilteringExpressionDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:FilteringExpressionsTree");
            a.item("__packageNameWC", "String:grids");
            a.item("__skipModuleRegisterWebComponents", "Boolean");
            a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
            a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
            a.item("__isPlainObject", "Boolean");
            a.item("__marshalByValue", "Boolean");
            a.item("__skipSuffix", "Boolean");
            a.item("FilteringOperands", "Array:WebFilteringExpressionsTreeOrFilteringExpressionDescription:FilteringExpressionsTreeOrFilteringExpression");
            a.item("TreeType", "(wc:Type)ExportedType:string:FilteringExpressionsTreeType");
            a.item("TreeType@names", "Regular;Advanced");
            a.item("Owner", "Unknown");
            a.item("Operator", "ExportedType:string:FilteringLogic");
            a.item("Operator@names", "And;Or");
            a.item("FieldName", "String");
        }
        static d(a) {
            WebFilteringExpressionsTreeDescriptionMetadata.b(a);
            a.ae("WebFilteringExpressionsTree", () => new WebFilteringExpressionsTreeDescription());
            a.ad("WebFilteringExpressionsTree", WebFilteringExpressionsTreeDescriptionMetadata.a);
        }
    }
    WebFilteringExpressionsTreeDescriptionMetadata.$t = /*@__PURE__*/ markType(WebFilteringExpressionsTreeDescriptionMetadata, 'WebFilteringExpressionsTreeDescriptionMetadata');
    WebFilteringExpressionsTreeDescriptionMetadata.a = null;
    return WebFilteringExpressionsTreeDescriptionMetadata;
})();
