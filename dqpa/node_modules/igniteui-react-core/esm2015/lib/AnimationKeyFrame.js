/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "./type";
import { AnimationKeyFrameProperty } from "./AnimationKeyFrameProperty";
import { List$1 } from "./List$1";
import { Dictionary$2 } from "./Dictionary$2";
import { UIElementPropertyId_$type } from "./UIElementPropertyId";
/**
 * @hidden
 */
export let AnimationKeyFrame = /*@__PURE__*/ (() => {
    class AnimationKeyFrame extends Base {
        constructor(a, ..._rest) {
            super();
            this.j = 0;
            this.i = new List$1(AnimationKeyFrameProperty.$, 0);
            this.a = null;
            this.h = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        this.j = NaN;
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        this.j = c;
                    }
                    break;
            }
        }
        get b() {
            if (this.a == null) {
                this.a = this.i.toArray();
            }
            return this.a;
        }
        g(a) {
            if (this.h == null) {
                this.h = new Dictionary$2(UIElementPropertyId_$type, AnimationKeyFrameProperty.$, 0);
                for (let b = 0; b < this.b.length; b++) {
                    this.h.item(this.b[b].a, this.b[b]);
                }
            }
            if (this.h.containsKey(a)) {
                return this.h.item(a);
            }
            return null;
        }
        static d() {
            return new AnimationKeyFrame(0);
        }
        static e(a) {
            let b = new AnimationKeyFrame(0);
            b.j = a;
            return b;
        }
        static f(a, b) {
            let c = new AnimationKeyFrame(0);
            c.j = a;
            c.i.o(b);
            return c;
        }
        c(a) {
            this.i.add(a);
            this.a = null;
            this.h = null;
            return this;
        }
    }
    AnimationKeyFrame.$t = /*@__PURE__*/ markType(AnimationKeyFrame, 'AnimationKeyFrame');
    return AnimationKeyFrame;
})();
