/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let GridConditionalStylePropertyDescription = /*@__PURE__*/ (() => {
    class GridConditionalStylePropertyDescription extends Description {
        get_type() {
            return "GridConditionalStyleProperty";
        }
        get type() {
            return this.get_type();
        }
        constructor() {
            super();
            this.am = null;
            this.ak = null;
            this.ag = null;
            this.al = null;
            this.n = null;
            this.ac = null;
            this.j = null;
            this.p = null;
            this.ai = null;
            this.l = null;
            this.o = null;
            this.ae = null;
            this.k = null;
            this.q = null;
            this.an = null;
            this.m = null;
            this.aq = null;
            this.z = false;
            this.ah = null;
            this.ad = null;
            this.aj = null;
            this.af = null;
            this.ao = null;
            this.h = null;
            this.ap = null;
            this.ab = null;
        }
        get stylingType() {
            return this.am;
        }
        set stylingType(a) {
            this.am = a;
            this.g("StylingType");
        }
        get minimumType() {
            return this.ak;
        }
        set minimumType(a) {
            this.ak = a;
            this.g("MinimumType");
        }
        get maximumType() {
            return this.ag;
        }
        set maximumType(a) {
            this.ag = a;
            this.g("MaximumType");
        }
        get propertyName() {
            return this.al;
        }
        set propertyName(a) {
            this.al = a;
            this.g("PropertyName");
        }
        get inputValueExpression() {
            return this.n;
        }
        set inputValueExpression(a) {
            this.n = a;
            this.g("InputValueExpression");
        }
        get inputValueExpressionString() {
            return this.ac;
        }
        set inputValueExpressionString(a) {
            this.ac = a;
            this.g("InputValueExpressionString");
        }
        get actualInputValueExpression() {
            return this.j;
        }
        set actualInputValueExpression(a) {
            this.j = a;
            this.g("ActualInputValueExpression");
        }
        get minimumInputValueExpression() {
            return this.p;
        }
        set minimumInputValueExpression(a) {
            this.p = a;
            this.g("MinimumInputValueExpression");
        }
        get minimumInputValueExpressionString() {
            return this.ai;
        }
        set minimumInputValueExpressionString(a) {
            this.ai = a;
            this.g("MinimumInputValueExpressionString");
        }
        get actualMinimumInputValueExpression() {
            return this.l;
        }
        set actualMinimumInputValueExpression(a) {
            this.l = a;
            this.g("ActualMinimumInputValueExpression");
        }
        get maximumInputValueExpression() {
            return this.o;
        }
        set maximumInputValueExpression(a) {
            this.o = a;
            this.g("MaximumInputValueExpression");
        }
        get maximumInputValueExpressionString() {
            return this.ae;
        }
        set maximumInputValueExpressionString(a) {
            this.ae = a;
            this.g("MaximumInputValueExpressionString");
        }
        get actualMaximumInputValueExpression() {
            return this.k;
        }
        set actualMaximumInputValueExpression(a) {
            this.k = a;
            this.g("ActualMaximumInputValueExpression");
        }
        get sumInputValueExpression() {
            return this.q;
        }
        set sumInputValueExpression(a) {
            this.q = a;
            this.g("SumInputValueExpression");
        }
        get sumInputValueExpressionString() {
            return this.an;
        }
        set sumInputValueExpressionString(a) {
            this.an = a;
            this.g("SumInputValueExpressionString");
        }
        get actualSumInputValueExpression() {
            return this.m;
        }
        set actualSumInputValueExpression(a) {
            this.m = a;
            this.g("ActualSumInputValueExpression");
        }
        get valueRef() {
            return this.aq;
        }
        set valueRef(a) {
            this.aq = a;
            this.g("ValueRef");
        }
        get shouldSetValue() {
            return this.z;
        }
        set shouldSetValue(a) {
            this.z = a;
            this.g("ShouldSetValue");
        }
        get minimumColor() {
            return this.ah;
        }
        set minimumColor(a) {
            this.ah = a;
            this.g("MinimumColor");
        }
        get maximumColor() {
            return this.ad;
        }
        set maximumColor(a) {
            this.ad = a;
            this.g("MaximumColor");
        }
        get minimumInputValueRef() {
            return this.aj;
        }
        set minimumInputValueRef(a) {
            this.aj = a;
            this.g("MinimumInputValueRef");
        }
        get maximumInputValueRef() {
            return this.af;
        }
        set maximumInputValueRef(a) {
            this.af = a;
            this.g("MaximumInputValueRef");
        }
        get sumInputValueRef() {
            return this.ao;
        }
        set sumInputValueRef(a) {
            this.ao = a;
            this.g("SumInputValueRef");
        }
        get colorCollection() {
            return this.h;
        }
        set colorCollection(a) {
            this.h = a;
            this.g("ColorCollection");
        }
        get valueCollectionRef() {
            return this.ap;
        }
        set valueCollectionRef(a) {
            this.ap = a;
            this.g("ValueCollectionRef");
        }
        get filterStringErrorsParsingRef() {
            return this.ab;
        }
        set filterStringErrorsParsingRef(a) {
            this.ab = a;
            this.g("FilterStringErrorsParsingRef");
        }
    }
    GridConditionalStylePropertyDescription.$t = /*@__PURE__*/ markType(GridConditionalStylePropertyDescription, 'GridConditionalStylePropertyDescription', Description.$);
    return GridConditionalStylePropertyDescription;
})();
