/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DataGridColumnDescription } from "./DataGridColumnDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let NumericColumnDescription = /*@__PURE__*/ (() => {
    class NumericColumnDescription extends DataGridColumnDescription {
        get_type() {
            return "NumericColumn";
        }
        constructor() {
            super();
            this.gl = null;
            this.gn = null;
            this.gm = null;
            this.go = null;
            this.f8 = 0;
            this.f9 = 0;
            this.ga = 0;
            this.f6 = false;
            this.gk = null;
            this.f1 = null;
            this.gj = null;
            this.gh = null;
            this.gf = null;
            this.f3 = null;
            this.gg = null;
            this.gi = null;
        }
        get negativePrefix() {
            return this.gl;
        }
        set negativePrefix(a) {
            this.gl = a;
            this.g("NegativePrefix");
        }
        get positivePrefix() {
            return this.gn;
        }
        set positivePrefix(a) {
            this.gn = a;
            this.g("PositivePrefix");
        }
        get negativeSuffix() {
            return this.gm;
        }
        set negativeSuffix(a) {
            this.gm = a;
            this.g("NegativeSuffix");
        }
        get positiveSuffix() {
            return this.go;
        }
        set positiveSuffix(a) {
            this.go = a;
            this.g("PositiveSuffix");
        }
        get maxFractionDigits() {
            return this.f8;
        }
        set maxFractionDigits(a) {
            this.f8 = a;
            this.g("MaxFractionDigits");
        }
        get minFractionDigits() {
            return this.f9;
        }
        set minFractionDigits(a) {
            this.f9 = a;
            this.g("MinFractionDigits");
        }
        get minIntegerDigits() {
            return this.ga;
        }
        set minIntegerDigits(a) {
            this.ga = a;
            this.g("MinIntegerDigits");
        }
        get showGroupingSeparator() {
            return this.f6;
        }
        set showGroupingSeparator(a) {
            this.f6 = a;
            this.g("ShowGroupingSeparator");
        }
        get formatString() {
            return this.gk;
        }
        set formatString(a) {
            this.gk = a;
            this.g("FormatString");
        }
        get formatSpecifiers() {
            return this.f1;
        }
        set formatSpecifiers(a) {
            this.f1 = a;
            this.g("FormatSpecifiers");
        }
        get formatOverrideRef() {
            return this.gj;
        }
        set formatOverrideRef(a) {
            this.gj = a;
            this.g("FormatOverrideRef");
        }
        get editorType() {
            return this.gh;
        }
        set editorType(a) {
            this.gh = a;
            this.g("EditorType");
        }
        get editorDataSourceRef() {
            return this.gf;
        }
        set editorDataSourceRef(a) {
            this.gf = a;
            this.g("EditorDataSourceRef");
        }
        get editorDataSource() {
            return this.f3;
        }
        set editorDataSource(a) {
            this.f3 = a;
            this.g("EditorDataSource");
        }
        get editorTextField() {
            return this.gg;
        }
        set editorTextField(a) {
            this.gg = a;
            this.g("EditorTextField");
        }
        get editorValueField() {
            return this.gi;
        }
        set editorValueField(a) {
            this.gi = a;
            this.g("EditorValueField");
        }
    }
    NumericColumnDescription.$t = /*@__PURE__*/ markType(NumericColumnDescription, 'NumericColumnDescription', DataGridColumnDescription.$);
    NumericColumnDescription.__canMarshalByValue1 = true;
    NumericColumnDescription.__marshalByValueAlias1 = "NumericColumn";
    return NumericColumnDescription;
})();
