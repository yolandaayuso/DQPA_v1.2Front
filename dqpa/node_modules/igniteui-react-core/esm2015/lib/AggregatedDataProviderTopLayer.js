/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { List$1 } from "./List$1";
import { AggregatedDataProviderLayerInfo } from "./AggregatedDataProviderLayerInfo";
import { DataSourceSummaryOperand_$type } from "./DataSourceSummaryOperand";
/**
 * @hidden
 */
export let AggregatedDataProviderTopLayer = /*@__PURE__*/ (() => {
    class AggregatedDataProviderTopLayer extends Base {
        constructor() {
            super(...arguments);
            this.q = "";
            this.m = "";
            this.c = new List$1(AggregatedDataProviderLayerInfo.$, 0);
            this.e = new List$1(String_$type, 0);
            this.d = new List$1(String_$type, 0);
            this.g = new List$1(Base.$, 0);
            this.f = new List$1(DataSourceSummaryOperand_$type, 0);
        }
        n() {
            return {};
        }
        z(a, b, c) {
            let d = a;
            d[b] = c;
        }
        o(a) {
            let b = this.n();
            this.z(b, this.w, this.p);
            if (this.j.count == 0) {
            }
            let c = this.a();
            for (let d = 0; d < this.j.count; d++) {
                let e = this.s(d);
                this.z(b, e, this.l._inner[d]);
                let f = this.r(d);
                this.z(b, f, c);
            }
            for (let g = 0; g < this.h.count; g++) {
                let h = this.h._inner[g];
                if (h.a) {
                    continue;
                }
                let i = this.b(h);
                if (h.m != null && h.m.count > 0) {
                    for (let j = 0; j < h.m.count; j++) {
                        let k = h.m._inner[j];
                        let l = h.n._inner[j];
                        let m = h.o._inner[j];
                        let n = this.u(h, k, l, j);
                        this.z(b, n, m);
                        let o = this.t(h, k, l, j);
                        this.z(b, o, c);
                        if (!a.contains(n)) {
                            a.add(n);
                        }
                    }
                }
            }
            return b;
        }
        t(a, b, c, d) {
            let e = this.u(a, b, c, d);
            return e + "_Drill";
        }
        u(a, b, c, d) {
            let e = "";
            for (let f = 1; f < a.j.count; f++) {
                let g = a.j._inner[f];
                if (g == null) {
                    continue;
                }
                e += g.toString();
            }
            if (a.l._inner[d] != null) {
                return e + a.l._inner[d];
            }
            let h = b;
            let i = this.v(c);
            return e + h + i;
        }
        r(a) {
            return this.s(a) + "_Drill";
        }
        v(a) {
            let b = "";
            switch (a) {
                case 3:
                    b = "Average";
                    break;
                case 4:
                    b = "Count";
                    break;
                case 5:
                    b = "Custom";
                    break;
                case 1:
                    b = "Max";
                    break;
                case 0:
                    b = "Min";
                    break;
                case 2:
                    b = "Sum";
                    break;
            }
            return b;
        }
        s(a) {
            if (this.i._inner[a] != null) {
                return this.i._inner[a];
            }
            let b = this.j._inner[a];
            let c = this.v(this.k._inner[a]);
            return b + c;
        }
        x() {
            let a = this.a();
            let b = a.length;
            this.j.add(this.w);
            this.k.add(4);
            this.l.add1(b);
        }
        a() {
            let a = new List$1(Base.$, 0);
            for (let b = 0; b < this.h.count; b++) {
                if (this.h._inner[b].a) {
                    for (let c = 0; c < this.h._inner[b].k.count; c++) {
                        a.add1(this.h._inner[b].k._inner[c]);
                    }
                }
            }
            return a.toArray();
        }
        b(a) {
            let b = new List$1(Base.$, 0);
            for (let c = 0; c < a.k.count; c++) {
                b.add1(a.k._inner[c]);
            }
            return b.toArray();
        }
        get w() {
            return this.q;
        }
        set w(a) {
            this.q = a;
        }
        get p() {
            return this.m;
        }
        set p(a) {
            this.m = a;
        }
        get h() {
            return this.c;
        }
        y(a, b, c, d) {
            this.j.add(a);
            this.i.add(b);
            this.k.add(c);
            this.l.add1(d);
        }
        get j() {
            return this.e;
        }
        get i() {
            return this.d;
        }
        get l() {
            return this.g;
        }
        get k() {
            return this.f;
        }
    }
    AggregatedDataProviderTopLayer.$t = /*@__PURE__*/ markType(AggregatedDataProviderTopLayer, 'AggregatedDataProviderTopLayer');
    return AggregatedDataProviderTopLayer;
})();
