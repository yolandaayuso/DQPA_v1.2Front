/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AssigningRadialStyleEventArgsDescriptionMetadata } from "./AssigningRadialStyleEventArgsDescriptionMetadata";
import { AssigningRadialMarkerStyleEventArgsDescriptionMetadata } from "./AssigningRadialMarkerStyleEventArgsDescriptionMetadata";
import { MarkerSeriesDescriptionMetadata } from "./MarkerSeriesDescriptionMetadata";
/**
 * @hidden
 */
export let RadialBaseDescriptionMetadata = /*@__PURE__*/ (() => {
    class RadialBaseDescriptionMetadata extends Base {
        static b(a) {
            if (RadialBaseDescriptionMetadata.a == null) {
                RadialBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                RadialBaseDescriptionMetadata.c(RadialBaseDescriptionMetadata.a);
            }
            if (a.k(RadialBaseDescriptionMetadata.a)) {
                return;
            }
            a.ac(RadialBaseDescriptionMetadata.a);
            AssigningRadialStyleEventArgsDescriptionMetadata.d(a);
            AssigningRadialMarkerStyleEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            MarkerSeriesDescriptionMetadata.c(a);
            a.item("AutoCalloutLabelPrecision", "Number:int");
            a.item("AutoCalloutPercentagePrecision", "Number:int");
            a.item("AutoCalloutLabelValueSeparator", "String");
            a.item("LegendRadialLabelMode", "ExportedType:string:RadialLabelMode");
            a.item("LegendRadialLabelMode@names", "Auto;Normal;Value;Percentage;ValueAndPercentage;Label;LabelAndValue;LabelAndPercentage;LabelAndValueAndPercentage");
            a.item("CategoryCollisionMode", "ExportedType:string:CategoryCollisionMode");
            a.item("CategoryCollisionMode@names", "WholeColumn;MatchHeight");
            a.item("AutoCalloutRadialLabelMode", "ExportedType:string:RadialLabelMode");
            a.item("AutoCalloutRadialLabelMode@names", "Auto;Normal;Value;Percentage;ValueAndPercentage;Label;LabelAndValue;LabelAndPercentage;LabelAndValueAndPercentage");
            a.item("AutoCalloutOthersLabelFormat", "String");
            a.item("AutoCalloutOthersLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("AutoCalloutOthersLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("ProportionalRadialLabelFormat", "String");
            a.item("ProportionalRadialLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("ProportionalRadialLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("LegendProportionalRadialLabelFormat", "String");
            a.item("LegendProportionalRadialLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("LegendProportionalRadialLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("OthersProportionalRadialLabelFormat", "String");
            a.item("OthersProportionalRadialLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("OthersProportionalRadialLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("OthersLegendProportionalRadialLabelFormat", "String");
            a.item("OthersLegendProportionalRadialLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("OthersLegendProportionalRadialLabelFormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("IsCustomRadialStyleAllowed", "Boolean");
            a.item("IsCustomRadialMarkerStyleAllowed", "Boolean");
            a.item("TransitionInMode", "ExportedType:string:CategoryTransitionInMode");
            a.item("TransitionInMode@names", "Auto;FromZero;SweepFromLeft;SweepFromRight;SweepFromTop;SweepFromBottom;SweepFromCenter;AccordionFromLeft;AccordionFromRight;AccordionFromTop;AccordionFromBottom;Expand;SweepFromCategoryAxisMinimum;SweepFromCategoryAxisMaximum;SweepFromValueAxisMinimum;SweepFromValueAxisMaximum;AccordionFromCategoryAxisMinimum;AccordionFromCategoryAxisMaximum;AccordionFromValueAxisMinimum;AccordionFromValueAxisMaximum;FromParent");
            a.item("IsTransitionInEnabled", "Boolean");
            a.item("AngleAxisRef", "(w:AngleAxis,wf:AngleAxis)DataRef::object");
            a.item("AngleAxisRef@nameBinding", "true");
            a.item("ValueAxisRef", "(w:ValueAxis,wf:ValueAxis)DataRef::object");
            a.item("ValueAxisRef@nameBinding", "true");
            a.item("ClipSeriesToBounds", "Boolean");
            a.item("AssigningRadialStyleRef", "EventRef::assigningRadialStyle");
            a.item("AssigningRadialMarkerStyleRef", "EventRef::assigningRadialMarkerStyle");
        }
        static d(a) {
            RadialBaseDescriptionMetadata.b(a);
            a.ad("RadialBase", RadialBaseDescriptionMetadata.a);
        }
    }
    RadialBaseDescriptionMetadata.$t = /*@__PURE__*/ markType(RadialBaseDescriptionMetadata, 'RadialBaseDescriptionMetadata');
    RadialBaseDescriptionMetadata.a = null;
    return RadialBaseDescriptionMetadata;
})();
