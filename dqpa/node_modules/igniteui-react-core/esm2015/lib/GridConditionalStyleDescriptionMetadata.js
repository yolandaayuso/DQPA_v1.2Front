/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { FilterExpressionDescriptionMetadata } from "./FilterExpressionDescriptionMetadata";
import { PropertyUpdatedEventArgsDescriptionMetadata } from "./PropertyUpdatedEventArgsDescriptionMetadata";
import { GridConditionFilterStringErrorsParsingEventArgsDescriptionMetadata } from "./GridConditionFilterStringErrorsParsingEventArgsDescriptionMetadata";
import { GridConditionalStyleDescription } from "./GridConditionalStyleDescription";
/**
 * @hidden
 */
export let GridConditionalStyleDescriptionMetadata = /*@__PURE__*/ (() => {
    class GridConditionalStyleDescriptionMetadata extends Base {
        static b(a) {
            if (GridConditionalStyleDescriptionMetadata.a == null) {
                GridConditionalStyleDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                GridConditionalStyleDescriptionMetadata.c(GridConditionalStyleDescriptionMetadata.a);
            }
            if (a.k(GridConditionalStyleDescriptionMetadata.a)) {
                return;
            }
            a.ac(GridConditionalStyleDescriptionMetadata.a);
            FilterExpressionDescriptionMetadata.d(a);
            PropertyUpdatedEventArgsDescriptionMetadata.d(a);
            GridConditionFilterStringErrorsParsingEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("StyleKey", "String");
            a.item("IsTransitionInEnabled", "Boolean");
            a.item("Properties", "Collection:GridConditionalStyleProperty:GridConditionalStylePropertyCollection:GridConditionalStyleProperty");
            a.item("ConditionString", "String");
            a.item("Condition", "ExportedType:IFilterExpression");
            a.item("IsFieldMinimumNeeded", "Boolean");
            a.item("IsFieldMaximumNeeded", "Boolean");
            a.item("IsFieldSumNeeded", "Boolean");
            a.item("PropertyUpdatedRef", "EventRef::propertyUpdated");
            a.item("FilterStringErrorsParsingRef", "EventRef::filterStringErrorsParsing");
        }
        static d(a) {
            GridConditionalStyleDescriptionMetadata.b(a);
            a.ae("GridConditionalStyle", () => new GridConditionalStyleDescription());
            a.ad("GridConditionalStyle", GridConditionalStyleDescriptionMetadata.a);
        }
    }
    GridConditionalStyleDescriptionMetadata.$t = /*@__PURE__*/ markType(GridConditionalStyleDescriptionMetadata, 'GridConditionalStyleDescriptionMetadata');
    GridConditionalStyleDescriptionMetadata.a = null;
    return GridConditionalStyleDescriptionMetadata;
})();
