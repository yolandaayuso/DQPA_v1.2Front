/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebGroupByRecordDescriptionMetadata } from "./WebGroupByRecordDescriptionMetadata";
import { WebGroupByResultDescription } from "./WebGroupByResultDescription";
/**
 * @hidden
 */
export let WebGroupByResultDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGroupByResultDescriptionMetadata extends Base {
        static b(a) {
            if (WebGroupByResultDescriptionMetadata.a == null) {
                WebGroupByResultDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGroupByResultDescriptionMetadata.c(WebGroupByResultDescriptionMetadata.a);
            }
            if (a.k(WebGroupByResultDescriptionMetadata.a)) {
                return;
            }
            a.ac(WebGroupByResultDescriptionMetadata.a);
            WebGroupByRecordDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:GroupByResult");
            a.item("__packageNameWC", "String:grids");
            a.item("__skipModuleRegisterWebComponents", "Boolean");
            a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
            a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
            a.item("__isPlainObject", "Boolean");
            a.item("__skipSuffix", "Boolean");
            a.item("DataRef", "(w:Data,wf:Data)DataRef:object");
            a.item("Metadata", "Array:WebGroupByRecordDescription:GroupByRecord");
        }
        static d(a) {
            WebGroupByResultDescriptionMetadata.b(a);
            a.ae("WebGroupByResult", () => new WebGroupByResultDescription());
            a.ad("WebGroupByResult", WebGroupByResultDescriptionMetadata.a);
        }
    }
    WebGroupByResultDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGroupByResultDescriptionMetadata, 'WebGroupByResultDescriptionMetadata');
    WebGroupByResultDescriptionMetadata.a = null;
    return WebGroupByResultDescriptionMetadata;
})();
