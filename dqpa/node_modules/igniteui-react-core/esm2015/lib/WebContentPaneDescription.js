/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { WebDockManagerPaneDescription } from "./WebDockManagerPaneDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let WebContentPaneDescription = /*@__PURE__*/ (() => {
    class WebContentPaneDescription extends WebDockManagerPaneDescription {
        get_type() {
            return "WebContentPane";
        }
        constructor() {
            super();
            this.as = null;
            this.at = null;
            this.ao = null;
            this.aq = null;
            this.ar = null;
            this.au = null;
            this.av = null;
            this.ap = null;
            this.aj = 0;
            this.o = false;
            this.r = false;
            this.s = false;
            this.p = false;
            this.n = false;
            this.q = false;
            this.ak = 0;
            this.x = false;
            this.w = false;
            this.aw = null;
            this.v = false;
            this.t = false;
            this.u = false;
        }
        get id() {
            return this.as;
        }
        set id(a) {
            this.as = a;
            this.g("Id");
        }
        get paneType() {
            return this.at;
        }
        set paneType(a) {
            this.at = a;
            this.g("PaneType");
        }
        get contentId() {
            return this.ao;
        }
        set contentId(a) {
            this.ao = a;
            this.g("ContentId");
        }
        get header() {
            return this.aq;
        }
        set header(a) {
            this.aq = a;
            this.g("Header");
        }
        get headerId() {
            return this.ar;
        }
        set headerId(a) {
            this.ar = a;
            this.g("HeaderId");
        }
        get tabHeaderId() {
            return this.au;
        }
        set tabHeaderId(a) {
            this.au = a;
            this.g("TabHeaderId");
        }
        get unpinnedHeaderId() {
            return this.av;
        }
        set unpinnedHeaderId(a) {
            this.av = a;
            this.g("UnpinnedHeaderId");
        }
        get floatingHeaderId() {
            return this.ap;
        }
        set floatingHeaderId(a) {
            this.ap = a;
            this.g("FloatingHeaderId");
        }
        get size() {
            return this.aj;
        }
        set size(a) {
            this.aj = a;
            this.g("Size");
        }
        get allowClose() {
            return this.o;
        }
        set allowClose(a) {
            this.o = a;
            this.g("AllowClose");
        }
        get allowMaximize() {
            return this.r;
        }
        set allowMaximize(a) {
            this.r = a;
            this.g("AllowMaximize");
        }
        get allowPinning() {
            return this.s;
        }
        set allowPinning(a) {
            this.s = a;
            this.g("AllowPinning");
        }
        get allowDocking() {
            return this.p;
        }
        set allowDocking(a) {
            this.p = a;
            this.g("AllowDocking");
        }
        get acceptsInnerDock() {
            return this.n;
        }
        set acceptsInnerDock(a) {
            this.n = a;
            this.g("AcceptsInnerDock");
        }
        get allowFloating() {
            return this.q;
        }
        set allowFloating(a) {
            this.q = a;
            this.g("AllowFloating");
        }
        get unpinnedSize() {
            return this.ak;
        }
        set unpinnedSize(a) {
            this.ak = a;
            this.g("UnpinnedSize");
        }
        get isPinned() {
            return this.x;
        }
        set isPinned(a) {
            this.x = a;
            this.g("IsPinned");
        }
        get isMaximized() {
            return this.w;
        }
        set isMaximized(a) {
            this.w = a;
            this.g("IsMaximized");
        }
        get unpinnedLocation() {
            return this.aw;
        }
        set unpinnedLocation(a) {
            this.aw = a;
            this.g("UnpinnedLocation");
        }
        get hidden() {
            return this.v;
        }
        set hidden(a) {
            this.v = a;
            this.g("Hidden");
        }
        get disabled() {
            return this.t;
        }
        set disabled(a) {
            this.t = a;
            this.g("Disabled");
        }
        get documentOnly() {
            return this.u;
        }
        set documentOnly(a) {
            this.u = a;
            this.g("DocumentOnly");
        }
    }
    WebContentPaneDescription.$t = /*@__PURE__*/ markType(WebContentPaneDescription, 'WebContentPaneDescription', WebDockManagerPaneDescription.$);
    WebContentPaneDescription.__marshalByValue1 = true;
    WebContentPaneDescription.__marshalByValueAlias1 = "ContentPane";
    return WebContentPaneDescription;
})();
