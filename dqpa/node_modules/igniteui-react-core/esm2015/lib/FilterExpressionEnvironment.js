/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { IFilterExpressionEnvironment_$type } from "./IFilterExpressionEnvironment";
import { Dictionary$2 } from "./Dictionary$2";
/**
 * @hidden
 */
export let FilterExpressionEnvironment = /*@__PURE__*/ (() => {
    class FilterExpressionEnvironment extends Base {
        constructor() {
            super();
            this.a = new Dictionary$2(String_$type, Base.$, 0);
        }
        getVariableValue(a) {
            return this.a.item(a);
        }
        setVariableValue(a, b) {
            this.a.item(a, b);
        }
        hasVariable(a) {
            return this.a.containsKey(a);
        }
    }
    FilterExpressionEnvironment.$t = /*@__PURE__*/ markType(FilterExpressionEnvironment, 'FilterExpressionEnvironment', Base.$, [IFilterExpressionEnvironment_$type]);
    return FilterExpressionEnvironment;
})();
