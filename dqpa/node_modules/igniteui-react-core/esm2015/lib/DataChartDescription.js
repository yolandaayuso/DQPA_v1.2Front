/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataChartDescription = /*@__PURE__*/ (() => {
    class DataChartDescription extends SeriesViewerDescription {
        get_type() {
            return "DataChart";
        }
        constructor() {
            super();
            this.h9 = false;
            this.i1 = 0;
            this.i2 = 0;
            this.it = 0;
            this.iu = 0;
            this.h8 = false;
            this.ia = false;
            this.jm = null;
            this.h7 = false;
            this.iw = 0;
            this.iv = 0;
            this.id = false;
            this.ib = false;
            this.ic = false;
            this.ie = false;
            this.jh = null;
            this.jl = null;
            this.jj = null;
            this.jk = null;
            this.h5 = null;
            this.iq = 0;
            this.is = 0;
            this.ir = 0;
            this.ip = 0;
            this.ji = null;
            this.jo = null;
            this.jp = null;
            this.iy = 0;
            this.i0 = 0;
            this.iz = 0;
            this.ix = 0;
            this.jq = null;
            this.jn = null;
        }
        get isSquare() {
            return this.h9;
        }
        set isSquare(a) {
            this.h9 = a;
            this.g("IsSquare");
        }
        get windowScaleHorizontal() {
            return this.i1;
        }
        set windowScaleHorizontal(a) {
            this.i1 = a;
            this.g("WindowScaleHorizontal");
        }
        get windowScaleVertical() {
            return this.i2;
        }
        set windowScaleVertical(a) {
            this.i2 = a;
            this.g("WindowScaleVertical");
        }
        get actualWindowScaleHorizontal() {
            return this.it;
        }
        set actualWindowScaleHorizontal(a) {
            this.it = a;
            this.g("ActualWindowScaleHorizontal");
        }
        get actualWindowScaleVertical() {
            return this.iu;
        }
        set actualWindowScaleVertical(a) {
            this.iu = a;
            this.g("ActualWindowScaleVertical");
        }
        get isHorizontalZoomEnabled() {
            return this.h8;
        }
        set isHorizontalZoomEnabled(a) {
            this.h8 = a;
            this.g("IsHorizontalZoomEnabled");
        }
        get isVerticalZoomEnabled() {
            return this.ia;
        }
        set isVerticalZoomEnabled(a) {
            this.ia = a;
            this.g("IsVerticalZoomEnabled");
        }
        get gridMode() {
            return this.jm;
        }
        set gridMode(a) {
            this.jm = a;
            this.g("GridMode");
        }
        get alignsGridLinesToPixels() {
            return this.h7;
        }
        set alignsGridLinesToPixels(a) {
            this.h7 = a;
            this.g("AlignsGridLinesToPixels");
        }
        get autoExpandMarginMaximumValue() {
            return this.iw;
        }
        set autoExpandMarginMaximumValue(a) {
            this.iw = a;
            this.g("AutoExpandMarginMaximumValue");
        }
        get autoExpandMarginExtraPadding() {
            return this.iv;
        }
        set autoExpandMarginExtraPadding(a) {
            this.iv = a;
            this.g("AutoExpandMarginExtraPadding");
        }
        get shouldSuppressAxisLabelTruncation() {
            return this.id;
        }
        set shouldSuppressAxisLabelTruncation(a) {
            this.id = a;
            this.g("ShouldSuppressAxisLabelTruncation");
        }
        get shouldAutoExpandMarginForInitialLabels() {
            return this.ib;
        }
        set shouldAutoExpandMarginForInitialLabels(a) {
            this.ib = a;
            this.g("ShouldAutoExpandMarginForInitialLabels");
        }
        get shouldConsiderAutoRotationForInitialLabels() {
            return this.ic;
        }
        set shouldConsiderAutoRotationForInitialLabels(a) {
            this.ic = a;
            this.g("ShouldConsiderAutoRotationForInitialLabels");
        }
        get suppressAutoMarginAndAngleRecalculation() {
            return this.ie;
        }
        set suppressAutoMarginAndAngleRecalculation(a) {
            this.ie = a;
            this.g("SuppressAutoMarginAndAngleRecalculation");
        }
        get autoMarginAndAngleUpdateMode() {
            return this.jh;
        }
        set autoMarginAndAngleUpdateMode(a) {
            this.jh = a;
            this.g("AutoMarginAndAngleUpdateMode");
        }
        get defaultAxisStroke() {
            return this.jl;
        }
        set defaultAxisStroke(a) {
            this.jl = a;
            this.g("DefaultAxisStroke");
        }
        get defaultAxisMajorStroke() {
            return this.jj;
        }
        set defaultAxisMajorStroke(a) {
            this.jj = a;
            this.g("DefaultAxisMajorStroke");
        }
        get defaultAxisMinorStroke() {
            return this.jk;
        }
        set defaultAxisMinorStroke(a) {
            this.jk = a;
            this.g("DefaultAxisMinorStroke");
        }
        get axes() {
            return this.h5;
        }
        set axes(a) {
            this.h5 = a;
            this.g("Axes");
        }
        get actualPlotAreaMarginLeft() {
            return this.iq;
        }
        set actualPlotAreaMarginLeft(a) {
            this.iq = a;
            this.g("ActualPlotAreaMarginLeft");
        }
        get actualPlotAreaMarginTop() {
            return this.is;
        }
        set actualPlotAreaMarginTop(a) {
            this.is = a;
            this.g("ActualPlotAreaMarginTop");
        }
        get actualPlotAreaMarginRight() {
            return this.ir;
        }
        set actualPlotAreaMarginRight(a) {
            this.ir = a;
            this.g("ActualPlotAreaMarginRight");
        }
        get actualPlotAreaMarginBottom() {
            return this.ip;
        }
        set actualPlotAreaMarginBottom(a) {
            this.ip = a;
            this.g("ActualPlotAreaMarginBottom");
        }
        get computedPlotAreaMarginMode() {
            return this.ji;
        }
        set computedPlotAreaMarginMode(a) {
            this.ji = a;
            this.g("ComputedPlotAreaMarginMode");
        }
        get seriesPlotAreaMarginHorizontalMode() {
            return this.jo;
        }
        set seriesPlotAreaMarginHorizontalMode(a) {
            this.jo = a;
            this.g("SeriesPlotAreaMarginHorizontalMode");
        }
        get seriesPlotAreaMarginVerticalMode() {
            return this.jp;
        }
        set seriesPlotAreaMarginVerticalMode(a) {
            this.jp = a;
            this.g("SeriesPlotAreaMarginVerticalMode");
        }
        get plotAreaMarginLeft() {
            return this.iy;
        }
        set plotAreaMarginLeft(a) {
            this.iy = a;
            this.g("PlotAreaMarginLeft");
        }
        get plotAreaMarginTop() {
            return this.i0;
        }
        set plotAreaMarginTop(a) {
            this.i0 = a;
            this.g("PlotAreaMarginTop");
        }
        get plotAreaMarginRight() {
            return this.iz;
        }
        set plotAreaMarginRight(a) {
            this.iz = a;
            this.g("PlotAreaMarginRight");
        }
        get plotAreaMarginBottom() {
            return this.ix;
        }
        set plotAreaMarginBottom(a) {
            this.ix = a;
            this.g("PlotAreaMarginBottom");
        }
        get width() {
            return this.jq;
        }
        set width(a) {
            this.jq = a;
            this.g("Width");
        }
        get height() {
            return this.jn;
        }
        set height(a) {
            this.jn = a;
            this.g("Height");
        }
    }
    DataChartDescription.$t = /*@__PURE__*/ markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
})();
