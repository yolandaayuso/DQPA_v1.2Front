/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AxisDescription } from "./AxisDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let NumericAxisBaseDescription = /*@__PURE__*/ (() => {
    class NumericAxisBaseDescription extends AxisDescription {
        get_type() {
            return "NumericAxisBase";
        }
        constructor() {
            super();
            this.ey = null;
            this.d9 = 0;
            this.d3 = 0;
            this.d6 = 0;
            this.d8 = 0;
            this.d2 = 0;
            this.d5 = 0;
            this.d7 = 0;
            this.d1 = 0;
            this.en = 0;
            this.ep = 0;
            this.du = false;
            this.ea = 0;
            this.d4 = 0;
            this.eb = 0;
            this.dt = false;
            this.dq = false;
            this.dr = false;
            this.eo = 0;
            this.ez = null;
            this.et = null;
            this.dm = null;
            this.ds = false;
            this.dp = false;
            this.ew = null;
            this.ev = null;
            this.eu = null;
            this.ex = null;
        }
        get autoRangeBufferMode() {
            return this.ey;
        }
        set autoRangeBufferMode(a) {
            this.ey = a;
            this.g("AutoRangeBufferMode");
        }
        get minimumValue() {
            return this.d9;
        }
        set minimumValue(a) {
            this.d9 = a;
            this.g("MinimumValue");
        }
        get actualMinimumValue() {
            return this.d3;
        }
        set actualMinimumValue(a) {
            this.d3 = a;
            this.g("ActualMinimumValue");
        }
        get actualVisibleMinimumValue() {
            return this.d6;
        }
        set actualVisibleMinimumValue(a) {
            this.d6 = a;
            this.g("ActualVisibleMinimumValue");
        }
        get maximumValue() {
            return this.d8;
        }
        set maximumValue(a) {
            this.d8 = a;
            this.g("MaximumValue");
        }
        get actualMaximumValue() {
            return this.d2;
        }
        set actualMaximumValue(a) {
            this.d2 = a;
            this.g("ActualMaximumValue");
        }
        get actualVisibleMaximumValue() {
            return this.d5;
        }
        set actualVisibleMaximumValue(a) {
            this.d5 = a;
            this.g("ActualVisibleMaximumValue");
        }
        get interval() {
            return this.d7;
        }
        set interval(a) {
            this.d7 = a;
            this.g("Interval");
        }
        get actualInterval() {
            return this.d1;
        }
        set actualInterval(a) {
            this.d1 = a;
            this.g("ActualInterval");
        }
        get actualMaxPrecision() {
            return this.en;
        }
        set actualMaxPrecision(a) {
            this.en = a;
            this.g("ActualMaxPrecision");
        }
        get maxPrecision() {
            return this.ep;
        }
        set maxPrecision(a) {
            this.ep = a;
            this.g("MaxPrecision");
        }
        get shouldApplyMaxPrecisionWhenZoomed() {
            return this.du;
        }
        set shouldApplyMaxPrecisionWhenZoomed(a) {
            this.du = a;
            this.g("ShouldApplyMaxPrecisionWhenZoomed");
        }
        get minorInterval() {
            return this.ea;
        }
        set minorInterval(a) {
            this.ea = a;
            this.g("MinorInterval");
        }
        get actualMinorInterval() {
            return this.d4;
        }
        set actualMinorInterval(a) {
            this.d4 = a;
            this.g("ActualMinorInterval");
        }
        get referenceValue() {
            return this.eb;
        }
        set referenceValue(a) {
            this.eb = a;
            this.g("ReferenceValue");
        }
        get isLogarithmic() {
            return this.dt;
        }
        set isLogarithmic(a) {
            this.dt = a;
            this.g("IsLogarithmic");
        }
        get actualIsLogarithmic() {
            return this.dq;
        }
        set actualIsLogarithmic(a) {
            this.dq = a;
            this.g("ActualIsLogarithmic");
        }
        get favorLabellingScaleEnd() {
            return this.dr;
        }
        set favorLabellingScaleEnd(a) {
            this.dr = a;
            this.g("FavorLabellingScaleEnd");
        }
        get logarithmBase() {
            return this.eo;
        }
        set logarithmBase(a) {
            this.eo = a;
            this.g("LogarithmBase");
        }
        get formatAbbreviatedLabelRef() {
            return this.ez;
        }
        set formatAbbreviatedLabelRef(a) {
            this.ez = a;
            this.g("FormatAbbreviatedLabelRef");
        }
        get abbreviatedLabelFormat() {
            return this.et;
        }
        set abbreviatedLabelFormat(a) {
            this.et = a;
            this.g("AbbreviatedLabelFormat");
        }
        get abbreviatedLabelFormatSpecifiers() {
            return this.dm;
        }
        set abbreviatedLabelFormatSpecifiers(a) {
            this.dm = a;
            this.g("AbbreviatedLabelFormatSpecifiers");
        }
        get isFormattingAbbreviatedLargeNumber() {
            return this.ds;
        }
        set isFormattingAbbreviatedLargeNumber(a) {
            this.ds = a;
            this.g("IsFormattingAbbreviatedLargeNumber");
        }
        get abbreviateLargeNumbers() {
            return this.dp;
        }
        set abbreviateLargeNumbers(a) {
            this.dp = a;
            this.g("AbbreviateLargeNumbers");
        }
        get actualMinimumValueChangeRef() {
            return this.ew;
        }
        set actualMinimumValueChangeRef(a) {
            this.ew = a;
            this.g("ActualMinimumValueChangeRef");
        }
        get actualMaximumValueChangeRef() {
            return this.ev;
        }
        set actualMaximumValueChangeRef(a) {
            this.ev = a;
            this.g("ActualMaximumValueChangeRef");
        }
        get actualIntervalChangeRef() {
            return this.eu;
        }
        set actualIntervalChangeRef(a) {
            this.eu = a;
            this.g("ActualIntervalChangeRef");
        }
        get actualMinorIntervalChangeRef() {
            return this.ex;
        }
        set actualMinorIntervalChangeRef(a) {
            this.ex = a;
            this.g("ActualMinorIntervalChangeRef");
        }
    }
    NumericAxisBaseDescription.$t = /*@__PURE__*/ markType(NumericAxisBaseDescription, 'NumericAxisBaseDescription', AxisDescription.$);
    return NumericAxisBaseDescription;
})();
