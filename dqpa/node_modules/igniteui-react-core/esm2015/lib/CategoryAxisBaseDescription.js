/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AxisDescription } from "./AxisDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let CategoryAxisBaseDescription = /*@__PURE__*/ (() => {
    class CategoryAxisBaseDescription extends AxisDescription {
        get_type() {
            return "CategoryAxisBase";
        }
        constructor() {
            super();
            this.dz = null;
            this.dx = 0;
            this.dp = 0;
            this.dq = 0;
            this.dr = 0;
            this.ds = 0;
            this.dm = false;
            this.d0 = null;
        }
        get dataSourceRef() {
            return this.dz;
        }
        set dataSourceRef(a) {
            this.dz = a;
            this.g("DataSourceRef");
        }
        get itemsCount() {
            return this.dx;
        }
        set itemsCount(a) {
            this.dx = a;
            this.g("ItemsCount");
        }
        get gap() {
            return this.dp;
        }
        set gap(a) {
            this.dp = a;
            this.g("Gap");
        }
        get maximumGap() {
            return this.dq;
        }
        set maximumGap(a) {
            this.dq = a;
            this.g("MaximumGap");
        }
        get minimumGapSize() {
            return this.dr;
        }
        set minimumGapSize(a) {
            this.dr = a;
            this.g("MinimumGapSize");
        }
        get overlap() {
            return this.ds;
        }
        set overlap(a) {
            this.ds = a;
            this.g("Overlap");
        }
        get useClusteringMode() {
            return this.dm;
        }
        set useClusteringMode(a) {
            this.dm = a;
            this.g("UseClusteringMode");
        }
        get itemsCountChangeRef() {
            return this.d0;
        }
        set itemsCountChangeRef(a) {
            this.d0 = a;
            this.g("ItemsCountChangeRef");
        }
    }
    CategoryAxisBaseDescription.$t = /*@__PURE__*/ markType(CategoryAxisBaseDescription, 'CategoryAxisBaseDescription', AxisDescription.$);
    return CategoryAxisBaseDescription;
})();
