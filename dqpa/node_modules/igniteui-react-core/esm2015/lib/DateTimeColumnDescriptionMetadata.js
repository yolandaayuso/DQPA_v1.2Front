/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { DataGridColumnDescriptionMetadata } from "./DataGridColumnDescriptionMetadata";
import { DateTimeColumnDescription } from "./DateTimeColumnDescription";
/**
 * @hidden
 */
export let DateTimeColumnDescriptionMetadata = /*@__PURE__*/ (() => {
    class DateTimeColumnDescriptionMetadata extends Base {
        static b(a) {
            if (DateTimeColumnDescriptionMetadata.a == null) {
                DateTimeColumnDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DateTimeColumnDescriptionMetadata.c(DateTimeColumnDescriptionMetadata.a);
            }
            if (a.k(DateTimeColumnDescriptionMetadata.a)) {
                return;
            }
            a.ac(DateTimeColumnDescriptionMetadata.a);
        }
        static c(a) {
            DataGridColumnDescriptionMetadata.c(a);
            a.item("DateTimeFormat", "ExportedType:string:DateTimeFormats");
            a.item("DateTimeFormat@names", "DateShort;DateLong;TimeShort;TimeLong;DateTimeShort;DateTimeLong");
            a.item("FormatString", "String");
            a.item("EditorFormatString", "String");
            a.item("FormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("FormatSpecifiers@mustSetInCode", "WebComponents;Blazor;React;WPF;Angular");
            a.item("FormatOverrideRef", "(w:FormatOverride,wf:FormatOverride)DataRef");
            a.item("ShowTodayButton", "Boolean");
            a.item("EditorType", "ExportedType:string:EditorType");
            a.item("EditorType@names", "Default;Text;Numeric;Date;Combo");
            a.item("EditorDataSourceRef", "(w:EditorItemsSource,xam:EditorItemsSource,wf:EditorItemsSource)DataRef::object");
            a.item("EditorDataSource", "(w:EditorItemsSource,xam:EditorItemsSource,wf:EditorItemsSource)ExportedType:BaseDataSource:BaseDataSource");
            a.item("EditorTextField", "String");
            a.item("EditorValueField", "String");
        }
        static d(a) {
            DateTimeColumnDescriptionMetadata.b(a);
            a.ae("DateTimeColumn", () => new DateTimeColumnDescription());
            a.ad("DateTimeColumn", DateTimeColumnDescriptionMetadata.a);
        }
    }
    DateTimeColumnDescriptionMetadata.$t = /*@__PURE__*/ markType(DateTimeColumnDescriptionMetadata, 'DateTimeColumnDescriptionMetadata');
    DateTimeColumnDescriptionMetadata.a = null;
    return DateTimeColumnDescriptionMetadata;
})();
