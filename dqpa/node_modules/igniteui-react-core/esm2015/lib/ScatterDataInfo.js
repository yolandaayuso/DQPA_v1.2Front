/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { DataSeriesMemberPathHint } from "./DataSeriesMemberPathHint";
import { List$1 } from "./List$1";
import { ShapeChartUtils } from "./ShapeChartUtils";
import { stringIsNullOrEmpty } from "./string";
/**
 * @hidden
 */
export let ScatterDataInfo = /*@__PURE__*/ (() => {
    class ScatterDataInfo extends Base {
        constructor(a) {
            super();
            this.p = 0;
            this.a = null;
            this.l = null;
            this.k = 0;
            this.i = null;
            this.j = null;
            this.f = null;
            this.c = null;
            this.e = null;
            this.h = null;
            this.d = null;
            this.g = null;
            this.q = 0;
            this.o = 0;
            this.n = null;
            this.a = a;
            this.l = a.getCurrentDataSource();
            if (this.l != null) {
                this.p = this.l.actualCount;
            }
            this.k = 0;
            this.i = ((() => {
                let $ret = new DataSeriesMemberPathHint();
                $ret.intent = 1;
                return $ret;
            })());
            this.j = ((() => {
                let $ret = new DataSeriesMemberPathHint();
                $ret.intent = 2;
                return $ret;
            })());
            this.f = ((() => {
                let $ret = new DataSeriesMemberPathHint();
                $ret.intent = 5;
                return $ret;
            })());
            this.c = ((() => {
                let $ret = new DataSeriesMemberPathHint();
                $ret.intent = 3;
                return $ret;
            })());
            this.e = ((() => {
                let $ret = new DataSeriesMemberPathHint();
                $ret.intent = 4;
                return $ret;
            })());
            this.h = ((() => {
                let $ret = new DataSeriesMemberPathHint();
                $ret.intent = 8;
                return $ret;
            })());
            this.d = ((() => {
                let $ret = new DataSeriesMemberPathHint();
                $ret.intent = 9;
                return $ret;
            })());
            this.g = ((() => {
                let $ret = new DataSeriesMemberPathHint();
                $ret.intent = 7;
                return $ret;
            })());
            this.n = new List$1(String_$type, 0);
        }
        get b() {
            return this.a.analyzer;
        }
        t(a, b = null) {
            if (a == null || a.count == 0) {
                return;
            }
            if (stringIsNullOrEmpty(this.d.path)) {
                let c = ShapeChartUtils.r(a);
                if (c.count > 0) {
                    this.d.update1(c._inner[0], b);
                }
            }
            if (stringIsNullOrEmpty(this.e.path)) {
                let d = ShapeChartUtils.s(a);
                if (d.count > 0) {
                    this.e.update1(d._inner[0], b);
                }
            }
        }
        r(a, b = null) {
            if (a == null || a.count == 0) {
                return;
            }
            if (stringIsNullOrEmpty(this.g.path)) {
                let c = ShapeChartUtils.y(a);
                if (c.count > 0) {
                    this.g.update1(c._inner[0], b);
                }
            }
        }
        s(a, b = null) {
            if (a == null || a.count == 0) {
                return;
            }
            this.i.update(ShapeChartUtils.ac(a).toArray(), b);
            this.j.update(ShapeChartUtils.ad(a).toArray(), b);
            this.c.update(ShapeChartUtils.p(a).toArray(), b);
            this.f.update(ShapeChartUtils.u(a).toArray(), b);
            this.h.update(ShapeChartUtils.aa(a).toArray(), b);
            if (this.i.hasPath() && this.j.hasPath()) {
                this.o *= 1.2;
            }
            if (!this.i.hasPath() && a.count > 0) {
                this.o *= 0.8;
                let c = a.count - 1;
                this.i.update1(a._inner[c], b);
                a.removeAt(c);
            }
            if (!this.j.hasPath() && a.count > 0) {
                this.o *= 0.8;
                let d = a.count - 1;
                this.j.update1(a._inner[d], b);
                a.removeAt(d);
            }
            if (!this.f.hasPath() && a.count > 0) {
                let e = a.count - 1;
                this.f.update1(a._inner[e], b);
                a.removeAt(e);
            }
            if (!this.h.hasPath() && a.count > 0) {
                let f = a.count - 1;
                this.h.update1(a._inner[f], b);
                a.removeAt(f);
            }
            if (!this.c.hasPath() && a.count > 0) {
                let g = a.count - 1;
                this.c.update1(a._inner[g], b);
                a.removeAt(g);
            }
            if (!this.i.hasPath()) {
                this.o *= 0.5;
                if (this.f.hasPath()) {
                    this.i.path = this.f.path;
                }
                else if (this.c.hasPath()) {
                    this.i.path = this.c.path;
                }
                else if (this.h.hasPath()) {
                    this.i.path = this.h.path;
                }
            }
            if (!this.j.hasPath()) {
                this.o *= 0.5;
                if (this.h.hasPath()) {
                    this.j.path = this.h.path;
                }
                else if (this.c.hasPath()) {
                    this.j.path = this.c.path;
                }
                else if (this.f.hasPath()) {
                    this.j.path = this.f.path;
                }
            }
        }
        m() {
            let a = new List$1(String_$type, 0);
            let b = this.b.getAllStringProperties();
            for (let d = 0; d < b.length; d++) {
                let c = b[d];
                a.add(c);
            }
            return a;
        }
    }
    ScatterDataInfo.$t = /*@__PURE__*/ markType(ScatterDataInfo, 'ScatterDataInfo');
    return ScatterDataInfo;
})();
