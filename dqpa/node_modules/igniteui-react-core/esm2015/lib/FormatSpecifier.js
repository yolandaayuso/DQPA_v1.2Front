/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { stringContains } from "./string";
/**
 * @hidden
 */
export let FormatSpecifier = /*@__PURE__*/ (() => {
    class FormatSpecifier extends Base {
        constructor() {
            super();
            this.a = null;
            this.e();
        }
        toIntl() {
            return null;
        }
        getLocalCulture() {
            let a = (window.navigator.language);
            if (stringContains(a, "-")) {
                return a;
            }
            else {
                if (this.a.containsKey(a)) {
                    return this.a.item(a);
                }
                return a;
            }
        }
        e() {
            this.a = new Dictionary$2(String_$type, String_$type, 0);
            this.a.addItem("af", "af-ZA");
            this.a.addItem("ar", "ar-EG");
            this.a.addItem("az", "az-AZ");
            this.a.addItem("be", "be-BY");
            this.a.addItem("bg", "bg-BG");
            this.a.addItem("ca", "ca-ES");
            this.a.addItem("cs", "cs-CZ");
            this.a.addItem("Cy", "Cy-sr-SP");
            this.a.addItem("da", "da-DK");
            this.a.addItem("de", "de-DE");
            this.a.addItem("div", "div-MV");
            this.a.addItem("el", "el-GR");
            this.a.addItem("en", "en-US");
            this.a.addItem("es", "es-ES");
            this.a.addItem("et", "et-EE");
            this.a.addItem("eu", "eu-ES");
            this.a.addItem("fa", "fa-IR");
            this.a.addItem("fi", "fi-FI");
            this.a.addItem("fo", "fo-FO");
            this.a.addItem("fr", "fr-FR");
            this.a.addItem("gl", "gl-ES");
            this.a.addItem("gu", "gu-IN");
            this.a.addItem("he", "he-IL");
            this.a.addItem("hi", "hi-IN");
            this.a.addItem("hr", "hr-HR");
            this.a.addItem("hu", "hu-HU");
            this.a.addItem("hy", "hy-AM");
            this.a.addItem("id", "id-ID");
            this.a.addItem("is", "is-IS");
            this.a.addItem("it", "it-IT");
            this.a.addItem("ja", "ja-JP");
            this.a.addItem("ka", "ka-GE");
            this.a.addItem("kk", "kk-KZ");
            this.a.addItem("kl", "kl-GL");
            this.a.addItem("km", "km-KH");
            this.a.addItem("kn", "kn-IN");
            this.a.addItem("ko", "ko-KR");
            this.a.addItem("kok", "kok-IN");
            this.a.addItem("ky", "ky-KZ");
            this.a.addItem("Lt", "Lt-az-AZ");
            this.a.addItem("lt", "lt-LT");
            this.a.addItem("lv", "lv-LV");
            this.a.addItem("mk", "mk-MK");
            this.a.addItem("mn", "mn-MN");
            this.a.addItem("mr", "mr-IN");
            this.a.addItem("ms", "ms-MY");
            this.a.addItem("nb", "nb-NO");
            this.a.addItem("nl", "nl-NL");
            this.a.addItem("nn", "nn-NO");
            this.a.addItem("pa", "pa-IN");
            this.a.addItem("pl", "pl-PL");
            this.a.addItem("prs", "prs-AF");
            this.a.addItem("ps", "ps-AF");
            this.a.addItem("pt", "pt-PT");
            this.a.addItem("ro", "ro-RO");
            this.a.addItem("ru", "ru-RU");
            this.a.addItem("sa", "sa-IN");
            this.a.addItem("si", "si-LK");
            this.a.addItem("sk", "sk-SK");
            this.a.addItem("sl", "sl-SI");
            this.a.addItem("sq", "sq-AL");
            this.a.addItem("sr", "sr-Latn-ME");
            this.a.addItem("sv", "sv-FI");
            this.a.addItem("sw", "sw-KE");
            this.a.addItem("syr", "syr-SY");
            this.a.addItem("ta", "ta-IN");
            this.a.addItem("te", "te-IN");
            this.a.addItem("th", "th-TH");
            this.a.addItem("tk", "tk-TM");
            this.a.addItem("tr", "tr-TR");
            this.a.addItem("tt", "tt-RU");
            this.a.addItem("uk", "uk-UA");
            this.a.addItem("ur", "ur-PK");
            this.a.addItem("vi", "vi-VN");
            this.a.addItem("zh", "zh-CN");
        }
        c() {
            return this.toIntl();
            return null;
        }
    }
    FormatSpecifier.$t = /*@__PURE__*/ markType(FormatSpecifier, 'FormatSpecifier');
    return FormatSpecifier;
})();
