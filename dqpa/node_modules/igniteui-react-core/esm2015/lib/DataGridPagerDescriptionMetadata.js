/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { PageChangedEventArgsDescriptionMetadata } from "./PageChangedEventArgsDescriptionMetadata";
import { DataGridPagerDescription } from "./DataGridPagerDescription";
/**
 * @hidden
 */
export let DataGridPagerDescriptionMetadata = /*@__PURE__*/ (() => {
    class DataGridPagerDescriptionMetadata extends Base {
        static b(a) {
            if (DataGridPagerDescriptionMetadata.a == null) {
                DataGridPagerDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DataGridPagerDescriptionMetadata.c(DataGridPagerDescriptionMetadata.a);
            }
            if (a.k(DataGridPagerDescriptionMetadata.a)) {
                return;
            }
            a.ac(DataGridPagerDescriptionMetadata.a);
            PageChangedEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("PagerText", "String");
            a.item("PageSize", "Number:int");
            a.item("PageCount", "Number:int");
            a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)DataRef::object");
            a.item("DataSource", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)ExportedType:BaseDataSource:BaseDataSource");
            a.item("CurrentPage", "Number:int");
            a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
            a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
            a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontFamily/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
            a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontFamily/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
            a.item("Background", "Brush");
            a.item("Border", "Brush");
            a.item("PageChangedRef", "EventRef::pageChanged");
        }
        static d(a) {
            DataGridPagerDescriptionMetadata.b(a);
            a.ae("DataGridPager", () => new DataGridPagerDescription());
            a.ad("DataGridPager", DataGridPagerDescriptionMetadata.a);
        }
    }
    DataGridPagerDescriptionMetadata.$t = /*@__PURE__*/ markType(DataGridPagerDescriptionMetadata, 'DataGridPagerDescriptionMetadata');
    DataGridPagerDescriptionMetadata.a = null;
    return DataGridPagerDescriptionMetadata;
})();
