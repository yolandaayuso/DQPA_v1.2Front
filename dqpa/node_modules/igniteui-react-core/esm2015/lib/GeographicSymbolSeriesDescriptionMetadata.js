/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AssigningScatterStyleEventArgsDescriptionMetadata } from "./AssigningScatterStyleEventArgsDescriptionMetadata";
import { AssigningScatterMarkerStyleEventArgsDescriptionMetadata } from "./AssigningScatterMarkerStyleEventArgsDescriptionMetadata";
import { GeographicMarkerSeriesDescriptionMetadata } from "./GeographicMarkerSeriesDescriptionMetadata";
import { GeographicSymbolSeriesDescription } from "./GeographicSymbolSeriesDescription";
/**
 * @hidden
 */
export let GeographicSymbolSeriesDescriptionMetadata = /*@__PURE__*/ (() => {
    class GeographicSymbolSeriesDescriptionMetadata extends Base {
        static b(a) {
            if (GeographicSymbolSeriesDescriptionMetadata.a == null) {
                GeographicSymbolSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                GeographicSymbolSeriesDescriptionMetadata.c(GeographicSymbolSeriesDescriptionMetadata.a);
            }
            if (a.k(GeographicSymbolSeriesDescriptionMetadata.a)) {
                return;
            }
            a.ac(GeographicSymbolSeriesDescriptionMetadata.a);
            AssigningScatterStyleEventArgsDescriptionMetadata.d(a);
            AssigningScatterMarkerStyleEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            GeographicMarkerSeriesDescriptionMetadata.c(a);
            a.item("LatitudeMemberPath", "String");
            a.item("LongitudeMemberPath", "String");
            a.item("MarkerCollisionAvoidance", "ExportedType:string:CollisionAvoidanceType");
            a.item("MarkerCollisionAvoidance@names", "None;Omit;Fade;OmitAndShift;FadeAndShift");
            a.item("IsCustomScatterStyleAllowed", "Boolean");
            a.item("IsCustomScatterMarkerStyleAllowed", "Boolean");
            a.item("ItemSearchMode", "ExportedType:string:ScatterItemSearchMode");
            a.item("ItemSearchMode@names", "Auto;ClosestVisiblePoint;ClosestPoint;ClosestVisiblePointOnClosestLine;ClosestPointOnClosestLine;TopVisiblePoint;None");
            a.item("ItemSearchThreshold", "Number:int");
            a.item("AssigningScatterStyleRef", "EventRef::assigningScatterStyle");
            a.item("AssigningScatterMarkerStyleRef", "EventRef::assigningScatterMarkerStyle");
        }
        static d(a) {
            GeographicSymbolSeriesDescriptionMetadata.b(a);
            a.ae("GeographicSymbolSeries", () => new GeographicSymbolSeriesDescription());
            a.ad("GeographicSymbolSeries", GeographicSymbolSeriesDescriptionMetadata.a);
        }
    }
    GeographicSymbolSeriesDescriptionMetadata.$t = /*@__PURE__*/ markType(GeographicSymbolSeriesDescriptionMetadata, 'GeographicSymbolSeriesDescriptionMetadata');
    GeographicSymbolSeriesDescriptionMetadata.a = null;
    return GeographicSymbolSeriesDescriptionMetadata;
})();
