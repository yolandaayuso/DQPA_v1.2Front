/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "./type";
import { List$1 } from "./List$1";
import { AggregatedDataProviderTopLayer } from "./AggregatedDataProviderTopLayer";
import { Dictionary$2 } from "./Dictionary$2";
/**
 * @hidden
 */
export let AggregatedDataProviderLayerMap = /*@__PURE__*/ (() => {
    class AggregatedDataProviderLayerMap extends Base {
        constructor() {
            super(...arguments);
            this.c = new Dictionary$2(Base.$, AggregatedDataProviderTopLayer.$, 0);
            this.d = new List$1(AggregatedDataProviderTopLayer.$, 0);
        }
        a(a) {
            let b = new List$1(Base.$, 0);
            for (let c = 0; c < this.d.count; c++) {
                let d = this.d._inner[c];
                let e = d.o(a);
                b.add1(e);
            }
            return b.toArray();
        }
        b(a) {
            let b = a == null ? AggregatedDataProviderLayerMap.e : a;
            if (this.c.containsKey(b)) {
                return this.c.item(b);
            }
            return null;
        }
        f(a) {
            let b = a.j._inner[0] == null ? AggregatedDataProviderLayerMap.e : a.j._inner[0];
            let c;
            if (!this.c.containsKey(b)) {
                c = new AggregatedDataProviderTopLayer();
                this.d.add(c);
                c.w = a.i._inner[0];
                c.p = b;
                this.c.addItem(c.p, c);
            }
            else {
                c = this.c.item(b);
            }
            c.h.add(a);
        }
    }
    AggregatedDataProviderLayerMap.$t = /*@__PURE__*/ markType(AggregatedDataProviderLayerMap, 'AggregatedDataProviderLayerMap');
    AggregatedDataProviderLayerMap.e = {};
    return AggregatedDataProviderLayerMap;
})();
