/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let GridConditionalStyleDescription = /*@__PURE__*/ (() => {
    class GridConditionalStyleDescription extends Description {
        get_type() {
            return "GridConditionalStyle";
        }
        get type() {
            return this.get_type();
        }
        constructor() {
            super();
            this.w = null;
            this.o = false;
            this.h = null;
            this.t = null;
            this.j = null;
            this.m = false;
            this.l = false;
            this.n = false;
            this.v = null;
            this.u = null;
        }
        get styleKey() {
            return this.w;
        }
        set styleKey(a) {
            this.w = a;
            this.g("StyleKey");
        }
        get isTransitionInEnabled() {
            return this.o;
        }
        set isTransitionInEnabled(a) {
            this.o = a;
            this.g("IsTransitionInEnabled");
        }
        get properties() {
            return this.h;
        }
        set properties(a) {
            this.h = a;
            this.g("Properties");
        }
        get conditionString() {
            return this.t;
        }
        set conditionString(a) {
            this.t = a;
            this.g("ConditionString");
        }
        get condition() {
            return this.j;
        }
        set condition(a) {
            this.j = a;
            this.g("Condition");
        }
        get isFieldMinimumNeeded() {
            return this.m;
        }
        set isFieldMinimumNeeded(a) {
            this.m = a;
            this.g("IsFieldMinimumNeeded");
        }
        get isFieldMaximumNeeded() {
            return this.l;
        }
        set isFieldMaximumNeeded(a) {
            this.l = a;
            this.g("IsFieldMaximumNeeded");
        }
        get isFieldSumNeeded() {
            return this.n;
        }
        set isFieldSumNeeded(a) {
            this.n = a;
            this.g("IsFieldSumNeeded");
        }
        get propertyUpdatedRef() {
            return this.v;
        }
        set propertyUpdatedRef(a) {
            this.v = a;
            this.g("PropertyUpdatedRef");
        }
        get filterStringErrorsParsingRef() {
            return this.u;
        }
        set filterStringErrorsParsingRef(a) {
            this.u = a;
            this.g("FilterStringErrorsParsingRef");
        }
    }
    GridConditionalStyleDescription.$t = /*@__PURE__*/ markType(GridConditionalStyleDescription, 'GridConditionalStyleDescription', Description.$);
    return GridConditionalStyleDescription;
})();
