import { IgrNumericXAxis } from "./igr-numeric-x-axis";
import { IgrNumericYAxis } from "./igr-numeric-y-axis";
import { IgrTriangulationStatusEventArgs } from "igniteui-react-core";
import { IgrSeries, IIgrSeriesProps } from "./igr-series";
import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import { IgrAxis } from "./igr-axis";
/**
 * Base class for series which triangulate XY data prior to rendering.
*/
export declare abstract class IgrScatterTriangulationSeries<P extends IIgrScatterTriangulationSeriesProps = IIgrScatterTriangulationSeriesProps> extends IgrSeries<P> {
    /**
                                 * @hidden
                                 */
    get i(): ScatterTriangulationSeries;
    constructor(props: P);
    /**
     * The name of the property from which to extract the X-coordinate for each item in the ItemsSource.
    */
    get xMemberPath(): string;
    set xMemberPath(v: string);
    /**
     * The name of the property from which to extract the Y-coordinate for each item in the ItemsSource.
    */
    get yMemberPath(): string;
    set yMemberPath(v: string);
    /**
     * The X-Axis for this series.
    */
    get xAxis(): IgrNumericXAxis;
    set xAxis(v: IgrNumericXAxis);
    private _xAxisName;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    get xAxisName(): string;
    set xAxisName(v: string);
    /**
     * The Y-Axis for this series.
    */
    get yAxis(): IgrNumericYAxis;
    set yAxis(v: IgrNumericYAxis);
    private _yAxisName;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    get yAxisName(): string;
    set yAxisName(v: string);
    /**
     * The source of triangulation data.
     * This property is optional.  If it is left as null, the triangulation will be created based on the items in the ItemsSource.  Triangulation is a demanding operation, so the runtime performance will be better when specifying a TriangulationSource, especially when a large number of data items are present.
    */
    get trianglesSource(): any[];
    set trianglesSource(v: any[]);
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the first vertex point in the ItemsSource.
    */
    get triangleVertexMemberPath1(): string;
    set triangleVertexMemberPath1(v: string);
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the second vertex point in the ItemsSource.
    */
    get triangleVertexMemberPath2(): string;
    set triangleVertexMemberPath2(v: string);
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the third vertex point in the ItemsSource.
    */
    get triangleVertexMemberPath3(): string;
    set triangleVertexMemberPath3(v: string);
    /**
     * Gets whether or not this series is a shape series
    */
    get isShape(): boolean;
    /**
     * Overridden by derived series classes to indicate when marker-less display is preferred or not.
    */
    get isMarkerlessDisplayPreferred(): boolean;
    /**
     * Gets or sets the label displayed before series X value in the Data Legend.
    */
    get xMemberAsLegendLabel(): string;
    set xMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the label displayed before series Y value in the Data Legend.
    */
    get yMemberAsLegendLabel(): string;
    set yMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the unit after displayed after series X value in the Data Legend.
    */
    get xMemberAsLegendUnit(): string;
    set xMemberAsLegendUnit(v: string);
    /**
     * Gets or sets the unit after displayed after series Y value in the Data Legend.
    */
    get yMemberAsLegendUnit(): string;
    set yMemberAsLegendUnit(v: string);
    bindAxes(axes: IgrAxis[]): void;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName: string): string;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
    private _triangulationStatusChanged;
    private _triangulationStatusChanged_wrapped;
    /**
     * Raised when the status of an ongoing Triangulation has changed.
    */
    get triangulationStatusChanged(): (s: IgrScatterTriangulationSeries, e: IgrTriangulationStatusEventArgs) => void;
    set triangulationStatusChanged(ev: (s: IgrScatterTriangulationSeries, e: IgrTriangulationStatusEventArgs) => void);
}
export interface IIgrScatterTriangulationSeriesProps extends IIgrSeriesProps {
    /**
     * The name of the property from which to extract the X-coordinate for each item in the ItemsSource.
    */
    xMemberPath?: string;
    /**
     * The name of the property from which to extract the Y-coordinate for each item in the ItemsSource.
    */
    yMemberPath?: string;
    /**
     * The X-Axis for this series.
    */
    xAxis?: IgrNumericXAxis;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    xAxisName?: string;
    /**
     * The Y-Axis for this series.
    */
    yAxis?: IgrNumericYAxis;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    yAxisName?: string;
    /**
     * The source of triangulation data.
     * This property is optional.  If it is left as null, the triangulation will be created based on the items in the ItemsSource.  Triangulation is a demanding operation, so the runtime performance will be better when specifying a TriangulationSource, especially when a large number of data items are present.
    */
    trianglesSource?: any[];
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the first vertex point in the ItemsSource.
    */
    triangleVertexMemberPath1?: string;
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the second vertex point in the ItemsSource.
    */
    triangleVertexMemberPath2?: string;
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the third vertex point in the ItemsSource.
    */
    triangleVertexMemberPath3?: string;
    /**
     * Gets or sets the label displayed before series X value in the Data Legend.
    */
    xMemberAsLegendLabel?: string;
    /**
     * Gets or sets the label displayed before series Y value in the Data Legend.
    */
    yMemberAsLegendLabel?: string;
    /**
     * Gets or sets the unit after displayed after series X value in the Data Legend.
    */
    xMemberAsLegendUnit?: string;
    /**
     * Gets or sets the unit after displayed after series Y value in the Data Legend.
    */
    yMemberAsLegendUnit?: string;
    /**
     * Raised when the status of an ongoing Triangulation has changed.
    */
    triangulationStatusChanged?: (s: IgrScatterTriangulationSeries, e: IgrTriangulationStatusEventArgs) => void;
}
