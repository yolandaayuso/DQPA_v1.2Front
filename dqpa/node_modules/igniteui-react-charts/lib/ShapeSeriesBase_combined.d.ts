import { Series } from "./Series";
import { ISupportsFillScale } from "./ISupportsFillScale";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { BrushScale } from "./BrushScale";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { HighlightingInfo } from "igniteui-react-core";
import { ShapeItemSearchMode } from "./ShapeItemSearchMode";
import { Point, Type } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { StyleShapeEventArgs } from "./StyleShapeEventArgs";
import { Axis } from "./Axis";
import { FrameworkElement } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Marker } from "./Marker";
import { Tuple$2 } from "igniteui-react-core";
import { ShapeHitRegion } from "./ShapeHitRegion";
import { AssigningShapeStyleEventArgs } from "./AssigningShapeStyleEventArgs";
import { AssigningShapeMarkerStyleEventArgs } from "./AssigningShapeMarkerStyleEventArgs";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { FlattenedShape } from "./FlattenedShape";
import { SeriesView } from "./SeriesView";
import { Clipper } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { RenderSurface } from "./RenderSurface";
import { Dictionary$2 } from "igniteui-react-core";
import { ActualRange } from "./ActualRange";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { Shape } from "igniteui-react-core";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { ChartSelection } from "./ChartSelection";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { AxisRange } from "./AxisRange";
import { Style } from "igniteui-react-core";
import { StyleSelector } from "./StyleSelector";
import { Path } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class ShapeSeriesBase extends Series implements ISupportsFillScale {
    static $t: Type;
    constructor();
    o2(): void;
    ai(): Axis[];
    kq(a: any, b: string): any;
    md(a: string): string;
    x8: boolean;
    x7: boolean;
    yu: string;
    xa: BrushScale;
    private xt;
    get xv(): IFastItemColumn$1<number>;
    set xv(a: IFastItemColumn$1<number>);
    x3: boolean;
    protected xy: boolean;
    protected xx: boolean;
    protected get_fe(): boolean;
    private xr;
    private xs;
    protected get_ed(): boolean;
    protected xp(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected xq(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    private xh;
    get xi(): ShapeItemSearchMode;
    set xi(a: ShapeItemSearchMode);
    protected xj(): ShapeItemSearchMode;
    xk: ShapeItemSearchMode;
    yq: number;
    yp: number;
    ir(a: Point): number;
    private w2;
    private w3;
    protected zd(a: Point): Tuple$2<number, Point>;
    private zc;
    protected get_x0(): boolean;
    protected get x0(): boolean;
    private zb;
    protected yl(a: Point): number;
    wc(a: Point, b: boolean, c: boolean): Point;
    kn(a: Point): any;
    protected xo(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    dg(a: any, b: Point, c: boolean): HighlightingInfo;
    dh(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningShapeStyle: (sender: any, args: AssigningShapeStyleEventArgs) => void;
    assigningShapeMarkerStyle: (sender: any, args: AssigningShapeMarkerStyleEventArgs) => void;
    protected ye(): boolean;
    protected yd(): boolean;
    protected xl: ShapeSeriesRenderManager;
    y7: string;
    get yy(): string;
    set yy(a: string);
    static readonly zu: DependencyProperty;
    protected gb(): boolean;
    protected ht(): List$1<SeriesLayerPropertyOverlay>;
    private zg;
    private xu;
    get xw(): IFastItemColumn$1<any>;
    set xw(a: IFastItemColumn$1<any>);
    xe: NumericXAxis;
    xg: NumericYAxis;
    private x5;
    private static x9;
    private convertToListList;
    protected dm(a: string): IFastItemColumn$1<any>;
    protected q9(a: any, b: string, c: any, d: any): void;
    protected yc(): boolean;
    protected yb(): boolean;
    x2(a: any): boolean;
    x1(a: any): boolean;
    private xd;
    private xf;
    private yk;
    yg: List$1<Rect>;
    private zo;
    private z5;
    protected yi(a: SeriesView, b: Clipper, c: any, d: ScalerParams, e: ScalerParams, f: number, g: number): List$1<FlattenedShape>;
    private wz;
    private w1;
    private w0;
    private wy;
    protected get_x6(): boolean;
    protected get x6(): boolean;
    protected yf(): boolean;
    rs(a: boolean): void;
    rq(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    updateFillScaleGlobals(): void;
    protected zn(a: SeriesView): void;
    w7(): ActualRange;
    protected zj(a: FrameworkElement, b: boolean, c: number, d: number, e: boolean, f: boolean): void;
    protected zi(a: number, b: number, c: boolean): void;
    protected zl(a: AssigningShapeStyleEventArgs): void;
    protected zk(a: AssigningShapeMarkerStyleEventArgs): void;
    w4(a: number, b: number): any[];
    protected w5(a: number, b: number): any[];
    private static zm;
    qb(): void;
    protected sr(a: Rect, b: Rect): void;
    protected sq(a: Rect, b: Rect): void;
    protected pb(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    protected get_ya(): boolean;
    protected get ya(): boolean;
    q1(a: SeriesView): void;
    private xm;
    private yj;
    private xc;
    private ze;
    z4: Rect;
    private xb;
    private xn;
    private w6;
    private zq;
    o5(a: boolean, b: SeriesView): void;
    private zh;
    private zp;
    zf(a: Rect, b: List$1<ChartSelection>, c: SeriesSelectionBehavior): void;
    xz(a: List$1<ChartSelection>, b: SeriesSelectionBehavior, c: number): boolean;
    a2(a: Point, b: boolean): DataContext;
    yr(a: number): any;
    protected get_g7(): boolean;
    protected set_g7(a: boolean): void;
    ym: number;
    yn: number;
    ay(a: Axis): AxisRange;
    protected get_fx(): boolean;
    protected get_fl(): boolean;
    get x4(): boolean;
    z6(a: any, b: DependencyObject, c: Style): Style;
    styleShape: (sender: any, e: StyleShapeEventArgs) => void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ShapeSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    aw: AssigningShapeMarkerStyleEventArgs;
    ax: AssigningShapeStyleEventArgs;
    a1(a: Shape, b: number, c: boolean): void;
    ay(a: ShapeSeriesBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    az(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    a0(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare abstract class ShapeSeriesViewBase extends SeriesView {
    static $t: Type;
    constructor(a: ShapeSeriesBase);
    cc: Dictionary$2<number, FlattenedShape>;
    b4(a: Point): Marker;
    get ce(): List$1<ShapeHitRegion>;
    protected b8(): Pool$1<FrameworkElement>;
    cb(a: Rect): boolean;
    static cf(a: List$1<FlattenedShape>): List$1<PointCollection>;
    get ca(): boolean;
    protected b6: ShapeSeriesBase;
    private cd;
    ci(a: number, b: any, c: Rect, d: List$1<FlattenedShape>): void;
    protected c4(a: number, b: any): FrameworkElement;
    protected abstract ck(a: FrameworkElement, b: PathGeometry): void;
    static cl(a: ShapeSeriesViewBase, b: Path, c: any): void;
    cp(a: (arg1: FrameworkElement) => void): void;
    cm(a: FrameworkElement, b: any, c: boolean): void;
    protected co(a: FrameworkElement, b: boolean): void;
    private cj;
    private cx;
    protected abstract c5(a: number, b: List$1<PointCollection>): PathGeometry;
    cu(): void;
    ct(): void;
    private ch;
    cw(a: number, b: number): void;
    cn(): void;
    protected cg: List$1<Path>;
    c1(): FrameworkElement;
    cq(a: FrameworkElement): void;
    cr(a: FrameworkElement): void;
    cs(a: FrameworkElement): void;
    protected b9: Pool$1<FrameworkElement>;
    c6(a: number, b: List$1<PointCollection>, c: boolean): PathGeometry;
    protected ac(a: number): any;
    private c7;
    protected ab(a: number): any;
    protected a8(a: RenderingContext, b: boolean): void;
    private b7;
    private c8;
    get c9(): Style;
    cz(a: StyleSelector): void;
    cy(a: Style): void;
    c2(a: Point, b: boolean): FrameworkElement;
    c3(a: Point, b: boolean, c: boolean): FrameworkElement;
    b5(a: Point, b: boolean, c: boolean): ShapeHitRegion;
    private b1;
    private b3;
    private b2;
    private b0;
    cv(a: number[], b: number[], c: number[], d: number[]): void;
    c0(): void;
    an(a: any): void;
}
