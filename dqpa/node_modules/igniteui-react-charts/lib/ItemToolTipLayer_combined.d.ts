import { AnnotationLayer } from "./AnnotationLayer";
import { Series } from "./Series";
import { Type } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { Frame } from "./Frame";
import { Pool$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ItemToolTipLayer extends AnnotationLayer {
    static $t: Type;
    protected bj(): Series;
    protected get_er(): boolean;
    constructor();
    protected cs(): SeriesView;
    q1(a: SeriesView): void;
    protected zx: ItemToolTipLayerView;
    protected get_e2(): boolean;
    z4: string;
    gu(a: Series): boolean;
    zy: Series;
    z1: boolean;
    z0: boolean;
    protected q9(a: any, b: string, c: any, d: any): void;
    protected yp(a: Series, b: boolean): void;
    protected xi(a: Series): boolean;
    protected yr(a: Frame, b: SeriesView): void;
    private z8;
    private zz;
    private z9;
    private z2;
    p7(): void;
    p8(): void;
    protected yu(a: Frame, b: SeriesView): void;
    protected ga(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ItemToolTipLayerView extends AnnotationLayerView {
    static $t: Type;
    constructor(a: ItemToolTipLayer);
    protected b7: ItemToolTipLayer;
    b8: Pool$1<any>;
    au(): void;
    ak(): void;
    protected ca: List$1<PointerTooltip>;
    private cb;
    private cd;
    private cf;
    private ce;
    private _htmlTest;
    protected get htmlTest(): any;
    protected set htmlTest(a: any);
    b9(a: Series, b: any, c: any, d: DataContext): boolean;
    ck(a: any, b: any, c: DataContext): Size;
    ci(a: any, b: number, c: number, d: number, e: number): void;
    cg(a: any): void;
    protected a8(a: RenderingContext, b: boolean): void;
    an(a: any): void;
    ch(a: boolean): void;
    cj(): void;
}
