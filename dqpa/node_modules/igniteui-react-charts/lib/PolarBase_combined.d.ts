import { MarkerSeries } from "./MarkerSeries";
import { Point, Type } from "igniteui-react-core";
import { PolarAxisInfoCache } from "./PolarAxisInfoCache";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { PolarFrame } from "./PolarFrame";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { HighlightingInfo } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Axis } from "./Axis";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { PolarAxes } from "./PolarAxes";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { OwnedPoint } from "./OwnedPoint";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { PolarTrendLineManager } from "./PolarTrendLineManager";
import { AssigningPolarStyleEventArgs } from "./AssigningPolarStyleEventArgs";
import { AssigningPolarMarkerStyleEventArgs } from "./AssigningPolarMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { ChartSelection } from "./ChartSelection";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class PolarBase extends MarkerSeries {
    static $t: Type;
    protected cs(): SeriesView;
    q1(a: SeriesView): void;
    yx: PolarBaseView;
    private yy;
    o2(): void;
    protected get_fp(): boolean;
    eb(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number, e: boolean): boolean;
    constructor();
    private aa6;
    private aa8;
    private yp;
    yw: PolarAxisInfoCache;
    private acf;
    private ace;
    private acd;
    za: SeriesRenderer$2<PolarFrame, PolarBaseView>;
    aaj: string;
    aa1: string;
    aao: string;
    aam: string;
    protected gb(): boolean;
    protected zy(): boolean;
    protected ht(): List$1<SeriesLayerPropertyOverlay>;
    private aba;
    private aa9;
    protected get zj(): IFastItemColumn$1<number>;
    protected set zj(a: IFastItemColumn$1<number>);
    private zh;
    protected get zk(): IFastItemColumn$1<number>;
    protected set zk(a: IFastItemColumn$1<number>);
    private zi;
    yt: NumericAngleAxis;
    yu: NumericRadiusAxis;
    zz: boolean;
    z9: number;
    zb: TrendLineType;
    ab8: Brush;
    get ab7(): Brush;
    set ab7(a: Brush);
    static readonly abi: DependencyProperty;
    z7: number;
    aca: PenLineCap;
    ab9: DoubleCollection;
    aaa: number;
    aab: number;
    zp: boolean;
    y2: PolarFrame;
    y4: PolarFrame;
    y0: PolarFrame;
    y1(): PolarFrame;
    yv: PolarAxes;
    qb(): void;
    protected pb(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected sq(a: Rect, b: Rect): void;
    protected sr(a: Rect, b: Rect): void;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    rs(a: boolean): void;
    private acc;
    ay(a: Axis): AxisRange;
    gd(a: any): boolean;
    kn(a: Point): any;
    j3(a: Point): number;
    ir(a: Point): number;
    protected z3(a: Point): number;
    protected z2(a: Point): number;
    private zq;
    private z0;
    private z6;
    protected z5(a: Point): number;
    protected z4(a: Point): number;
    wc(a: Point, b: boolean, c: boolean): Point;
    ai(): Axis[];
    kq(a: any, b: string): any;
    md(a: string): string;
    protected q9(a: any, b: string, c: any, d: any): void;
    private y6;
    get y7(): ScatterItemSearchMode;
    set y7(a: ScatterItemSearchMode);
    protected y8(): ScatterItemSearchMode;
    protected get_zt(): boolean;
    protected get zt(): boolean;
    protected zv(): boolean;
    protected zu(): boolean;
    y9: ScatterItemSearchMode;
    z8: number;
    zo(a: any): boolean;
    zn(a: any): boolean;
    o5(a: boolean, b: SeriesView): void;
    private yq;
    aa5(a: PolarFrame, b: number, c: Rect, d: Rect): void;
    abd(a: PolarFrame, b: PolarBaseView): void;
    zs: boolean;
    zr: boolean;
    protected zm: boolean;
    protected zl: boolean;
    protected get_fe(): boolean;
    private zf;
    private zg;
    protected zd(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected ze(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected zc(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    dg(a: any, b: Point, c: boolean): HighlightingInfo;
    dh(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningPolarStyle: (sender: any, args: AssigningPolarStyleEventArgs) => void;
    assigningPolarMarkerStyle: (sender: any, args: AssigningPolarMarkerStyleEventArgs) => void;
    protected zx(): boolean;
    protected zw(): boolean;
    abh(a: PolarFrame, b: PolarBaseView): void;
    yn(a: number, b: number): any[];
    protected yo(a: number, b: number): any[];
    protected y5: PolarSeriesRenderManager;
    aa7(a: PolarBaseView, b: PolarFrame): void;
    protected abc(a: number, b: number, c: boolean): void;
    protected abb(a: number, b: number, c: boolean): void;
    protected abf(a: AssigningPolarStyleEventArgs): void;
    protected abe(a: AssigningPolarMarkerStyleEventArgs): void;
    private aa4;
    protected sh(): void;
    y3: PolarFrame;
    rt(a: Rect, b: RenderSurface): void;
    private yz;
    rq(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    abg(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    ym(a: HashPool$2<any, Marker>, b: Rect, c: Rect): Point[];
    z1(a: HashPool$2<any, Marker>): List$1<number>;
    acb(a: number): Point;
    protected pz(a: any): void;
    aax: string;
    aaf: string;
    aaz: string;
    aah: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    ak(a: Rect, b: SeriesSelectionBehavior): ChartSelection[];
    p4(a: Rect, b: List$1<ChartSelection>, c: SeriesSelectionBehavior): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PolarSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    aw: AssigningPolarMarkerStyleEventArgs;
    ax: AssigningPolarStyleEventArgs;
    ay(a: PolarBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    az(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    a0(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class PolarBaseView extends MarkerSeriesView {
    static $t: Type;
    protected cz: PolarBase;
    cy: MarkerManagerBase;
    constructor(a: PolarBase);
    c0: PolarTrendLineManager;
    au(): void;
    c4(a: (arg1: Marker) => void): void;
    protected cx(): MarkerManagerBase;
    protected c5(a: IDictionary$2<any, OwnedPoint>): void;
    protected cw(): Point[];
    protected c2(): List$1<number>;
    c3(a: Rect, b: Rect, c: Rect, d: Rect): void;
    c6(): void;
    c1: HashPool$2<any, Marker>;
    cj(a: (arg1: Marker) => void): void;
    protected a7(a: RenderingContext, b: boolean): void;
    protected c7(): Rect;
    getDefaultTooltipTemplate(): string;
}
