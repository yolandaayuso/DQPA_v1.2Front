import { Base, Type } from "igniteui-react-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { Series } from "./Series";
import { Brush } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { PenLineJoin } from "igniteui-react-core";
import { Shape } from "igniteui-react-core";
import { Marker } from "./Marker";
import { DataContext } from "igniteui-react-core";
import { HighlightingInfo } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class SeriesRenderManager extends Base {
    static $t: Type;
    ag: Brush;
    ah: Brush;
    m: number;
    am: DoubleCollection;
    ao: PenLineCap;
    k: number;
    l: number;
    j: number;
    i: number;
    au: PenLineJoin;
    aq: PenLineCap;
    ap: PenLineCap;
    ak: Brush;
    al: Brush;
    t: number;
    an: DoubleCollection;
    ar: PenLineCap;
    r: number;
    s: number;
    q: number;
    p: number;
    av: PenLineJoin;
    at: PenLineCap;
    as: PenLineCap;
    ai: Brush;
    aj: Brush;
    n: number;
    o: number;
    f: boolean;
    e: boolean;
    ae: Brush;
    af: Brush;
    g: number;
    h: number;
    b: AssigningSeriesShapeStyleEventArgsBase;
    d: AssigningSeriesStyleEventArgsBase;
    w(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    protected c(): AssigningSeriesStyleEventArgsBase;
    x(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    ad(a: Shape, b: boolean, c: boolean, d: boolean, e: boolean): void;
    ac(a: Marker, b: DataContext): void;
    protected u(a: Series, b: HighlightingInfo, c: HighlightingInfo, d: HighlightingInfo, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: boolean): void;
    protected v(a: Series, b: HighlightingInfo, c: HighlightingInfo, d: HighlightingInfo, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
    ab(a: number): void;
    z(a: Series, b: HighlightingInfo, c: HighlightingInfo, d: HighlightingInfo, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean): void;
    aa(a: number): void;
    y(a: Series, b: HighlightingInfo, c: HighlightingInfo, d: HighlightingInfo, e: boolean, f: boolean, g: boolean, h: boolean, i: number, j: number, k: number, l: number, m: number, n: number): void;
}
