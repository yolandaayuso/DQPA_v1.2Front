import { HighlightingManager } from "igniteui-react-core";
import { Base, Type, Point, INotifyPropertyChanged, IEnumerable, PropertyChangedEventArgs, EventArgs } from "igniteui-react-core";
import { TreemapHighlightingMode } from "./TreemapHighlightingMode";
import { DomRenderer } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { TreemapVisualData } from "./TreemapVisualData";
import { List$1 } from "igniteui-react-core";
import { TreemapVisual } from "./TreemapVisual";
import { Pool$1 } from "igniteui-react-core";
import { IExecutionContext } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { VerticalAlignment } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { HashSet$1 } from "igniteui-react-core";
import { TreemapOrientation } from "./TreemapOrientation";
import { Dictionary$2 } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { TreemapHighlightedValueDisplayMode } from "./TreemapHighlightedValueDisplayMode";
import { BrushCollection } from "igniteui-react-core";
import { TreemapFillScaleMode } from "./TreemapFillScaleMode";
import { TreemapLabelVerticalFitMode } from "./TreemapLabelVerticalFitMode";
import { TreemapLabelHorizontalFitMode } from "./TreemapLabelHorizontalFitMode";
import { TreemapHeaderDisplayMode } from "./TreemapHeaderDisplayMode";
import { TreemapLayoutType } from "./TreemapLayoutType";
import { FastItemsSource } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { HighlightingInfo } from "igniteui-react-core";
import { IHighlightingManager } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { IFastItemsSource } from "igniteui-react-core";
import { TreemapValueMappingMode } from "./TreemapValueMappingMode";
import { TreemapNodePointerEventArgs } from "./TreemapNodePointerEventArgs";
import { TreemapNodeStyleMappingTargetType } from "./TreemapNodeStyleMappingTargetType";
/**
 * @hidden
 */
export declare class TreemapHighlightingManager extends HighlightingManager {
    static $t: Type;
    isCrossContextHighlight(a: any): boolean;
}
/**
 * @hidden
 */
export declare class TreemapView extends Base {
    static $t: Type;
    constructor();
    protected b: TreemapViewRenderer;
    a: Treemap;
    ax(): void;
    a1(): void;
    private p;
    a2(): void;
    ag(): void;
    q(): boolean;
    private af;
    private m;
    private ad;
    private t;
    private s;
    private g;
    private ae;
    private w;
    ay(): void;
    au(a: DomRenderer): void;
    private al;
    ao(a: TreemapVisualData): void;
    private ak;
    private ac;
    ar(): void;
    private ah;
    private aj;
    private an;
    private am;
    private c;
    protected aq(): void;
    private u;
    private v;
    private a4;
    l(): Pool$1<TreemapVisual>;
    protected a3(): void;
    as(): void;
    ap(): void;
    private a0;
    private i;
    private h;
    aw(a: FontInfo): void;
    az(a: FontInfo): void;
    private r;
    private n;
    ai(a: List$1<TreemapVisual>): void;
    ab(a: string): number;
    z(a: string): number;
    x(a: FontInfo): number;
    aa(a: string): number;
    y(a: string): number;
    a7(): Brush;
    a9(): Brush;
    a8(): Brush;
    private a5;
    bf(): Brush;
    bb(): Brush;
    ba(): Brush;
    be(): Brush;
    a6(): Brush;
    private f;
    private e;
    k(): FontInfo;
    j(): FontInfo;
    bc(): Brush;
    bd(): Brush;
    private o;
    at(): void;
    av(): void;
    d(): IExecutionContext;
}
/**
 * @hidden
 */
export declare class TreemapViewRenderer extends Base {
    static $t: Type;
    constructor();
    b: Pool$1<TreemapVisual>;
    protected c: List$1<TreemapVisual>;
    a(): TreemapVisual;
    g(a: TreemapVisual): void;
    i(a: TreemapVisual): void;
    h(a: TreemapVisual): void;
    j: Brush;
    private d;
    f(a: RenderingContext, b: Rect, c: List$1<TreemapVisual>, d: number): void;
    e(a: TreemapVisualData, b: List$1<TreemapVisual>, c: TreemapView): void;
}
/**
 * @hidden
 */
export declare abstract class TreemapLayoutCalculator extends Base {
    static $t: Type;
    abstract d(a: TreemapFrame, b: TreemapLayoutSettings): void;
    protected static c(a: TreemapTreeNode, b: Rect, c: number, d: TreemapLayoutSettings): boolean;
    protected static a(a: HashSet$1<TreemapTreeNode>, b: TreemapFrame, c: List$1<TreemapTreeNode>, d: Rect, e: TreemapLayoutSettings): boolean;
    protected static b(a: Rect, b: TreemapLayoutSettings): boolean;
    protected h(a: TreemapFrame, b: TreemapTreeNode, c: TreemapLayoutSettings): Rect;
    protected i(a: TreemapFrame, b: TreemapTreeNode, c: TreemapLayoutSettings): Rect;
    protected g(a: TreemapFrame, b: TreemapTreeNode, c: Rect, d: TreemapLayoutSettings): void;
    protected f(a: HashSet$1<TreemapTreeNode>, b: TreemapFrame, c: List$1<TreemapTreeNode>, d: number, e: Rect, f: TreemapLayoutSettings): void;
    protected e(a: HashSet$1<TreemapTreeNode>, b: TreemapFrame, c: List$1<TreemapTreeNode>, d: number, e: Rect, f: TreemapLayoutSettings): void;
}
/**
 * @hidden
 */
export declare class StrippedCalculator extends TreemapLayoutCalculator {
    static $t: Type;
    d(a: TreemapFrame, b: TreemapLayoutSettings): void;
    private q;
    protected o(a: TreemapFrame, b: TreemapTreeNode, c: Rect, d: TreemapLayoutSettings, e: number): void;
    private m;
    private l;
    private n;
    private static j;
    private static k;
    private static p;
}
/**
 * @hidden
 */
export declare class SliceAndDiceCalculator extends TreemapLayoutCalculator {
    static $t: Type;
    d(a: TreemapFrame, b: TreemapLayoutSettings): void;
    private o;
    protected m(a: TreemapFrame, b: TreemapTreeNode, c: Rect, d: TreemapLayoutSettings, e: number): void;
    static j(a: TreemapTreeNode, b: TreemapLayoutSettings, c: number): TreemapOrientation;
    private static k;
    private static n;
    static l: any;
}
/**
 * @hidden
 */
export declare class TreemapLayoutSettings extends Base {
    static $t: Type;
    constructor();
    a: TreemapOrientation;
    h: Rect;
    b: TreemapTreeData;
    j: Thickness;
    i: Thickness;
    e: number;
    f: number;
    g: number;
    c: TreemapTreeNode;
    d: boolean;
}
/**
 * @hidden
 */
export declare class SquarifiedCalculator extends TreemapLayoutCalculator {
    static $t: Type;
    protected n(a: TreemapFrame, b: TreemapTreeNode, c: Rect, d: TreemapLayoutSettings, e: number): void;
    private o;
    private static j;
    private l;
    private m;
    private k;
    d(a: TreemapFrame, b: TreemapLayoutSettings): void;
}
/**
 * @hidden
 */
export declare class TreemapTreeData extends Base {
    static $t: Type;
    constructor();
    a: TreemapTreeNode;
    b: Dictionary$2<string, TreemapTreeNode>;
    d: List$1<string>;
    c: Dictionary$2<string, List$1<TreemapTreeNode>>;
    e(a: TreemapTreeNode): void;
    private g;
    f(): void;
}
/**
 * @hidden
 */
export declare class TreemapTreeNode extends Base {
    static $t: Type;
    constructor();
    l: string;
    n: string;
    b: List$1<TreemapTreeNode>;
    c: List$1<TreemapNodeStyleMapping>;
    h: number;
    g: number;
    f: number;
    j: any;
    d: number;
    m: string;
    k: any;
    i: number;
    a: boolean;
    e(): number;
}
/**
 * @hidden
 */
export declare class Treemap extends Base implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private h1;
    private h0;
    private i4;
    protected h4(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected g: TreemapFrame;
    protected f: TreemapFrame;
    protected e: TreemapFrame;
    notifySizeChanged(): void;
    destroy(): void;
    ax(): TreemapVisualData;
    fn(): string;
    protected it(a: string, b: any, c: any): void;
    protected iy(a: string, b: any, c: any): void;
    private h6;
    private bq;
    private im;
    aq: TreemapView;
    private j9;
    get kb(): Rect;
    set kb(a: Rect);
    private h2;
    protected ay: DoubleAnimator;
    private fd;
    get hx(): string;
    set hx(a: string);
    private fc;
    get hn(): string;
    set hn(a: string);
    private e6;
    get fh(): string;
    set fh(a: string);
    private fb;
    get hb(): string;
    set hb(a: string);
    private fa;
    get gt(): string;
    set gt(a: string);
    private e7;
    get fk(): string;
    set fk(a: string);
    private e9;
    get gj(): string;
    set gj(a: string);
    private b9;
    get dataSource(): IEnumerable;
    set dataSource(a: IEnumerable);
    private b8;
    get highlightedDataSource(): IEnumerable;
    set highlightedDataSource(a: IEnumerable);
    private e8;
    get gb(): string;
    set gb(a: string);
    private cr;
    get dt(): number;
    set dt(a: number);
    private k;
    get l(): TreemapHighlightedValueDisplayMode;
    set l(a: TreemapHighlightedValueDisplayMode);
    private a;
    get b(): BrushCollection;
    set b(a: BrushCollection);
    private ag;
    get styleMappings(): TreemapNodeStyleMappingCollection;
    private c;
    get d(): TreemapFillScaleMode;
    set d(a: TreemapFillScaleMode);
    private br;
    get bx(): boolean;
    set bx(a: boolean);
    private ew;
    get ez(): number;
    set ez(a: number);
    private cl;
    get dl(): number;
    set dl(a: number);
    private ck;
    get dk(): number;
    set dk(a: number);
    private p;
    get r(): TreemapLabelVerticalFitMode;
    set r(a: TreemapLabelVerticalFitMode);
    private get q();
    private m;
    get o(): TreemapLabelHorizontalFitMode;
    set o(a: TreemapLabelHorizontalFitMode);
    private get n();
    private jl;
    get jx(): Brush;
    set jx(a: Brush);
    private jf;
    get jr(): Brush;
    set jr(a: Brush);
    private jd;
    get jp(): Brush;
    set jp(a: Brush);
    private jk;
    get jw(): Brush;
    set jw(a: Brush);
    private ji;
    get ju(): Brush;
    set ju(a: Brush);
    private je;
    get jq(): Brush;
    set jq(a: Brush);
    private jm;
    get j7(): Brush;
    set j7(a: Brush);
    private jc;
    get jo(): Brush;
    set jo(a: Brush);
    private jh;
    get jt(): Brush;
    set jt(a: Brush);
    private jg;
    get js(): Brush;
    set js(a: Brush);
    private a5;
    get a8(): FontInfo;
    set a8(a: FontInfo);
    private a4;
    get a6(): FontInfo;
    set a6(a: FontInfo);
    private h;
    get j(): TreemapHeaderDisplayMode;
    set j(a: TreemapHeaderDisplayMode);
    private get i();
    private co;
    get dq(): number;
    set dq(a: number);
    private cq;
    get ds(): number;
    set ds(a: number);
    private cp;
    get dr(): number;
    set dr(a: number);
    private cn;
    get dp(): number;
    set dp(a: number);
    private c1;
    get d3(): number;
    set d3(a: number);
    private c3;
    get d5(): number;
    set d5(a: number);
    private c2;
    get d4(): number;
    set d4(a: number);
    private c0;
    get d2(): number;
    set d2(a: number);
    private cv;
    get dx(): number;
    set dx(a: number);
    private cx;
    get dz(): number;
    set dz(a: number);
    private cw;
    get dy(): number;
    set dy(a: number);
    private cu;
    get dw(): number;
    set dw(a: number);
    private c6;
    get d8(): number;
    set d8(a: number);
    private da;
    get ec(): number;
    set ec(a: number);
    private c8;
    get ea(): number;
    set ea(a: number);
    private c4;
    get d6(): number;
    set d6(a: number);
    private c7;
    get d9(): number;
    set d9(a: number);
    private db;
    get ed(): number;
    set ed(a: number);
    private c9;
    get eb(): number;
    set eb(a: number);
    private c5;
    get d7(): number;
    set d7(a: number);
    private i9;
    get ja(): HorizontalAlignment;
    set ja(a: HorizontalAlignment);
    private kc;
    get kd(): VerticalAlignment;
    set kd(a: VerticalAlignment);
    private cm;
    get dn(): number;
    set dn(a: number);
    private jj;
    get jv(): Brush;
    set jv(a: Brush);
    private dd;
    get es(): number;
    set es(a: number);
    private cz;
    get d1(): number;
    set d1(a: number);
    private ak;
    get al(): TreemapOrientation;
    set al(a: TreemapOrientation);
    private t;
    get u(): TreemapLayoutType;
    set u(a: TreemapLayoutType);
    private cy;
    get d0(): number;
    set d0(a: number);
    private ey;
    get e3(): number;
    set e3(a: number);
    private de;
    protected get et(): number;
    protected set et(a: number);
    private eu;
    private a0;
    get a2(): FastItemsSource;
    set a2(a: FastItemsSource);
    private ev;
    private a1;
    get a3(): FastItemsSource;
    set a3(a: FastItemsSource);
    private bf;
    get bn(): IFastItemColumn$1<number>;
    set bn(a: IFastItemColumn$1<number>);
    private ba;
    get bg(): IFastItemColumn$1<any>;
    set bg(a: IFastItemColumn$1<any>);
    private be;
    get bk(): IFastItemColumn$1<any>;
    set bk(a: IFastItemColumn$1<any>);
    private bc;
    get bi(): IFastItemColumn$1<any>;
    set bi(a: IFastItemColumn$1<any>);
    private bd;
    get bj(): IFastItemColumn$1<any>;
    set bj(a: IFastItemColumn$1<any>);
    private bb;
    get bh(): IFastItemColumn$1<number>;
    set bh(a: IFastItemColumn$1<number>);
    private dc;
    get ee(): number;
    set ee(a: number);
    private cd;
    get dg(): number;
    set dg(a: number);
    private ct;
    get dv(): number;
    set dv(a: number);
    private cc;
    get df(): number;
    set df(a: number);
    private ex;
    get e1(): number;
    set e1(a: number);
    private at;
    get aw(): TreemapHighlightingMode;
    set aw(a: TreemapHighlightingMode);
    private as;
    get au(): TreemapHighlightingMode;
    set au(a: TreemapHighlightingMode);
    protected av(): TreemapHighlightingMode;
    private cs;
    get du(): number;
    set du(a: number);
    private a9;
    az: DoubleAnimator;
    private ar;
    get bo(): IHighlightingManager;
    private h7;
    private h3;
    private ia;
    i7(a: number): void;
    id(a: TreemapNodeFrame, b: Point, c: boolean, d: boolean): void;
    private bp;
    protected bl(a: IFastItemsSource, b: string): IFastItemColumn$1<number>;
    protected bm(a: string): IFastItemColumn$1<any>;
    ic(): void;
    protected bw: boolean;
    protected b0: boolean;
    protected bv: boolean;
    get bs(): boolean;
    private bz;
    private an;
    private am;
    protected s: TreemapLayoutCalculator;
    protected ix(): void;
    private by;
    private em;
    private eo;
    private ep;
    private en;
    private jb;
    private ke;
    private eh;
    private ej;
    private ek;
    private ei;
    private ce;
    hv(a: TreemapTreeNode, b: string, c: number, d: number, e: number): string;
    private hm;
    private cj;
    private er;
    private ci;
    private eq;
    private cf;
    private ef;
    private ch;
    private el;
    private cg;
    private eg;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    private jz;
    private j4;
    private j2;
    private a7;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    private j0;
    private j5;
    private j1;
    private j3;
    private jy;
    private dm;
    private j6;
    protected i0(a: TreemapFrame): void;
    private e2;
    private di;
    private jn;
    private ka;
    private dh;
    protected b4(): boolean;
    i1(): void;
    private bt;
    private b3;
    private dj;
    private b1;
    w(a: Point): TreemapNodeFrame;
    private e0;
    x(a: Point): TreemapNodeFrame;
    private i3;
    private get b5();
    provideContainer(a: DomRenderer): void;
    h9(): void;
    protected y: TreemapNodeFrame;
    private v;
    protected get z(): TreemapNodeFrame;
    protected set z(a: TreemapNodeFrame);
    private h8;
    private ib;
    private aa;
    private e4;
    get e5(): any;
    set e5(a: any);
    protected ap: TreemapTreeNode;
    protected ao: TreemapTreeNode;
    io(a: Point): void;
    is(a: Point): void;
    private i5;
    private b2;
    ii(source_: any, a: number, b: any, c: any): void;
    ie(source_: any): void;
    private b6;
    private bu;
    static b7(a: any, b: any): boolean;
    ig(source_: any, a: number, b: any): void;
    ih(source_: any, a: number, b: any): void;
    ip(a: Point): void;
    iq(a: Point): void;
    protected j8: Point;
    protected i8(a: Point): void;
    i2(a: Point): void;
    ir(a: Point): void;
    private i6;
    iu(a: Point): void;
    iv(a: Point): void;
    iw(a: TreemapNodeStyle): void;
    nodeStyling: (sender: any, args: TreemapNodeStylingEventArgs) => void;
    nodeRenderStyling: (sender: any, args: TreemapNodeStylingEventArgs) => void;
    nodePointerOver: (sender: any, args: TreemapNodePointerEventArgs) => void;
    nodePointerEnter: (sender: any, args: TreemapNodePointerEventArgs) => void;
    nodePointerLeave: (sender: any, args: TreemapNodePointerEventArgs) => void;
    nodePointerPressed: (sender: any, args: TreemapNodePointerEventArgs) => void;
    nodePointerReleased: (sender: any, args: TreemapNodePointerEventArgs) => void;
}
/**
 * @hidden
 */
export declare class TreemapNodeStyle extends Base implements INotifyPropertyChanged {
    static $t: Type;
    a: Treemap;
    protected a3(a: string, b: any, c: any): void;
    private e;
    a2(): void;
    d(a: string): boolean;
    protected a4(a: string, b: any, c: any): void;
    private a9;
    get bg(): Brush;
    set bg(a: Brush);
    private a8;
    get bf(): Brush;
    set bf(a: Brush);
    private bb;
    get bi(): Brush;
    set bi(a: Brush);
    private ad;
    get aq(): string;
    set aq(a: string);
    private bd;
    get bk(): Brush;
    set bk(a: Brush);
    private ba;
    get bh(): Brush;
    set bh(a: Brush);
    private i;
    get u(): number;
    set u(a: number);
    private k;
    get w(): number;
    set w(a: number);
    private j;
    get v(): number;
    set v(a: number);
    private h;
    get t(): number;
    set t(a: number);
    private m;
    get y(): number;
    set y(a: number);
    private o;
    get aa(): number;
    set aa(a: number);
    private n;
    get z(): number;
    set z(a: number);
    private l;
    get x(): number;
    set x(a: number);
    private g;
    get s(): number;
    set s(a: number);
    private a5;
    get a6(): HorizontalAlignment;
    set a6(a: HorizontalAlignment);
    private bl;
    get bm(): VerticalAlignment;
    set bm(a: VerticalAlignment);
    private a7;
    get be(): Brush;
    set be(a: Brush);
    private bc;
    get bj(): Brush;
    set bj(a: Brush);
    private q;
    get ac(): number;
    set ac(a: number);
    private p;
    get ab(): number;
    set ab(a: number);
    private f;
    get r(): number;
    set r(a: number);
    private b;
    get c(): boolean;
    set c(a: boolean);
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
}
/**
 * @hidden
 */
export declare class TreemapNodeStyleMapping extends TreemapNodeStyle {
    static $t: Type;
    private bn;
    get bo(): TreemapNodeStyleMappingTargetType;
    set bo(a: TreemapNodeStyleMappingTargetType);
    private bx;
    get b1(): string;
    set b1(a: string);
    private bs;
    get bu(): number;
    set bu(a: number);
    private br;
    get bt(): number;
    set bt(a: number);
    private bv;
    get bw(): any;
    set bw(a: any);
    private bp;
    get bq(): TreemapValueMappingMode;
    set bq(a: TreemapValueMappingMode);
}
/**
 * @hidden
 */
export declare class TreemapNodeStyleMappingCollection extends ObservableCollection$1<TreemapNodeStyleMapping> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class TreemapNodeStylingEventArgs extends EventArgs {
    static $t: Type;
    private _value;
    get value(): number;
    set value(a: number);
    private _sum;
    get sum(): number;
    set sum(a: number);
    private _customValue;
    get customValue(): any;
    set customValue(a: any);
    private _item;
    get item(): any;
    set item(a: any);
    private _parentItem;
    get parentItem(): any;
    set parentItem(a: any);
    private _label;
    get label(): string;
    set label(a: string);
    private _parentValue;
    get parentValue(): number;
    set parentValue(a: number);
    private _parentLabel;
    get parentLabel(): string;
    set parentLabel(a: string);
    private _parentSum;
    get parentSum(): number;
    set parentSum(a: number);
    private _isParent;
    get isParent(): boolean;
    set isParent(a: boolean);
    private _style;
    get style(): TreemapNodeStyle;
    set style(a: TreemapNodeStyle);
    private _highlightingInfo;
    get highlightingInfo(): HighlightingInfo;
    set highlightingInfo(a: HighlightingInfo);
    private _highlightingHandled;
    get highlightingHandled(): boolean;
    set highlightingHandled(a: boolean);
    private _isHighlightInProgress;
    get isHighlightInProgress(): boolean;
    set isHighlightInProgress(a: boolean);
    private _totalHighlightProgress;
    get totalHighlightProgress(): number;
    set totalHighlightProgress(a: number);
}
/**
 * @hidden
 */
export declare class TreemapFrame extends Base {
    static $t: Type;
    constructor();
    private d;
    e: List$1<string>;
    h(a: number, b: TreemapFrame, c: TreemapFrame): void;
    private i;
    private j;
    private k;
    m(a: TreemapTreeNode, b: Rect): void;
    n(a: TreemapTreeNode, b: boolean): void;
    b(a: TreemapTreeNode): boolean;
    o(a: TreemapTreeNode): Rect;
    l(a: TreemapTreeNode, b: string, c: Brush, d: Brush, e: Brush, f: Brush, g: number, h: number, i: number, j: TreemapHeaderDisplayMode, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: number, t: number, u: HorizontalAlignment, v: VerticalAlignment, w: number, x: number): void;
    g(): void;
    c(a: string): boolean;
    a(a: string): TreemapNodeFrame;
    f(a: TreemapTreeNode, b: TreemapNodeStyle, c: (arg1: TreemapTreeNode, arg2: Brush, arg3: Brush) => Brush): void;
}
/**
 * @hidden
 */
export declare class TreemapNodeFrame extends Base {
    static $t: Type;
    constructor();
    ae: Rect;
    af: Rect;
    p: number;
    i: number;
    e: TreemapTreeNode;
    w: string;
    static b(a: number, b: TreemapNodeFrame, c: TreemapNodeFrame): TreemapNodeFrame;
    static d(a: number, b: TreemapNodeFrame): TreemapNodeFrame;
    static c(a: number, b: TreemapNodeFrame): TreemapNodeFrame;
    f(a: any): HighlightingInfo;
    y(a: TreemapTreeNode, b: TreemapNodeStyle, c: (arg1: TreemapTreeNode, arg2: Brush, arg3: Brush) => Brush): void;
    x: string;
    aa: Brush;
    ad: Brush;
    v: number;
    u: number;
    h: number;
    l: number;
    n: number;
    m: number;
    k: number;
    r: number;
    t: number;
    s: number;
    q: number;
    ac: Brush;
    ab: Brush;
    a: TreemapHeaderDisplayMode;
    o: number;
    j: number;
    z: HorizontalAlignment;
    ag: VerticalAlignment;
    g: boolean;
}
