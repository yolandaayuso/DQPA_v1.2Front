import { IgPoint } from "igniteui-react-core";
import { IgrBrushScale } from "./igr-brush-scale";
import { ShapeItemSearchMode } from "./ShapeItemSearchMode";
import { IgrNumericXAxis } from "./igr-numeric-x-axis";
import { IgrNumericYAxis } from "./igr-numeric-y-axis";
import { IgrAssigningShapeStyleEventArgs } from "./igr-assigning-shape-style-event-args";
import { IgrAssigningShapeMarkerStyleEventArgs } from "./igr-assigning-shape-marker-style-event-args";
import { IgrStyleShapeEventArgs } from "./igr-style-shape-event-args";
import { IgrSeries, IIgrSeriesProps } from "./igr-series";
import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { IgrAxis } from "./igr-axis";
/**
 * Series class for rendering polygons.
*/
export declare abstract class IgrShapeSeriesBase<P extends IIgrShapeSeriesBaseProps = IIgrShapeSeriesBaseProps> extends IgrSeries<P> {
    /**
                                 * @hidden
                                 */
    get i(): ShapeSeriesBase;
    constructor(props: P);
    /**
     * Gets or sets whether this Shape series should allow custom style overrides of its individual visuals.
    */
    get isCustomShapeStyleAllowed(): boolean;
    set isCustomShapeStyleAllowed(v: boolean);
    /**
     * Gets or sets whether this Shape series should allow custom style overrides of its individual marker visuals.
    */
    get isCustomShapeMarkerStyleAllowed(): boolean;
    set isCustomShapeMarkerStyleAllowed(v: boolean);
    /**
     * Gets or sets the fill mapping property for the current series object.
    */
    get fillMemberPath(): string;
    set fillMemberPath(v: string);
    /**
     * Gets or sets the brush scale for the fill brush of markers.
    */
    get fillScale(): IgrBrushScale;
    set fillScale(v: IgrBrushScale);
    /**
     * Gets or sets whether or not the FillScale uses global min/max values of FillMemberPath from multiple series.
     * This setting applies only if multiple series are using the same FillScale.
    */
    get fillScaleUseGlobalValues(): boolean;
    set fillScaleUseGlobalValues(v: boolean);
    get actualItemSearchMode(): ShapeItemSearchMode;
    set actualItemSearchMode(v: ShapeItemSearchMode);
    /**
     * Gets or sets the mode the series will use to find the closest point to the cursor.
    */
    get itemSearchMode(): ShapeItemSearchMode;
    set itemSearchMode(v: ShapeItemSearchMode);
    /**
     * Gets or sets the threshold to use when searching for items using ItemSearchMode.
    */
    get itemSearchThreshold(): number;
    set itemSearchThreshold(v: number);
    /**
     * Gets or sets the points threshold to use when searching for items using ItemSearchMode.
    */
    get itemSearchPointsThreshold(): number;
    set itemSearchPointsThreshold(v: number);
    /**
     * The name of the property on ItemsSource items which, for each shape, contains a list of points to be converted to a polygon.
     * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.
    */
    get shapeMemberPath(): string;
    set shapeMemberPath(v: string);
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    get highlightedShapeMemberPath(): string;
    set highlightedShapeMemberPath(v: string);
    /**
     * Gets or sets the effective x-axis for the current ScatterBase object.
    */
    get xAxis(): IgrNumericXAxis;
    set xAxis(v: IgrNumericXAxis);
    private _xAxisName;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    get xAxisName(): string;
    set xAxisName(v: string);
    /**
     * Gets or sets the effective y-axis for the current ScatterBase object.
    */
    get yAxis(): IgrNumericYAxis;
    set yAxis(v: IgrNumericYAxis);
    private _yAxisName;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    get yAxisName(): string;
    set yAxisName(v: string);
    /**
     * The resolution at which to filter out shapes in the series.  For example, if the ShapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.
     * In the case of ScatterPolylineSeries, the resolution is compared to either dimension, rather than both.  In other words, a polyline will not be filtered if its height or its width exceeds the value of this property.  Whereas with a ShapeSeries, both the height and the width must exceed the value of this property.
    */
    get shapeFilterResolution(): number;
    set shapeFilterResolution(v: number);
    /**
     * Gets whether or not this series is a shape series
    */
    get isShape(): boolean;
    /**
     * Overridden by derived series classes to indicate when marker-less display is preferred or not.
    */
    get isMarkerlessDisplayPreferred(): boolean;
    bindAxes(axes: IgrAxis[]): void;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName: string): string;
    getExactItemIndex(world: IgPoint): number;
    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
    private _assigningShapeStyle;
    private _assigningShapeStyle_wrapped;
    /**
     * Event raised when Assigning Shape Style. Note, if using this event, or highlighting, its best to avoid use of ShapeStyle/StyleShape/ShapeStyleSelector.
    */
    get assigningShapeStyle(): (s: IgrShapeSeriesBase, e: IgrAssigningShapeStyleEventArgs) => void;
    set assigningShapeStyle(ev: (s: IgrShapeSeriesBase, e: IgrAssigningShapeStyleEventArgs) => void);
    private _assigningShapeMarkerStyle;
    private _assigningShapeMarkerStyle_wrapped;
    /**
     * Event raised when Assigning Shape Marker Style
    */
    get assigningShapeMarkerStyle(): (s: IgrShapeSeriesBase, e: IgrAssigningShapeMarkerStyleEventArgs) => void;
    set assigningShapeMarkerStyle(ev: (s: IgrShapeSeriesBase, e: IgrAssigningShapeMarkerStyleEventArgs) => void);
    private _styleShape;
    private _styleShape_wrapped;
    /**
     * Raised when tile's image URI should be provided
    */
    get styleShape(): (s: IgrShapeSeriesBase, e: IgrStyleShapeEventArgs) => void;
    set styleShape(ev: (s: IgrShapeSeriesBase, e: IgrStyleShapeEventArgs) => void);
}
export interface IIgrShapeSeriesBaseProps extends IIgrSeriesProps {
    /**
     * Gets or sets whether this Shape series should allow custom style overrides of its individual visuals.
    */
    isCustomShapeStyleAllowed?: boolean | string;
    /**
     * Gets or sets whether this Shape series should allow custom style overrides of its individual marker visuals.
    */
    isCustomShapeMarkerStyleAllowed?: boolean | string;
    /**
     * Gets or sets the fill mapping property for the current series object.
    */
    fillMemberPath?: string;
    /**
     * Gets or sets the brush scale for the fill brush of markers.
    */
    fillScale?: IgrBrushScale;
    /**
     * Gets or sets whether or not the FillScale uses global min/max values of FillMemberPath from multiple series.
     * This setting applies only if multiple series are using the same FillScale.
    */
    fillScaleUseGlobalValues?: boolean | string;
    actualItemSearchMode?: ShapeItemSearchMode | string;
    /**
     * Gets or sets the mode the series will use to find the closest point to the cursor.
    */
    itemSearchMode?: ShapeItemSearchMode | string;
    /**
     * Gets or sets the threshold to use when searching for items using ItemSearchMode.
    */
    itemSearchThreshold?: number | string;
    /**
     * Gets or sets the points threshold to use when searching for items using ItemSearchMode.
    */
    itemSearchPointsThreshold?: number | string;
    /**
     * The name of the property on ItemsSource items which, for each shape, contains a list of points to be converted to a polygon.
     * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.
    */
    shapeMemberPath?: string;
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    highlightedShapeMemberPath?: string;
    /**
     * Gets or sets the effective x-axis for the current ScatterBase object.
    */
    xAxis?: IgrNumericXAxis;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    xAxisName?: string;
    /**
     * Gets or sets the effective y-axis for the current ScatterBase object.
    */
    yAxis?: IgrNumericYAxis;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    yAxisName?: string;
    /**
     * The resolution at which to filter out shapes in the series.  For example, if the ShapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.
     * In the case of ScatterPolylineSeries, the resolution is compared to either dimension, rather than both.  In other words, a polyline will not be filtered if its height or its width exceeds the value of this property.  Whereas with a ShapeSeries, both the height and the width must exceed the value of this property.
    */
    shapeFilterResolution?: number | string;
    /**
     * Event raised when Assigning Shape Style. Note, if using this event, or highlighting, its best to avoid use of ShapeStyle/StyleShape/ShapeStyleSelector.
    */
    assigningShapeStyle?: (s: IgrShapeSeriesBase, e: IgrAssigningShapeStyleEventArgs) => void;
    /**
     * Event raised when Assigning Shape Marker Style
    */
    assigningShapeMarkerStyle?: (s: IgrShapeSeriesBase, e: IgrAssigningShapeMarkerStyleEventArgs) => void;
    /**
     * Raised when tile's image URI should be provided
    */
    styleShape?: (s: IgrShapeSeriesBase, e: IgrStyleShapeEventArgs) => void;
}
