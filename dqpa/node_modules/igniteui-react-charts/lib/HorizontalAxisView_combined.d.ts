import { Base, Type, IEnumerable } from "igniteui-react-core";
import { ServiceProvider_Spark } from "./ServiceProvider_Spark";
import { Dictionary$2 } from "igniteui-react-core";
import { Message_Spark } from "./Message_Spark";
import { MessageChannel_Spark } from "./MessageChannel_Spark";
import { ViewportChangedMessage_Spark } from "./ViewportChangedMessage_Spark";
import { DomWrapper } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { BindingFormatter } from "igniteui-react-core";
import { SparklineAxisVisualData } from "./SparklineAxisVisualData";
import { Visibility } from "igniteui-react-core";
import { ISchedulableRender } from "igniteui-react-core";
import { CanvasRenderScheduler } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { SparklineVisualData } from "./SparklineVisualData";
import { SparklineDisplayType } from "./SparklineDisplayType";
import { SparkFrame } from "./SparkFrame";
import { TrendLineType } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { IFastItemsSourceProvider } from "igniteui-react-core";
import { IFastItemsSource } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { FastItemsSourceEventArgs } from "igniteui-react-core";
import { PropertyChangedMessage_Spark } from "./PropertyChangedMessage_Spark";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { Control } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class HorizontalAxisView extends Base {
    static $t: Type;
    private j;
    w: DomWrapper;
    m: RenderingContext;
    private l;
    private s;
    v: number;
    u: number;
    private k;
    private r;
    private ag;
    private af;
    private ah;
    private a;
    private n;
    constructor(a: XamSparkline);
    private b;
    private t;
    private q;
    private g;
    get h(): ServiceProvider_Spark;
    set h(a: ServiceProvider_Spark);
    private o;
    get p(): Dictionary$2<Type, (message: Message_Spark) => void>;
    set p(a: Dictionary$2<Type, (message: Message_Spark) => void>);
    private d;
    get f(): MessageChannel_Spark;
    set f(a: MessageChannel_Spark);
    private c;
    get e(): MessageChannel_Spark;
    set e(a: MessageChannel_Spark);
    private z;
    private aa;
    private y;
    private ae;
    private ac;
    private ad;
    x(dataItem_: any): any;
    i(): SparklineAxisVisualData;
    private ab;
}
/**
 * @hidden
 */
export declare class VerticalAxisView extends Base {
    static $t: Type;
    private ad;
    private ac;
    private al;
    private ak;
    private am;
    private w;
    private u;
    private j;
    private aa;
    private m;
    private l;
    private t;
    private v;
    z: number;
    y: number;
    private k;
    private s;
    private a;
    private n;
    constructor(a: XamSparkline);
    private b;
    private x;
    private g;
    get h(): ServiceProvider_Spark;
    set h(a: ServiceProvider_Spark);
    private p;
    get q(): Dictionary$2<Type, (message: Message_Spark) => void>;
    set q(a: Dictionary$2<Type, (message: Message_Spark) => void>);
    private d;
    get f(): MessageChannel_Spark;
    set f(a: MessageChannel_Spark);
    private c;
    private r;
    get e(): MessageChannel_Spark;
    set e(a: MessageChannel_Spark);
    private af;
    private ag;
    private ae;
    private aj;
    private ai;
    private o;
    ab(dataItem_: any): any;
    i(): SparklineAxisVisualData;
    private ah;
}
/**
 * @hidden
 */
export declare class XamSparklineView extends Base implements ISchedulableRender {
    static $t: Type;
    private bn;
    private bm;
    private ae;
    private af;
    private ag;
    private ah;
    p: RenderingContext;
    q: RenderingContext;
    r: RenderingContext;
    private n;
    private u;
    private b;
    private y;
    constructor();
    private aw;
    private bw;
    private bu;
    private bx;
    private bv;
    private bs;
    private bt;
    private br;
    private bp;
    private bo;
    private bq;
    private j;
    get k(): ServiceProvider_Spark;
    set k(a: ServiceProvider_Spark);
    private f;
    get h(): MessageChannel_Spark;
    set h(a: MessageChannel_Spark);
    private g;
    get i(): MessageChannel_Spark;
    set i(a: MessageChannel_Spark);
    private v;
    get w(): Dictionary$2<Type, (message: Message_Spark) => void>;
    set w(a: Dictionary$2<Type, (message: Message_Spark) => void>);
    private av;
    private a2;
    private ar;
    private l;
    get m(): SparklineController;
    private a1;
    private a0;
    private a3;
    private a4;
    private bi;
    private bb;
    private ak;
    private ao;
    static ad(v_: string, a: number): number;
    a(a: string, b: string[]): string[];
    private s;
    private at;
    al(a: boolean): void;
    private bh;
    private aj;
    ab(a: boolean): number;
    private ac;
    private a8;
    private ba;
    private a9;
    private bl;
    private bc;
    private bk;
    private a5;
    private a7;
    private a6;
    private bj;
    private bd;
    private bg;
    private ai;
    private bf;
    private be;
    private e;
    private am;
    d: CanvasRenderScheduler;
    c: CanvasRenderScheduler;
    private t;
    private x;
    get isDirty(): boolean;
    set isDirty(a: boolean);
    private aq;
    undirty(a: boolean): void;
    get index(): number;
    private ay;
    private ax;
    postRender(): void;
    an(a: SparklineVisualData): void;
    preRender(): void;
    isValid(): boolean;
    o(a: string): FontInfo;
    private az;
    ap(a: XamSparkline): void;
    au(): void;
    as(): void;
}
/**
 * @hidden
 */
export declare class SparkFramePreparer extends Base {
    static $t: Type;
    b: SparklineController;
    d: number;
    c: number;
    e(a: SparkFrame): void;
    private a;
    private f;
}
/**
 * @hidden
 */
export declare class SparklineConnector extends Base {
    static $t: Type;
    d: XamSparkline;
    b: SparklineController;
    e: XamSparklineView;
    a: HorizontalAxisView;
    c: VerticalAxisView;
    constructor(a: DependencyObject, b: XamSparklineView);
}
/**
 * @hidden
 */
export declare class SparklineController extends DependencyObject implements IFastItemsSourceProvider {
    static $t: Type;
    constructor(a: ServiceProvider_Spark);
    k: MessageChannel_Spark;
    m: MessageChannel_Spark;
    l: MessageChannel_Spark;
    private p;
    get q(): XamSparkline;
    set q(a: XamSparkline);
    r: XamSparklineView;
    get x(): IEnumerable;
    static readonly a2: DependencyProperty;
    get u(): IFastItemsSource;
    set u(a: IFastItemsSource);
    t: IFastItemColumn$1<number>;
    s: IFastItemColumn$1<any>;
    o: SparkFramePreparer;
    n: SparkFrame;
    get ad(): string;
    get ac(): string;
    a3: Rect;
    protected get ab(): any;
    aa: (sender: any, e: FastItemsSourceEventArgs) => void;
    y(a: number): number;
    z(a: number): number;
    protected w(): boolean;
    private v;
    private av;
    private ay;
    private a0;
    private ax;
    private au;
    private an;
    private aw;
    ah(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    private az;
    ag(a: Message_Spark): void;
    private ai;
    aj(a: Message_Spark): void;
    am(a: PropertyChangedMessage_Spark): void;
    private at;
    a1(a: ViewportChangedMessage_Spark): void;
    private al;
    private ak;
    private af;
    private ae;
    protected ao(): void;
    private ap;
    private as;
    private ar;
    private j;
    private aq;
    getFastItemsSource(a: IEnumerable): IFastItemsSource;
    releaseFastItemsSource(a: IEnumerable): IFastItemsSource;
}
/**
 * @hidden
 */
export declare class XamSparkline extends Control {
    static $t: Type;
    constructor();
    private ap;
    e8: Brush;
    ff: Brush;
    fe: Brush;
    fg: Brush;
    e9: Brush;
    fc: Brush;
    fa: Brush;
    fd: Brush;
    fi: Brush;
    fb: Brush;
    fj: Brush;
    fh: Brush;
    fm: Visibility;
    ft: Visibility;
    fp: Visibility;
    fq: Visibility;
    fk: Visibility;
    fn: Visibility;
    fo: Visibility;
    fl: Visibility;
    fr: Visibility;
    aw: boolean;
    static readonly bf: number;
    bd: number;
    a6: number;
    a8: number;
    a7: number;
    bc: number;
    bi: number;
    static readonly bb: number;
    a9: number;
    bh: number;
    bg: number;
    itemsSource: IEnumerable;
    c9: string;
    ce: string;
    static readonly ev: DependencyProperty;
    get toolTip(): any;
    set toolTip(a: any);
    fs: Visibility;
    ar: TrendLineType;
    bq: number;
    static readonly bo: number;
    bm: number;
    bk: number;
    bj: number;
    aq: SparklineDisplayType;
    as: UnknownValuePlotting;
    bt: any;
    br: any;
    ax(): boolean;
    c1(a: any): string;
    bp: (arg1: any) => string;
    ca: string;
    ag: any[];
    ai: BindingFormatter;
    df: string;
    ah: any[];
    aj: BindingFormatter;
    private an;
    get ao(): ServiceProvider_Spark;
    set ao(a: ServiceProvider_Spark);
    private al;
    get am(): MessageChannel_Spark;
    set am(a: MessageChannel_Spark);
    private a0;
    get a4(): number;
    set a4(a: number);
    private az;
    get a3(): number;
    set a3(a: number);
    av: IFastItemColumn$1<any>;
    ak: HorizontalAxisView;
    at: VerticalAxisView;
    ds(a: ServiceProvider_Spark, b: ServiceProvider_Spark): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    protected dr(a: string, b: any, c: any): void;
    destroy(): void;
    provideContainer(a: any): void;
    notifyResized(): void;
    dn(source_: any, a: number, b: any, c: any): void;
    dj(source_: any): void;
    dk(source_: any, a: number, b: any): void;
    dl(source_: any, a: number, b: any): void;
    au(): SparklineVisualData;
    by(): string;
    private a2;
    get bl(): number;
    set bl(a: number);
    private a1;
    get a5(): number;
    set a5(a: number);
    static $$p: string[];
}
