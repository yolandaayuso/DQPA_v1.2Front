import { RadialBaseChart } from "./RadialBaseChart";
import { ProportionalCategoryAngleAxis } from "./ProportionalCategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { PropertyChangedEventArgs, Type } from "igniteui-react-core";
import { PieChartSweepDirection } from "./PieChartSweepDirection";
import { CalloutCollisionMode } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { LegendEmptyValuesMode } from "igniteui-react-core";
import { OthersCategoryType } from "igniteui-react-core";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { RadialLabelMode } from "igniteui-react-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { RadialBase } from "./RadialBase";
import { Series } from "./Series";
import { RadialPieSeries } from "./RadialPieSeries";
import { DataSeries } from "igniteui-react-core";
import { Axis } from "./Axis";
import { MarkerType } from "./MarkerType";
import { DataSeriesType } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class DataPieBaseChart extends RadialBaseChart {
    static $t: Type;
    constructor();
    protected hd(): boolean;
    protected akd(a: (arg1: RadialBase) => void): void;
    protected ake(a: (arg1: RadialBase, arg2: number) => void): void;
    protected akb(a: (arg1: RadialPieSeries) => void): void;
    protected akc(a: (arg1: RadialPieSeries, arg2: number) => void): void;
    protected wp(): void;
    protected c2(a: Series, b: number): MarkerType;
    protected wn(a: DataSeries): void;
    protected g9(a: DataSeries): boolean;
    protected wq(): void;
    private ahl;
    get angleAxis(): ProportionalCategoryAngleAxis;
    set angleAxis(a: ProportionalCategoryAngleAxis);
    private ahf;
    get valueAxis(): NumericRadiusAxis;
    set valueAxis(a: NumericRadiusAxis);
    protected get_ahx(): boolean;
    protected get ahx(): boolean;
    protected dc(a: DataSeries, b: DataSeriesType): Series;
    protected u6(a: Series, b: number): void;
    private ahr;
    protected z4(): Axis;
    protected z5(): Axis;
    protected ug(): void;
    protected akf(a: any, b: PropertyChangedEventArgs): void;
    protected akg(a: any, b: PropertyChangedEventArgs): void;
    protected ua(a: Series, b: number): void;
    protected afb(a: Axis): void;
    protected ae9(a: Axis): void;
    protected vu(a: string, b: any, c: any): void;
    private aiw;
    get ajs(): string;
    set ajs(a: string);
    private ag2;
    get ag6(): any[];
    set ag6(a: any[]);
    private ais;
    get ajc(): string;
    set ajc(a: string);
    private ag0;
    get ag4(): any[];
    set ag4(a: any[]);
    private aiu;
    get ajl(): string;
    set ajl(a: string);
    private ag1;
    get ag5(): any[];
    set ag5(a: any[]);
    private air;
    get ai8(): string;
    set ai8(a: string);
    private agz;
    get ag3(): any[];
    set ag3(a: any[]);
    private ah3;
    get aid(): number;
    set aid(a: number);
    private ahj;
    get ahk(): PieChartSweepDirection;
    set ahk(a: PieChartSweepDirection);
    private ag9;
    get aha(): CalloutCollisionMode;
    set aha(a: CalloutCollisionMode);
    private aki;
    get akk(): Brush;
    set akk(a: Brush);
    private akh;
    get akj(): Brush;
    set akj(a: Brush);
    private aix;
    get aj8(): string;
    set aj8(a: string);
    private aiq;
    get ai6(): string;
    set ai6(a: string);
    private ahd;
    get ahe(): LegendEmptyValuesMode;
    set ahe(a: LegendEmptyValuesMode);
    private ahh;
    get ahi(): OthersCategoryType;
    set ahi(a: OthersCategoryType);
    private ah4;
    get aie(): number;
    set aie(a: number);
    private ait;
    get ajh(): string;
    set ajh(a: string);
    private aip;
    get ai3(): string;
    set ai3(a: string);
    private ahu;
    get ahz(): boolean;
    set ahz(a: boolean);
    private ag7;
    get ag8(): AxisRangeBufferMode;
    set ag8(a: AxisRangeBufferMode);
    private ah1;
    get aib(): number;
    set aib(a: number);
    private ah2;
    get aic(): number;
    set aic(a: number);
    private ah7;
    get aij(): number;
    set aij(a: number);
    private ahv;
    get ah0(): boolean;
    set ah0(a: boolean);
    private ain;
    get aio(): number;
    set aio(a: number);
    private ah9;
    get ail(): number;
    set ail(a: number);
    private ah8;
    get aik(): number;
    set aik(a: number);
    private aia;
    get aim(): number;
    set aim(a: number);
    get aii(): number;
    get aih(): number;
    private ah5;
    get aif(): number;
    set aif(a: number);
    private ah6;
    get aig(): number;
    set aig(a: number);
    private aiv;
    get ajq(): string;
    set ajq(a: string);
    private aho;
    get ahq(): RadialLabelMode;
    set ahq(a: RadialLabelMode);
    private ahn;
    get ahp(): RadialLabelMode;
    set ahp(a: RadialLabelMode);
    private ahs;
    get ahw(): boolean;
    set ahw(a: boolean);
    private aht;
    get ahy(): boolean;
    set ahy(a: boolean);
    private ahb;
    get ahc(): CollisionAvoidanceType;
    set ahc(a: CollisionAvoidanceType);
}
