import { DataPieBaseChart } from "./DataPieBaseChart";
import { Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { DataPieChartType } from "./DataPieChartType";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { Series } from "./Series";
import { DataSeries } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { MarkerType } from "./MarkerType";
/**
 * @hidden
 */
export declare class DataPieChart extends DataPieBaseChart {
    static $t: Type;
    protected u5(): void;
    protected u7(a: Series, b: number): void;
    protected vx(a: string, b: any, c: any): void;
    private akx;
    get akz(): number;
    set akz(a: number);
    private aky;
    get ak0(): number;
    set ak0(a: number);
    private akr;
    get akt(): (time: number) => number;
    set akt(a: (time: number) => number);
    private aks;
    get aku(): (time: number) => number;
    set aku(a: (time: number) => number);
    ak2(): string;
    constructor();
    protected get_hx(): List$1<DataSeriesType>;
    protected get hx(): List$1<DataSeriesType>;
    protected get_hw(): List$1<IDataSeriesAdapterRule>;
    protected get hw(): List$1<IDataSeriesAdapterRule>;
    protected get_ahx(): boolean;
    protected be(a: DataSeries): DataSeriesType;
    protected dc(a: DataSeries, b: DataSeriesType): Series;
    protected u0(a: XamDataChart, b: any): void;
    protected u6(a: Series, b: number): void;
    protected ua(a: Series, b: number): void;
    protected c1(a: Series): MarkerType;
    protected vu(a: string, b: any, c: any): void;
    protected get_cb(): DomainType;
    get cb(): DomainType;
    private akn;
    get ako(): DataPieChartType;
    set ako(a: DataPieChartType);
    private akv;
    get akw(): boolean;
    set akw(a: boolean);
    private akl;
    get akm(): CategoryTransitionInMode;
    set akm(a: CategoryTransitionInMode);
    private akp;
    get akq(): TransitionInSpeedType;
    set akq(a: TransitionInSpeedType);
}
