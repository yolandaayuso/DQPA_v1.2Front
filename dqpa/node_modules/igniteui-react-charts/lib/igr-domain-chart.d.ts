import * as React from 'react';
import { IgRect } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { IgrChartSeriesEventArgs } from './igr-chart-series-event-args';
import { DomainChart } from "./DomainChart";
import { IgrDomainChartSeriesPointerEventArgs } from './igr-domain-chart-series-pointer-event-args';
import { IgrMarkerTypeCollection } from './igr-marker-type-collection';
import { ToolTipType } from "./ToolTipType";
import { CrosshairsDisplayMode } from "./CrosshairsDisplayMode";
import { IgrCalloutStyleUpdatingEventArgs } from "./igr-callout-style-updating-event-args";
import { IChartTooltipProps } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from './ComputedPlotAreaMarginMode';
import { SeriesHighlightingMode } from './SeriesHighlightingMode';
import { SeriesHighlightingBehavior } from './SeriesHighlightingBehavior';
import { LegendHighlightingMode } from './LegendHighlightingMode';
import { SeriesOutlineMode } from './SeriesOutlineMode';
import { MarkerOutlineMode } from './MarkerOutlineMode';
import { MarkerFillMode } from './MarkerFillMode';
import { MarkerAutomaticBehavior } from './MarkerAutomaticBehavior';
import { LegendItemBadgeMode } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from './SeriesPlotAreaMarginHorizontalMode';
import { SeriesPlotAreaMarginVerticalMode } from './SeriesPlotAreaMarginVerticalMode';
import { IgrCalloutPlacementPositionsCollection } from './igr-callout-placement-positions-collection';
import { SeriesViewerScrollbarMode } from './SeriesViewerScrollbarMode';
import { SeriesViewerHorizontalScrollbarPosition } from './SeriesViewerHorizontalScrollbarPosition';
import { SeriesViewerVerticalScrollbarPosition } from './SeriesViewerVerticalScrollbarPosition';
import { IgrCalloutRenderStyleUpdatingEventArgs } from './igr-callout-render-style-updating-event-args';
import { DataToolTipLayerGroupingMode } from "igniteui-react-core";
import { DataTooltipGroupedPositionX } from "igniteui-react-core";
import { DataTooltipGroupedPositionY } from "igniteui-react-core";
import { IgrChartSummaryDescriptionCollection } from './igr-chart-summary-description-collection';
import { IgrChartSortDescriptionCollection } from './igr-chart-sort-description-collection';
import { IgrFilterExpressionCollection } from "igniteui-react-core";
import { ICommandAvailabilityListener } from "igniteui-react-core";
import { ICommandStateChangedListener } from "igniteui-react-core";
import { IgrValueModeCollection } from './igr-value-mode-collection';
import { ToolActionInfo } from "igniteui-react-core";
import { IgrFilterStringErrorsParsingEventArgs } from './igr-filter-string-errors-parsing-event-args';
import { SeriesHighlightedValuesDisplayMode } from "igniteui-react-core";
import { SeriesSelectionMode } from './SeriesSelectionMode';
import { SeriesSelectionBehavior } from './SeriesSelectionBehavior';
import { IgrSeriesViewerSelectedSeriesItemsChangedEventArgs } from "./igr-series-viewer-selected-series-items-changed-event-args";
import { IgrChartSelectedItemCollection } from "./igr-chart-selected-item-collection";
import { CalloutCollisionMode } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { IgrDomainChartPlotAreaPointerEventArgs } from './igr-domain-chart-plot-area-pointer-event-args';
export declare abstract class IgrDomainChart<P extends IIgrDomainChartProps = IIgrDomainChartProps> extends React.Component<P, {}> {
    protected createImplementation(): DomainChart;
    protected _implementation: any;
    get i(): DomainChart;
    private onImplementationCreated;
    constructor(props: P);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    /**
    * Sets or gets the template reference to use for tooltips for all the series.
    *
    *
    */
    get tooltipTemplate(): React.FunctionComponent<IChartTooltipProps> | React.Component<IChartTooltipProps>;
    set tooltipTemplate(v: React.FunctionComponent<IChartTooltipProps> | React.Component<IChartTooltipProps>);
    /**
    * Sets or gets the template references to use for tooltips for all the series, in order.
    *
    *
    */
    get tooltipTemplates(): (React.FunctionComponent<IChartTooltipProps> | React.Component<IChartTooltipProps>)[];
    set tooltipTemplates(v: (React.FunctionComponent<IChartTooltipProps> | React.Component<IChartTooltipProps>)[]);
    get legend(): any;
    set legend(v: any);
    private _calloutsDataSource;
    set calloutsDataSource(value: any[]);
    get calloutsDataSource(): any[];
    bindCalloutsData(): void;
    /**
 * Gets or sets the scaling value used to affect the pixel density of the control.
 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
 * to appear blurry.
*/
    get pixelScalingRatio(): number;
    set pixelScalingRatio(v: number);
    /**
     * Gets or sets the left margin of chart title
    *
    *  Use `titleLeftMargin` property for the left margin of chart title.
    *
    * ```ts
    * this.chart.titleLeftMargin = 10;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                    titleLeftMargin={20}>
    *  </IgrCategoryChart>
    * ```
    */
    get titleLeftMargin(): number;
    set titleLeftMargin(v: number);
    /**
     * Gets or sets the right margin of chart title
    *
    *  Use `titleLeftMargin` property for the right margin of chart title.
    *
    * ```ts
    * this.chart.titleRightMargin = 10;
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 				dataSource={this.state.data}
    *                 titleRightMargin = 10>
    *  </IgrCategoryChart>
    * ```
    */
    get titleRightMargin(): number;
    set titleRightMargin(v: number);
    /**
     * Gets or sets the top margin of chart title
    *
    *  Use `titleTopMargin` property for the top margin of chart title.
    *
    * ```ts
    * this.chart.titleTopMargin = 10;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                titleTopMargin={10} />
    * ```
    */
    get titleTopMargin(): number;
    set titleTopMargin(v: number);
    /**
     * Gets or sets the bottom margin of chart title
    *
    *  Use `titleBottomMargin` property for the bottom margin of chart title.
    *
    * ```ts
    *  this.chart.titleBottomMargin = 5;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleAlignment="Right"
    * 	titleBottomMargin={5}/>
    * ```
    */
    get titleBottomMargin(): number;
    set titleBottomMargin(v: number);
    /**
     * Gets or sets the left margin of chart subtitle
    *
    * Use `subtitleLeftMargin` property for the left margin of chart subtitle.
    *
    * ```ts
    * this.chart.subtitleLeftMargin = 20 ;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleLeftMargin= {20}/>
    * ```
    */
    get subtitleLeftMargin(): number;
    set subtitleLeftMargin(v: number);
    /**
     * Gets or sets the top margin of chart subtitle
    *
    * Use `subtitleTopMargin` property for the top margin of chart subtitle.
    *
    * ```ts
    * this.chart.subtitleTopMargin = 10;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleTopMargin= {10}/>
    * ```
    */
    get subtitleTopMargin(): number;
    set subtitleTopMargin(v: number);
    /**
     * Gets or sets the right margin of chart subtitle
    *
    * Use `subtitleRightMargin` property for the right margin of chart subtitle.
    *
    * ```ts
    *  this.chart.subtitleRightMargin = 20 ;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleAlignment="Right"
    * 	subtitleRightMargin ={20}/>
    * ```
    */
    get subtitleRightMargin(): number;
    set subtitleRightMargin(v: number);
    /**
     * Gets or sets the bottom margin of chart subtitle
    *
    * Use `subtitleBottomMargin` property for the bottom margin of chart subtitle.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleBottomMargin= {10}/>
    * ```
    *
    * ```ts
    * this.chart.subtitleBottomMargin = 10 ;
    * ```
    */
    get subtitleBottomMargin(): number;
    set subtitleBottomMargin(v: number);
    /**
     * Gets or sets color of chart subtitle
    *
    * Use `subtitleTextColor` property to color the subtitle.
    *
    * ```ts
    * this.chart.subtitleTextColor = "#ff0000" ;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleTextColor="#ff0000"/>
    * ```
    */
    get subtitleTextColor(): string;
    set subtitleTextColor(v: string);
    /**
     * Gets or sets color of chart title
    *
    *  Use `titleTextColor` property to color the chart title
    *
    * ```ts
    *  this.chart.titleTextColor="red" ;
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 		dataSource={this.state.data}
    * 		width="700px"
    * 		height="500px"
    * 		xAxisTitle="Countries"
    * 		titleTextColor="Red" />
    *
    * ```
    */
    get titleTextColor(): string;
    set titleTextColor(v: string);
    /**
     * Gets or sets the left margin of the chart content.
    *
    * Use the 'leftMargin' property for the left margin of the chart content.
    *
    * ```ts
    *  this.chart.leftMargin = 20;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                    leftMargin= {20}/>
    * ```
    */
    get leftMargin(): number;
    set leftMargin(v: number);
    /**
     * Gets or sets the top margin of the chart content.
    *
    * Use `topMargin` property for the margin of the chart content.
    *
    * ```ts
    * this.chart.topMargin=20;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                topMargin={10} />
    * ```
    */
    get topMargin(): number;
    set topMargin(v: number);
    /**
     * Gets or sets the right margin of the chart content.
    *
    * Use `rightMargin` property for the right margin of the chart content.
    *
    * ```ts
    *   this.chart.rightMargin = 20 ;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	rightMargin= {4}/>
    * ```
    */
    get rightMargin(): number;
    set rightMargin(v: number);
    /**
     * Gets or sets the bottom margin around the chart content.
    *
    * Use the `bottomMargin` property for the bottom margin around the chart content.
    *
    * ```ts
    * this.chart.bottomMargin=20;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                    bottomMargin= 20 />
    * ```
    */
    get bottomMargin(): number;
    set bottomMargin(v: number);
    /**
     * Gets or sets the duration used for animating series plots when the data is changing
    *
    * Use the `TransitionDuration` property to animating between data values.
    *
    * ```ts
    * this.chart.transitionDuratio= 500;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                transitionDuratio={500} />
    * ```
    */
    get transitionDuration(): number;
    set transitionDuration(v: number);
    /**
     * Gets or sets the easing function used for animating series plots when the data is changing.
     * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
    *
    * The 'transitionInEasingFunction' property used for easing function for animating series plots when the chart is loading into view.
    *
    * ```ts
    * this.chart.transitionInEasingFunction=  this.cubicFunc;
    *
    * cubicFunc(time: number) : number
    *   {
    *     return time;
    *   }
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                transitionInEasingFunction="cubic" />
    * ```
    */
    get transitionEasingFunction(): (time: number) => number;
    set transitionEasingFunction(v: (time: number) => number);
    /**
     * Gets or sets the duration used for animating highlighting changes
    */
    get highlightingTransitionDuration(): number;
    set highlightingTransitionDuration(v: number);
    /**
     * Gets or sets the duration used for animating Selection changes
    */
    get selectionTransitionDuration(): number;
    set selectionTransitionDuration(v: number);
    /**
     * Gets or sets the duration used for animating Focus changes
    */
    get focusTransitionDuration(): number;
    set focusTransitionDuration(v: number);
    /**
     * Gets or sets CSS font property for the chart subtitle
    *
    * Use `subtitleTextStyle` property for the CSS font of the chart subtitle.
    *
    * ```ts
    * this.chart.subtitleTextStyle= "16pt Verdona";
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitleTextStyle="16pt Verdona"/>
    * ```
    */
    get subtitleTextStyle(): string;
    set subtitleTextStyle(v: string);
    /**
     * Gets or sets CSS font property for the chart title
    *
    * Use `titleTextStyle` property for the CSS font property of the chart title
    *
    * ```ts
    * this.chart.xAxisTitleTextStyle = "24pt Verdona";
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                 width="700px"
    *                 height="500px"
    *                 xAxisTitle="Countries"
    *                 xAxisTitleTextColor="gray"
    *                 xAxisTitleTextStyle="12pt Verdana"
    *                 xAxisTitleAngle={0}
    *                 yAxisTitle="Trillions of Watt-hours (TWh)"
    *                 yAxisTitleTextStyle="12pt Verdana"
    *                 yAxisTitleTextColor="gray"
    *                 yAxisTitleAngle={90}
    *                 yAxisTitleLeftMargin={5}>
    *  </IgrCategoryChart>
    * ```
    */
    get titleTextStyle(): string;
    set titleTextStyle(v: string);
    get isDetached(): boolean;
    get dataToolTipGroupingMode(): DataToolTipLayerGroupingMode;
    set dataToolTipGroupingMode(v: DataToolTipLayerGroupingMode);
    /**
     * Gets or sets the offset of the tooltip layer on the X axis.
    */
    get dataToolTipPositionOffsetX(): number;
    set dataToolTipPositionOffsetX(v: number);
    /**
     * Gets or sets the offset of the tooltip layer on the Y axis.
    */
    get dataToolTipPositionOffsetY(): number;
    set dataToolTipPositionOffsetY(v: number);
    /**
     * Gets or sets the offset of the tooltip layer on the X axis.
    */
    get dataToolTipDefaultPositionOffsetX(): number;
    set dataToolTipDefaultPositionOffsetX(v: number);
    /**
     * Gets or sets the offset of the tooltip layer on the Y axis.
    */
    get dataToolTipDefaultPositionOffsetY(): number;
    set dataToolTipDefaultPositionOffsetY(v: number);
    /**
     * Gets or sets the tooltip position mode on the X axis for grouped series.
    */
    get dataToolTipGroupedPositionModeX(): DataTooltipGroupedPositionX;
    set dataToolTipGroupedPositionModeX(v: DataTooltipGroupedPositionX);
    /**
     * Gets or sets the tooltip position mode on the Y axis for grouped series.
    */
    get dataToolTipGroupedPositionModeY(): DataTooltipGroupedPositionY;
    set dataToolTipGroupedPositionModeY(v: DataTooltipGroupedPositionY);
    /**
     * Gets or sets whether the data legend should update when the series data is mutated.
    */
    get dataToolTipShouldUpdateWhenSeriesDataChanges(): boolean;
    set dataToolTipShouldUpdateWhenSeriesDataChanges(v: boolean);
    /**
     * Gets or sets indexes, titles, or names of series to include in displaying in the data tooltip, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The DataToolTipExcludedSeries property takes precedence over values of DataToolTipIncludedSeries property
    */
    get dataToolTipIncludedSeries(): string[];
    set dataToolTipIncludedSeries(v: string[]);
    /**
     * Gets or sets indexes, titles, or names of series to exclude from displaying in the data tooltip, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The DataToolTipExcludedSeries property takes precedence over values of DataToolTipIncludedSeries property
    */
    get dataToolTipExcludedSeries(): string[];
    set dataToolTipExcludedSeries(v: string[]);
    /**
     * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
     * The DataToolTipExcludedColumns property takes precedence over values of DataToolTipIncludedColumns property
    */
    get dataToolTipIncludedColumns(): string[];
    set dataToolTipIncludedColumns(v: string[]);
    /**
     * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
     * The DataToolTipExcludedColumns property takes precedence over values of DataToolTipIncludedColumns property
    */
    get dataToolTipExcludedColumns(): string[];
    set dataToolTipExcludedColumns(v: string[]);
    /**
     * Gets or sets mode for abbreviating large numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get dataToolTipValueFormatAbbreviation(): DataAbbreviationMode;
    set dataToolTipValueFormatAbbreviation(v: DataAbbreviationMode);
    /**
     * Gets or sets maximum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get dataToolTipValueFormatMaxFractions(): number;
    set dataToolTipValueFormatMaxFractions(v: number);
    /**
     * Gets or sets minimum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get dataToolTipValueFormatMinFractions(): number;
    set dataToolTipValueFormatMinFractions(v: number);
    /**
     * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
    */
    get dataToolTipValueFormatMode(): DataLegendValueMode;
    set dataToolTipValueFormatMode(v: DataLegendValueMode);
    /**
     * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get dataToolTipValueFormatCulture(): string;
    set dataToolTipValueFormatCulture(v: string);
    /**
     * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get dataToolTipValueFormatUseGrouping(): boolean;
    set dataToolTipValueFormatUseGrouping(v: boolean);
    /**
     * Gets or sets the format string for values displayed in the data legend.
    */
    get dataToolTipValueFormatString(): string;
    set dataToolTipValueFormatString(v: string);
    /**
     * Gets or sets the format specifiers to use with the ValueFormatString string.
    */
    get dataToolTipValueFormatSpecifiers(): any[];
    set dataToolTipValueFormatSpecifiers(v: any[]);
    get dataToolTipValueRowMarginBottom(): number;
    set dataToolTipValueRowMarginBottom(v: number);
    get dataToolTipValueRowMarginLeft(): number;
    set dataToolTipValueRowMarginLeft(v: number);
    get dataToolTipValueRowMarginRight(): number;
    set dataToolTipValueRowMarginRight(v: number);
    get dataToolTipValueRowMarginTop(): number;
    set dataToolTipValueRowMarginTop(v: number);
    ensureDataToolTipValueRowMargin(): void;
    /**
     * Gets or sets whether to show series rows.
    */
    get dataToolTipValueRowVisible(): boolean;
    set dataToolTipValueRowVisible(v: boolean);
    /**
     * Gets or sets text displayed when data column is missing a value, e.g. "no data"
    */
    get dataToolTipValueTextWhenMissingData(): string;
    set dataToolTipValueTextWhenMissingData(v: string);
    /**
     * Gets or sets whether to use series colors when displaying values in the legend
    */
    get dataToolTipValueTextUseSeriesColors(): boolean;
    set dataToolTipValueTextUseSeriesColors(v: boolean);
    get dataToolTipValueTextMarginBottom(): number;
    set dataToolTipValueTextMarginBottom(v: number);
    get dataToolTipValueTextMarginLeft(): number;
    set dataToolTipValueTextMarginLeft(v: number);
    get dataToolTipValueTextMarginRight(): number;
    set dataToolTipValueTextMarginRight(v: number);
    get dataToolTipValueTextMarginTop(): number;
    set dataToolTipValueTextMarginTop(v: number);
    ensureDataToolTipValueTextMargin(): void;
    /**
     * Gets or sets the units text color.
    */
    get dataToolTipValueTextColor(): string;
    set dataToolTipValueTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get dataToolTipValueTextStyle(): string;
    set dataToolTipValueTextStyle(v: string);
    /**
     * Gets or sets the format string for header text displayed in the data legend.
    */
    get dataToolTipHeaderFormatString(): string;
    set dataToolTipHeaderFormatString(v: string);
    /**
     * Gets or sets the format specifiers to use with the HeaderFormatString string.
    */
    get dataToolTipHeaderFormatSpecifiers(): any[];
    set dataToolTipHeaderFormatSpecifiers(v: any[]);
    /**
     * Gets or sets globalization culture when displaying header as date time
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get dataToolTipHeaderFormatCulture(): string;
    set dataToolTipHeaderFormatCulture(v: string);
    /**
     * Gets or sets date format for the header
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get dataToolTipHeaderFormatDate(): DataLegendHeaderDateMode;
    set dataToolTipHeaderFormatDate(v: DataLegendHeaderDateMode);
    /**
     * Gets or sets time format for the header
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get dataToolTipHeaderFormatTime(): DataLegendHeaderTimeMode;
    set dataToolTipHeaderFormatTime(v: DataLegendHeaderTimeMode);
    /**
     * Gets or sets the HeaderText for the data legend.
    */
    get dataToolTipHeaderText(): string;
    set dataToolTipHeaderText(v: string);
    /**
     * Gets or sets the header text color.
    */
    get dataToolTipHeaderTextColor(): string;
    set dataToolTipHeaderTextColor(v: string);
    get dataToolTipHeaderTextMarginBottom(): number;
    set dataToolTipHeaderTextMarginBottom(v: number);
    get dataToolTipHeaderTextMarginLeft(): number;
    set dataToolTipHeaderTextMarginLeft(v: number);
    get dataToolTipHeaderTextMarginRight(): number;
    set dataToolTipHeaderTextMarginRight(v: number);
    get dataToolTipHeaderTextMarginTop(): number;
    set dataToolTipHeaderTextMarginTop(v: number);
    ensureDataToolTipHeaderTextMargin(): void;
    get dataToolTipHeaderRowMarginBottom(): number;
    set dataToolTipHeaderRowMarginBottom(v: number);
    get dataToolTipHeaderRowMarginLeft(): number;
    set dataToolTipHeaderRowMarginLeft(v: number);
    get dataToolTipHeaderRowMarginRight(): number;
    set dataToolTipHeaderRowMarginRight(v: number);
    get dataToolTipHeaderRowMarginTop(): number;
    set dataToolTipHeaderRowMarginTop(v: number);
    ensureDataToolTipHeaderRowMargin(): void;
    /**
     * Gets or sets whether to show Header row.
    */
    get dataToolTipHeaderRowVisible(): boolean;
    set dataToolTipHeaderRowVisible(v: boolean);
    /**
     * Gets or Sets the style to use for the header text.
    */
    get dataToolTipHeaderTextStyle(): string;
    set dataToolTipHeaderTextStyle(v: string);
    /**
     * Gets or sets the Group text color.
    */
    get dataToolTipGroupTextColor(): string;
    set dataToolTipGroupTextColor(v: string);
    get dataToolTipGroupTextMarginBottom(): number;
    set dataToolTipGroupTextMarginBottom(v: number);
    get dataToolTipGroupTextMarginLeft(): number;
    set dataToolTipGroupTextMarginLeft(v: number);
    get dataToolTipGroupTextMarginRight(): number;
    set dataToolTipGroupTextMarginRight(v: number);
    get dataToolTipGroupTextMarginTop(): number;
    set dataToolTipGroupTextMarginTop(v: number);
    ensureDataToolTipGroupTextMargin(): void;
    get dataToolTipGroupRowMarginBottom(): number;
    set dataToolTipGroupRowMarginBottom(v: number);
    get dataToolTipGroupRowMarginLeft(): number;
    set dataToolTipGroupRowMarginLeft(v: number);
    get dataToolTipGroupRowMarginRight(): number;
    set dataToolTipGroupRowMarginRight(v: number);
    get dataToolTipGroupRowMarginTop(): number;
    set dataToolTipGroupRowMarginTop(v: number);
    ensureDataToolTipGroupRowMargin(): void;
    /**
     * Gets or sets whether to show Group row.
    */
    get dataToolTipGroupRowVisible(): boolean;
    set dataToolTipGroupRowVisible(v: boolean);
    /**
     * Gets or Sets the style to use for the Group text.
    */
    get dataToolTipGroupTextStyle(): string;
    set dataToolTipGroupTextStyle(v: string);
    /**
     * Gets or sets the summary text color.
    */
    get dataToolTipSummaryTitleTextColor(): string;
    set dataToolTipSummaryTitleTextColor(v: string);
    /**
     * Gets or Sets the style to use for the summary text.
    */
    get dataToolTipSummaryTitleTextStyle(): string;
    set dataToolTipSummaryTitleTextStyle(v: string);
    /**
     * Gets or sets the SummaryType for the data legend.
    */
    get dataToolTipSummaryType(): DataLegendSummaryType;
    set dataToolTipSummaryType(v: DataLegendSummaryType);
    /**
     * Gets or sets the SummaryTitleText for the data legend.
    */
    get dataToolTipSummaryTitleText(): string;
    set dataToolTipSummaryTitleText(v: string);
    get dataToolTipSummaryTitleTextMarginBottom(): number;
    set dataToolTipSummaryTitleTextMarginBottom(v: number);
    get dataToolTipSummaryTitleTextMarginLeft(): number;
    set dataToolTipSummaryTitleTextMarginLeft(v: number);
    get dataToolTipSummaryTitleTextMarginRight(): number;
    set dataToolTipSummaryTitleTextMarginRight(v: number);
    get dataToolTipSummaryTitleTextMarginTop(): number;
    set dataToolTipSummaryTitleTextMarginTop(v: number);
    ensureDataToolTipSummaryTitleTextMargin(): void;
    get dataToolTipSummaryRowMarginBottom(): number;
    set dataToolTipSummaryRowMarginBottom(v: number);
    get dataToolTipSummaryRowMarginLeft(): number;
    set dataToolTipSummaryRowMarginLeft(v: number);
    get dataToolTipSummaryRowMarginRight(): number;
    set dataToolTipSummaryRowMarginRight(v: number);
    get dataToolTipSummaryRowMarginTop(): number;
    set dataToolTipSummaryRowMarginTop(v: number);
    ensureDataToolTipSummaryRowMargin(): void;
    /**
     * Gets or sets the units text color.
    */
    get dataToolTipSummaryValueTextColor(): string;
    set dataToolTipSummaryValueTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get dataToolTipSummaryValueTextStyle(): string;
    set dataToolTipSummaryValueTextStyle(v: string);
    /**
     * Gets or sets the units text for the data legend.
    */
    get dataToolTipSummaryLabelText(): string;
    set dataToolTipSummaryLabelText(v: string);
    /**
     * Gets or sets the units text color.
    */
    get dataToolTipSummaryLabelTextColor(): string;
    set dataToolTipSummaryLabelTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get dataToolTipSummaryLabelTextStyle(): string;
    set dataToolTipSummaryLabelTextStyle(v: string);
    /**
     * Gets or sets the units text for the data legend.
    */
    get dataToolTipSummaryUnitsText(): string;
    set dataToolTipSummaryUnitsText(v: string);
    /**
     * Gets or sets the units text color.
    */
    get dataToolTipSummaryUnitsTextColor(): string;
    set dataToolTipSummaryUnitsTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get dataToolTipSummaryUnitsTextStyle(): string;
    set dataToolTipSummaryUnitsTextStyle(v: string);
    get dataToolTipBadgeMarginBottom(): number;
    set dataToolTipBadgeMarginBottom(v: number);
    get dataToolTipBadgeMarginLeft(): number;
    set dataToolTipBadgeMarginLeft(v: number);
    get dataToolTipBadgeMarginRight(): number;
    set dataToolTipBadgeMarginRight(v: number);
    get dataToolTipBadgeMarginTop(): number;
    set dataToolTipBadgeMarginTop(v: number);
    ensureDataToolTipBadgeMargin(): void;
    /**
     * Gets or sets the BadgeShape for the data legend.
    */
    get dataToolTipBadgeShape(): LegendItemBadgeShape;
    set dataToolTipBadgeShape(v: LegendItemBadgeShape);
    /**
     * Gets or sets the UnitsMode for the data legend.
    */
    get dataToolTipUnitsDisplayMode(): DataLegendUnitsMode;
    set dataToolTipUnitsDisplayMode(v: DataLegendUnitsMode);
    /**
     * Gets or sets the units text for the data legend.
    */
    get dataToolTipUnitsText(): string;
    set dataToolTipUnitsText(v: string);
    /**
     * Gets or sets the units text color.
    */
    get dataToolTipUnitsTextColor(): string;
    set dataToolTipUnitsTextColor(v: string);
    get dataToolTipUnitsTextMarginBottom(): number;
    set dataToolTipUnitsTextMarginBottom(v: number);
    get dataToolTipUnitsTextMarginLeft(): number;
    set dataToolTipUnitsTextMarginLeft(v: number);
    get dataToolTipUnitsTextMarginRight(): number;
    set dataToolTipUnitsTextMarginRight(v: number);
    get dataToolTipUnitsTextMarginTop(): number;
    set dataToolTipUnitsTextMarginTop(v: number);
    ensureDataToolTipUnitsTextMargin(): void;
    /**
     * Gets or Sets the style to use for the units text.
    */
    get dataToolTipUnitsTextStyle(): string;
    set dataToolTipUnitsTextStyle(v: string);
    get dataToolTipTitleTextMarginBottom(): number;
    set dataToolTipTitleTextMarginBottom(v: number);
    get dataToolTipTitleTextMarginLeft(): number;
    set dataToolTipTitleTextMarginLeft(v: number);
    get dataToolTipTitleTextMarginRight(): number;
    set dataToolTipTitleTextMarginRight(v: number);
    get dataToolTipTitleTextMarginTop(): number;
    set dataToolTipTitleTextMarginTop(v: number);
    ensureDataToolTipTitleTextMargin(): void;
    /**
     * Gets or sets the display text color.
    */
    get dataToolTipTitleTextColor(): string;
    set dataToolTipTitleTextColor(v: string);
    /**
     * Gets or Sets the style to use for the display text.
    */
    get dataToolTipTitleTextStyle(): string;
    set dataToolTipTitleTextStyle(v: string);
    /**
     * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
    */
    get dataToolTipLabelDisplayMode(): DataLegendLabelMode;
    set dataToolTipLabelDisplayMode(v: DataLegendLabelMode);
    /**
     * Gets or sets the units text color.
    */
    get dataToolTipLabelTextColor(): string;
    set dataToolTipLabelTextColor(v: string);
    get dataToolTipLabelTextMarginBottom(): number;
    set dataToolTipLabelTextMarginBottom(v: number);
    get dataToolTipLabelTextMarginLeft(): number;
    set dataToolTipLabelTextMarginLeft(v: number);
    get dataToolTipLabelTextMarginRight(): number;
    set dataToolTipLabelTextMarginRight(v: number);
    get dataToolTipLabelTextMarginTop(): number;
    set dataToolTipLabelTextMarginTop(v: number);
    ensureDataToolTipLabelTextMargin(): void;
    /**
     * Gets or Sets the style to use for the units text.
    */
    get dataToolTipLabelTextStyle(): string;
    set dataToolTipLabelTextStyle(v: string);
    /**
     * Gets the domain type of this chart
    */
    get domainType(): DomainType;
    /**
     * Gets the current sort that is applied to the grid. Collection can be updated to modify the sort for the grid. Once sort descriptions are in this collection, the grid will no longer listen for changes on their properties.
    */
    get sortDescriptions(): IgrChartSortDescriptionCollection;
    get groupSortDescriptions(): IgrChartSortDescriptionCollection;
    /**
     * Gets the current grouping that is applied to the grid. Collection can be updated to modify the grouping for the grid. Once grouping descriptions are in this collection, the grid will no longer listen for changes on their properties.
    */
    get groupDescriptions(): IgrChartSortDescriptionCollection;
    /**
     * Gets the current filter that is applied to the chart. Collection can be updated to modify the filter for the chart. Once filter expressions are in this collection, the chart will no longer listen for changes on their properties.
    */
    get filterExpressions(): IgrFilterExpressionCollection;
    /**
     * Gets the current highlight filter that is applied to the chart. Collection can be updated to modify the highlight filter for the chart. Once filter expressions are in this collection, the chart will no longer listen for changes on their properties.
    */
    get highlightFilterExpressions(): IgrFilterExpressionCollection;
    /**
     * Gets the current summaries that are applied to the grid.
    */
    get summaryDescriptions(): IgrChartSummaryDescriptionCollection;
    /**
     * Gets or sets the selection mode to use for the series in the component, when supported.
    */
    get selectionMode(): SeriesSelectionMode;
    set selectionMode(v: SeriesSelectionMode);
    /**
     * Gets or sets the focus mode to use for the series in the component, when supported.
    */
    get focusMode(): SeriesSelectionMode;
    set focusMode(v: SeriesSelectionMode);
    /**
     * Gets or sets the selection brush to use for the series.
    */
    get selectionBrush(): string;
    set selectionBrush(v: string);
    /**
     * Gets or sets the focus brush to use for the series.
    */
    get focusBrush(): string;
    set focusBrush(v: string);
    /**
     * Gets or sets the selection behavior to use for the series in the component, when supported.
    */
    get selectionBehavior(): SeriesSelectionBehavior;
    set selectionBehavior(v: SeriesSelectionBehavior);
    private _selectedSeriesItems;
    /**
     * Gets the currently selected data items.  Adding or removing data items from this collection will
     * select or deselect the visuals associated with those items.
    */
    get selectedSeriesItems(): IgrChartSelectedItemCollection;
    set selectedSeriesItems(v: IgrChartSelectedItemCollection);
    private _focusedSeriesItems;
    /**
     * Gets the currently focused data items.  Adding or removing data items from this collection will
     * focus or blur the visuals associated with those items.
    */
    get focusedSeriesItems(): IgrChartSelectedItemCollection;
    set focusedSeriesItems(v: IgrChartSelectedItemCollection);
    /**
     * Gets the initial sorts that are applied to the chart.
    */
    get initialSortDescriptions(): IgrChartSortDescriptionCollection;
    /**
     * Gets the initial sorts that are applied to the chart after groupings and summaries are applied.
    */
    get initialGroupSortDescriptions(): IgrChartSortDescriptionCollection;
    /**
     * Gets the initial groupings that are applied to the chart.
    */
    get initialGroupDescriptions(): IgrChartSortDescriptionCollection;
    /**
     * Gets the initial filters that are applied to the chart.
    */
    get initialFilterExpressions(): IgrFilterExpressionCollection;
    /**
     * Gets the initial highlight filters that are applied to the chart.
    */
    get initialHighlightFilterExpressions(): IgrFilterExpressionCollection;
    /**
     * Gets the initial summaries that are applied to the chart.
    */
    get initialSummaryDescriptions(): IgrChartSummaryDescriptionCollection;
    /**
     * Gets or sets the sorts to apply to the chart. This property will become ignored if sorts are changed outside of this property.
    */
    get initialSorts(): string;
    set initialSorts(v: string);
    /**
     * Gets or sets the sorts to apply after grouping has been applied.
    */
    get groupSorts(): string;
    set groupSorts(v: string);
    /**
     * Gets or sets the groupings to apply to the chart. This property will become ignored if sorts are changed outside of this property.
    */
    get initialGroups(): string;
    set initialGroups(v: string);
    /**
     * Gets or sets the filter to apply to the chart. This property will become ignored if the filter is changed outside of this property.
    */
    get initialFilter(): string;
    set initialFilter(v: string);
    /**
     * Gets or sets the filter to apply to the chart. This property will become ignored if the filter is changed outside of this property.
    */
    get initialHighlightFilter(): string;
    set initialHighlightFilter(v: string);
    /**
     * Gets or sets the summaries to apply to the chart. This property will become ignored if sorts are changed outside of this property.
    */
    get initialSummaries(): string;
    set initialSummaries(v: string);
    /**
     * Gets or sets a collection of data items used to generate the chart.
     * The HighlightedItemsSource of this chart can be a list of objects containing one or more numeric properties.
     * Additionally, if the objects in the list implement the IEnumerable interface,
     * the Chart will attempt to delve into the sub-collections when reading through the data source.
     * Data binding can be further configured by attributing the data item classes
     * with the DataSeriesMemberIntentAttribute.
    */
    get highlightedDataSource(): any;
    set highlightedDataSource(v: any);
    /**
     * Gets or sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
    *
    * The `IncludedProperties` property used to include the properties for the consideration of the category chart.
    *
    * ```ts
    * this.chart.includedProperties = ["ProductName", "Cost"];
    * ```
    *
    * ```ts
    * 	<IgrCategoryChart
    * 		chartType="Line"
    * 		markerTypes={this.state.markersTypes}
    * 		dataSource={this.categoryData}
    * 		excludedProperties="value" />
    * ```
    */
    get includedProperties(): string[];
    set includedProperties(v: string[]);
    /**
     * Gets or sets a set of property paths that should be excluded from consideration by the category chart.
    *
    * The `ExcludedProperties` property used for the property paths that should be excluded from consideration by the category chart.
    *
    * ```ts
    * this.chart.excludedProperties = ["ID", "Discount"];
    * ```
    *
    * ```ts
    * 	<IgrCategoryChart
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	excludedProperties="value" />
    * ```
    */
    get excludedProperties(): string[];
    set excludedProperties(v: string[]);
    /**
     * Gets or sets the palette of brushes to use for coloring the chart series.
     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
    *
    * Use the `Brushes` property to  set the brushes.
    *
    * ```ts
    * this.chart.brushes = ["#ff0000","#00ff00"];
    * ```
    */
    get brushes(): string[];
    set brushes(v: string[]);
    /**
     * Gets or sets the palette of brushes to use for outlines on the chart series.
     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
    *
    *  Use the `Outlines` property to sets the palette of brushes to use for outlines on the chart series
    *
    * ```ts
    * <IgrCategoryChart
    * 	chartType="Line"
    * 	outlines= "#ff0000"
    * 	dataSource={this.categoryData}/>
    * ```
    */
    get outlines(): string[];
    set outlines(v: string[]);
    /**
     * Gets the actual palette of brushes to use for coloring the chart series.
    */
    get actualBrushes(): string[];
    set actualBrushes(v: string[]);
    /**
     * Gets the actual palette of brushes to use for outlines on the chart series.
    */
    get actualOutlines(): string[];
    set actualOutlines(v: string[]);
    /**
     * Gets or sets whether the chart can be horizontally zoomed through user interactions.
    *
    * Use the `IsHorizontalZoomEnabled` property to allow chart horizontally zoomed .
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                    width="700px"
    *                    height="500px"
    *                    xAxisLabelTextStyle="10pt Verdana"
    *                    xAxisLabelTopMargin={5}
    *                    xAxisLabelTextColor="gray"
    *                    yAxisLabelTextStyle="10pt Verdana"
    *                    yAxisLabelRightMargin={5}
    *                    yAxisLabelTextColor="gray"
    * 				   isHorizontalZoomEnabled= true/>
    * ```
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                    IsHorizontalZoomEnabled= true />
    * ```
    *
    * ```ts
    * this.chart.isHorizontalZoomEnabled = true;
    * ```
    */
    get isHorizontalZoomEnabled(): boolean;
    set isHorizontalZoomEnabled(v: boolean);
    /**
     * Gets or sets whether the chart can be vertically zoomed through user interactions.
    *
    * Use the `IsVerticalZoomEnabled` property to allow chart zoom vertically.
    *
    * ```ts
    *  this.chart.isVerticalZoomEnabled = true;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                   isVerticalZoomEnabled= "true"/>
    * ```
    */
    get isVerticalZoomEnabled(): boolean;
    set isVerticalZoomEnabled(v: boolean);
    /**
     * Gets or sets whether the chart should display mock data when the data source has not been provided, if supported for this type of chart.
    */
    get shouldDisplayMockData(): boolean;
    set shouldDisplayMockData(v: boolean);
    /**
     * Gets or sets whether the chart should use a faded skeleton style for mock data.
    */
    get shouldUseSkeletonStyleForMockData(): boolean;
    set shouldUseSkeletonStyleForMockData(v: boolean);
    /**
     * Gets or sets whether and how to display highlighted values for the series. Note, this is distinct from the highlighting feature that indicates what is closest or under the mouse.
     * This property applies to Category Chart and Financial Chart controls.
    */
    get highlightedValuesDisplayMode(): SeriesHighlightedValuesDisplayMode;
    set highlightedValuesDisplayMode(v: SeriesHighlightedValuesDisplayMode);
    /**
     * Gets or sets whether the chart can highlight series through user interactions.
     * This property applies to Category Chart and Financial Chart controls.
    */
    get isSeriesHighlightingEnabled(): boolean;
    set isSeriesHighlightingEnabled(v: boolean);
    /**
     * Gets or sets whether the chart can highlight series through user interactions.
     * This property applies to Category Chart and Financial Chart controls.
    */
    get highlightedLegendItemVisibility(): Visibility;
    set highlightedLegendItemVisibility(v: Visibility);
    /**
     * Gets or sets whether to show the legend items for the series.
    */
    get legendItemVisibility(): Visibility;
    set legendItemVisibility(v: Visibility);
    /**
     * Gets or sets the rectangle representing the current scroll and zoom state of the chart.
     * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
    *
    * Use `WindowRect` property representing the current scroll and zoom state of the chart.
    *
    * ```ts
    * this.chart.windowRect =[0,0,1,1];
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                WindowRect={1,0,1,1} />
    * ```
    */
    get windowRect(): IgRect;
    set windowRect(v: IgRect);
    /**
     * Gets a rectangle representing the bounds of the plot area.
    *
    * `viewport` property representing the bounds of the plot area.
    *
    * ```ts
    * let viewport:Rect =  this.chart.viewport;
    * ```
    */
    get viewport(): IgRect;
    /**
     * Gets or sets text to display above the plot area.
    *
    * Use the `Title` property to display the text above the plot area.
    *
    * ```ts
    *  this.chart.title= "This is a Title";
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	title= "CategoryChart Subtitle"	/>
    * ```
    */
    get chartTitle(): string;
    set chartTitle(v: string);
    /**
     * Gets or sets text to display below the Title, above the plot area.
    *
    * Use the `Subtitle` property to display the text below  and above the plot area.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"/>
    * ```
    *
    * ```ts
    *  this.chart.subtitle ="CategoryChart Subtitle" ;
    * ```
    */
    get subtitle(): string;
    set subtitle(v: string);
    /**
     * Gets or sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
    *
    * Use the `TitleAlignment` property for the horizontal alignment of the title.
    *
    * ```ts
    * this.chart.titleAlignment = HorizontalAlignment.Center;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	titleAlignment= "Center"/>
    * ```
    */
    get titleAlignment(): HorizontalAlignment;
    set titleAlignment(v: HorizontalAlignment);
    /**
     * Gets or sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
    *
    * Use the `SubtitleAlignment` property to Gets or sets horizontal alignment.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleAlignment="Right"/>
    * ```
    *
    * ```ts
    * this.chart.subtitleAlignment = HorizontalAlignment.Right;
    * ```
    */
    get subtitleAlignment(): HorizontalAlignment;
    set subtitleAlignment(v: HorizontalAlignment);
    /**
     * Gets or sets the behavior that determines how unknown values will be plotted on the chart.
     * Null and Double.NaN are two examples of unknown values.
    *
    * Use the `UnknownValuePlotting` property to determines the behavior that how unknown values will be plotted on the chart.
    *
    * ```ts
    * this.chart.unknownValuePlotting =UnknownValuePlotting.DontPlot;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                unknownValuePlotting= "dontPlot" />
    * ```
    */
    get unknownValuePlotting(): UnknownValuePlotting;
    set unknownValuePlotting(v: UnknownValuePlotting);
    /**
     * Gets or sets the rendering resolution for all series in this chart.
     * Where n = Resolution, for every n horizontal pixels, combine all items into a single data point.  When Resolution = 0, all data points will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
    *
    * Use the `Resolution` property if the callouts should be display.
    *
    * ```ts
    *   this.chart.resolution = 2 ;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	calloutsVisible="true"
    * 	resolution= {2}/>
    * ```
    */
    get resolution(): number;
    set resolution(v: number);
    /**
     * Gets or sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
    *
    * Use the `Thickness` property for the thickness of all the series in this chart.
    */
    get thickness(): number;
    set thickness(v: number);
    /**
     * Gets or sets the OutlineMode for all series in this chart.
    */
    get outlineMode(): SeriesOutlineMode;
    set outlineMode(v: SeriesOutlineMode);
    /**
     * Gets or sets the MarkerOutlineMode for all series that support markers in this chart.
    */
    get markerOutlineMode(): MarkerOutlineMode;
    set markerOutlineMode(v: MarkerOutlineMode);
    /**
     * Gets or sets the MarkerFillMode for all series that support markers in this chart.
    */
    get markerFillMode(): MarkerFillMode;
    set markerFillMode(v: MarkerFillMode);
    /**
     * Gets or sets the Marker Fill Opacity for all series that support markers in this chart.
    */
    get markerFillOpacity(): number;
    set markerFillOpacity(v: number);
    /**
     * Gets or sets the Marker Thickness for all series that support markers in this chart.
    */
    get markerThickness(): number;
    set markerThickness(v: number);
    private _markerTypes;
    /**
     * Gets or sets the marker shapes used for indicating location of data points in this chart.
     * This property applies only to these chart types: point, line, spline, bubble, and polygon
    */
    get markerTypes(): IgrMarkerTypeCollection;
    set markerTypes(v: IgrMarkerTypeCollection);
    /**
     * Gets or sets the default marker type for all series plotted in this chart.
     * This property is ignored when the MarkerTypes property is set
    */
    get markerAutomaticBehavior(): MarkerAutomaticBehavior;
    set markerAutomaticBehavior(v: MarkerAutomaticBehavior);
    /**
     * Gets or sets the palette of brushes used for rendering fill area of data point markers.
     * This property applies only to these chart types: point, line, spline, bubble, and polygon
    *
    * `MarkerBrushes` property used for rendering fill area of data point markers.
    *
    * ```ts
    *  this.chart.markerBrushes=[ "#ff0000", "#ffff00", "#00ffff" ];
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    *     chartType="Line"
    *     markerBrushes ="#ffff00"
    *     dataSource={this.categoryData}/>
    * ```
    */
    get markerBrushes(): string[];
    set markerBrushes(v: string[]);
    /**
     * Gets or sets the palette of brushes used for rendering outlines of data point markers.
     * This property applies only to these chart types: point, line, spline, bubble, and polygon
    *
    * `MarkerOutlines` property used for rendering outlines of data point markers.
    *
    * ```ts
    * this.chart.markerOutlines= ["#ff0000", "#ffff00", "#00ffff"] ;
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	chartType="Line"
    * 	markerOutlines= "#ff0000"
    * 	dataSource={this.categoryData}/>
    * ```
    */
    get markerOutlines(): string[];
    set markerOutlines(v: string[]);
    /**
     * Gets or sets the maximum number of markers displayed in the plot area of the chart.
    *
    * `markerMaxCount` property used to display maximum number of markers in the plot area of the chart.
    *
    * ```ts
    *  this.chart.markerMaxCount = 100 ;
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	chartType="Line"
    * 	markerMaxCount= {2}
    * 	dataSource={this.categoryData}/>
    * ```
    */
    get markerMaxCount(): number;
    set markerMaxCount(v: number);
    /**
     * Gets or sets the fill opacity for all series that have area visuals in this chart.
     * For example, Area, SplineArea, Column chart types
    */
    get areaFillOpacity(): number;
    set areaFillOpacity(v: number);
    /**
     * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
    */
    get animateSeriesWhenAxisRangeChanges(): boolean;
    set animateSeriesWhenAxisRangeChanges(v: boolean);
    /**
     * Gets or sets the palette of brushes to used for coloring trend lines in this chart.
     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
    *
    * Use the `TrendLineBrushes` property for coloring trend lines in the chart.
    *
    * ```ts
    * this.chart.trendLineBrushes=["#ff0000", "#ffff00", "#00ffff"]	;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                trendLineBrushes="#ffff00" />
    * ```
    */
    get trendLineBrushes(): string[];
    set trendLineBrushes(v: string[]);
    /**
     * Gets or sets the formula used for calculating trend lines in this chart.
     * This property applies only to these chart types: point, line, spline, and bubble
    *
    * Use the `TrendLineType` property for calculating trend lines.
    *
    * ```ts
    * this.chart.trendLineType = TrendLineType.CubicFit;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                trendLineType="CubicFit" />
    * ```
    */
    get trendLineType(): TrendLineType;
    set trendLineType(v: TrendLineType);
    /**
     * Gets or sets the thickness of the trend lines in this chart.
     * This property applies only to these chart types: point, line, spline, and bubble
    *
    * Use the `TrendLineThickness` property for the thickness of the trend lines in the chart.
    *
    * ```ts
    * this.chart.trendLineThickness=2;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                trendLineThickness={2} />
    * ```
    */
    get trendLineThickness(): number;
    set trendLineThickness(v: number);
    /**
     * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.
    *
    * Use `AlignsGridLinesToPixels` propert to indicat whether grid and tick lines are aligned to device pixels.
    *
    * ```ts
    *  this.chart.alignsGridLinesToPixels= true;
    * ```
    */
    get alignsGridLinesToPixels(): boolean;
    set alignsGridLinesToPixels(v: boolean);
    /**
     * Margin applied to the Left of the plot area.
    */
    get plotAreaMarginLeft(): number;
    set plotAreaMarginLeft(v: number);
    /**
     * Margin applied to the Top of the plot area.
    */
    get plotAreaMarginTop(): number;
    set plotAreaMarginTop(v: number);
    /**
     * Margin applied to the right of the plot area.
    */
    get plotAreaMarginRight(): number;
    set plotAreaMarginRight(v: number);
    /**
     * Margin applied below the plot area.
    */
    get plotAreaMarginBottom(): number;
    set plotAreaMarginBottom(v: number);
    /**
     * Gets or sets mode to use for automatically calculating the plot area margin.
    */
    get computedPlotAreaMarginMode(): ComputedPlotAreaMarginMode;
    set computedPlotAreaMarginMode(v: ComputedPlotAreaMarginMode);
    /**
     * Gets or sets horizontal mode to use for automatically calculating the plot area margin based ont the series.
    */
    get seriesPlotAreaMarginHorizontalMode(): SeriesPlotAreaMarginHorizontalMode;
    set seriesPlotAreaMarginHorizontalMode(v: SeriesPlotAreaMarginHorizontalMode);
    /**
     * Gets or sets vertical mode to use for automatically calculating the plot area margin based ont the series.
    */
    get seriesPlotAreaMarginVerticalMode(): SeriesPlotAreaMarginVerticalMode;
    set seriesPlotAreaMarginVerticalMode(v: SeriesPlotAreaMarginVerticalMode);
    /**
     * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
    */
    get highlightingMode(): SeriesHighlightingMode;
    set highlightingMode(v: SeriesHighlightingMode);
    /**
     * Gets or sets the highlighting Behavior to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
    */
    get highlightingBehavior(): SeriesHighlightingBehavior;
    set highlightingBehavior(v: SeriesHighlightingBehavior);
    /**
     * Gets or sets the highlighting mode to use for the legend linked to the component, when supported.
    */
    get legendHighlightingMode(): LegendHighlightingMode;
    set legendHighlightingMode(v: LegendHighlightingMode);
    /**
     * Gets or sets the type of legend badges representing all series displayed in a legend linked to this component
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
    */
    get legendItemBadgeShape(): LegendItemBadgeShape;
    set legendItemBadgeShape(v: LegendItemBadgeShape);
    /**
     * Gets or sets the mode of legend badges representing all series displayed in a legend linked to this component.
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
    */
    get legendItemBadgeMode(): LegendItemBadgeMode;
    set legendItemBadgeMode(v: LegendItemBadgeMode);
    get trendLinePeriod(): number;
    set trendLinePeriod(v: number);
    /**
     * Gets or sets the style of tooltip to be displayed.
    */
    get toolTipType(): ToolTipType;
    set toolTipType(v: ToolTipType);
    /**
     * Gets or sets the crosshairs to be displayed.
    */
    get crosshairsDisplayMode(): CrosshairsDisplayMode;
    set crosshairsDisplayMode(v: CrosshairsDisplayMode);
    /**
     * Gets or sets whether crosshairs will snap to the nearest data point.
    */
    get crosshairsSnapToData(): boolean;
    set crosshairsSnapToData(v: boolean);
    /**
     * Gets or sets the color to apply to vertical crosshairs line.
    */
    get crosshairsLineVerticalStroke(): string;
    set crosshairsLineVerticalStroke(v: string);
    /**
     * Gets or sets thickness of crosshairs lines.
    */
    get crosshairsLineThickness(): number;
    set crosshairsLineThickness(v: number);
    /**
     * Gets or sets the color to apply to horizontal crosshairs line.
    */
    get crosshairsLineHorizontalStroke(): string;
    set crosshairsLineHorizontalStroke(v: string);
    /**
     * Gets or sets whether annotations are shown along the axis for crosshair values
    */
    get crosshairsAnnotationEnabled(): boolean;
    set crosshairsAnnotationEnabled(v: boolean);
    /**
     * Gets or sets the background of crosshair annotation on x-axis.
    */
    get crosshairsAnnotationXAxisBackground(): string;
    set crosshairsAnnotationXAxisBackground(v: string);
    /**
     * Gets or sets the background of crosshair annotation on y-axis.
    */
    get crosshairsAnnotationYAxisBackground(): string;
    set crosshairsAnnotationYAxisBackground(v: string);
    /**
     * Gets or sets the text color of crosshair annotation on x-axis.
    */
    get crosshairsAnnotationXAxisTextColor(): string;
    set crosshairsAnnotationXAxisTextColor(v: string);
    /**
     * Gets or sets the text color of crosshair annotation on y-axis.
    */
    get crosshairsAnnotationYAxisTextColor(): string;
    set crosshairsAnnotationYAxisTextColor(v: string);
    /**
     * Gets or sets precision on interpolated values of crosshairs on x-axis.
    */
    get crosshairsAnnotationXAxisPrecision(): number;
    set crosshairsAnnotationXAxisPrecision(v: number);
    /**
     * Gets or sets precision on interpolated values of crosshairs on y-axis.
    */
    get crosshairsAnnotationYAxisPrecision(): number;
    set crosshairsAnnotationYAxisPrecision(v: number);
    /**
     * Gets or sets whether annotations for the final value of each series is displayed on the axis.
    */
    get shouldAvoidAxisAnnotationCollisions(): boolean;
    set shouldAvoidAxisAnnotationCollisions(v: boolean);
    /**
     * Gets or sets a whether the chart should pan its content when zoo,ing in passed max zoom level.
    */
    get shouldPanOnMaximumZoom(): boolean;
    set shouldPanOnMaximumZoom(v: boolean);
    /**
     * Gets or sets whether annotations for the final value of each series is displayed on the axis.
    */
    get finalValueAnnotationsVisible(): boolean;
    set finalValueAnnotationsVisible(v: boolean);
    /**
     * Gets or sets the background of final value annotation.
    */
    get finalValueAnnotationsBackground(): string;
    set finalValueAnnotationsBackground(v: string);
    /**
     * Gets or sets the text color of final value annotation.
    */
    get finalValueAnnotationsTextColor(): string;
    set finalValueAnnotationsTextColor(v: string);
    /**
     * Gets or sets precision on final value annotation.
    */
    get finalValueAnnotationsPrecision(): number;
    set finalValueAnnotationsPrecision(v: number);
    /**
     * Gets or sets if the auto value callouts should be displayed.
    */
    get autoCalloutsVisible(): boolean;
    set autoCalloutsVisible(v: boolean);
    /**
     * Gets or sets if callouts should be displayed.
    */
    get calloutsVisible(): boolean;
    set calloutsVisible(v: boolean);
    /**
     * Gets or sets if event annotations should be displayed.
    */
    get calloutStyleUpdatingEventEnabled(): boolean;
    set calloutStyleUpdatingEventEnabled(v: boolean);
    /**
     * Gets or sets if event annotations should be displayed.
    */
    get useValueForAutoCalloutLabels(): boolean;
    set useValueForAutoCalloutLabels(v: boolean);
    /**
     * Gets or sets if event annotations should be displayed.
    */
    get calloutCollisionMode(): CalloutCollisionMode;
    set calloutCollisionMode(v: CalloutCollisionMode);
    /**
     * Gets or sets if the series item color should be used for the callout fills.
    */
    get calloutsUseItemColorForFill(): boolean;
    set calloutsUseItemColorForFill(v: boolean);
    /**
     * Gets or sets if the series item color should be used for the callout outlines.
    */
    get calloutsUseItemColorForOutline(): boolean;
    set calloutsUseItemColorForOutline(v: boolean);
    /**
     * Gets or sets whether to the label color is automatically decided between a light and dark option for contrast.
    */
    get calloutsUseAutoContrastingLabelColors(): boolean;
    set calloutsUseAutoContrastingLabelColors(v: boolean);
    /**
     * Gets or sets if the thickness that should be used for the callout outlines.
    */
    get calloutsStrokeThickness(): number;
    set calloutsStrokeThickness(v: number);
    /**
     * Gets or sets color of the callout background.
    */
    get calloutsBackground(): string;
    set calloutsBackground(v: string);
    /**
     * Gets or sets color of the callout outlines.
    */
    get calloutsOutline(): string;
    set calloutsOutline(v: string);
    /**
     * Gets or sets text color of callout.
    */
    get calloutsTextColor(): string;
    set calloutsTextColor(v: string);
    /**
     * Gets or sets the text color on dark callout background.
    */
    get calloutsLightTextColor(): string;
    set calloutsLightTextColor(v: string);
    /**
     * Gets or sets the text color on light callout background.
    */
    get calloutsDarkTextColor(): string;
    set calloutsDarkTextColor(v: string);
    /**
     * Gets or sets color of callout's leader lines.
    */
    get calloutsLeaderBrush(): string;
    set calloutsLeaderBrush(v: string);
    /**
     * Gets or sets the amount of precision to apply to the auto callout labels.
    */
    get calloutsAutoLabelPrecision(): number;
    set calloutsAutoLabelPrecision(v: number);
    private _calloutsAllowedPositions;
    /**
     * Gets or sets the allowed positions that the callout layer is allowed to use.
    */
    get calloutsAllowedPositions(): IgrCalloutPlacementPositionsCollection;
    set calloutsAllowedPositions(v: IgrCalloutPlacementPositionsCollection);
    /**
     * Gets or sets the member path of the X data for the callouts.
    */
    get calloutsXMemberPath(): string;
    set calloutsXMemberPath(v: string);
    /**
     * Gets or sets the member path of the Y data for the callouts.
    */
    get calloutsYMemberPath(): string;
    set calloutsYMemberPath(v: string);
    /**
     * Gets or sets the member path of the label data for the callouts.
    */
    get calloutsLabelMemberPath(): string;
    set calloutsLabelMemberPath(v: string);
    /**
     * Gets or sets the member path of the content data for the callouts.
    */
    get calloutsContentMemberPath(): string;
    set calloutsContentMemberPath(v: string);
    /**
     * Gets or sets the font for callout text.
    */
    get calloutsTextStyle(): string;
    set calloutsTextStyle(v: string);
    private _valueLines;
    /**
     * Gets or sets what value lines to use in the chart.
    */
    get valueLines(): IgrValueModeCollection;
    set valueLines(v: IgrValueModeCollection);
    /**
     * Gets or sets the palette of brushes to use for coloring the value lines present in the ValueLines property.
     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
    */
    get valueLinesBrushes(): string[];
    set valueLinesBrushes(v: string[]);
    /**
     * Gets or sets thickness of value lines.
    */
    get valueLinesThickness(): number;
    set valueLinesThickness(v: number);
    /**
     * Gets or sets if the chart should use the legend for value layers that target series.
    */
    get seriesValueLayerUseLegend(): boolean;
    set seriesValueLayerUseLegend(v: boolean);
    /**
     * Gets or sets the horizontal scrollbar mode to use for the series viewer.
    */
    get horizontalViewScrollbarMode(): SeriesViewerScrollbarMode;
    set horizontalViewScrollbarMode(v: SeriesViewerScrollbarMode);
    /**
     * Gets or sets the vertical scrollbar mode to use for the series viewer.
    */
    get verticalViewScrollbarMode(): SeriesViewerScrollbarMode;
    set verticalViewScrollbarMode(v: SeriesViewerScrollbarMode);
    /**
     * Gets or sets the position to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarPosition(): SeriesViewerHorizontalScrollbarPosition;
    set horizontalViewScrollbarPosition(v: SeriesViewerHorizontalScrollbarPosition);
    /**
     * Gets or sets the position to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarPosition(): SeriesViewerVerticalScrollbarPosition;
    set verticalViewScrollbarPosition(v: SeriesViewerVerticalScrollbarPosition);
    /**
     * Gets or sets the fill to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarFill(): string;
    set horizontalViewScrollbarFill(v: string);
    /**
     * Gets or sets the outline to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarOutline(): string;
    set horizontalViewScrollbarOutline(v: string);
    /**
     * Gets or sets the stroke thickness to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarStrokeThickness(): number;
    set horizontalViewScrollbarStrokeThickness(v: number);
    /**
     * Gets or sets the max opacity to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarMaxOpacity(): number;
    set horizontalViewScrollbarMaxOpacity(v: number);
    /**
     * Gets or sets the corner radius to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarCornerRadius(): number;
    set horizontalViewScrollbarCornerRadius(v: number);
    /**
     * Gets or sets the height to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarHeight(): number;
    set horizontalViewScrollbarHeight(v: number);
    /**
     * Gets or sets the inset distance to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarInset(): number;
    set horizontalViewScrollbarInset(v: number);
    /**
     * Gets or sets the track start inset to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarTrackStartInset(): number;
    set horizontalViewScrollbarTrackStartInset(v: number);
    /**
     * Gets or sets the track end inset to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarTrackEndInset(): number;
    set horizontalViewScrollbarTrackEndInset(v: number);
    /**
     * Gets or sets whether to use automatic track insets for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarShouldAddAutoTrackInsets(): boolean;
    set horizontalViewScrollbarShouldAddAutoTrackInsets(v: boolean);
    /**
     * Gets or sets the fill to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarFill(): string;
    set verticalViewScrollbarFill(v: string);
    /**
     * Gets or sets the outline to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarOutline(): string;
    set verticalViewScrollbarOutline(v: string);
    /**
     * Gets or sets the stroke thickness to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarStrokeThickness(): number;
    set verticalViewScrollbarStrokeThickness(v: number);
    /**
     * Gets or sets the max opacity to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarMaxOpacity(): number;
    set verticalViewScrollbarMaxOpacity(v: number);
    /**
     * Gets or sets the corner radius to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarCornerRadius(): number;
    set verticalViewScrollbarCornerRadius(v: number);
    /**
     * Gets or sets the width to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarWidth(): number;
    set verticalViewScrollbarWidth(v: number);
    /**
     * Gets or sets the inset distance to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarInset(): number;
    set verticalViewScrollbarInset(v: number);
    /**
     * Gets or sets the track start inset to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarTrackStartInset(): number;
    set verticalViewScrollbarTrackStartInset(v: number);
    /**
     * Gets or sets the track end inset to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarTrackEndInset(): number;
    set verticalViewScrollbarTrackEndInset(v: number);
    /**
     * Gets or sets whether to use automatic track insets for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarShouldAddAutoTrackInsets(): boolean;
    set verticalViewScrollbarShouldAddAutoTrackInsets(v: boolean);
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
    */
    get windowRectMinWidth(): number;
    set windowRectMinWidth(v: number);
    /**
     * Sets or gets the minimum height that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
    */
    get windowRectMinHeight(): number;
    set windowRectMinHeight(v: number);
    /**
     * Sets or gets minimum pixel width that the window is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property is overridden by the WindowRectMinWidth property
    */
    get windowSizeMinWidth(): number;
    set windowSizeMinWidth(v: number);
    /**
     * Sets or gets minimum pixel height that the window is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property is overridden by the WindowRectMinHeight property
    */
    get windowSizeMinHeight(): number;
    set windowSizeMinHeight(v: number);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
 * Provides a container for this control

*
* `provideContainer` method provide container for the control.
*
* ```ts
*     this.chart.provideContainer("Container");
* ```
*/
    provideContainer(container: any): void;
    /**
     * Destroy this control
    
    *
    * Use the `destroy` property to destroy the chart.
    *
    * ```ts
    * this.chart.destroy();
    * ```
    */
    destroy(): void;
    /**
     * Called when the control has been resized.
    
    *
    * `NotifyResized` method Called when the control has been resized.
    *
    * ```ts
    * this.chart.notifyResized();
    * ```
    */
    notifyResized(): void;
    notifyVisualPropertiesChanged(): void;
    /**
     * Forces any pending refresh to the chart to be finished.
    
    *
    * Method `flush` used to Forces any pending deferred work to render on the chart before continuing.
    *
    * ```ts
    * this.chart.flush();
    * ```
    */
    flush(): void;
    /**
     * Hides the active main tooltip, if displayed.
    
    *
    * Use the `HideToolTip` method to hide the active tooltip.
    *
    * ```ts
    * this.chart.hideToolTip();
    * ```
    */
    hideToolTip(): void;
    /**
     * Replays transition-in animation on all series in the chart.
    
    */
    replayTransitionIn(): void;
    /**
     * Performs zoom in action on the chart by specified percentage of current window rect
    
    */
    zoomIn(v: number): void;
    /**
     * Performs zoom out action on the chart by specified percentage of current window rect
    
    */
    zoomOut(v: number): void;
    /**
     * Resets the zoom level to default.
    
    */
    resetZoom(): void;
    getDesiredToolbarActions(): ToolActionInfo[];
    addCommandAvailabilityListener(listener: ICommandAvailabilityListener): void;
    removeCommandAvailabilityListener(listener: ICommandAvailabilityListener): void;
    addCommandStateChangedListener(listener: ICommandStateChangedListener): void;
    removeCommandStateChangedListener(listener: ICommandStateChangedListener): void;
    notifySetItem(source_: any, index: number, oldItem: any, newItem: any): void;
    /**
     * Used to manually notify the chart that the data source has reset or cleared its items.
    
    *
    * Use `notifyClearItems` method to notifies the chart that the items have been cleared from an associated data source.
    *
    * ```ts
    * this.chart.notifyClearItems(this.data);
    * ```
    */
    notifyClearItems(source_: any): void;
    notifyInsertItem(source_: any, index: number, newItem: any): void;
    notifyRemoveItem(source_: any, index: number, oldItem: any): void;
    private _seriesAdded;
    private _seriesAdded_wrapped;
    /**
     * Event raised when a series is initialized and added to this chart.
    *
    * `SeriesAdded` event raised when a series is initialized and added to this chart.
    *
    * ````ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesAdded={this.CategoryChart_SeriesAdded}/>
    * ``
    *
    * ```ts
    * CategoryChart_SeriesAdded(sender:any ,aregs:ChartSeriesEventArgs)
    * {
    * }
    * ````
    */
    get seriesAdded(): (s: IgrDomainChart, e: IgrChartSeriesEventArgs) => void;
    set seriesAdded(ev: (s: IgrDomainChart, e: IgrChartSeriesEventArgs) => void);
    private _seriesRemoved;
    private _seriesRemoved_wrapped;
    /**
     * Event raised when a series is removed from this chart.
    *
    * `SeriesRemoved` event raised when a series is removed from this chart.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesRemoved={this.CategoryChart_seriesRemoved}/>
    * ```
    *
    * ```ts
    *  CategoryChart_seriesRemoved(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ```
    */
    get seriesRemoved(): (s: IgrDomainChart, e: IgrChartSeriesEventArgs) => void;
    set seriesRemoved(ev: (s: IgrDomainChart, e: IgrChartSeriesEventArgs) => void);
    private _seriesPointerEnter;
    private _seriesPointerEnter_wrapped;
    /**
     * Occurs when the pointer enters a Series.
    *
    * `SeriesPointerEnter` event raised when the pointer enters a Series.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesPointerEnter={this.CategoryChart_seriesPointerDown}/>
    * ```
    *
    * ```ts
    * CategoryChart_seriesPointerEnter(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ```
    */
    get seriesPointerEnter(): (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    set seriesPointerEnter(ev: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void);
    private _seriesPointerLeave;
    private _seriesPointerLeave_wrapped;
    /**
     * Occurs when the pointer leaves a Series.
    *
    * `SeriesPointerLeave` event raised when the pointer leaves a Series.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesPointerLeave={this.CategoryChart_seriesPointerLeave}/>
    * ```
    *
    * ```ts
    * CategoryChart_seriesPointerLeave(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ```
    */
    get seriesPointerLeave(): (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    set seriesPointerLeave(ev: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void);
    private _seriesPointerMove;
    private _seriesPointerMove_wrapped;
    /**
     * Occurs when the pointer moves over a Series.
    *
    * `SeriesPointerMove` event raised when the pointer moves over a Series.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesPointerMove={this.CategoryChart_seriesPointerMove}/>
    * ```
    *
    * ```ts
    *  CategoryChart_seriesPointerMove(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ```
    */
    get seriesPointerMove(): (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    set seriesPointerMove(ev: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void);
    private _seriesPointerDown;
    private _seriesPointerDown_wrapped;
    /**
     * Occurs when the pointer is pressed down over a Series.
    *
    * `SeriesPointerDown` event raised when the pointer is pressed down over a Series
    *
    * ````ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesPointerDown={this.CategoryChart_seriesPointerDown}/>
    * ``
    *
    * ```ts
    * CategoryChart_seriesPointerDown(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ````
    */
    get seriesPointerDown(): (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    set seriesPointerDown(ev: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void);
    private _seriesPointerUp;
    private _seriesPointerUp_wrapped;
    /**
     * Occurs when the pointer is released over a Series.
    *
    * `SeriesPointerUp` event raised when the pointer is released over a Series.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesPointerUp={this.CategoryChart_seriesPointerUp}/>
    * ```
    *
    * ```ts
    *  CategoryChart_seriesPointerUp(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ```
    */
    get seriesPointerUp(): (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    set seriesPointerUp(ev: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void);
    private _seriesClick;
    private _seriesClick_wrapped;
    /**
     * Occurs when the pointer is clicked over a series.
    */
    get seriesClick(): (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    set seriesClick(ev: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void);
    private _plotAreaPointerEnter;
    private _plotAreaPointerEnter_wrapped;
    /**
     * Occurs when the pointer enters the plot area.
    */
    get plotAreaPointerEnter(): (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void;
    set plotAreaPointerEnter(ev: (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void);
    private _plotAreaPointerLeave;
    private _plotAreaPointerLeave_wrapped;
    /**
     * Occurs when the pointer leaves the plot area.
    */
    get plotAreaPointerLeave(): (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void;
    set plotAreaPointerLeave(ev: (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void);
    private _plotAreaPointerMove;
    private _plotAreaPointerMove_wrapped;
    /**
     * Occurs when the pointer is over the plot area.
    */
    get plotAreaPointerMove(): (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void;
    set plotAreaPointerMove(ev: (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void);
    private _plotAreaPointerDown;
    private _plotAreaPointerDown_wrapped;
    /**
     * Occurs when the pointer is pressed down over the plot area.
    */
    get plotAreaPointerDown(): (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void;
    set plotAreaPointerDown(ev: (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void);
    private _plotAreaPointerUp;
    private _plotAreaPointerUp_wrapped;
    /**
     * Occurs when the pointer is released over the plot area.
    */
    get plotAreaPointerUp(): (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void;
    set plotAreaPointerUp(ev: (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void);
    private _calloutStyleUpdating;
    private _calloutStyleUpdating_wrapped;
    /**
     * Occurs when the style of a callout is updated.
    */
    get calloutStyleUpdating(): (s: IgrDomainChart, e: IgrCalloutStyleUpdatingEventArgs) => void;
    set calloutStyleUpdating(ev: (s: IgrDomainChart, e: IgrCalloutStyleUpdatingEventArgs) => void);
    private _calloutRenderStyleUpdating;
    private _calloutRenderStyleUpdating_wrapped;
    /**
     * Occurs when the style of a callout is updated.
    */
    get calloutRenderStyleUpdating(): (s: IgrDomainChart, e: IgrCalloutRenderStyleUpdatingEventArgs) => void;
    set calloutRenderStyleUpdating(ev: (s: IgrDomainChart, e: IgrCalloutRenderStyleUpdatingEventArgs) => void);
    private _selectedSeriesItemsChanged;
    private _selectedSeriesItemsChanged_wrapped;
    get selectedSeriesItemsChanged(): (s: IgrDomainChart, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    set selectedSeriesItemsChanged(ev: (s: IgrDomainChart, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void);
    private _focusedSeriesItemsChanged;
    private _focusedSeriesItemsChanged_wrapped;
    get focusedSeriesItemsChanged(): (s: IgrDomainChart, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    set focusedSeriesItemsChanged(ev: (s: IgrDomainChart, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void);
    private _filterStringErrorsParsing;
    private _filterStringErrorsParsing_wrapped;
    get filterStringErrorsParsing(): (s: IgrDomainChart, e: IgrFilterStringErrorsParsingEventArgs) => void;
    set filterStringErrorsParsing(ev: (s: IgrDomainChart, e: IgrFilterStringErrorsParsingEventArgs) => void);
}
export interface IIgrDomainChartProps {
    tooltipTemplate?: React.FunctionComponent<IChartTooltipProps> | React.Component<IChartTooltipProps>;
    tooltipTemplates?: (React.FunctionComponent<IChartTooltipProps> | React.Component<IChartTooltipProps>)[];
    calloutsDataSource?: any[];
    children?: React.ReactNode;
    /**
 * Gets or sets the scaling value used to affect the pixel density of the control.
 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
 * to appear blurry.
*/
    pixelScalingRatio?: number | string;
    /**
     * Gets or sets the left margin of chart title
    *
    *  Use `titleLeftMargin` property for the left margin of chart title.
    *
    * ```ts
    * this.chart.titleLeftMargin = 10;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                    titleLeftMargin={20}>
    *  </IgrCategoryChart>
    * ```
    */
    titleLeftMargin?: number | string;
    /**
     * Gets or sets the right margin of chart title
    *
    *  Use `titleLeftMargin` property for the right margin of chart title.
    *
    * ```ts
    * this.chart.titleRightMargin = 10;
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 				dataSource={this.state.data}
    *                 titleRightMargin = 10>
    *  </IgrCategoryChart>
    * ```
    */
    titleRightMargin?: number | string;
    /**
     * Gets or sets the top margin of chart title
    *
    *  Use `titleTopMargin` property for the top margin of chart title.
    *
    * ```ts
    * this.chart.titleTopMargin = 10;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                titleTopMargin={10} />
    * ```
    */
    titleTopMargin?: number | string;
    /**
     * Gets or sets the bottom margin of chart title
    *
    *  Use `titleBottomMargin` property for the bottom margin of chart title.
    *
    * ```ts
    *  this.chart.titleBottomMargin = 5;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleAlignment="Right"
    * 	titleBottomMargin={5}/>
    * ```
    */
    titleBottomMargin?: number | string;
    /**
     * Gets or sets the left margin of chart subtitle
    *
    * Use `subtitleLeftMargin` property for the left margin of chart subtitle.
    *
    * ```ts
    * this.chart.subtitleLeftMargin = 20 ;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleLeftMargin= {20}/>
    * ```
    */
    subtitleLeftMargin?: number | string;
    /**
     * Gets or sets the top margin of chart subtitle
    *
    * Use `subtitleTopMargin` property for the top margin of chart subtitle.
    *
    * ```ts
    * this.chart.subtitleTopMargin = 10;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleTopMargin= {10}/>
    * ```
    */
    subtitleTopMargin?: number | string;
    /**
     * Gets or sets the right margin of chart subtitle
    *
    * Use `subtitleRightMargin` property for the right margin of chart subtitle.
    *
    * ```ts
    *  this.chart.subtitleRightMargin = 20 ;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleAlignment="Right"
    * 	subtitleRightMargin ={20}/>
    * ```
    */
    subtitleRightMargin?: number | string;
    /**
     * Gets or sets the bottom margin of chart subtitle
    *
    * Use `subtitleBottomMargin` property for the bottom margin of chart subtitle.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleBottomMargin= {10}/>
    * ```
    *
    * ```ts
    * this.chart.subtitleBottomMargin = 10 ;
    * ```
    */
    subtitleBottomMargin?: number | string;
    /**
     * Gets or sets color of chart subtitle
    *
    * Use `subtitleTextColor` property to color the subtitle.
    *
    * ```ts
    * this.chart.subtitleTextColor = "#ff0000" ;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleTextColor="#ff0000"/>
    * ```
    */
    subtitleTextColor?: string;
    /**
     * Gets or sets color of chart title
    *
    *  Use `titleTextColor` property to color the chart title
    *
    * ```ts
    *  this.chart.titleTextColor="red" ;
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 		dataSource={this.state.data}
    * 		width="700px"
    * 		height="500px"
    * 		xAxisTitle="Countries"
    * 		titleTextColor="Red" />
    *
    * ```
    */
    titleTextColor?: string;
    /**
     * Gets or sets the left margin of the chart content.
    *
    * Use the 'leftMargin' property for the left margin of the chart content.
    *
    * ```ts
    *  this.chart.leftMargin = 20;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                    leftMargin= {20}/>
    * ```
    */
    leftMargin?: number | string;
    /**
     * Gets or sets the top margin of the chart content.
    *
    * Use `topMargin` property for the margin of the chart content.
    *
    * ```ts
    * this.chart.topMargin=20;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                topMargin={10} />
    * ```
    */
    topMargin?: number | string;
    /**
     * Gets or sets the right margin of the chart content.
    *
    * Use `rightMargin` property for the right margin of the chart content.
    *
    * ```ts
    *   this.chart.rightMargin = 20 ;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	rightMargin= {4}/>
    * ```
    */
    rightMargin?: number | string;
    /**
     * Gets or sets the bottom margin around the chart content.
    *
    * Use the `bottomMargin` property for the bottom margin around the chart content.
    *
    * ```ts
    * this.chart.bottomMargin=20;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                    bottomMargin= 20 />
    * ```
    */
    bottomMargin?: number | string;
    /**
     * Gets or sets the duration used for animating series plots when the data is changing
    *
    * Use the `TransitionDuration` property to animating between data values.
    *
    * ```ts
    * this.chart.transitionDuratio= 500;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                transitionDuratio={500} />
    * ```
    */
    transitionDuration?: number | string;
    /**
     * Gets or sets the easing function used for animating series plots when the data is changing.
     * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
    *
    * The 'transitionInEasingFunction' property used for easing function for animating series plots when the chart is loading into view.
    *
    * ```ts
    * this.chart.transitionInEasingFunction=  this.cubicFunc;
    *
    * cubicFunc(time: number) : number
    *   {
    *     return time;
    *   }
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                transitionInEasingFunction="cubic" />
    * ```
    */
    transitionEasingFunction?: (time: number) => number;
    /**
     * Gets or sets the duration used for animating highlighting changes
    */
    highlightingTransitionDuration?: number | string;
    /**
     * Gets or sets the duration used for animating Selection changes
    */
    selectionTransitionDuration?: number | string;
    /**
     * Gets or sets the duration used for animating Focus changes
    */
    focusTransitionDuration?: number | string;
    /**
     * Gets or sets CSS font property for the chart subtitle
    *
    * Use `subtitleTextStyle` property for the CSS font of the chart subtitle.
    *
    * ```ts
    * this.chart.subtitleTextStyle= "16pt Verdona";
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitleTextStyle="16pt Verdona"/>
    * ```
    */
    subtitleTextStyle?: string;
    /**
     * Gets or sets CSS font property for the chart title
    *
    * Use `titleTextStyle` property for the CSS font property of the chart title
    *
    * ```ts
    * this.chart.xAxisTitleTextStyle = "24pt Verdona";
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                 width="700px"
    *                 height="500px"
    *                 xAxisTitle="Countries"
    *                 xAxisTitleTextColor="gray"
    *                 xAxisTitleTextStyle="12pt Verdana"
    *                 xAxisTitleAngle={0}
    *                 yAxisTitle="Trillions of Watt-hours (TWh)"
    *                 yAxisTitleTextStyle="12pt Verdana"
    *                 yAxisTitleTextColor="gray"
    *                 yAxisTitleAngle={90}
    *                 yAxisTitleLeftMargin={5}>
    *  </IgrCategoryChart>
    * ```
    */
    titleTextStyle?: string;
    dataToolTipGroupingMode?: DataToolTipLayerGroupingMode | string;
    /**
     * Gets or sets the offset of the tooltip layer on the X axis.
    */
    dataToolTipPositionOffsetX?: number | string;
    /**
     * Gets or sets the offset of the tooltip layer on the Y axis.
    */
    dataToolTipPositionOffsetY?: number | string;
    /**
     * Gets or sets the offset of the tooltip layer on the X axis.
    */
    dataToolTipDefaultPositionOffsetX?: number | string;
    /**
     * Gets or sets the offset of the tooltip layer on the Y axis.
    */
    dataToolTipDefaultPositionOffsetY?: number | string;
    /**
     * Gets or sets the tooltip position mode on the X axis for grouped series.
    */
    dataToolTipGroupedPositionModeX?: DataTooltipGroupedPositionX | string;
    /**
     * Gets or sets the tooltip position mode on the Y axis for grouped series.
    */
    dataToolTipGroupedPositionModeY?: DataTooltipGroupedPositionY | string;
    /**
     * Gets or sets whether the data legend should update when the series data is mutated.
    */
    dataToolTipShouldUpdateWhenSeriesDataChanges?: boolean | string;
    /**
     * Gets or sets indexes, titles, or names of series to include in displaying in the data tooltip, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The DataToolTipExcludedSeries property takes precedence over values of DataToolTipIncludedSeries property
    */
    dataToolTipIncludedSeries?: string[];
    /**
     * Gets or sets indexes, titles, or names of series to exclude from displaying in the data tooltip, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The DataToolTipExcludedSeries property takes precedence over values of DataToolTipIncludedSeries property
    */
    dataToolTipExcludedSeries?: string[];
    /**
     * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
     * The DataToolTipExcludedColumns property takes precedence over values of DataToolTipIncludedColumns property
    */
    dataToolTipIncludedColumns?: string[];
    /**
     * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
     * The DataToolTipExcludedColumns property takes precedence over values of DataToolTipIncludedColumns property
    */
    dataToolTipExcludedColumns?: string[];
    /**
     * Gets or sets mode for abbreviating large numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    dataToolTipValueFormatAbbreviation?: DataAbbreviationMode | string;
    /**
     * Gets or sets maximum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    dataToolTipValueFormatMaxFractions?: number | string;
    /**
     * Gets or sets minimum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    dataToolTipValueFormatMinFractions?: number | string;
    /**
     * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
    */
    dataToolTipValueFormatMode?: DataLegendValueMode | string;
    /**
     * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    dataToolTipValueFormatCulture?: string;
    /**
     * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    dataToolTipValueFormatUseGrouping?: boolean | string;
    /**
     * Gets or sets the format string for values displayed in the data legend.
    */
    dataToolTipValueFormatString?: string;
    /**
     * Gets or sets the format specifiers to use with the ValueFormatString string.
    */
    dataToolTipValueFormatSpecifiers?: any[];
    dataToolTipValueRowMarginBottom?: number | string;
    dataToolTipValueRowMarginLeft?: number | string;
    dataToolTipValueRowMarginRight?: number | string;
    dataToolTipValueRowMarginTop?: number | string;
    /**
     * Gets or sets whether to show series rows.
    */
    dataToolTipValueRowVisible?: boolean | string;
    /**
     * Gets or sets text displayed when data column is missing a value, e.g. "no data"
    */
    dataToolTipValueTextWhenMissingData?: string;
    /**
     * Gets or sets whether to use series colors when displaying values in the legend
    */
    dataToolTipValueTextUseSeriesColors?: boolean | string;
    dataToolTipValueTextMarginBottom?: number | string;
    dataToolTipValueTextMarginLeft?: number | string;
    dataToolTipValueTextMarginRight?: number | string;
    dataToolTipValueTextMarginTop?: number | string;
    /**
     * Gets or sets the units text color.
    */
    dataToolTipValueTextColor?: string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    dataToolTipValueTextStyle?: string;
    /**
     * Gets or sets the format string for header text displayed in the data legend.
    */
    dataToolTipHeaderFormatString?: string;
    /**
     * Gets or sets the format specifiers to use with the HeaderFormatString string.
    */
    dataToolTipHeaderFormatSpecifiers?: any[];
    /**
     * Gets or sets globalization culture when displaying header as date time
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    dataToolTipHeaderFormatCulture?: string;
    /**
     * Gets or sets date format for the header
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    dataToolTipHeaderFormatDate?: DataLegendHeaderDateMode | string;
    /**
     * Gets or sets time format for the header
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    dataToolTipHeaderFormatTime?: DataLegendHeaderTimeMode | string;
    /**
     * Gets or sets the HeaderText for the data legend.
    */
    dataToolTipHeaderText?: string;
    /**
     * Gets or sets the header text color.
    */
    dataToolTipHeaderTextColor?: string;
    dataToolTipHeaderTextMarginBottom?: number | string;
    dataToolTipHeaderTextMarginLeft?: number | string;
    dataToolTipHeaderTextMarginRight?: number | string;
    dataToolTipHeaderTextMarginTop?: number | string;
    dataToolTipHeaderRowMarginBottom?: number | string;
    dataToolTipHeaderRowMarginLeft?: number | string;
    dataToolTipHeaderRowMarginRight?: number | string;
    dataToolTipHeaderRowMarginTop?: number | string;
    /**
     * Gets or sets whether to show Header row.
    */
    dataToolTipHeaderRowVisible?: boolean | string;
    /**
     * Gets or Sets the style to use for the header text.
    */
    dataToolTipHeaderTextStyle?: string;
    /**
     * Gets or sets the Group text color.
    */
    dataToolTipGroupTextColor?: string;
    dataToolTipGroupTextMarginBottom?: number | string;
    dataToolTipGroupTextMarginLeft?: number | string;
    dataToolTipGroupTextMarginRight?: number | string;
    dataToolTipGroupTextMarginTop?: number | string;
    dataToolTipGroupRowMarginBottom?: number | string;
    dataToolTipGroupRowMarginLeft?: number | string;
    dataToolTipGroupRowMarginRight?: number | string;
    dataToolTipGroupRowMarginTop?: number | string;
    /**
     * Gets or sets whether to show Group row.
    */
    dataToolTipGroupRowVisible?: boolean | string;
    /**
     * Gets or Sets the style to use for the Group text.
    */
    dataToolTipGroupTextStyle?: string;
    /**
     * Gets or sets the summary text color.
    */
    dataToolTipSummaryTitleTextColor?: string;
    /**
     * Gets or Sets the style to use for the summary text.
    */
    dataToolTipSummaryTitleTextStyle?: string;
    /**
     * Gets or sets the SummaryType for the data legend.
    */
    dataToolTipSummaryType?: DataLegendSummaryType | string;
    /**
     * Gets or sets the SummaryTitleText for the data legend.
    */
    dataToolTipSummaryTitleText?: string;
    dataToolTipSummaryTitleTextMarginBottom?: number | string;
    dataToolTipSummaryTitleTextMarginLeft?: number | string;
    dataToolTipSummaryTitleTextMarginRight?: number | string;
    dataToolTipSummaryTitleTextMarginTop?: number | string;
    dataToolTipSummaryRowMarginBottom?: number | string;
    dataToolTipSummaryRowMarginLeft?: number | string;
    dataToolTipSummaryRowMarginRight?: number | string;
    dataToolTipSummaryRowMarginTop?: number | string;
    /**
     * Gets or sets the units text color.
    */
    dataToolTipSummaryValueTextColor?: string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    dataToolTipSummaryValueTextStyle?: string;
    /**
     * Gets or sets the units text for the data legend.
    */
    dataToolTipSummaryLabelText?: string;
    /**
     * Gets or sets the units text color.
    */
    dataToolTipSummaryLabelTextColor?: string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    dataToolTipSummaryLabelTextStyle?: string;
    /**
     * Gets or sets the units text for the data legend.
    */
    dataToolTipSummaryUnitsText?: string;
    /**
     * Gets or sets the units text color.
    */
    dataToolTipSummaryUnitsTextColor?: string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    dataToolTipSummaryUnitsTextStyle?: string;
    dataToolTipBadgeMarginBottom?: number | string;
    dataToolTipBadgeMarginLeft?: number | string;
    dataToolTipBadgeMarginRight?: number | string;
    dataToolTipBadgeMarginTop?: number | string;
    /**
     * Gets or sets the BadgeShape for the data legend.
    */
    dataToolTipBadgeShape?: LegendItemBadgeShape | string;
    /**
     * Gets or sets the UnitsMode for the data legend.
    */
    dataToolTipUnitsDisplayMode?: DataLegendUnitsMode | string;
    /**
     * Gets or sets the units text for the data legend.
    */
    dataToolTipUnitsText?: string;
    /**
     * Gets or sets the units text color.
    */
    dataToolTipUnitsTextColor?: string;
    dataToolTipUnitsTextMarginBottom?: number | string;
    dataToolTipUnitsTextMarginLeft?: number | string;
    dataToolTipUnitsTextMarginRight?: number | string;
    dataToolTipUnitsTextMarginTop?: number | string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    dataToolTipUnitsTextStyle?: string;
    dataToolTipTitleTextMarginBottom?: number | string;
    dataToolTipTitleTextMarginLeft?: number | string;
    dataToolTipTitleTextMarginRight?: number | string;
    dataToolTipTitleTextMarginTop?: number | string;
    /**
     * Gets or sets the display text color.
    */
    dataToolTipTitleTextColor?: string;
    /**
     * Gets or Sets the style to use for the display text.
    */
    dataToolTipTitleTextStyle?: string;
    /**
     * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
    */
    dataToolTipLabelDisplayMode?: DataLegendLabelMode | string;
    /**
     * Gets or sets the units text color.
    */
    dataToolTipLabelTextColor?: string;
    dataToolTipLabelTextMarginBottom?: number | string;
    dataToolTipLabelTextMarginLeft?: number | string;
    dataToolTipLabelTextMarginRight?: number | string;
    dataToolTipLabelTextMarginTop?: number | string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    dataToolTipLabelTextStyle?: string;
    /**
     * Gets or sets the selection mode to use for the series in the component, when supported.
    */
    selectionMode?: SeriesSelectionMode | string;
    /**
     * Gets or sets the focus mode to use for the series in the component, when supported.
    */
    focusMode?: SeriesSelectionMode | string;
    /**
     * Gets or sets the selection brush to use for the series.
    */
    selectionBrush?: string;
    /**
     * Gets or sets the focus brush to use for the series.
    */
    focusBrush?: string;
    /**
     * Gets or sets the selection behavior to use for the series in the component, when supported.
    */
    selectionBehavior?: SeriesSelectionBehavior | string;
    /**
     * Gets or sets the sorts to apply to the chart. This property will become ignored if sorts are changed outside of this property.
    */
    initialSorts?: string;
    /**
     * Gets or sets the sorts to apply after grouping has been applied.
    */
    groupSorts?: string;
    /**
     * Gets or sets the groupings to apply to the chart. This property will become ignored if sorts are changed outside of this property.
    */
    initialGroups?: string;
    /**
     * Gets or sets the filter to apply to the chart. This property will become ignored if the filter is changed outside of this property.
    */
    initialFilter?: string;
    /**
     * Gets or sets the filter to apply to the chart. This property will become ignored if the filter is changed outside of this property.
    */
    initialHighlightFilter?: string;
    /**
     * Gets or sets the summaries to apply to the chart. This property will become ignored if sorts are changed outside of this property.
    */
    initialSummaries?: string;
    /**
     * Gets or sets a collection of data items used to generate the chart.
     * The HighlightedItemsSource of this chart can be a list of objects containing one or more numeric properties.
     * Additionally, if the objects in the list implement the IEnumerable interface,
     * the Chart will attempt to delve into the sub-collections when reading through the data source.
     * Data binding can be further configured by attributing the data item classes
     * with the DataSeriesMemberIntentAttribute.
    */
    highlightedDataSource?: any;
    /**
     * Gets or sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
    *
    * The `IncludedProperties` property used to include the properties for the consideration of the category chart.
    *
    * ```ts
    * this.chart.includedProperties = ["ProductName", "Cost"];
    * ```
    *
    * ```ts
    * 	<IgrCategoryChart
    * 		chartType="Line"
    * 		markerTypes={this.state.markersTypes}
    * 		dataSource={this.categoryData}
    * 		excludedProperties="value" />
    * ```
    */
    includedProperties?: string[];
    /**
     * Gets or sets a set of property paths that should be excluded from consideration by the category chart.
    *
    * The `ExcludedProperties` property used for the property paths that should be excluded from consideration by the category chart.
    *
    * ```ts
    * this.chart.excludedProperties = ["ID", "Discount"];
    * ```
    *
    * ```ts
    * 	<IgrCategoryChart
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	excludedProperties="value" />
    * ```
    */
    excludedProperties?: string[];
    /**
     * Gets or sets the palette of brushes to use for coloring the chart series.
     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
    *
    * Use the `Brushes` property to  set the brushes.
    *
    * ```ts
    * this.chart.brushes = ["#ff0000","#00ff00"];
    * ```
    */
    brushes?: string[] | string;
    /**
     * Gets or sets the palette of brushes to use for outlines on the chart series.
     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
    *
    *  Use the `Outlines` property to sets the palette of brushes to use for outlines on the chart series
    *
    * ```ts
    * <IgrCategoryChart
    * 	chartType="Line"
    * 	outlines= "#ff0000"
    * 	dataSource={this.categoryData}/>
    * ```
    */
    outlines?: string[] | string;
    /**
     * Gets the actual palette of brushes to use for coloring the chart series.
    */
    actualBrushes?: string[] | string;
    /**
     * Gets the actual palette of brushes to use for outlines on the chart series.
    */
    actualOutlines?: string[] | string;
    /**
     * Gets or sets whether the chart can be horizontally zoomed through user interactions.
    *
    * Use the `IsHorizontalZoomEnabled` property to allow chart horizontally zoomed .
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                    width="700px"
    *                    height="500px"
    *                    xAxisLabelTextStyle="10pt Verdana"
    *                    xAxisLabelTopMargin={5}
    *                    xAxisLabelTextColor="gray"
    *                    yAxisLabelTextStyle="10pt Verdana"
    *                    yAxisLabelRightMargin={5}
    *                    yAxisLabelTextColor="gray"
    * 				   isHorizontalZoomEnabled= true/>
    * ```
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                    IsHorizontalZoomEnabled= true />
    * ```
    *
    * ```ts
    * this.chart.isHorizontalZoomEnabled = true;
    * ```
    */
    isHorizontalZoomEnabled?: boolean | string;
    /**
     * Gets or sets whether the chart can be vertically zoomed through user interactions.
    *
    * Use the `IsVerticalZoomEnabled` property to allow chart zoom vertically.
    *
    * ```ts
    *  this.chart.isVerticalZoomEnabled = true;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart dataSource={this.state.data}
    *                   isVerticalZoomEnabled= "true"/>
    * ```
    */
    isVerticalZoomEnabled?: boolean | string;
    /**
     * Gets or sets whether the chart should display mock data when the data source has not been provided, if supported for this type of chart.
    */
    shouldDisplayMockData?: boolean | string;
    /**
     * Gets or sets whether the chart should use a faded skeleton style for mock data.
    */
    shouldUseSkeletonStyleForMockData?: boolean | string;
    /**
     * Gets or sets whether and how to display highlighted values for the series. Note, this is distinct from the highlighting feature that indicates what is closest or under the mouse.
     * This property applies to Category Chart and Financial Chart controls.
    */
    highlightedValuesDisplayMode?: SeriesHighlightedValuesDisplayMode | string;
    /**
     * Gets or sets whether the chart can highlight series through user interactions.
     * This property applies to Category Chart and Financial Chart controls.
    */
    isSeriesHighlightingEnabled?: boolean | string;
    /**
     * Gets or sets whether the chart can highlight series through user interactions.
     * This property applies to Category Chart and Financial Chart controls.
    */
    highlightedLegendItemVisibility?: Visibility | string;
    /**
     * Gets or sets whether to show the legend items for the series.
    */
    legendItemVisibility?: Visibility | string;
    /**
     * Gets or sets the rectangle representing the current scroll and zoom state of the chart.
     * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
    *
    * Use `WindowRect` property representing the current scroll and zoom state of the chart.
    *
    * ```ts
    * this.chart.windowRect =[0,0,1,1];
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                WindowRect={1,0,1,1} />
    * ```
    */
    windowRect?: IgRect | string;
    /**
     * Gets or sets text to display above the plot area.
    *
    * Use the `Title` property to display the text above the plot area.
    *
    * ```ts
    *  this.chart.title= "This is a Title";
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	title= "CategoryChart Subtitle"	/>
    * ```
    */
    chartTitle?: string;
    /**
     * Gets or sets text to display below the Title, above the plot area.
    *
    * Use the `Subtitle` property to display the text below  and above the plot area.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"/>
    * ```
    *
    * ```ts
    *  this.chart.subtitle ="CategoryChart Subtitle" ;
    * ```
    */
    subtitle?: string;
    /**
     * Gets or sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
    *
    * Use the `TitleAlignment` property for the horizontal alignment of the title.
    *
    * ```ts
    * this.chart.titleAlignment = HorizontalAlignment.Center;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	titleAlignment= "Center"/>
    * ```
    */
    titleAlignment?: HorizontalAlignment | string;
    /**
     * Gets or sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
    *
    * Use the `SubtitleAlignment` property to Gets or sets horizontal alignment.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	dataSource={this.categoryData}
    * 	subtitle= "CategoryChart Subtitle"
    * 	subtitleAlignment="Right"/>
    * ```
    *
    * ```ts
    * this.chart.subtitleAlignment = HorizontalAlignment.Right;
    * ```
    */
    subtitleAlignment?: HorizontalAlignment | string;
    /**
     * Gets or sets the behavior that determines how unknown values will be plotted on the chart.
     * Null and Double.NaN are two examples of unknown values.
    *
    * Use the `UnknownValuePlotting` property to determines the behavior that how unknown values will be plotted on the chart.
    *
    * ```ts
    * this.chart.unknownValuePlotting =UnknownValuePlotting.DontPlot;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                unknownValuePlotting= "dontPlot" />
    * ```
    */
    unknownValuePlotting?: UnknownValuePlotting | string;
    /**
     * Gets or sets the rendering resolution for all series in this chart.
     * Where n = Resolution, for every n horizontal pixels, combine all items into a single data point.  When Resolution = 0, all data points will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
    *
    * Use the `Resolution` property if the callouts should be display.
    *
    * ```ts
    *   this.chart.resolution = 2 ;
    * ```
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	calloutsVisible="true"
    * 	resolution= {2}/>
    * ```
    */
    resolution?: number | string;
    /**
     * Gets or sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
    *
    * Use the `Thickness` property for the thickness of all the series in this chart.
    */
    thickness?: number | string;
    /**
     * Gets or sets the OutlineMode for all series in this chart.
    */
    outlineMode?: SeriesOutlineMode | string;
    /**
     * Gets or sets the MarkerOutlineMode for all series that support markers in this chart.
    */
    markerOutlineMode?: MarkerOutlineMode | string;
    /**
     * Gets or sets the MarkerFillMode for all series that support markers in this chart.
    */
    markerFillMode?: MarkerFillMode | string;
    /**
     * Gets or sets the Marker Fill Opacity for all series that support markers in this chart.
    */
    markerFillOpacity?: number | string;
    /**
     * Gets or sets the Marker Thickness for all series that support markers in this chart.
    */
    markerThickness?: number | string;
    /**
     * Gets or sets the marker shapes used for indicating location of data points in this chart.
     * This property applies only to these chart types: point, line, spline, bubble, and polygon
    */
    markerTypes?: IgrMarkerTypeCollection | string;
    /**
     * Gets or sets the default marker type for all series plotted in this chart.
     * This property is ignored when the MarkerTypes property is set
    */
    markerAutomaticBehavior?: MarkerAutomaticBehavior | string;
    /**
     * Gets or sets the palette of brushes used for rendering fill area of data point markers.
     * This property applies only to these chart types: point, line, spline, bubble, and polygon
    *
    * `MarkerBrushes` property used for rendering fill area of data point markers.
    *
    * ```ts
    *  this.chart.markerBrushes=[ "#ff0000", "#ffff00", "#00ffff" ];
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    *     chartType="Line"
    *     markerBrushes ="#ffff00"
    *     dataSource={this.categoryData}/>
    * ```
    */
    markerBrushes?: string[] | string;
    /**
     * Gets or sets the palette of brushes used for rendering outlines of data point markers.
     * This property applies only to these chart types: point, line, spline, bubble, and polygon
    *
    * `MarkerOutlines` property used for rendering outlines of data point markers.
    *
    * ```ts
    * this.chart.markerOutlines= ["#ff0000", "#ffff00", "#00ffff"] ;
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	chartType="Line"
    * 	markerOutlines= "#ff0000"
    * 	dataSource={this.categoryData}/>
    * ```
    */
    markerOutlines?: string[] | string;
    /**
     * Gets or sets the maximum number of markers displayed in the plot area of the chart.
    *
    * `markerMaxCount` property used to display maximum number of markers in the plot area of the chart.
    *
    * ```ts
    *  this.chart.markerMaxCount = 100 ;
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	chartType="Line"
    * 	markerMaxCount= {2}
    * 	dataSource={this.categoryData}/>
    * ```
    */
    markerMaxCount?: number | string;
    /**
     * Gets or sets the fill opacity for all series that have area visuals in this chart.
     * For example, Area, SplineArea, Column chart types
    */
    areaFillOpacity?: number | string;
    /**
     * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
    */
    animateSeriesWhenAxisRangeChanges?: boolean | string;
    /**
     * Gets or sets the palette of brushes to used for coloring trend lines in this chart.
     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
    *
    * Use the `TrendLineBrushes` property for coloring trend lines in the chart.
    *
    * ```ts
    * this.chart.trendLineBrushes=["#ff0000", "#ffff00", "#00ffff"]	;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                trendLineBrushes="#ffff00" />
    * ```
    */
    trendLineBrushes?: string[] | string;
    /**
     * Gets or sets the formula used for calculating trend lines in this chart.
     * This property applies only to these chart types: point, line, spline, and bubble
    *
    * Use the `TrendLineType` property for calculating trend lines.
    *
    * ```ts
    * this.chart.trendLineType = TrendLineType.CubicFit;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                trendLineType="CubicFit" />
    * ```
    */
    trendLineType?: TrendLineType | string;
    /**
     * Gets or sets the thickness of the trend lines in this chart.
     * This property applies only to these chart types: point, line, spline, and bubble
    *
    * Use the `TrendLineThickness` property for the thickness of the trend lines in the chart.
    *
    * ```ts
    * this.chart.trendLineThickness=2;
    * ```
    *
    * ```ts
    * <IgrCategoryChart dataSource={this.state.data}
    *                trendLineThickness={2} />
    * ```
    */
    trendLineThickness?: number | string;
    /**
     * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.
    *
    * Use `AlignsGridLinesToPixels` propert to indicat whether grid and tick lines are aligned to device pixels.
    *
    * ```ts
    *  this.chart.alignsGridLinesToPixels= true;
    * ```
    */
    alignsGridLinesToPixels?: boolean | string;
    /**
     * Margin applied to the Left of the plot area.
    */
    plotAreaMarginLeft?: number | string;
    /**
     * Margin applied to the Top of the plot area.
    */
    plotAreaMarginTop?: number | string;
    /**
     * Margin applied to the right of the plot area.
    */
    plotAreaMarginRight?: number | string;
    /**
     * Margin applied below the plot area.
    */
    plotAreaMarginBottom?: number | string;
    /**
     * Gets or sets mode to use for automatically calculating the plot area margin.
    */
    computedPlotAreaMarginMode?: ComputedPlotAreaMarginMode | string;
    /**
     * Gets or sets horizontal mode to use for automatically calculating the plot area margin based ont the series.
    */
    seriesPlotAreaMarginHorizontalMode?: SeriesPlotAreaMarginHorizontalMode | string;
    /**
     * Gets or sets vertical mode to use for automatically calculating the plot area margin based ont the series.
    */
    seriesPlotAreaMarginVerticalMode?: SeriesPlotAreaMarginVerticalMode | string;
    /**
     * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
    */
    highlightingMode?: SeriesHighlightingMode | string;
    /**
     * Gets or sets the highlighting Behavior to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
    */
    highlightingBehavior?: SeriesHighlightingBehavior | string;
    /**
     * Gets or sets the highlighting mode to use for the legend linked to the component, when supported.
    */
    legendHighlightingMode?: LegendHighlightingMode | string;
    /**
     * Gets or sets the type of legend badges representing all series displayed in a legend linked to this component
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
    */
    legendItemBadgeShape?: LegendItemBadgeShape | string;
    /**
     * Gets or sets the mode of legend badges representing all series displayed in a legend linked to this component.
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
    */
    legendItemBadgeMode?: LegendItemBadgeMode | string;
    trendLinePeriod?: number | string;
    /**
     * Gets or sets the style of tooltip to be displayed.
    */
    toolTipType?: ToolTipType | string;
    /**
     * Gets or sets the crosshairs to be displayed.
    */
    crosshairsDisplayMode?: CrosshairsDisplayMode | string;
    /**
     * Gets or sets whether crosshairs will snap to the nearest data point.
    */
    crosshairsSnapToData?: boolean | string;
    /**
     * Gets or sets the color to apply to vertical crosshairs line.
    */
    crosshairsLineVerticalStroke?: string;
    /**
     * Gets or sets thickness of crosshairs lines.
    */
    crosshairsLineThickness?: number | string;
    /**
     * Gets or sets the color to apply to horizontal crosshairs line.
    */
    crosshairsLineHorizontalStroke?: string;
    /**
     * Gets or sets whether annotations are shown along the axis for crosshair values
    */
    crosshairsAnnotationEnabled?: boolean | string;
    /**
     * Gets or sets the background of crosshair annotation on x-axis.
    */
    crosshairsAnnotationXAxisBackground?: string;
    /**
     * Gets or sets the background of crosshair annotation on y-axis.
    */
    crosshairsAnnotationYAxisBackground?: string;
    /**
     * Gets or sets the text color of crosshair annotation on x-axis.
    */
    crosshairsAnnotationXAxisTextColor?: string;
    /**
     * Gets or sets the text color of crosshair annotation on y-axis.
    */
    crosshairsAnnotationYAxisTextColor?: string;
    /**
     * Gets or sets precision on interpolated values of crosshairs on x-axis.
    */
    crosshairsAnnotationXAxisPrecision?: number | string;
    /**
     * Gets or sets precision on interpolated values of crosshairs on y-axis.
    */
    crosshairsAnnotationYAxisPrecision?: number | string;
    /**
     * Gets or sets whether annotations for the final value of each series is displayed on the axis.
    */
    shouldAvoidAxisAnnotationCollisions?: boolean | string;
    /**
     * Gets or sets a whether the chart should pan its content when zoo,ing in passed max zoom level.
    */
    shouldPanOnMaximumZoom?: boolean | string;
    /**
     * Gets or sets whether annotations for the final value of each series is displayed on the axis.
    */
    finalValueAnnotationsVisible?: boolean | string;
    /**
     * Gets or sets the background of final value annotation.
    */
    finalValueAnnotationsBackground?: string;
    /**
     * Gets or sets the text color of final value annotation.
    */
    finalValueAnnotationsTextColor?: string;
    /**
     * Gets or sets precision on final value annotation.
    */
    finalValueAnnotationsPrecision?: number | string;
    /**
     * Gets or sets if the auto value callouts should be displayed.
    */
    autoCalloutsVisible?: boolean | string;
    /**
     * Gets or sets if callouts should be displayed.
    */
    calloutsVisible?: boolean | string;
    /**
     * Gets or sets if event annotations should be displayed.
    */
    calloutStyleUpdatingEventEnabled?: boolean | string;
    /**
     * Gets or sets if event annotations should be displayed.
    */
    useValueForAutoCalloutLabels?: boolean | string;
    /**
     * Gets or sets if event annotations should be displayed.
    */
    calloutCollisionMode?: CalloutCollisionMode | string;
    /**
     * Gets or sets if the series item color should be used for the callout fills.
    */
    calloutsUseItemColorForFill?: boolean | string;
    /**
     * Gets or sets if the series item color should be used for the callout outlines.
    */
    calloutsUseItemColorForOutline?: boolean | string;
    /**
     * Gets or sets whether to the label color is automatically decided between a light and dark option for contrast.
    */
    calloutsUseAutoContrastingLabelColors?: boolean | string;
    /**
     * Gets or sets if the thickness that should be used for the callout outlines.
    */
    calloutsStrokeThickness?: number | string;
    /**
     * Gets or sets color of the callout background.
    */
    calloutsBackground?: string;
    /**
     * Gets or sets color of the callout outlines.
    */
    calloutsOutline?: string;
    /**
     * Gets or sets text color of callout.
    */
    calloutsTextColor?: string;
    /**
     * Gets or sets the text color on dark callout background.
    */
    calloutsLightTextColor?: string;
    /**
     * Gets or sets the text color on light callout background.
    */
    calloutsDarkTextColor?: string;
    /**
     * Gets or sets color of callout's leader lines.
    */
    calloutsLeaderBrush?: string;
    /**
     * Gets or sets the amount of precision to apply to the auto callout labels.
    */
    calloutsAutoLabelPrecision?: number | string;
    /**
     * Gets or sets the allowed positions that the callout layer is allowed to use.
    */
    calloutsAllowedPositions?: IgrCalloutPlacementPositionsCollection | string;
    /**
     * Gets or sets the member path of the X data for the callouts.
    */
    calloutsXMemberPath?: string;
    /**
     * Gets or sets the member path of the Y data for the callouts.
    */
    calloutsYMemberPath?: string;
    /**
     * Gets or sets the member path of the label data for the callouts.
    */
    calloutsLabelMemberPath?: string;
    /**
     * Gets or sets the member path of the content data for the callouts.
    */
    calloutsContentMemberPath?: string;
    /**
     * Gets or sets the font for callout text.
    */
    calloutsTextStyle?: string;
    /**
     * Gets or sets what value lines to use in the chart.
    */
    valueLines?: IgrValueModeCollection | string;
    /**
     * Gets or sets the palette of brushes to use for coloring the value lines present in the ValueLines property.
     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
    */
    valueLinesBrushes?: string[] | string;
    /**
     * Gets or sets thickness of value lines.
    */
    valueLinesThickness?: number | string;
    /**
     * Gets or sets if the chart should use the legend for value layers that target series.
    */
    seriesValueLayerUseLegend?: boolean | string;
    /**
     * Gets or sets the horizontal scrollbar mode to use for the series viewer.
    */
    horizontalViewScrollbarMode?: SeriesViewerScrollbarMode | string;
    /**
     * Gets or sets the vertical scrollbar mode to use for the series viewer.
    */
    verticalViewScrollbarMode?: SeriesViewerScrollbarMode | string;
    /**
     * Gets or sets the position to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarPosition?: SeriesViewerHorizontalScrollbarPosition | string;
    /**
     * Gets or sets the position to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarPosition?: SeriesViewerVerticalScrollbarPosition | string;
    /**
     * Gets or sets the fill to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarFill?: string;
    /**
     * Gets or sets the outline to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarOutline?: string;
    /**
     * Gets or sets the stroke thickness to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarStrokeThickness?: number | string;
    /**
     * Gets or sets the max opacity to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarMaxOpacity?: number | string;
    /**
     * Gets or sets the corner radius to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarCornerRadius?: number | string;
    /**
     * Gets or sets the height to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarHeight?: number | string;
    /**
     * Gets or sets the inset distance to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarInset?: number | string;
    /**
     * Gets or sets the track start inset to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarTrackStartInset?: number | string;
    /**
     * Gets or sets the track end inset to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarTrackEndInset?: number | string;
    /**
     * Gets or sets whether to use automatic track insets for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarShouldAddAutoTrackInsets?: boolean | string;
    /**
     * Gets or sets the fill to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarFill?: string;
    /**
     * Gets or sets the outline to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarOutline?: string;
    /**
     * Gets or sets the stroke thickness to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarStrokeThickness?: number | string;
    /**
     * Gets or sets the max opacity to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarMaxOpacity?: number | string;
    /**
     * Gets or sets the corner radius to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarCornerRadius?: number | string;
    /**
     * Gets or sets the width to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarWidth?: number | string;
    /**
     * Gets or sets the inset distance to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarInset?: number | string;
    /**
     * Gets or sets the track start inset to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarTrackStartInset?: number | string;
    /**
     * Gets or sets the track end inset to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarTrackEndInset?: number | string;
    /**
     * Gets or sets whether to use automatic track insets for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarShouldAddAutoTrackInsets?: boolean | string;
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
    */
    windowRectMinWidth?: number | string;
    /**
     * Sets or gets the minimum height that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
    */
    windowRectMinHeight?: number | string;
    /**
     * Sets or gets minimum pixel width that the window is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property is overridden by the WindowRectMinWidth property
    */
    windowSizeMinWidth?: number | string;
    /**
     * Sets or gets minimum pixel height that the window is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property is overridden by the WindowRectMinHeight property
    */
    windowSizeMinHeight?: number | string;
    /**
 * Event raised when a series is initialized and added to this chart.
*
* `SeriesAdded` event raised when a series is initialized and added to this chart.
*
* ````ts
*  <IgrCategoryChart
* 	width="100%"
* 	height="100%"
* 	chartType="Line"
* 	markerTypes={this.state.markersTypes}
* 	dataSource={this.categoryData}
* 	seriesAdded={this.CategoryChart_SeriesAdded}/>
* ``
*
* ```ts
* CategoryChart_SeriesAdded(sender:any ,aregs:ChartSeriesEventArgs)
* {
* }
* ````
*/
    seriesAdded?: (s: IgrDomainChart, e: IgrChartSeriesEventArgs) => void;
    /**
     * Event raised when a series is removed from this chart.
    *
    * `SeriesRemoved` event raised when a series is removed from this chart.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesRemoved={this.CategoryChart_seriesRemoved}/>
    * ```
    *
    * ```ts
    *  CategoryChart_seriesRemoved(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ```
    */
    seriesRemoved?: (s: IgrDomainChart, e: IgrChartSeriesEventArgs) => void;
    /**
     * Occurs when the pointer enters a Series.
    *
    * `SeriesPointerEnter` event raised when the pointer enters a Series.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesPointerEnter={this.CategoryChart_seriesPointerDown}/>
    * ```
    *
    * ```ts
    * CategoryChart_seriesPointerEnter(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ```
    */
    seriesPointerEnter?: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    /**
     * Occurs when the pointer leaves a Series.
    *
    * `SeriesPointerLeave` event raised when the pointer leaves a Series.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesPointerLeave={this.CategoryChart_seriesPointerLeave}/>
    * ```
    *
    * ```ts
    * CategoryChart_seriesPointerLeave(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ```
    */
    seriesPointerLeave?: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    /**
     * Occurs when the pointer moves over a Series.
    *
    * `SeriesPointerMove` event raised when the pointer moves over a Series.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesPointerMove={this.CategoryChart_seriesPointerMove}/>
    * ```
    *
    * ```ts
    *  CategoryChart_seriesPointerMove(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ```
    */
    seriesPointerMove?: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    /**
     * Occurs when the pointer is pressed down over a Series.
    *
    * `SeriesPointerDown` event raised when the pointer is pressed down over a Series
    *
    * ````ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesPointerDown={this.CategoryChart_seriesPointerDown}/>
    * ``
    *
    * ```ts
    * CategoryChart_seriesPointerDown(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ````
    */
    seriesPointerDown?: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    /**
     * Occurs when the pointer is released over a Series.
    *
    * `SeriesPointerUp` event raised when the pointer is released over a Series.
    *
    * ```ts
    *  <IgrCategoryChart
    * 	width="100%"
    * 	height="100%"
    * 	chartType="Line"
    * 	markerTypes={this.state.markersTypes}
    * 	dataSource={this.categoryData}
    * 	seriesPointerUp={this.CategoryChart_seriesPointerUp}/>
    * ```
    *
    * ```ts
    *  CategoryChart_seriesPointerUp(sender: any , aregs: ChartSeriesEventArgs)
    *   {
    *
    *   }
    * ```
    */
    seriesPointerUp?: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    /**
     * Occurs when the pointer is clicked over a series.
    */
    seriesClick?: (s: IgrDomainChart, e: IgrDomainChartSeriesPointerEventArgs) => void;
    /**
     * Occurs when the pointer enters the plot area.
    */
    plotAreaPointerEnter?: (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void;
    /**
     * Occurs when the pointer leaves the plot area.
    */
    plotAreaPointerLeave?: (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void;
    /**
     * Occurs when the pointer is over the plot area.
    */
    plotAreaPointerMove?: (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void;
    /**
     * Occurs when the pointer is pressed down over the plot area.
    */
    plotAreaPointerDown?: (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void;
    /**
     * Occurs when the pointer is released over the plot area.
    */
    plotAreaPointerUp?: (s: IgrDomainChart, e: IgrDomainChartPlotAreaPointerEventArgs) => void;
    /**
     * Occurs when the style of a callout is updated.
    */
    calloutStyleUpdating?: (s: IgrDomainChart, e: IgrCalloutStyleUpdatingEventArgs) => void;
    /**
     * Occurs when the style of a callout is updated.
    */
    calloutRenderStyleUpdating?: (s: IgrDomainChart, e: IgrCalloutRenderStyleUpdatingEventArgs) => void;
    selectedSeriesItemsChanged?: (s: IgrDomainChart, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    focusedSeriesItemsChanged?: (s: IgrDomainChart, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    filterStringErrorsParsing?: (s: IgrDomainChart, e: IgrFilterStringErrorsParsingEventArgs) => void;
}
