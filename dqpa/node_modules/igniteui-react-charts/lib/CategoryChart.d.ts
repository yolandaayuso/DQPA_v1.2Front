import { XYChart } from "./XYChart";
import { IEnumerable, Type } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { CategoryChartType } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { BrushCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { Series } from "./Series";
import { XamDataChart } from "./XamDataChart";
import { Axis } from "./Axis";
import { MarkerType } from "./MarkerType";
import { DataSeries } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
/**
 * @hidden
 */
export declare class CategoryChart extends XYChart {
    static $t: Type;
    protected u5(): void;
    protected u7(a: Series, b: number): void;
    protected vx(a: string, b: any, c: any): void;
    private ajk;
    get ajn(): number;
    set ajn(a: number);
    private ajl;
    get ajo(): number;
    set ajo(a: number);
    private ahn;
    get ahp(): (time: number) => number;
    set ahp(a: (time: number) => number);
    private aho;
    get ahq(): (time: number) => number;
    set ahq(a: (time: number) => number);
    aju(): string;
    protected u0(a: XamDataChart, b: any): void;
    protected u6(a: Series, b: number): void;
    private ahd;
    private ahh;
    protected ug(): void;
    protected afb(a: Axis): void;
    protected ae9(a: Axis): void;
    protected get_cb(): DomainType;
    get cb(): DomainType;
    private ag7;
    get ag8(): CategoryChartType;
    set ag8(a: CategoryChartType);
    private ag9;
    get aha(): CategorySeriesMarkerCollisionAvoidance;
    set aha(a: CategorySeriesMarkerCollisionAvoidance);
    private aht;
    get ah4(): boolean;
    set ah4(a: boolean);
    private ahu;
    get ah5(): boolean;
    set ah5(a: boolean);
    private ahb;
    get ahc(): CategoryTransitionInMode;
    set ahc(a: CategoryTransitionInMode);
    private ahl;
    get ahm(): TransitionInSpeedType;
    set ahm(a: TransitionInSpeedType);
    private aih;
    get ai4(): number;
    set ai4(a: number);
    private aik;
    get ai7(): number;
    set ai7(a: number);
    private aig;
    get ai3(): number;
    set ai3(a: number);
    private aij;
    get ai6(): number;
    set ai6(a: number);
    private aii;
    get ai5(): number;
    set ai5(a: number);
    private ail;
    get ai8(): number;
    set ai8(a: number);
    private air;
    get ajg(): number;
    set ajg(a: number);
    private ag3;
    get ag4(): AutoMarginsAndAngleUpdateMode;
    set ag4(a: AutoMarginsAndAngleUpdateMode);
    private ahv;
    ak0(): void;
    get ah6(): boolean;
    set ah6(a: boolean);
    protected static readonly aj3: string;
    private ahw;
    get ah7(): boolean;
    set ah7(a: boolean);
    private aie;
    get aiv(): number;
    set aiv(a: number);
    private aif;
    get aiw(): number;
    set aiw(a: number);
    private ah0;
    get aib(): boolean;
    set aib(a: boolean);
    private static readonly aka;
    private ahx;
    get ah8(): boolean;
    set ah8(a: boolean);
    private static readonly ako;
    private ahz;
    get aia(): boolean;
    set aia(a: boolean);
    private ag5;
    get ag6(): AxisRangeBufferMode;
    set ag6(a: AxisRangeBufferMode);
    private ah1;
    get aic(): boolean;
    set aic(a: boolean);
    private ajm;
    get ajp(): number;
    set ajp(a: number);
    private ait;
    get aji(): number;
    set aji(a: number);
    private ais;
    get ajh(): number;
    set ajh(a: number);
    private aiu;
    get ajj(): number;
    set ajj(a: number);
    get ai2(): number;
    get ai1(): number;
    aiy(): number;
    ai0(): number;
    aix(): number;
    aiz(): number;
    get ajf(): number;
    get aje(): number;
    private agz;
    get ag1(): BrushCollection;
    set ag1(a: BrushCollection);
    private ag0;
    get ag2(): BrushCollection;
    set ag2(a: BrushCollection);
    private ahy;
    get ah9(): boolean;
    set ah9(a: boolean);
    private aim;
    get ai9(): number;
    set ai9(a: number);
    private ain;
    get aja(): number;
    set aja(a: number);
    private aio;
    get ajb(): number;
    set ajb(a: number);
    private aip;
    get ajc(): number;
    set ajc(a: number);
    private aiq;
    get ajd(): number;
    set ajd(a: number);
    private ahr;
    get ah2(): boolean;
    set ah2(a: boolean);
    private ahs;
    get ah3(): boolean;
    set ah3(a: boolean);
    constructor();
    protected get_hx(): List$1<DataSeriesType>;
    protected get hx(): List$1<DataSeriesType>;
    private aid;
    protected h3(): IEnumerable;
    protected c1(a: Series): MarkerType;
    protected c3(a: Series): MarkerType;
    protected get_hh(): boolean;
    private aky;
    private akz;
    protected wp(): void;
    private _xAxis;
    private get xAxis();
    private set xAxis(value);
    private _yAxis;
    private get yAxis();
    private set yAxis(value);
    private ahg;
    private ahf;
    protected be(a: DataSeries): DataSeriesType;
    protected dc(a: DataSeries, b: DataSeriesType): Series;
    protected wn(a: DataSeries): void;
    protected wq(): void;
    protected get_hw(): List$1<IDataSeriesAdapterRule>;
    protected get hw(): List$1<IDataSeriesAdapterRule>;
    protected ua(a: Series, b: number): void;
    private akw;
    private akx;
    protected z2(): Axis;
    protected z3(): Axis;
    private ahj;
    private ahk;
    protected ht(a: string, b: boolean): List$1<Series>;
    protected ba(): ComputedPlotAreaMarginMode;
    protected wu(a: Series, b: Series, c: DataSeries): void;
    protected g1(): boolean;
    protected get_g8(): boolean;
    protected vu(a: string, b: any, c: any): void;
}
