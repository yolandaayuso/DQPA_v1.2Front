import { AnnotationLayer } from "./AnnotationLayer";
import { Axis } from "./Axis";
import { DataToolTipLayerGroupingMode } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Point, Type } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { DataTooltipGroupedPositionX } from "igniteui-react-core";
import { DataTooltipGroupedPositionY } from "igniteui-react-core";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { DataLegendLayoutMode } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { IDataLegend } from "igniteui-react-core";
import { Frame } from "./Frame";
import { Pool$1 } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class DataToolTipLayer extends AnnotationLayer {
    static $t: Type;
    protected bj(): Series;
    protected get_er(): boolean;
    constructor();
    protected cs(): SeriesView;
    q1(a: SeriesView): void;
    protected aar: DataToolTipLayerView;
    protected get_e2(): boolean;
    z6: Axis;
    abo: boolean;
    aap: DataToolTipLayerGroupingMode;
    private aan;
    get aao(): DataToolTipLayerGroupingMode;
    set aao(a: DataToolTipLayerGroupingMode);
    private aaq;
    protected q9(a: any, b: string, c: any, d: any): void;
    private abs;
    private abt;
    private afg;
    afk(a: string, b: any): void;
    private afh;
    protected yo(a: Axis, b: boolean): void;
    protected yp(a: Series, b: boolean): void;
    protected yr(a: Frame, b: SeriesView): void;
    private abu;
    private z5;
    private aas;
    p7(): void;
    p8(): void;
    get ahq(): Rect;
    get ahp(): Rect;
    get aho(): Rect;
    get ahs(): Rect;
    private ahr;
    private abk;
    private abh;
    private abi;
    private abj;
    private acn;
    private acl;
    private acm;
    private acw;
    private acu;
    private acv;
    private acq;
    private aco;
    private acp;
    private ab6;
    private ab8;
    private ab7;
    private acf;
    private ach;
    private acg;
    private acc;
    private ace;
    private acd;
    private ab2;
    private ab9;
    private aca;
    private acb;
    private ab3;
    private ab4;
    private ab5;
    private ack;
    private acj;
    private aci;
    private act;
    private acs;
    private acr;
    private ab1;
    private ahn;
    private ab0;
    private abz;
    private z0;
    private zz;
    private abl;
    private abm;
    private aff;
    private abe;
    private afj;
    private afi;
    private acz;
    protected yu(a: Frame, b: SeriesView): void;
    protected ga(): boolean;
    abx: number;
    aby: number;
    abv: number;
    abw: number;
    aah: DataTooltipGroupedPositionX;
    private aaf;
    get aag(): DataTooltipGroupedPositionX;
    set aag(a: DataTooltipGroupedPositionX);
    private aai;
    aal: DataTooltipGroupedPositionY;
    private aaj;
    get aak(): DataTooltipGroupedPositionY;
    set aak(a: DataTooltipGroupedPositionY);
    private aam;
    abn: boolean;
    z3: string[];
    zy: string[];
    z2: string[];
    zx: string[];
    z7: DataAbbreviationMode;
    acx: number;
    acy: number;
    aae: DataLegendValueMode;
    aey: string;
    abp: boolean;
    ae4: string;
    z4: any[];
    ah3: Thickness;
    abq: boolean;
    afd: string;
    abr: boolean;
    ah4: Thickness;
    ahm: Brush;
    private aa3;
    get abd(): FontInfo;
    set abd(a: FontInfo);
    adl: string;
    z1: any[];
    adh: string;
    z8: DataLegendHeaderDateMode;
    z9: DataLegendHeaderTimeMode;
    adq: string;
    ahe: Brush;
    ahx: Thickness;
    ahw: Thickness;
    abg: boolean;
    private aav;
    get aa5(): FontInfo;
    set aa5(a: FontInfo);
    abf: boolean;
    ahd: Brush;
    ahv: Thickness;
    ahu: Thickness;
    private aau;
    get aa4(): FontInfo;
    set aa4(a: FontInfo);
    ahh: Brush;
    private aay;
    get aa8(): FontInfo;
    set aa8(a: FontInfo);
    aac: DataLegendSummaryType;
    aea: string;
    ah0: Thickness;
    ahz: Thickness;
    ahj: Brush;
    private aa0;
    get aba(): FontInfo;
    set aba(a: FontInfo);
    ad5: string;
    ahg: Brush;
    private aax;
    get aa7(): FontInfo;
    set aa7(a: FontInfo);
    aeg: string;
    ahi: Brush;
    private aaz;
    get aa9(): FontInfo;
    set aa9(a: FontInfo);
    aht: Thickness;
    aat: LegendItemBadgeShape;
    aab: DataLegendLayoutMode;
    aad: DataLegendUnitsMode;
    aer: string;
    ahl: Brush;
    ah2: Thickness;
    private aa2;
    get abc(): FontInfo;
    set abc(a: FontInfo);
    ah1: Thickness;
    ahk: Brush;
    private aa1;
    get abb(): FontInfo;
    set abb(a: FontInfo);
    aaa: DataLegendLabelMode;
    ahf: Brush;
    ahy: Thickness;
    private aaw;
    get aa6(): FontInfo;
    set aa6(a: FontInfo);
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class DataToolTipLayerView extends AnnotationLayerView {
    static $t: Type;
    constructor(a: DataToolTipLayer);
    b9: Pool$1<any>;
    ak(): void;
    protected cc: List$1<PointerTooltip>;
    private cd;
    private cf;
    private ch;
    private cg;
    protected b7: DataToolTipLayer;
    private ca;
    au(): void;
    private _htmlTest;
    protected get htmlTest(): any;
    protected set htmlTest(a: any);
    cb(a: any, b: Series): boolean;
    cq(a: any): Size;
    cp(): Rect;
    co(): Rect;
    cn(): Rect;
    cm(a: Point): Point;
    ck(a: any, b: number, c: number, d: number, e: number): void;
    cr(): Size;
    ci(a: any): void;
    cl(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    an(a: any): void;
    b8(a: any): IDataLegend;
    cj(a: boolean): void;
}
