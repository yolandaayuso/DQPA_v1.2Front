import { Base, Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class FinancialChartRangeSelectorVisualData extends Base {
    static $t: Type;
    private _visibility;
    get visibility(): string;
    set visibility(a: string);
    private _buttonVisibilities;
    get buttonVisibilities(): boolean[];
    set buttonVisibilities(a: boolean[]);
    private _buttonLabels;
    get buttonLabels(): string[];
    set buttonLabels(a: string[]);
    private _buttonsChecked;
    get buttonsChecked(): boolean[];
    set buttonsChecked(a: boolean[]);
    private _buttonLefts;
    get buttonLefts(): number[];
    set buttonLefts(a: number[]);
    private _buttonTops;
    get buttonTops(): number[];
    set buttonTops(a: number[]);
    private _buttonWidths;
    get buttonWidths(): number[];
    set buttonWidths(a: number[]);
    private _buttonHeights;
    get buttonHeights(): number[];
    set buttonHeights(a: number[]);
    private _left;
    get left(): number;
    set left(a: number);
    private _top;
    get top(): number;
    set top(a: number);
    private _width;
    get width(): number;
    set width(a: number);
    private _height;
    get height(): number;
    set height(a: number);
    serialize(): string;
}
/**
 * @hidden
 */
export declare class FinancialChartEnumPickerVisualData extends Base {
    static $t: Type;
    a: string[];
    g: string;
    d: number;
    e: number;
    f: number;
    c: number;
    b: boolean;
    h(): string;
}
/**
 * @hidden
 */
export declare class FinancialChartToolbarVisualData extends Base {
    static $t: Type;
    private _chartTypePicker;
    get chartTypePicker(): FinancialChartEnumPickerVisualData;
    set chartTypePicker(a: FinancialChartEnumPickerVisualData);
    private _rangeSelector;
    get rangeSelector(): FinancialChartRangeSelectorVisualData;
    set rangeSelector(a: FinancialChartRangeSelectorVisualData);
    serialize(): string;
}
/**
 * @hidden
 */
export declare class FinancialChartVisualData extends Base {
    static $t: Type;
    constructor();
    private _mainChart;
    get mainChart(): any;
    set mainChart(a: any);
    private _volumeChart;
    get volumeChart(): any;
    set volumeChart(a: any);
    private _indicatorCharts;
    get indicatorCharts(): List$1<any>;
    set indicatorCharts(a: List$1<any>);
    private _toolbar;
    get toolbar(): FinancialChartToolbarVisualData;
    set toolbar(a: FinancialChartToolbarVisualData);
    private _zoomChart;
    get zoomChart(): any;
    set zoomChart(a: any);
    private _mainChartLeft;
    get mainChartLeft(): number;
    set mainChartLeft(a: number);
    private _mainChartTop;
    get mainChartTop(): number;
    set mainChartTop(a: number);
    private _volumeChartLeft;
    get volumeChartLeft(): number;
    set volumeChartLeft(a: number);
    private _volumeChartTop;
    get volumeChartTop(): number;
    set volumeChartTop(a: number);
    private _indicatorChartLefts;
    get indicatorChartLefts(): List$1<number>;
    set indicatorChartLefts(a: List$1<number>);
    private _indicatorChartTops;
    get indicatorChartTops(): List$1<number>;
    set indicatorChartTops(a: List$1<number>);
    private _zoomChartLeft;
    get zoomChartLeft(): number;
    set zoomChartLeft(a: number);
    private _zoomChartTop;
    get zoomChartTop(): number;
    set zoomChartTop(a: number);
    private _toolbarLeft;
    get toolbarLeft(): number;
    set toolbarLeft(a: number);
    private _toolbarTop;
    get toolbarTop(): number;
    set toolbarTop(a: number);
    private _toolbarWidth;
    get toolbarWidth(): number;
    set toolbarWidth(a: number);
    private _toolbarHeight;
    get toolbarHeight(): number;
    set toolbarHeight(a: number);
    private _legendLeft;
    get legendLeft(): number;
    set legendLeft(a: number);
    private _legendTop;
    get legendTop(): number;
    set legendTop(a: number);
    private _legendWidth;
    get legendWidth(): number;
    set legendWidth(a: number);
    private _legendHeight;
    get legendHeight(): number;
    set legendHeight(a: number);
    private _legend;
    get legend(): any;
    set legend(a: any);
    private ab;
    scaleByViewport(): void;
    private w;
    serialize(): string;
    static y(a: string[], b: any[]): string;
    private static aa;
    private static z;
}
