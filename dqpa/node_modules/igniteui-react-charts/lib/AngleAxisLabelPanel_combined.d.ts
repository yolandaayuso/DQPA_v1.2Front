import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
import { Point, Type, IList$1 } from "igniteui-react-core";
import { AxisLabelPanelBaseView } from "./AxisLabelPanelBaseView";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { List$1 } from "igniteui-react-core";
import { AxisAngleLabelMode } from "./AxisAngleLabelMode";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IAngleScaler } from "./IAngleScaler";
import { CategoryAxisRenderer } from "./CategoryAxisRenderer";
import { DependencyProperty } from "igniteui-react-core";
import { AxisOrientation } from "./AxisOrientation";
import { AxisView } from "./AxisView";
import { PolarAxisRenderingManager } from "./PolarAxisRenderingManager";
import { AxisRenderingParametersBase } from "./AxisRenderingParametersBase";
import { ScalerParams } from "./ScalerParams";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { Geometry } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { NumericAxisRenderer } from "./NumericAxisRenderer";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { GeometryGroup } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
export declare class AngleAxisLabelPanel extends AxisLabelPanelBase {
    static $t: Type;
    ae(): AxisLabelPanelBaseView;
    ch(a: AxisLabelPanelBaseView): void;
    c9: AngleAxisLabelPanelView;
    constructor();
    da: boolean;
    di: (arg1: number, arg2: number, arg3: number) => Point;
    at(a: number, b: Rect): boolean;
    df: number;
    dc: number;
    de: number;
    dd: number;
    db: number;
    a5(): List$1<Rect>;
    private dk;
    private dj;
    private dh;
    private dg;
    ai(): AxisLabelsLocation;
    ay(a: AxisLabelsLocation): boolean;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxis extends CategoryAxisBase implements IAngleScaler {
    static $t: Type;
    a4(): AxisView;
    hv(a: AxisView): void;
    mo: CategoryAngleAxisView;
    protected get_b9(): boolean;
    private mt;
    constructor();
    av(): AxisLabelPanelBase;
    mq: CategoryAxisRenderer;
    private mu;
    protected mx(a: number): boolean;
    protected nk(): string;
    private nd;
    private m1;
    private mp;
    protected my(a: number): boolean;
    private nx;
    private nw;
    m5(): number;
    mn(a: Rect, b: Rect, c: Rect, d: Rect): AxisRenderingParametersBase;
    private nh;
    getMinMaxAngle(a: Rect, b: Rect, c: Rect, d: number, e: number): {
        p3: number;
        p4: number;
    };
    ac(): void;
    private mr;
    get ms(): NumericRadiusAxis;
    set ms(a: NumericRadiusAxis);
    ak(): Axis;
    ne: number;
    protected m2: number;
    ml: AxisAngleLabelMode;
    mm(): AxisAngleLabelMode;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    protected get_mv(): boolean;
    get mv(): boolean;
    m7(a: number, b: Rect, c: Rect, d: Rect): number;
    k8(a: Rect, b: Rect, c: Rect): number;
    m6(a: number, b: number, c: Rect, d: Rect, e: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    na(a: number): number;
    protected ic(a: boolean): void;
    m9(a: Rect, b: Rect, c: Rect): number;
    m8(a: Rect, b: Rect, c: Rect): number;
    getScaledAngle(a: number): number;
    getUnscaledAngle(a: number): number;
    el(a: number, b: ScalerParams): number;
    eo(a: number, b: ScalerParams): number;
    d5(a: Point): number;
    protected hz(a: any, b: string, c: any, d: any): void;
    private np;
    nr(a: NumericRadiusAxis): void;
    static readonly ns: DependencyProperty;
    get nb(): number;
    set nb(a: number);
    private mz;
    get m3(): number;
    set m3(a: number);
    ex(): number;
    static readonly nu: DependencyProperty;
    get nc(): number;
    set nc(a: number);
    private m0;
    get m4(): number;
    set m4(a: number);
    protected mw(): boolean;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    c3(): boolean;
    private nf;
    get ng(): number;
    set ng(a: number);
    j8(a: number, b: Rect, c: Rect, d: Rect, e: Rect): Geometry;
    get isVertical(): boolean;
    j$d(a: number, b: ScalerParams): number;
    j$c(a: number, b: ScalerParams): number;
    j$e(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$g(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$b(): boolean;
    j$a(): number[];
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericAngleAxis extends NumericAxisBase implements IAngleScaler {
    static $t: Type;
    a4(): AxisView;
    hv(a: AxisView): void;
    n2: NumericAngleAxisView;
    n5: PolarAxisRenderingManager;
    protected get_b9(): boolean;
    constructor();
    av(): AxisLabelPanelBase;
    n9(): number;
    private ob;
    private n6;
    private n7;
    k2(): NumericAxisRenderer;
    private ok;
    el(a: number, b: ScalerParams): number;
    getScaledAngle1(a: number, b: boolean, c: boolean): number;
    getScaledAngle(a: number): number;
    eo(a: number, b: ScalerParams): number;
    getUnscaledAngle(a: number): number;
    oc: number;
    private n8;
    n0: AxisAngleLabelMode;
    n1(): AxisAngleLabelMode;
    protected hz(a: any, b: string, c: any, d: any): void;
    private of;
    k6(): NumericAxisRenderingParameters;
    k5(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    getMinMaxAngle(a: Rect, b: Rect, c: Rect, d: number, e: number): {
        p3: number;
        p4: number;
    };
    protected ic(a: boolean): void;
    private n3;
    get n4(): NumericRadiusAxis;
    set n4(a: NumericRadiusAxis);
    ak(): Axis;
    oh(a: NumericRadiusAxis): void;
    protected is(a: Rect, b: Rect): void;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    j8(a: number, b: Rect, c: Rect, d: Rect, e: Rect): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericRadiusAxis extends NumericAxisBase {
    static $t: Type;
    a4(): AxisView;
    hv(a: AxisView): void;
    n2: NumericRadiusAxisView;
    protected get_cm(): boolean;
    ek(): number;
    private ob;
    private oa;
    private n3;
    constructor();
    av(): AxisLabelPanelBase;
    n4: boolean;
    private n8;
    private n5;
    k2(): NumericAxisRenderer;
    el(a: number, b: ScalerParams): number;
    oe(a: number, b: boolean, c: boolean, d: number, e: number): number;
    od(a: number): number;
    of(a: number): number;
    eo(a: number, b: ScalerParams): number;
    oh: number;
    n7: number;
    og: number;
    n6: number;
    protected hz(a: any, b: string, c: any, d: any): void;
    protected n9: number;
    om(a: Axis): void;
    private n0;
    get n1(): Axis;
    set n1(a: Axis);
    ak(): Axis;
    k6(): NumericAxisRenderingParameters;
    k5(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    private on;
    private oi;
    oc(): number;
    nj(a: AxisRangeChangedEventArgs): void;
    protected ic(a: boolean): void;
    protected is(a: Rect, b: Rect): void;
    ol(a: GeometryGroup, b: Rect, c: Rect, d: Rect, e: Rect): void;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    j8(a: number, b: Rect, c: Rect, d: Rect, e: Rect): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AngleAxisLabelPanelView extends AxisLabelPanelBaseView {
    static $t: Type;
    protected az: AngleAxisLabelPanel;
    constructor(a: AngleAxisLabelPanel);
    an(): void;
    a1(a: List$1<Rect>, b: List$1<boolean>): void;
    a0(a: List$1<Rect>, b: List$1<boolean>): void;
    o(): number;
    p(): number;
    q(): number;
    r(): number;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxisView extends CategoryAxisBaseView {
    static $t: Type;
    protected bm: CategoryAngleAxis;
    constructor(a: CategoryAngleAxis);
    al(): void;
}
/**
 * @hidden
 */
export declare class NumericAngleAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bm: NumericAngleAxis;
    constructor(a: NumericAngleAxis);
    al(): void;
}
/**
 * @hidden
 */
export declare class NumericRadiusAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bm: NumericRadiusAxis;
    constructor(a: NumericRadiusAxis);
    al(): void;
}
