import { UnknownValuePlotting } from "igniteui-react-core";
import { IgrHorizontalAnchoredCategorySeries, IIgrHorizontalAnchoredCategorySeriesProps } from "./igr-horizontal-anchored-category-series";
import { LineSeries } from "./LineSeries";
/**
 * Represents a IgxDataChartComponent line series.
 * Displays trend over time or ordered categories.
 * Useful when there are many data points and the order is important.
*
* `LineSeries` belongs to a group of `CategorySeries` and it is rendered using a collection of points connected by straight line segments.
*
* ```ts
* <IgrDataChart
* 	dataSource={this.data} >
* <IgrCategoryXAxis name="xAxis"
* 	label="Country" />
* <IgrNumericYAxis name="yAxis"
* 	minimumValue={0}  />
* <IgrLineSeries
* 	name="series1"
* 	xAxisName="xAxis"
* 	yAxisName="yAxis"
* 	valueMemberPath="Coal" />
*  </IgrDataChart>
* ```
*
* ```ts
* const series2 = new IgrLineSeries({ name: "series2" });
* series2.markerType = MarkerType.Circle;
* series2.valueMemberPath = "RUS";
* series2.title = "Russia";
* series2.xAxisName = "xAxis";
* series2.yAxisName = "yAxis";
* series2.thickness = 2;
* ```
*/
export declare class IgrLineSeries extends IgrHorizontalAnchoredCategorySeries<IIgrLineSeriesProps> {
    protected createImplementation(): LineSeries;
    /**
                                 * @hidden
                                 */
    get i(): LineSeries;
    constructor(props: IIgrLineSeriesProps);
    /**
     * Gets whether the current series shows only line shapes.
    */
    get isLineOnly(): boolean;
    /**
     * Gets whether the current series shows an area or line shape.
    *
    * Gets whether the `Series` shows an area or a line shape.
    *
    * ```ts
    * let isAreaOrLine: boolean = series.isAreaOrLine;
    * ```
    */
    get isAreaOrLine(): boolean;
    /**
     * Determines how unknown values will be plotted on the chart.
     * Null and Double.NaN are two examples of unknown values.
    *
    * Determines how unknown values will be plotted for the `Series`. This can be set to `LinearInterpolate` to create a continous shape or `DontPlot` to create breaks in the series.
    *
    * Null and Double.NaN are two examples of unknown values.
    *
    * ```ts
    * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;
    * ```
    *
    * ```ts
    * <IgrDataChart
    * 	dataSource={this.data} >
    * <IgrCategoryXAxis name="xAxis"
    * 	label="Country" />
    * <IgrNumericYAxis name="yAxis"
    * 	minimumValue={0}  />
    * <IgrLineSeries
    * 	name="series1"
    * 	xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Coal"
    * 	unknownValuePlotting:"LinearInterpolate"/>
    * ```
    */
    get unknownValuePlotting(): UnknownValuePlotting;
    set unknownValuePlotting(v: UnknownValuePlotting);
}
export interface IIgrLineSeriesProps extends IIgrHorizontalAnchoredCategorySeriesProps {
    /**
     * Determines how unknown values will be plotted on the chart.
     * Null and Double.NaN are two examples of unknown values.
    *
    * Determines how unknown values will be plotted for the `Series`. This can be set to `LinearInterpolate` to create a continous shape or `DontPlot` to create breaks in the series.
    *
    * Null and Double.NaN are two examples of unknown values.
    *
    * ```ts
    * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;
    * ```
    *
    * ```ts
    * <IgrDataChart
    * 	dataSource={this.data} >
    * <IgrCategoryXAxis name="xAxis"
    * 	label="Country" />
    * <IgrNumericYAxis name="yAxis"
    * 	minimumValue={0}  />
    * <IgrLineSeries
    * 	name="series1"
    * 	xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Coal"
    * 	unknownValuePlotting:"LinearInterpolate"/>
    * ```
    */
    unknownValuePlotting?: UnknownValuePlotting | string;
}
