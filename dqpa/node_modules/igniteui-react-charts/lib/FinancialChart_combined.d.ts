import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { DomWrapper } from "igniteui-react-core";
import { EventArgs, IList, Type } from "igniteui-react-core";
import { IZoomSlider } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DomainType } from "./DomainType";
import { FinancialChartVolumeType } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode } from "./FinancialChartYAxisMode";
import { FinancialChartType } from "./FinancialChartType";
import { HorizontalAlignment } from "igniteui-react-core";
import { FinancialIndicatorTypeCollection } from "./FinancialIndicatorTypeCollection";
import { FinancialOverlayTypeCollection } from "./FinancialOverlayTypeCollection";
import { FinancialChartZoomSliderType } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { IndicatorDisplayTypeCollection } from "./IndicatorDisplayTypeCollection";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { CustomIndicatorNameCollection } from "./CustomIndicatorNameCollection";
import { IChartLegend } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { Series } from "./Series";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerType } from "./MarkerType";
import { IZoomableCategoryAxis } from "./IZoomableCategoryAxis";
import { TitleSettings } from "./TitleSettings";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType } from "igniteui-react-core";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorVisualData } from "./FinancialChartRangeSelectorVisualData";
/**
 * @hidden
 */
export declare class FinancialChart extends XYChart {
    static $t: Type;
    protected vy(a: string, b: any, c: any): void;
    private apd;
    private apc;
    private ao9;
    private apm;
    private air;
    provideGrid(a: DomWrapper): void;
    onDocumentClick(a: Event): void;
    private alp;
    private aln;
    private alk;
    private alm;
    private alo;
    private all;
    getContext(): FinancialChartContext;
    provideContainer(a: any): void;
    private apx;
    private aqb;
    private aot;
    private ap9;
    setGridRows(): void;
    protected u5(): void;
    private apt;
    private apu;
    private ap3;
    private aos;
    private apj;
    protected u2(a: XamDataChart): void;
    private aqe;
    private aqh;
    private aqf;
    private aqg;
    ak1(): number;
    ve(source_: any, a: number, b: any): void;
    vf(source_: any, a: number, b: any): void;
    vd(source_: any): void;
    vh(source_: any, a: number, b: any, c: any): void;
    protected u8(a: Series, b: number): void;
    private ahx;
    private get ahy();
    private set ahy(value);
    private al7;
    get ame(): any;
    set ame(a: any);
    private al8;
    get amf(): any;
    set amf(a: any);
    private al4;
    get amb(): any;
    set amb(a: any);
    private al9;
    get amg(): any;
    set amg(a: any);
    private ama;
    get amh(): any;
    set amh(a: any);
    private al5;
    get amc(): any;
    set amc(a: any);
    private al6;
    get amd(): any;
    set amd(a: any);
    private ajf;
    get ajg(): IZoomSlider;
    set ajg(a: IZoomSlider);
    protected get_jx(): number;
    protected set_jx(a: number): void;
    protected get_g3(): boolean;
    protected set_g3(a: boolean): void;
    private akp;
    get ak6(): number;
    set ak6(a: number);
    constructor();
    protected z2(): Axis;
    protected z3(): Axis;
    onAttachedToUI(): void;
    onDetachedFromUI(): void;
    protected be(a: DataSeries): DataSeriesType;
    protected get_hx(): List$1<DataSeriesType>;
    protected get hx(): List$1<DataSeriesType>;
    protected get_hw(): List$1<IDataSeriesAdapterRule>;
    protected get hw(): List$1<IDataSeriesAdapterRule>;
    private ahk;
    private aiy;
    private ahj;
    protected ug(): void;
    protected ua(a: Series, b: number): void;
    protected c1(a: Series): MarkerType;
    protected wn(a: DataSeries): void;
    protected wq(): void;
    private ah2;
    private ah1;
    private aib;
    private ah4;
    private amq;
    private ahl;
    private aiz;
    private ai5;
    private ai6;
    private ai4;
    private ai7;
    private get ajo();
    private ail;
    private get aim();
    private get ajr();
    private aij;
    private get aik();
    private get ajp();
    private ain;
    private get aio();
    private get ajq();
    private ais;
    private get ait();
    protected dc(a: DataSeries, b: DataSeriesType): Series;
    protected wp(): void;
    protected afe(a: (arg1: Axis) => void, b: string): void;
    protected afj(a: (arg1: Axis) => void, b: boolean): void;
    protected apl(a: (arg1: IZoomableCategoryAxis) => void): void;
    protected afh(a: (arg1: TitleSettings) => void): void;
    protected afm(a: (arg1: TitleSettings) => void): void;
    protected afk(a: (arg1: AxisLabelSettings) => void): void;
    protected aff(a: (arg1: AxisLabelSettings) => void): void;
    protected u1(a: XamDataChart): void;
    private static al2;
    private ami;
    private anl;
    private ao3;
    private aop;
    private aoq;
    private aov;
    private aoy;
    private aow;
    private aox;
    private aoz;
    private alw;
    protected uq(a: (arg1: Series, arg2: number) => void): void;
    private ajb;
    private get volumeChart();
    private set volumeChart(value);
    private apo;
    private ajs;
    private ajw;
    private ajt;
    private ajv;
    private apn;
    private ai8;
    private aja;
    private ap5;
    lu(): any;
    amn(): string;
    private ai9;
    private ap4;
    private aj1;
    private ap2;
    protected uy(): void;
    protected get_ha(): boolean;
    protected get aj7(): boolean;
    private aqa;
    private app;
    protected vm(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    private ao1;
    private apy;
    private get aj6();
    private ao2;
    private ajx;
    private aps;
    private ao6;
    private apb;
    private apa;
    private ao4;
    private ao5;
    private apf;
    private api;
    private apg;
    private aor;
    private apw;
    private ap8;
    private ao7;
    private ap6;
    private aj0;
    private ape;
    private ao0;
    private ap0;
    private apz;
    private apr;
    private ao8;
    private aj8;
    private ap7;
    private aou;
    private ap1;
    protected wu(a: Series, b: Series, c: DataSeries): void;
    private amp;
    protected ae9(a: Axis): void;
    protected afb(a: Axis): void;
    private aph;
    protected u6(a: Series, b: number): void;
    protected u7(a: Series, b: number): void;
    protected vu(a: string, b: any, c: any): void;
    protected get_cb(): DomainType;
    get cb(): DomainType;
    private ajn;
    get aj5(): boolean;
    set aj5(a: boolean);
    private alv;
    get al3(): number;
    set al3(a: number);
    private akw;
    get alf(): number;
    set alf(a: number);
    private aky;
    get alh(): number;
    set alh(a: number);
    private akx;
    get alg(): number;
    set alg(a: number);
    private akz;
    get ali(): number;
    set ali(a: number);
    get ale(): number;
    get ald(): number;
    private ah3;
    get ah5(): FinancialChartVolumeType;
    set ah5(a: FinancialChartVolumeType);
    private ah6;
    get ah7(): FinancialChartXAxisMode;
    set ah7(a: FinancialChartXAxisMode);
    private akr;
    get ak8(): number;
    set ak8(a: number);
    private aku;
    get alb(): number;
    set alb(a: number);
    private aks;
    get ak9(): number;
    set ak9(a: number);
    private akt;
    get ala(): number;
    set ala(a: number);
    private akv;
    get alc(): number;
    set alc(a: number);
    private ah8;
    get ah9(): FinancialChartYAxisMode;
    set ah9(a: FinancialChartYAxisMode);
    private aji;
    get ajy(): boolean;
    set ajy(a: boolean);
    private ahz;
    get ah0(): FinancialChartType;
    set ah0(a: FinancialChartType);
    protected get_afs(): HorizontalAlignment;
    protected set_afs(a: HorizontalAlignment): void;
    private ajj;
    get ajz(): boolean;
    set ajz(a: boolean);
    private aid;
    get aie(): FinancialIndicatorTypeCollection;
    set aie(a: FinancialIndicatorTypeCollection);
    private aif;
    get aig(): FinancialOverlayTypeCollection;
    set aig(a: FinancialOverlayTypeCollection);
    private aka;
    private get indicatorCharts();
    private set indicatorCharts(value);
    private ajl;
    get aj3(): boolean;
    set aj3(a: boolean);
    protected get_j5(): number;
    protected set_j5(a: number): void;
    private static readonly any;
    private ajk;
    get aj2(): boolean;
    set aj2(a: boolean);
    private static readonly an9;
    private ajm;
    get aj4(): boolean;
    set aj4(a: boolean);
    private ajc;
    get zoomSliderChart(): XamDataChart;
    set zoomSliderChart(a: XamDataChart);
    private aix;
    private get zoomSliderAxis();
    private set zoomSliderAxis(value);
    private ahi;
    private get zoomSliderXAxis();
    private set zoomSliderXAxis(value);
    private aia;
    get aic(): FinancialChartZoomSliderType;
    set aic(a: FinancialChartZoomSliderType);
    private ag1;
    get ag9(): BrushCollection;
    set ag9(a: BrushCollection);
    private ag2;
    get aha(): BrushCollection;
    set aha(a: BrushCollection);
    private ag3;
    get ahb(): BrushCollection;
    set ahb(a: BrushCollection);
    private ag4;
    get ahc(): BrushCollection;
    set ahc(a: BrushCollection);
    private ag6;
    get ahe(): BrushCollection;
    set ahe(a: BrushCollection);
    private ag5;
    get ahd(): BrushCollection;
    set ahd(a: BrushCollection);
    private ag0;
    get ag8(): BrushCollection;
    set ag8(a: BrushCollection);
    private agz;
    get ag7(): BrushCollection;
    set ag7(a: BrushCollection);
    private akq;
    get ak7(): number;
    set ak7(a: number);
    private ako;
    get ak5(): number;
    set ak5(a: number);
    private akn;
    get ak4(): number;
    set ak4(a: number);
    private akm;
    get ak3(): number;
    set ak3(a: number);
    private aip;
    get aiq(): IndicatorDisplayTypeCollection;
    set aiq(a: IndicatorDisplayTypeCollection);
    private alr;
    get aly(): number;
    set aly(a: number);
    private akl;
    get ak2(): number;
    set ak2(a: number);
    private alu;
    get al1(): number;
    set al1(a: number);
    private als;
    get alz(): number;
    set alz(a: number);
    private alq;
    get alx(): number;
    set alx(a: number);
    private alt;
    get al0(): number;
    set al0(a: number);
    private ahu;
    get ahw(): FinancialChartRangeSelectorOptionCollection;
    set ahw(a: FinancialChartRangeSelectorOptionCollection);
    ahv: FinancialChartRangeSelectorOptionCollection;
    private ahq;
    get customIndicatorNames(): CustomIndicatorNameCollection;
    set customIndicatorNames(a: CustomIndicatorNameCollection);
    applyCustomIndicators: (sender: any, e: FinancialChartCustomIndicatorArgs) => void;
    protected get_hb(): boolean;
    protected set_hb(a: boolean): void;
    private aqc;
    get aqd(): Brush;
    set aqd(a: Brush);
    private ak0;
    get alj(): number;
    set alj(a: number);
    private ajh;
    get aju(): boolean;
    set aju(a: boolean);
    private aih;
    get aii(): IChartLegend;
    set aii(a: IChartLegend);
    private ahh;
    private get xAxis();
    private set xAxis(value);
    private aiw;
    private get yAxis();
    private set yAxis(value);
    private aiv;
    private get volumeAxis();
    private set volumeAxis(value);
    private ahg;
    private get volumeXAxis();
    private set volumeXAxis(value);
    private aiu;
    private get indicatorAxis();
    private set indicatorAxis(value);
    private ahf;
    private get indicatorXAxis();
    private set indicatorXAxis(value);
    private aj9;
    private get akc();
    private set akc(value);
    private akb;
    private get ake();
    private set ake(value);
    private aki;
    get akk(): Date;
    set akk(a: Date);
    private akh;
    get akj(): Date;
    set akj(a: Date);
    private akf;
    get xAxisBreaks(): ObservableCollection$1<any>;
}
/**
 * @hidden
 */
export declare class FinancialChartToolbar extends TemplatedHtmlControl {
    static $t: Type;
    bg(a: DomWrapper): void;
    bl(a: Event): void;
    private o;
    constructor(a: FinancialChart, b: any);
    private r;
    get s(): FinancialChartRangeSelector;
    set s(a: FinancialChartRangeSelector);
    private z;
    get aa(): FinancialChartTypePicker;
    set aa(a: FinancialChartTypePicker);
    private p;
    get q(): FinancialChartIndicatorMenu;
    set q(a: FinancialChartIndicatorMenu);
    private bm;
    private bh;
    private bi;
    private bj;
    w: FinancialChartToolbarViewModel;
    v(): FinancialChartToolbarContext;
    l(a: any): void;
    private bk;
    private aq;
    get au(): Date;
    set au(a: Date);
    private ap;
    get at(): Date;
    set at(a: Date);
    private ao;
    get as(): Date;
    set as(a: Date);
    private an;
    get ar(): Date;
    set ar(a: Date);
    rangeChanged: (sender: any, e: EventArgs) => void;
    chartTypeChanged: (sender: any, e: EventArgs) => void;
    trendLineTypeChanged: (sender: any, e: EventArgs) => void;
    volumeTypeChanged: (sender: any, e: EventArgs) => void;
    indicatorTypesChanged: (sender: any, e: EventArgs) => void;
    overlayTypesChanged: (sender: any, e: EventArgs) => void;
    bn(): void;
    private x;
    get y(): FinancialChartType;
    set y(a: FinancialChartType);
    private ah;
    get ai(): TrendLineType;
    set ai(a: TrendLineType);
    private ab;
    get ac(): FinancialChartVolumeType;
    set ac(a: FinancialChartVolumeType);
    private ad;
    get ae(): FinancialIndicatorTypeCollection;
    set ae(a: FinancialIndicatorTypeCollection);
    private af;
    get ag(): FinancialOverlayTypeCollection;
    set ag(a: FinancialOverlayTypeCollection);
    static am(a: IList, b: IList): boolean;
    aj(): FinancialChartToolbarVisualData;
    private t;
    get u(): FinancialChartRangeSelectorOptionCollection;
    set u(a: FinancialChartRangeSelectorOptionCollection);
    private ak;
    get al(): boolean;
    set al(a: boolean);
}
/**
 * @hidden
 */
export declare class FinancialChartRangeSelector extends TemplatedHtmlControl {
    static $t: Type;
    private static x;
    q: FinancialChartRangeSelectorViewModel;
    get v(): Date;
    set v(a: Date);
    get u(): Date;
    set u(a: Date);
    get t(): Date;
    set t(a: Date);
    get s(): Date;
    set s(a: Date);
    ab(): void;
    constructor(a: any);
    l(a: any): void;
    private z;
    rangeChanged: (sender: any, e: EventArgs) => void;
    r(): FinancialChartRangeSelectorVisualData;
    get o(): FinancialChartRangeSelectorOptionCollection;
    set o(a: FinancialChartRangeSelectorOptionCollection);
    private aa;
    private p;
}
