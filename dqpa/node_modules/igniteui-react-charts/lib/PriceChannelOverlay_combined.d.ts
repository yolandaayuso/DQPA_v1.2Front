import { FinancialOverlay } from "./FinancialOverlay";
import { Series } from "./Series";
import { List$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { Rect } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { Polyline } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class PriceChannelOverlay extends FinancialOverlay {
    static $t: Type;
    protected bj(): Series;
    constructor();
    aa8: number;
    protected q9(a: any, b: string, c: any, d: any): void;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    protected aa1(): boolean;
    aac(a: CategoryFrame, b: FinancialSeriesView): void;
    o5(a: boolean, b: SeriesView): void;
    aae(a: CategoryFrame, b: FinancialSeriesView): void;
    aa7: List$1<number>;
    aa6: List$1<number>;
    protected cs(): SeriesView;
    q1(a: SeriesView): void;
    private aa5;
    i5(a: Point, b: boolean, c: boolean): number;
    j8(a: Point, b: boolean): number;
    ka(a: Point, b: boolean): number;
    iy(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PriceChannelBucketCalculator extends FinancialBucketCalculator {
    static $t: Type;
    constructor(a: FinancialSeriesView);
    protected f: PriceChannelOverlayView;
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class PriceChannelOverlayView extends FinancialSeriesView {
    static $t: Type;
    private cb;
    private cg;
    private ch;
    get ca(): Polygon;
    get ce(): Polyline;
    get cf(): Polyline;
    b6: PriceChannelOverlay;
    constructor(a: PriceChannelOverlay);
    au(): void;
    protected b1(): FinancialBucketCalculator;
    b7(): void;
    b8(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: (arg1: number) => number, e: (arg1: number) => number): void;
    private b9;
    private cc;
    private cd;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    an(a: any): void;
}
