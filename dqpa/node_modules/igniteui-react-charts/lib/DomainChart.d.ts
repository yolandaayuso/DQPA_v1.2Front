import { Base, INotifyPropertyChanged, Type, IEnumerable, PropertyChangedEventArgs, Point } from "igniteui-react-core";
import { IDataLegendTarget } from "igniteui-react-core";
import { IToolbarTarget } from "igniteui-react-core";
import { IDomainChartLike } from "./IDomainChartLike";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { IDomainChartWidget } from "./IDomainChartWidget";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesAdapterImplementation } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { IAnnotationLayerProxy } from "./IAnnotationLayerProxy";
import { Color } from "igniteui-react-core";
import { IDomainChartToolbarProvider } from "./IDomainChartToolbarProvider";
import { ToolCommand } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode } from "igniteui-react-core";
import { DataTooltipGroupedPositionX } from "igniteui-react-core";
import { DataTooltipGroupedPositionY } from "igniteui-react-core";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { SeriesSelectionMode } from "./SeriesSelectionMode";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { ChartSelectedItemCollection } from "./ChartSelectedItemCollection";
import { FilterStringErrorsParsingEventArgs } from "./FilterStringErrorsParsingEventArgs";
import { BrushCollection } from "igniteui-react-core";
import { IChartLegend } from "igniteui-react-core";
import { SeriesHighlightedValuesDisplayMode } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { MarkerTypeCollection } from "./MarkerTypeCollection";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { TrendLineType } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeMode } from "igniteui-react-core";
import { ToolTipType } from "./ToolTipType";
import { CrosshairsDisplayMode } from "./CrosshairsDisplayMode";
import { CalloutCollisionMode } from "igniteui-react-core";
import { CalloutPlacementPositionsCollection } from "./CalloutPlacementPositionsCollection";
import { ValueModeCollection } from "./ValueModeCollection";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { Series } from "./Series";
import { DataSeries } from "igniteui-react-core";
import { IDataLegend } from "igniteui-react-core";
import { ICommandStateChangedListener } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ObservableColorCollection } from "igniteui-react-core";
import { DataSeriesMarker } from "igniteui-react-core";
import { IDataLegendSeries } from "igniteui-react-core";
import { ToolActionInfo } from "igniteui-react-core";
import { IToolbarContextAccessor } from "igniteui-react-core";
import { ToolCommandExecutionState } from "igniteui-react-core";
import { ICommandAvailabilityListener } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { DomainChartPlotAreaPointerEventArgs } from "./DomainChartPlotAreaPointerEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
import { CalloutRenderStyleUpdatingEventArgs } from "./CalloutRenderStyleUpdatingEventArgs";
import { SeriesViewerSelectedSeriesItemsChangedEventArgs } from "./SeriesViewerSelectedSeriesItemsChangedEventArgs";
/**
 * @hidden
 */
export declare abstract class DomainChart extends Base implements INotifyPropertyChanged, IDataLegendTarget, IToolbarTarget, IDomainChartLike {
    static $t: Type;
    protected lt: any;
    provideContainer(a: any): void;
    destroy(): void;
    private u4;
    protected u5(): void;
    protected u1(a: XamDataChart): void;
    protected uy(): void;
    protected u7(a: Series, b: number): void;
    protected vx(a: string, b: any, c: any): void;
    private lq;
    get tooltipTemplate(): any;
    set tooltipTemplate(a: any);
    private hr;
    get tooltipTemplates(): List$1<any>;
    set tooltipTemplates(a: List$1<any>);
    private io;
    get j0(): number;
    set j0(a: number);
    private lp;
    private get toolTip();
    private set toolTip(value);
    private i1;
    get kd(): number;
    set kd(a: number);
    private i2;
    get ke(): number;
    set ke(a: number);
    private i3;
    get kf(): number;
    set kf(a: number);
    private i0;
    get kc(): number;
    set kc(a: number);
    private iw;
    get j8(): number;
    set j8(a: number);
    private iy;
    get ka(): number;
    set ka(a: number);
    private ix;
    get j9(): number;
    set j9(a: number);
    private iv;
    get j7(): number;
    set j7(a: number);
    private xx;
    get yy(): Brush;
    set yy(a: Brush);
    private xy;
    get yz(): Brush;
    set yz(a: Brush);
    private ik;
    protected get_jx(): number;
    protected set_jx(a: number): void;
    get jx(): number;
    set jx(a: number);
    private i4;
    get kg(): number;
    set kg(a: number);
    private iu;
    get j6(): number;
    set j6(a: number);
    private h5;
    get jj(): number;
    set jj(a: number);
    private k7;
    get lj(): number;
    set lj(a: number);
    private er;
    get es(): (time: number) => number;
    set es(a: (time: number) => number);
    private k3;
    get lg(): number;
    set lg(a: number);
    private k5;
    get li(): number;
    set li(a: number);
    private k2;
    get lf(): number;
    set lf(a: number);
    protected u2(a: XamDataChart): void;
    protected u8(a: Series, b: number): void;
    protected uz(): void;
    private u9;
    ku: (arg1: HTMLElement) => any[];
    private wy;
    private lv;
    private hc;
    private kv;
    protected vy(a: string, b: any, c: any): void;
    private ck;
    get cl(): IDomainChartWidget;
    set cl(a: IDomainChartWidget);
    private mq;
    get sv(): string;
    set sv(a: string);
    private ms;
    get s6(): string;
    set s6(a: string);
    private ee;
    get dataChart(): XamDataChart;
    set dataChart(a: XamDataChart);
    bf: DataSeriesAdapterImplementation;
    get currentDataAdapter(): DataSeriesAdapterImplementation;
    private fz;
    private fh;
    sendCommandCompleted(a: ToolCommand): void;
    captureTargetImageToClipboard(a: (arg1: any, arg2: any) => void): void;
    private vr;
    bg: DataSeriesAdapterImplementation;
    private f3;
    private f2;
    get isDetached(): boolean;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    protected u3(): void;
    private ww;
    private wv;
    private wx;
    bh(a: boolean): DataSeriesAdapterImplementation;
    protected abstract get hx(): List$1<DataSeriesType>;
    protected abstract get hw(): List$1<IDataSeriesAdapterRule>;
    protected hv: List$1<MarkerType>;
    protected g7(a: DataSeriesType): boolean;
    notifyResized(): void;
    vi(): void;
    un(): void;
    uw(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected wb(a: string): void;
    protected abstract uo(a: (arg1: Axis) => void, b: boolean): void;
    protected up(a: (arg1: Series) => void): void;
    protected uq(a: (arg1: Series, arg2: number) => void): void;
    protected uu(a: (arg1: Series) => void): void;
    protected uv(a: (arg1: Series, arg2: number) => void): void;
    protected us(a: (arg1: Series) => void): void;
    protected ut(a: (arg1: Series, arg2: number) => void): void;
    wm(): void;
    protected vk(a: (arg1: XamDataChart) => void): void;
    protected vl(a: (arg1: XamDataChart) => void, b: boolean): void;
    protected vm(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    protected g9(a: DataSeries): boolean;
    protected gz(): boolean;
    private static readonly l4;
    private k6;
    protected qo(a: DataSeries): string;
    private static l3;
    protected qp(a: DataSeries, b: DataSeriesType): string;
    protected abstract be(a: DataSeries): DataSeriesType;
    protected abstract dc(a: DataSeries, b: DataSeriesType): Series;
    qn(): string;
    private g5;
    private g4;
    protected v0(): void;
    protected ue(): void;
    private wz;
    private ud;
    private hn;
    protected h1(a: DataSeries): IEnumerable;
    protected h2(a: DataSeries): IEnumerable;
    private um;
    private gv;
    protected wp(): void;
    protected de(seriesType_: DataSeriesType): Series;
    private c6;
    private c8;
    private da;
    private db;
    private c7;
    private c9;
    private dd;
    private cd;
    protected get ce(): IAnnotationLayerProxy;
    private get gu();
    protected gx(a: Series): boolean;
    private w0;
    protected g0(): boolean;
    protected g1(): boolean;
    protected get_gy(): boolean;
    protected get gy(): boolean;
    protected ht(a: string, b: boolean): List$1<Series>;
    private t7;
    protected uf(a: Series, b: boolean): void;
    protected hd(): boolean;
    protected wu(a: Series, b: Series, c: DataSeries): void;
    protected abstract wo(a: DataSeries): void;
    protected abstract wn(a: DataSeries): void;
    protected wr(): void;
    private ws;
    protected wt(a: Series): void;
    protected abstract wq(): void;
    private vn;
    private vq;
    protected uj(): void;
    protected hj: boolean;
    protected uk(): void;
    protected yq(a: number): Brush;
    protected yt(a: number): Brush;
    protected yr(a: number): Brush;
    protected ys(a: number): Brush;
    protected y2(a: number): Color;
    protected ff(a: Color): ObservableColorCollection;
    protected aa(a: Color): BrushCollection;
    protected hq: List$1<Color>;
    protected get hs(): List$1<Color>;
    protected get_hh(): boolean;
    protected get hh(): boolean;
    lu(): any;
    vb(a: string, b: string): void;
    vc(a: string, b: string, c: Series): void;
    c0(a: DataSeriesMarker): MarkerType;
    private ch;
    private f5;
    attachDataLegend(a: IDataLegend): void;
    protected uc(a: IDataLegend): void;
    detachDataLegend(a: IDataLegend): void;
    protected ui(a: IDataLegend): void;
    getDataLegendSeries(): IDataLegendSeries[];
    protected o(): IDataLegendSeries[];
    zoomIn(a: number): void;
    zoomOut(a: number): void;
    resetZoom(): void;
    protected get_g8(): boolean;
    get g8(): boolean;
    private ci;
    get cj(): IDomainChartToolbarProvider;
    private vv;
    getDesiredToolbarActions(): ToolActionInfo[];
    onToolCommandExecuting(a: ToolCommand): ToolCommandExecutionState;
    private _commandCompleted;
    get commandCompleted(): (arg1: ToolCommand) => void;
    set commandCompleted(a: (arg1: ToolCommand) => void);
    private _invalidateActions;
    get invalidateActions(): () => void;
    set invalidateActions(a: () => void);
    private eq;
    provideContextAccessor(a: IToolbarContextAccessor): void;
    private va;
    addCommandAvailabilityListener(a: ICommandAvailabilityListener): void;
    removeCommandAvailabilityListener(a: ICommandAvailabilityListener): void;
    private ho;
    addCommandStateChangedListener(a: ICommandStateChangedListener): void;
    removeCommandStateChangedListener(a: ICommandStateChangedListener): void;
    vh(source_: any, a: number, b: any, c: any): void;
    vd(source_: any): void;
    ve(source_: any, a: number, b: any): void;
    vf(source_: any, a: number, b: any): void;
    private by;
    get bz(): DataToolTipLayerGroupingMode;
    set bz(a: DataToolTipLayerGroupingMode);
    private ia;
    get jo(): number;
    set jo(a: number);
    private ib;
    get jp(): number;
    set jp(a: number);
    private h8;
    get jm(): number;
    set jm(a: number);
    private h9;
    get jn(): number;
    set jn(a: number);
    private bu;
    get bv(): DataTooltipGroupedPositionX;
    set bv(a: DataTooltipGroupedPositionX);
    private bw;
    get bx(): DataTooltipGroupedPositionY;
    set bx(a: DataTooltipGroupedPositionY);
    private fv;
    get gq(): boolean;
    set gq(a: boolean);
    static readonly o6: string;
    get m(): string[];
    set m(a: string[]);
    private e;
    get j(): string[];
    set j(a: string[]);
    private b;
    get l(): string[];
    set l(a: string[]);
    private d;
    get i(): string[];
    set i(a: string[]);
    private a;
    get bd(): DataAbbreviationMode;
    set bd(a: DataAbbreviationMode);
    private bc;
    get lc(): number;
    set lc(a: number);
    private kz;
    get ld(): number;
    set ld(a: number);
    private k0;
    get bt(): DataLegendValueMode;
    set bt(a: DataLegendValueMode);
    private bs;
    get py(): string;
    set py(a: string);
    private mg;
    get gr(): boolean;
    set gr(a: boolean);
    private fw;
    get p4(): string;
    set p4(a: string);
    private mh;
    get n(): any[];
    set n(a: any[]);
    private f;
    get zs(): Thickness;
    set zs(a: Thickness);
    private zg;
    get gs(): boolean;
    set gs(a: boolean);
    private fx;
    get qd(): string;
    set qd(a: string);
    private mi;
    get gt(): boolean;
    set gt(a: boolean);
    private fy;
    get zt(): Thickness;
    set zt(a: Thickness);
    private zh;
    get ym(): Brush;
    set ym(a: Brush);
    private xq;
    private e3;
    get fe(): FontInfo;
    set fe(a: FontInfo);
    get oo(): string;
    set oo(a: string);
    private ma;
    get k(): any[];
    set k(a: any[]);
    private c;
    get ok(): string;
    set ok(a: string);
    private l9;
    get bj(): DataLegendHeaderDateMode;
    set bj(a: DataLegendHeaderDateMode);
    private bi;
    get bl(): DataLegendHeaderTimeMode;
    set bl(a: DataLegendHeaderTimeMode);
    private bk;
    get ot(): string;
    set ot(a: string);
    private mb;
    get ye(): Brush;
    set ye(a: Brush);
    private xi;
    get zm(): Thickness;
    set zm(a: Thickness);
    private za;
    get zl(): Thickness;
    set zl(a: Thickness);
    private y9;
    get gp(): boolean;
    set gp(a: boolean);
    private fu;
    private ev;
    get e6(): FontInfo;
    set e6(a: FontInfo);
    get yd(): Brush;
    set yd(a: Brush);
    private xh;
    get zk(): Thickness;
    set zk(a: Thickness);
    private y8;
    get zj(): Thickness;
    set zj(a: Thickness);
    private y7;
    get go(): boolean;
    set go(a: boolean);
    private ft;
    private eu;
    get e5(): FontInfo;
    set e5(a: FontInfo);
    get yh(): Brush;
    set yh(a: Brush);
    private xl;
    private ey;
    get e9(): FontInfo;
    set e9(a: FontInfo);
    get bp(): DataLegendSummaryType;
    set bp(a: DataLegendSummaryType);
    private bo;
    get pc(): string;
    set pc(a: string);
    private md;
    get zp(): Thickness;
    set zp(a: Thickness);
    private zd;
    get zo(): Thickness;
    set zo(a: Thickness);
    private zc;
    get yj(): Brush;
    set yj(a: Brush);
    private xn;
    private e0;
    get fb(): FontInfo;
    set fb(a: FontInfo);
    get o7(): string;
    set o7(a: string);
    private mc;
    get yg(): Brush;
    set yg(a: Brush);
    private xk;
    private ex;
    get e8(): FontInfo;
    set e8(a: FontInfo);
    get pi(): string;
    set pi(a: string);
    private me;
    get yi(): Brush;
    set yi(a: Brush);
    private xm;
    private ez;
    get fa(): FontInfo;
    set fa(a: FontInfo);
    get zi(): Thickness;
    set zi(a: Thickness);
    private y6;
    get cs(): LegendItemBadgeShape;
    set cs(a: LegendItemBadgeShape);
    private cq;
    get br(): DataLegendUnitsMode;
    set br(a: DataLegendUnitsMode);
    private bq;
    get ps(): string;
    set ps(a: string);
    private mf;
    get yl(): Brush;
    set yl(a: Brush);
    private xp;
    get zr(): Thickness;
    set zr(a: Thickness);
    private zf;
    private e2;
    get fd(): FontInfo;
    set fd(a: FontInfo);
    get zq(): Thickness;
    set zq(a: Thickness);
    private ze;
    get yk(): Brush;
    set yk(a: Brush);
    private xo;
    private e1;
    get fc(): FontInfo;
    set fc(a: FontInfo);
    get bn(): DataLegendLabelMode;
    set bn(a: DataLegendLabelMode);
    private bm;
    get yf(): Brush;
    set yf(a: Brush);
    private xj;
    get zn(): Thickness;
    set zn(a: Thickness);
    private zb;
    private ew;
    get e7(): FontInfo;
    set e7(a: FontInfo);
    seriesAdded: (sender: any, args: ChartSeriesEventArgs) => void;
    wd(a: Series): void;
    seriesRemoved: (sender: any, args: ChartSeriesEventArgs) => void;
    wk(a: Series): void;
    seriesPointerEnter: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    wg(a: Series, b: any, c: Point): void;
    seriesPointerLeave: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    wh(a: Series, b: any, c: Point): void;
    seriesPointerMove: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    wi(a: Series, b: any, c: Point): void;
    seriesPointerDown: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    wf(a: Series, b: any, c: Point): void;
    seriesPointerUp: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    wj(a: Series, b: any, c: Point): void;
    seriesClick: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    we(a: Series, b: DomainChartSeriesPointerEventArgs): void;
    plotAreaPointerEnter: (sender: any, args: DomainChartPlotAreaPointerEventArgs) => void;
    v7(a: Point): void;
    plotAreaPointerLeave: (sender: any, args: DomainChartPlotAreaPointerEventArgs) => void;
    v8(a: Point): void;
    plotAreaPointerMove: (sender: any, args: DomainChartPlotAreaPointerEventArgs) => void;
    v9(a: Point): void;
    plotAreaPointerDown: (sender: any, args: DomainChartPlotAreaPointerEventArgs) => void;
    v6(a: Point): void;
    plotAreaPointerUp: (sender: any, args: DomainChartPlotAreaPointerEventArgs) => void;
    wa(a: Point): void;
    calloutStyleUpdating: (sender: any, args: CalloutStyleUpdatingEventArgs) => void;
    v4(a: any, b: CalloutStyleUpdatingEventArgs): void;
    calloutRenderStyleUpdating: (sender: any, args: CalloutRenderStyleUpdatingEventArgs) => void;
    v3(a: any, b: CalloutRenderStyleUpdatingEventArgs): void;
    selectedSeriesItemsChanged: (sender: any, e: SeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    wc(a: any, b: SeriesViewerSelectedSeriesItemsChangedEventArgs): void;
    focusedSeriesItemsChanged: (sender: any, e: SeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    v5(a: any, b: SeriesViewerSelectedSeriesItemsChangedEventArgs): void;
    private hu;
    v1(a: () => void): void;
    private fg;
    v2(a: () => void, b: boolean): {
        p1?: boolean;
    };
    protected get_ha(): boolean;
    protected get ha(): boolean;
    protected u0(a: XamDataChart, b: any): void;
    protected ur(): void;
    protected ae(a: BrushCollection): BrushCollection;
    protected yw(a: Brush): Brush;
    protected u6(a: Series, b: number): void;
    protected abstract ug(): void;
    protected get gh(): boolean;
    private fk;
    protected ul(): void;
    protected ux(): void;
    protected wl(a: XamDataChart): void;
    protected ub(a: Series, b: number): void;
    protected abstract ua(a: Series, b: number): void;
    protected c2(a: Series, b: number): MarkerType;
    protected c1(a: Series): MarkerType;
    protected c3(a: Series): MarkerType;
    protected lz(): any;
    protected ly(): any;
    protected get_g2(): boolean;
    protected get g2(): boolean;
    protected h3(): IEnumerable;
    protected vu(a: string, b: any, c: any): void;
    private hm;
    private hp;
    private vo;
    private t9;
    private t8;
    private vs;
    private vw;
    abstract get cb(): DomainType;
    private ax;
    private at;
    private as;
    private eg;
    private eh;
    private a5;
    private eo;
    private ep;
    private aw;
    private av;
    private au;
    private ej;
    private ei;
    private a4;
    get a3(): ChartSortDescriptionCollection;
    get az(): ChartSortDescriptionCollection;
    get ay(): ChartSortDescriptionCollection;
    get ek(): FilterExpressionCollection;
    get el(): FilterExpressionCollection;
    get a7(): ChartSummaryDescriptionCollection;
    private dv;
    get dx(): SeriesSelectionMode;
    set dx(a: SeriesSelectionMode);
    private du;
    get dw(): SeriesSelectionMode;
    set dw(a: SeriesSelectionMode);
    private xw;
    get yx(): Brush;
    set yx(a: Brush);
    private xt;
    get yp(): Brush;
    set yp(a: Brush);
    private ds;
    get dt(): SeriesSelectionBehavior;
    set dt(a: SeriesSelectionBehavior);
    private an;
    get selectedSeriesItems(): ChartSelectedItemCollection;
    private am;
    get focusedSeriesItems(): ChartSelectedItemCollection;
    get a2(): ChartSortDescriptionCollection;
    get a1(): ChartSortDescriptionCollection;
    get a0(): ChartSortDescriptionCollection;
    get em(): FilterExpressionCollection;
    get en(): FilterExpressionCollection;
    get a6(): ChartSummaryDescriptionCollection;
    private mn;
    get rh(): string;
    set rh(a: string);
    private mj;
    get qq(): string;
    set qq(a: string);
    private ml;
    get rd(): string;
    set rd(a: string);
    private mk;
    get rb(): string;
    set rb(a: string);
    private mm;
    get rf(): string;
    set rf(a: string);
    filterStringErrorsParsing: (sender: any, args: FilterStringErrorsParsingEventArgs) => void;
    private mo;
    get rj(): string;
    set rj(a: string);
    private lo;
    get itemsSource(): any;
    set itemsSource(a: any);
    private lm;
    get actualItemsSource(): any;
    set actualItemsSource(a: any);
    private ln;
    get highlightedItemsSource(): any;
    set highlightedItemsSource(a: any);
    private ll;
    get actualHighlightedItemsSource(): any;
    set actualHighlightedItemsSource(a: any);
    private h;
    get includedProperties(): string[];
    set includedProperties(a: string[]);
    private g;
    get excludedProperties(): string[];
    set excludedProperties(a: string[]);
    private r;
    get z(): BrushCollection;
    set z(a: BrushCollection);
    private u;
    get ad(): BrushCollection;
    set ad(a: BrushCollection);
    private p;
    get x(): BrushCollection;
    set x(a: BrushCollection);
    private q;
    get y(): BrushCollection;
    set y(a: BrushCollection);
    private cf;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    private f4;
    protected get_g3(): boolean;
    protected set_g3(a: boolean): void;
    get g3(): boolean;
    set g3(a: boolean);
    private f7;
    protected get_hb(): boolean;
    protected set_hb(a: boolean): void;
    get hb(): boolean;
    set hb(a: boolean);
    private ga;
    protected get_hf(): boolean;
    protected set_hf(a: boolean): void;
    get hf(): boolean;
    set hf(a: boolean);
    private gc;
    protected get_hi(): boolean;
    protected set_hi(a: boolean): void;
    get hi(): boolean;
    set hi(a: boolean);
    private df;
    protected get_dg(): SeriesHighlightedValuesDisplayMode;
    protected set_dg(a: SeriesHighlightedValuesDisplayMode): void;
    get dg(): SeriesHighlightedValuesDisplayMode;
    set dg(a: SeriesHighlightedValuesDisplayMode);
    private f6;
    protected get_g6(): boolean;
    protected set_g6(a: boolean): void;
    get g6(): boolean;
    set g6(a: boolean);
    private zu;
    protected get_zw(): Visibility;
    protected set_zw(a: Visibility): void;
    get zw(): Visibility;
    set zw(a: Visibility);
    private zv;
    protected get_zx(): Visibility;
    protected set_zx(a: Visibility): void;
    get zx(): Visibility;
    set zx(a: Visibility);
    private y3;
    get y5(): Rect;
    set y5(a: Rect);
    get y4(): Rect;
    private mr;
    get sz(): string;
    set sz(a: string);
    private mp;
    get so(): string;
    set so(a: string);
    private w2;
    get w4(): HorizontalAlignment;
    set w4(a: HorizontalAlignment);
    private w1;
    get w3(): HorizontalAlignment;
    set w3(a: HorizontalAlignment);
    private eb;
    get ec(): UnknownValuePlotting;
    set ec(a: UnknownValuePlotting);
    private it;
    protected get_j5(): number;
    protected set_j5(a: number): void;
    get j5(): number;
    set j5(a: number);
    private iz;
    get kb(): number;
    set kb(a: number);
    private dl;
    get dm(): SeriesOutlineMode;
    set dm(a: SeriesOutlineMode);
    private cy;
    get cz(): MarkerOutlineMode;
    set cz(a: MarkerOutlineMode);
    private cw;
    get cx(): MarkerFillMode;
    set cx(a: MarkerFillMode);
    private il;
    get jy(): number;
    set jy(a: number);
    private im;
    get jz(): number;
    set jz(a: number);
    private c4;
    get c5(): MarkerTypeCollection;
    set c5(a: MarkerTypeCollection);
    private cu;
    get cv(): MarkerAutomaticBehavior;
    set cv(a: MarkerAutomaticBehavior);
    private s;
    get ab(): BrushCollection;
    set ab(a: BrushCollection);
    private t;
    get ac(): BrushCollection;
    set ac(a: BrushCollection);
    private k4;
    get lh(): number;
    set lh(a: number);
    private h4;
    get ji(): number;
    set ji(a: number);
    private fj;
    get gg(): boolean;
    set gg(a: boolean);
    private v;
    get af(): BrushCollection;
    set af(a: BrushCollection);
    private ea;
    get trendLineType(): TrendLineType;
    set trendLineType(a: TrendLineType);
    private i5;
    get kh(): number;
    set kh(a: number);
    private fi;
    get gf(): boolean;
    set gf(a: boolean);
    private iq;
    get j2(): number;
    set j2(a: number);
    private is;
    get j4(): number;
    set j4(a: number);
    private ir;
    get j3(): number;
    set j3(a: number);
    private ip;
    get j1(): number;
    set j1(a: number);
    protected vt(): void;
    private a8;
    get a9(): ComputedPlotAreaMarginMode;
    set a9(a: ComputedPlotAreaMarginMode);
    protected ba(): ComputedPlotAreaMarginMode;
    private dn;
    get dp(): SeriesPlotAreaMarginHorizontalMode;
    set dp(a: SeriesPlotAreaMarginHorizontalMode);
    private dq;
    get dr(): SeriesPlotAreaMarginVerticalMode;
    set dr(a: SeriesPlotAreaMarginVerticalMode);
    private dj;
    get dk(): SeriesHighlightingMode;
    set dk(a: SeriesHighlightingMode);
    private dh;
    get di(): SeriesHighlightingBehavior;
    set di(a: SeriesHighlightingBehavior);
    private cm;
    get cn(): LegendHighlightingMode;
    set cn(a: LegendHighlightingMode);
    private cr;
    get ct(): LegendItemBadgeShape;
    set ct(a: LegendItemBadgeShape);
    private co;
    get cp(): LegendItemBadgeMode;
    set cp(a: LegendItemBadgeMode);
    private k8;
    get lk(): number;
    set lk(a: number);
    private d8;
    get d9(): ToolTipType;
    set d9(a: ToolTipType);
    private bb;
    get crosshairsDisplayMode(): CrosshairsDisplayMode;
    set crosshairsDisplayMode(a: CrosshairsDisplayMode);
    private fs;
    get gn(): boolean;
    set gn(a: boolean);
    private xg;
    get yc(): Brush;
    set yc(a: Brush);
    private h7;
    get jl(): number;
    set jl(a: number);
    private xf;
    get yb(): Brush;
    set yb(a: Brush);
    private fr;
    get crosshairsAnnotationEnabled(): boolean;
    set crosshairsAnnotationEnabled(a: boolean);
    private xb;
    get x7(): Brush;
    set x7(a: Brush);
    private xd;
    get x9(): Brush;
    set x9(a: Brush);
    private xc;
    get x8(): Brush;
    set x8(a: Brush);
    private xe;
    get ya(): Brush;
    set ya(a: Brush);
    private kx;
    get la(): number;
    set la(a: number);
    private ky;
    get lb(): number;
    set lb(a: number);
    private f9;
    get shouldAvoidAxisAnnotationCollisions(): boolean;
    set shouldAvoidAxisAnnotationCollisions(a: boolean);
    private gb;
    get hg(): boolean;
    set hg(a: boolean);
    private f0;
    get finalValueAnnotationsVisible(): boolean;
    set finalValueAnnotationsVisible(a: boolean);
    private xr;
    get yn(): Brush;
    set yn(a: Brush);
    private xs;
    get yo(): Brush;
    set yo(a: Brush);
    private k1;
    get le(): number;
    set le(a: number);
    private fl;
    get autoCalloutsVisible(): boolean;
    set autoCalloutsVisible(a: boolean);
    private fq;
    get gm(): boolean;
    set gm(a: boolean);
    private fm;
    get gi(): boolean;
    set gi(a: boolean);
    private gd;
    get hk(): boolean;
    set hk(a: boolean);
    private ag;
    get ah(): CalloutCollisionMode;
    set ah(a: CalloutCollisionMode);
    private fo;
    get gk(): boolean;
    set gk(a: boolean);
    private fp;
    get gl(): boolean;
    set gl(a: boolean);
    private fn;
    get gj(): boolean;
    set gj(a: boolean);
    private h6;
    get jk(): number;
    set jk(a: number);
    private w5;
    get x1(): Brush;
    set x1(a: Brush);
    private w9;
    get x5(): Brush;
    set x5(a: Brush);
    private xa;
    get x6(): Brush;
    set x6(a: Brush);
    private w8;
    get x4(): Brush;
    set x4(a: Brush);
    private w6;
    get x2(): Brush;
    set x2(a: Brush);
    private w7;
    get x3(): Brush;
    set x3(a: Brush);
    private kw;
    get k9(): number;
    set k9(a: number);
    private hz;
    get calloutsItemsSource(): IEnumerable;
    set calloutsItemsSource(a: IEnumerable);
    private ai;
    get aj(): CalloutPlacementPositionsCollection;
    set aj(a: CalloutPlacementPositionsCollection);
    private l7;
    get no(): string;
    set no(a: string);
    private l8;
    get nq(): string;
    set nq(a: string);
    private l6;
    get nb(): string;
    set nb(a: string);
    private l5;
    get m7(): string;
    set m7(a: string);
    private et;
    get e4(): FontInfo;
    set e4(a: FontInfo);
    private ed;
    get valueLines(): ValueModeCollection;
    set valueLines(a: ValueModeCollection);
    private w;
    get valueLinesBrushes(): BrushCollection;
    set valueLinesBrushes(a: BrushCollection);
    private i6;
    get ki(): number;
    set ki(a: number);
    private f8;
    protected get_he(): boolean;
    protected set_he(a: boolean): void;
    get he(): boolean;
    set he(a: boolean);
    get d2(): SeriesViewerScrollbarMode;
    set d2(a: SeriesViewerScrollbarMode);
    private d0;
    get d3(): SeriesViewerScrollbarMode;
    set d3(a: SeriesViewerScrollbarMode);
    private d1;
    get dz(): SeriesViewerHorizontalScrollbarPosition;
    set dz(a: SeriesViewerHorizontalScrollbarPosition);
    private dy;
    get d7(): SeriesViewerVerticalScrollbarPosition;
    set d7(a: SeriesViewerVerticalScrollbarPosition);
    private d6;
    get yu(): Brush;
    set yu(a: Brush);
    private xu;
    get yv(): Brush;
    set yv(a: Brush);
    private xv;
    get ju(): number;
    set ju(a: number);
    private ih;
    get jt(): number;
    set jt(a: number);
    private ig;
    get jq(): number;
    set jq(a: number);
    private ic;
    get jr(): number;
    set jr(a: number);
    private id;
    get js(): number;
    set js(a: number);
    private ie;
    get jw(): number;
    set jw(a: number);
    private ij;
    get jv(): number;
    set jv(a: number);
    private ii;
    get gw(): boolean;
    set gw(a: boolean);
    private f1;
    static readonly q6: string;
    get y0(): Brush;
    set y0(a: Brush);
    private xz;
    get y1(): Brush;
    set y1(a: Brush);
    private x0;
    get km(): number;
    set km(a: number);
    private ja;
    get kl(): number;
    set kl(a: number);
    private i9;
    get kj(): number;
    set kj(a: number);
    private i7;
    get kp(): number;
    set kp(a: number);
    private jd;
    get kk(): number;
    set kk(a: number);
    private i8;
    get ko(): number;
    set ko(a: number);
    private jc;
    get kn(): number;
    set kn(a: number);
    private jb;
    get hl(): boolean;
    set hl(a: boolean);
    private ge;
    static readonly tw: string;
    get kr(): number;
    set kr(a: number);
    private jf;
    get kq(): number;
    set kq(a: number);
    private je;
    get kt(): number;
    set kt(a: number);
    private jh;
    get ks(): number;
    set ks(a: number);
    private jg;
}
