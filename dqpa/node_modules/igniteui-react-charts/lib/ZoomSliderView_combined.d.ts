import { Base, Point, Type, INotifyPropertyChanged, PropertyChangedEventArgs } from "igniteui-react-core";
import { ITrackThumbVisual } from "./ITrackThumbVisual";
import { ITrackRangeVisual } from "./ITrackRangeVisual";
import { ITrackBarVisual } from "./ITrackBarVisual";
import { ITrackShadeVisual } from "./ITrackShadeVisual";
import { ITrackThumbCalloutVisual } from "./ITrackThumbCalloutVisual";
import { FontInfo } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { ITrackOwner } from "./ITrackOwner";
import { IZoomSlider } from "igniteui-react-core";
import { TrackThumb } from "./TrackThumb";
import { TrackThumbRange } from "./TrackThumbRange";
import { ZoomSliderVisualArea } from "./ZoomSliderVisualArea";
import { ZoomSliderOrientation } from "./ZoomSliderOrientation";
import { Brush } from "igniteui-react-core";
import { ZoomSliderResolvingAxisValueEventArgs } from "./ZoomSliderResolvingAxisValueEventArgs";
import { RectChangedEventArgs } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ZoomSliderView extends Base {
    static $t: Type;
    constructor(a: ZoomSlider);
    ar(): void;
    as(): void;
    private q;
    i: ITrackThumbVisual;
    h: ITrackThumbVisual;
    c: ITrackRangeVisual;
    b: ITrackBarVisual;
    e: ITrackShadeVisual;
    d: ITrackShadeVisual;
    g: ITrackThumbCalloutVisual;
    f: ITrackThumbCalloutVisual;
    j: ZoomSlider;
    ao(): void;
    aj(): void;
    private a2;
    private aw;
    private ay;
    private ax;
    private a1;
    private a0;
    private u;
    private v;
    private o;
    private t;
    private r;
    private x;
    private w;
    private m;
    private a;
    an(): void;
    au(a: any): void;
    private ag;
    private ah;
    private ai;
    private ab;
    av(): void;
    ap(): void;
    private aq;
    ak(): void;
    n(): FontInfo;
    private l;
    private y;
    private s;
    a3(a: TextBlock, b: string, c: FontInfo): void;
    private k;
    private z;
    ad(): void;
    af(): void;
    ac(): void;
    ae(): void;
    a4(a: TextBlock): Size;
    at(): void;
    az(): void;
    am(): void;
    private p;
    private al;
}
/**
 * @hidden
 */
export declare class ZoomSlider extends Base implements ITrackOwner, INotifyPropertyChanged, IZoomSlider {
    static $t: Type;
    protected b: TrackThumb;
    protected a: TrackThumb;
    protected c: TrackThumbRange;
    protected g: ZoomSliderView;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    private bk;
    get bl(): number;
    set bl(a: number);
    private ax;
    get bg(): number;
    set bg(a: number);
    private az;
    get bi(): number;
    set bi(a: number);
    private ag;
    get a4(): number;
    set a4(a: number);
    resolvingAxisValue: (sender: any, args: ZoomSliderResolvingAxisValueEventArgs) => void;
    de(a: number, b: number, c: number, d: number): void;
    d6(): void;
    private fg;
    private w;
    get windowRect(): Rect;
    set windowRect(a: Rect);
    private d7;
    private af;
    private dg;
    windowRectChanged: (sender: any, e: RectChangedEventArgs) => void;
    private i;
    private h;
    private ff;
    private fe;
    c8(a: Point, b: boolean): void;
    private c1;
    private c0;
    da(a: Point, b: number): void;
    ae(a: Point, b: boolean): boolean;
    private ad;
    private di;
    private dm;
    private ac;
    private x;
    c9(a: Point): void;
    private c2;
    private dd;
    private dw;
    private dk;
    private d1;
    private fk;
    private fl;
    private dl;
    private n;
    private c4;
    c6(a: Point): void;
    c7(a: Point): void;
    j(a: Point, b: boolean): ZoomSliderVisualArea;
    private r;
    private u;
    private t;
    private s;
    private v;
    fj: Rect;
    fh: Rect;
    fi: Rect;
    private d3;
    private du;
    private dz;
    private dp;
    private d5;
    private ds;
    private dr;
    private bm;
    private bn;
    private ay;
    get bh(): number;
    set bh(a: number);
    private a1;
    get startInset(): number;
    set startInset(a: number);
    private al;
    get endInset(): number;
    set endInset(a: number);
    private a3;
    get trackStartInset(): number;
    set trackStartInset(a: number);
    private a2;
    get trackEndInset(): number;
    set trackEndInset(a: number);
    private ah;
    get barExtent(): number;
    set barExtent(a: number);
    private d;
    get e(): ZoomSliderOrientation;
    set e(a: ZoomSliderOrientation);
    private en;
    get e8(): Brush;
    set e8(a: Brush);
    private av;
    get be(): number;
    set be(a: number);
    private ap;
    get a9(): number;
    set a9(a: number);
    private ef;
    get e0(): Brush;
    set e0(a: Brush);
    private eo;
    get e9(): Brush;
    set e9(a: Brush);
    private eg;
    get e1(): Brush;
    set e1(a: Brush);
    private ep;
    get fa(): Brush;
    set fa(a: Brush);
    private eh;
    get e2(): Brush;
    set e2(a: Brush);
    private aw;
    get bf(): number;
    set bf(a: number);
    private aq;
    get ba(): number;
    set ba(a: number);
    private au;
    get bd(): number;
    set bd(a: number);
    private ao;
    get a8(): number;
    set a8(a: number);
    private el;
    get e6(): Brush;
    set e6(a: Brush);
    private em;
    get e7(): Brush;
    set e7(a: Brush);
    destroy(): void;
    private at;
    get bc(): number;
    set bc(a: number);
    private ed;
    get ey(): Brush;
    set ey(a: Brush);
    private ee;
    get ez(): Brush;
    set ez(a: Brush);
    private an;
    get a7(): number;
    set a7(a: number);
    private d8;
    get et(): Brush;
    set et(a: Brush);
    private d9;
    get eu(): Brush;
    set eu(a: Brush);
    private ai;
    get a5(): number;
    set a5(a: number);
    private eq;
    get fb(): Brush;
    set fb(a: Brush);
    private er;
    get fc(): Brush;
    set fc(a: Brush);
    private a0;
    get bj(): number;
    set bj(a: number);
    private es;
    get fd(): Brush;
    set fd(a: Brush);
    private ei;
    get e3(): Brush;
    set e3(a: Brush);
    private ek;
    get e5(): Brush;
    set e5(a: Brush);
    private ej;
    get e4(): Brush;
    set e4(a: Brush);
    private as;
    get bb(): number;
    set bb(a: number);
    private ea;
    get ev(): Brush;
    set ev(a: Brush);
    private ec;
    get ex(): Brush;
    set ex(a: Brush);
    private eb;
    get ew(): Brush;
    set ew(a: Brush);
    private am;
    get a6(): number;
    set a6(a: number);
    get ab(): boolean;
    get z(): boolean;
    get y(): boolean;
    get aa(): boolean;
    q: boolean;
    private m;
    o: FontInfo;
    protected dc(a: string, b: any, c: any): void;
    private dj;
    private dq;
    private dy;
    private dt;
    private d2;
    private d4;
    private d0;
    private dv;
    private dx;
    private df;
    private dh;
    private c5;
    private db;
    provideContainer(a: any): void;
    notifySizeChanged(): void;
    get l(): DoubleAnimator;
    private k;
    private ak;
    private aj;
    private ar;
    constructor();
    private dn;
    private cy;
    private cx;
    c3(): void;
    private p;
    trackDirty(): void;
    show(): void;
    hide(): void;
}
