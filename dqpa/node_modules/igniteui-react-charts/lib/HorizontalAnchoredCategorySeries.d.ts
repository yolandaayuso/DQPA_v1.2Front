import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { IHorizontalAnchoredCategorySeriesInteractionManager } from "./IHorizontalAnchoredCategorySeriesInteractionManager";
import { Type, Point } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { NumericYAxis } from "./NumericYAxis";
import { NumericAxisBase } from "./NumericAxisBase";
import { CategoryMode } from "./CategoryMode";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { Axis } from "./Axis";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { FastItemsSourceEventAction } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class HorizontalAnchoredCategorySeries extends AnchoredCategorySeries {
    static $t: Type;
    private ach;
    get aci(): IHorizontalAnchoredCategorySeriesInteractionManager;
    o2(): void;
    ck(): SeriesPlotAreaMarginHorizontalMode;
    cl(): SeriesPlotAreaMarginVerticalMode;
    xAxis: CategoryAxisBase;
    yAxis: NumericYAxis;
    protected b2(): SeriesHitTestMode;
    ys(): CategoryAxisBase;
    y9(): NumericAxisBase;
    wp(a: Point): Rect;
    private acv;
    protected acn(a: Point, b: Point, c: boolean): boolean;
    aj(a: Point): Point[][];
    al(a: Point): Point[][];
    gw(a: Point, b: boolean): boolean;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    i5(a: Point, b: boolean, c: boolean): number;
    ka(a: Point, b: boolean): number;
    j8(a: Point, b: boolean): number;
    ip(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    wc(a: Point, b: boolean, c: boolean): Point;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    abr(a: Axis): void;
    abs(a: Axis): void;
    zp(): boolean;
    protected acd: CategoryAxisBase;
    protected acj: NumericAxisBase;
    acr(a: CategoryAxisBase): void;
    acs(a: NumericYAxis): void;
    ym(a: number, b: number): any[];
    protected q9(a: any, b: string, c: any, d: any): void;
    protected pb(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    acl(a: any): boolean;
    acm(a: any): boolean;
    private acf;
    get acg(): CategoryMode;
    set acg(a: CategoryMode);
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
