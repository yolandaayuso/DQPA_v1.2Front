import * as React from 'react';
import { TimeAxisBreak } from "./TimeAxisBreak";
export declare class IgrTimeAxisBreak<P extends IIgrTimeAxisBreakProps = IIgrTimeAxisBreakProps> extends React.Component<P, {}> {
    protected _implementation: any;
    get i(): TimeAxisBreak;
    private onImplementationCreated;
    constructor(props: P);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    protected createImplementation(): TimeAxisBreak;
    private _renderer;
    private _provideRenderer;
    static _createFromInternal(internal: any): IgrTimeAxisBreak;
    /**
 * The start time of the axis break.
*
* Use `Start` property for the start time of the axis break.
*
* ```ts
*   <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*     <IgrTimeXAxis name="xAxis" label="Date"
* 			dateTimeMemberPath="Date" >
*  </IgrTimeXAxis>
*  </IgrDataChart>
* ```
*/
    get start(): Date;
    set start(v: Date);
    /**
     * The end time of the axis break.
    *
    * Use `End` property for the end time of the axis break.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" >
    *
    *  </IgrTimeXAxis>
    *  </IgrDataChart>
    * ```
    */
    get end(): Date;
    set end(v: Date);
    /**
     * The interval at which to repeat this break, expressed as a TimeSpan.
    *
    * Use `Interval` property to se the interval at which to repeat this break, expressed as a TimeSpan.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" >
    *
    *  </IgrTimeXAxis>
    *  </IgrDataChart>
    * ```
    */
    get interval(): number;
    set interval(v: number);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
}
export interface IIgrTimeAxisBreakProps {
    /**
 * The start time of the axis break.
*
* Use `Start` property for the start time of the axis break.
*
* ```ts
*   <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*     <IgrTimeXAxis name="xAxis" label="Date"
* 			dateTimeMemberPath="Date" >
*  </IgrTimeXAxis>
*  </IgrDataChart>
* ```
*/
    start?: Date;
    /**
     * The end time of the axis break.
    *
    * Use `End` property for the end time of the axis break.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" >
    *
    *  </IgrTimeXAxis>
    *  </IgrDataChart>
    * ```
    */
    end?: Date;
    /**
     * The interval at which to repeat this break, expressed as a TimeSpan.
    *
    * Use `Interval` property to se the interval at which to repeat this break, expressed as a TimeSpan.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" >
    *
    *  </IgrTimeXAxis>
    *  </IgrDataChart>
    * ```
    */
    interval?: number | string;
}
