import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { Axis } from "./Axis";
import { RadialFrame } from "./RadialFrame";
import { SeriesView } from "./SeriesView";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { AxisRange } from "./AxisRange";
import { IFastItemsSource } from "igniteui-react-core";
import { RadialBaseView } from "./RadialBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { ChartSelection } from "./ChartSelection";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { CategoryCollisionMode } from "./CategoryCollisionMode";
import { Clipper } from "igniteui-react-core";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { PointCollection } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
    static $t: Type;
    private f;
    constructor(a: AnchoredRadialSeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare abstract class AnchoredRadialSeries extends RadialBase {
    static $t: Type;
    protected cs(): SeriesView;
    o2(): void;
    me(): string;
    kq(a: any, b: string): any;
    md(a: string): string;
    jc(a: any): number;
    protected kt(a: number): any;
    q1(a: SeriesView): void;
    ab2: AnchoredRadialSeriesView;
    constructor();
    ab3: CategoryLineRasterizer;
    ka(a: Point, b: boolean): number;
    j8(a: Point, b: boolean): number;
    ip(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    protected acd: boolean;
    i5(a: Point, b: boolean, c: boolean): number;
    wc(a: Point, b: boolean, c: boolean): Point;
    ach: boolean;
    acx: string;
    acp: string;
    protected gb(): boolean;
    protected ht(): List$1<SeriesLayerPropertyOverlay>;
    private ac3;
    get ab8(): IFastItemColumn$1<number>;
    set ab8(a: IFastItemColumn$1<number>);
    private ab7;
    act: string;
    acv: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    ab6: TrendLineType;
    adl: Brush;
    get adk(): Brush;
    set adk(a: Brush);
    static readonly ac7: DependencyProperty;
    acm: number;
    adn: PenLineCap;
    adm: DoubleCollection;
    acn: number;
    aco: number;
    ay(a: Axis): AxisRange;
    protected z9(a: number, b: any): any;
    protected dk(a: string): IFastItemColumn$1<number>;
    protected ac1(a: IFastItemsSource, b: IFastItemColumn$1<number>): void;
    protected q9(a: any, b: string, c: any, d: any): void;
    protected pb(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_ace(): boolean;
    protected get ace(): boolean;
    protected get_ek(): boolean;
    protected get_f5(): boolean;
    protected acj(a: CategoryAngleAxis, b: Rect, c: Rect, d: Rect): number;
    protected aci(a: number, b: CategoryAngleAxis, c: Rect, d: Rect, e: Rect): number;
    ac2(a: Rect, b: List$1<ChartSelection>, c: SeriesSelectionBehavior, d: CategoryCollisionMode): void;
    protected get_acg(): boolean;
    protected get acg(): boolean;
    protected get_aca(): boolean;
    protected get aca(): boolean;
    aa9(a: RadialFrame, b: RadialBaseView): void;
    private ack;
    private acl;
    private acf;
    ab1(a: List$1<number[]>, b: number, c: SeriesView): Clipper;
    protected ado: Point;
    ac6(a: PointCollection, b: PointCollection, c: PointCollection, d: PointCollection, e: boolean): void;
    private acc;
    private acb;
    o5(a: boolean, b: SeriesView): void;
    abc(a: RadialFrame, b: RadialBaseView): void;
    protected ab0(a: number, b: number, c: Axis): any[];
    protected ac4(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    protected ac5(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    ac0(a: RadialBaseView, b: RadialFrame): void;
    private acz;
    protected sh(): void;
    kx(a: any, b: Point): any;
    gd(a: any): boolean;
    ab5: RadialFrame;
    rt(a: Rect, b: RenderSurface): void;
    private ab4;
    rq(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected pz(a: any): void;
    private ab9;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredRadialSeriesView extends RadialBaseView {
    static $t: Type;
    c1: AnchoredRadialSeries;
    constructor(a: AnchoredRadialSeries);
    c2: RadialTrendLineManager;
    c3(a: Rect, b: Rect, c: Rect, d: Rect): void;
    c4(): void;
    protected a7(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
