import * as React from 'react';
import { XamDataLegend } from "./XamDataLegend";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { DataLegendLayoutMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { IgrDataLegendSummaryEventArgs } from './igr-data-legend-summary-event-args';
import { IgrDataLegendStylingRowEventArgs } from './igr-data-legend-styling-row-event-args';
import { IgrDataLegendStylingColumnEventArgs } from './igr-data-legend-styling-column-event-args';
import { LegendItemBadgeShape } from "igniteui-react-core";
/**
 * Represents data legend that displays information about each series including values and summaries.
*/
export declare class IgrDataLegend extends React.Component<IIgrDataLegendProps> {
    private _container;
    private _height;
    private _width;
    private _initialized;
    private _elRef;
    set height(value: string);
    get height(): string;
    set width(value: string);
    get width(): string;
    private _wrapper;
    private _getMainRef;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
    }, any>;
    constructor(props: IIgrDataLegendProps);
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    protected initializeProperties(): void;
    updateStyle(): void;
    destroy(): void;
    componentWillUnmount(): void;
    private _implementation;
    componentDidMount(): void;
    initializeContent(): void;
    protected createImplementation(): XamDataLegend;
    get i(): XamDataLegend;
    private _dataLegend;
    protected static _staticStyling(container: any, component: any, parent?: any): void;
    /**
     * Gets or sets the target for the data legend.
    */
    get target(): any;
    set target(v: any);
    /**
 * Gets whether or not at least one badge is visible based on BadgesShape and setting of a row's IsVisble in StyleSeriesRow event
*/
    get actualBadgesVisible(): boolean;
    set actualBadgesVisible(v: boolean);
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control to appear blurry.
    */
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(v: number);
    /**
     * Gets or sets indexes, titles, or names of series to include in displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The ExcludedSeries property takes precedence over values of IncludedSeries property
    */
    get includedSeries(): string[];
    set includedSeries(v: string[]);
    /**
     * Gets or sets indexes, titles, or names of series to exclude from displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The ExcludedSeries property takes precedence over values of IncludedSeries property
    */
    get excludedSeries(): string[];
    set excludedSeries(v: string[]);
    /**
     * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedence over values of IncludedColumns property
    */
    get includedColumns(): string[];
    set includedColumns(v: string[]);
    /**
     * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedence over values of IncludedColumns property
    */
    get excludedColumns(): string[];
    set excludedColumns(v: string[]);
    /**
     * Gets or sets whether the data legend should update when the series data is mutated.
    */
    get shouldUpdateWhenSeriesDataChanges(): boolean;
    set shouldUpdateWhenSeriesDataChanges(v: boolean);
    /**
     * Gets or sets mode for abbreviating large numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatAbbreviation(): DataAbbreviationMode;
    set valueFormatAbbreviation(v: DataAbbreviationMode);
    /**
     * Gets or sets maximum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatMaxFractions(): number;
    set valueFormatMaxFractions(v: number);
    /**
     * Gets or sets minimum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatMinFractions(): number;
    set valueFormatMinFractions(v: number);
    /**
     * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
    */
    get valueFormatMode(): DataLegendValueMode;
    set valueFormatMode(v: DataLegendValueMode);
    /**
     * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatCulture(): string;
    set valueFormatCulture(v: string);
    /**
     * Gets or sets the currency code used for displaying currency symbol next to values, e.g. USD for $, EUR for â‚¬
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatCurrencyCode(): string;
    set valueFormatCurrencyCode(v: string);
    /**
     * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatUseGrouping(): boolean;
    set valueFormatUseGrouping(v: boolean);
    /**
     * Gets or sets the format string for values displayed in the data legend.
    */
    get valueFormatString(): string;
    set valueFormatString(v: string);
    /**
     * Gets or sets the format specifiers to use with the ValueFormatString string.
    */
    get valueFormatSpecifiers(): any[];
    set valueFormatSpecifiers(v: any[]);
    get valueRowMarginBottom(): number;
    set valueRowMarginBottom(v: number);
    get valueRowMarginLeft(): number;
    set valueRowMarginLeft(v: number);
    get valueRowMarginRight(): number;
    set valueRowMarginRight(v: number);
    get valueRowMarginTop(): number;
    set valueRowMarginTop(v: number);
    ensureValueRowMargin(): void;
    /**
     * Gets or sets whether to show series rows.
    */
    get valueRowVisible(): boolean;
    set valueRowVisible(v: boolean);
    /**
     * Gets or sets text displayed when data column is missing a value, e.g. "no data"
    */
    get valueTextWhenMissingData(): string;
    set valueTextWhenMissingData(v: string);
    /**
     * Gets or sets whether to use series colors when displaying values in the legend
    */
    get valueTextUseSeriesColors(): boolean;
    set valueTextUseSeriesColors(v: boolean);
    get valueTextMarginBottom(): number;
    set valueTextMarginBottom(v: number);
    get valueTextMarginLeft(): number;
    set valueTextMarginLeft(v: number);
    get valueTextMarginRight(): number;
    set valueTextMarginRight(v: number);
    get valueTextMarginTop(): number;
    set valueTextMarginTop(v: number);
    ensureValueTextMargin(): void;
    /**
     * Gets or sets the units text color.
    */
    get valueTextColor(): string;
    set valueTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get valueTextStyle(): string;
    set valueTextStyle(v: string);
    /**
     * Gets or sets the format string for header text displayed in the data legend.
    */
    get headerFormatString(): string;
    set headerFormatString(v: string);
    /**
     * Gets or sets the format specifiers to use with the HeaderFormatString string.
    */
    get headerFormatSpecifiers(): any[];
    set headerFormatSpecifiers(v: any[]);
    /**
     * Gets or sets globalization culture applied to header only when it displays dates that are fetched from date/time axes
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatCulture(): string;
    set headerFormatCulture(v: string);
    /**
     * Gets or sets date format for the header only when it displays dates that are fetched from date/time axes
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatDate(): DataLegendHeaderDateMode;
    set headerFormatDate(v: DataLegendHeaderDateMode);
    /**
     * Gets or sets time format for the header only when it displays dates that are fetched from date/time axes
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatTime(): DataLegendHeaderTimeMode;
    set headerFormatTime(v: DataLegendHeaderTimeMode);
    /**
     * Gets or sets the HeaderText for the data legend.
    */
    get headerText(): string;
    set headerText(v: string);
    /**
     * Gets or sets the header text color.
    */
    get headerTextColor(): string;
    set headerTextColor(v: string);
    get headerTextMarginBottom(): number;
    set headerTextMarginBottom(v: number);
    get headerTextMarginLeft(): number;
    set headerTextMarginLeft(v: number);
    get headerTextMarginRight(): number;
    set headerTextMarginRight(v: number);
    get headerTextMarginTop(): number;
    set headerTextMarginTop(v: number);
    ensureHeaderTextMargin(): void;
    get headerRowMarginBottom(): number;
    set headerRowMarginBottom(v: number);
    get headerRowMarginLeft(): number;
    set headerRowMarginLeft(v: number);
    get headerRowMarginRight(): number;
    set headerRowMarginRight(v: number);
    get headerRowMarginTop(): number;
    set headerRowMarginTop(v: number);
    ensureHeaderRowMargin(): void;
    /**
     * Gets or sets whether to show Header row.
    */
    get headerRowVisible(): boolean;
    set headerRowVisible(v: boolean);
    /**
     * Gets or Sets the style to use for the header text.
    */
    get headerTextStyle(): string;
    set headerTextStyle(v: string);
    /**
     * Gets or sets whether to show Header row.
    */
    get groupRowVisible(): boolean;
    set groupRowVisible(v: boolean);
    /**
     * Gets or sets the Group text color.
    */
    get groupTextColor(): string;
    set groupTextColor(v: string);
    get groupTextMarginBottom(): number;
    set groupTextMarginBottom(v: number);
    get groupTextMarginLeft(): number;
    set groupTextMarginLeft(v: number);
    get groupTextMarginRight(): number;
    set groupTextMarginRight(v: number);
    get groupTextMarginTop(): number;
    set groupTextMarginTop(v: number);
    ensureGroupTextMargin(): void;
    get groupRowMarginBottom(): number;
    set groupRowMarginBottom(v: number);
    get groupRowMarginLeft(): number;
    set groupRowMarginLeft(v: number);
    get groupRowMarginRight(): number;
    set groupRowMarginRight(v: number);
    get groupRowMarginTop(): number;
    set groupRowMarginTop(v: number);
    ensureGroupRowMargin(): void;
    /**
     * Gets or Sets the style to use for the Group text.
    */
    get groupTextStyle(): string;
    set groupTextStyle(v: string);
    /**
     * Gets or sets the summary text color.
    */
    get summaryTitleTextColor(): string;
    set summaryTitleTextColor(v: string);
    /**
     * Gets or Sets the style to use for the summary text.
    */
    get summaryTitleTextStyle(): string;
    set summaryTitleTextStyle(v: string);
    /**
     * Gets or sets the SummaryType for the data legend.
    */
    get summaryType(): DataLegendSummaryType;
    set summaryType(v: DataLegendSummaryType);
    /**
     * Gets or sets the SummaryTitleText for the data legend.
    */
    get summaryTitleText(): string;
    set summaryTitleText(v: string);
    get summaryTitleTextMarginBottom(): number;
    set summaryTitleTextMarginBottom(v: number);
    get summaryTitleTextMarginLeft(): number;
    set summaryTitleTextMarginLeft(v: number);
    get summaryTitleTextMarginRight(): number;
    set summaryTitleTextMarginRight(v: number);
    get summaryTitleTextMarginTop(): number;
    set summaryTitleTextMarginTop(v: number);
    ensureSummaryTitleTextMargin(): void;
    get summaryRowMarginBottom(): number;
    set summaryRowMarginBottom(v: number);
    get summaryRowMarginLeft(): number;
    set summaryRowMarginLeft(v: number);
    get summaryRowMarginRight(): number;
    set summaryRowMarginRight(v: number);
    get summaryRowMarginTop(): number;
    set summaryRowMarginTop(v: number);
    ensureSummaryRowMargin(): void;
    /**
     * Gets or sets the units text color.
    */
    get summaryValueTextColor(): string;
    set summaryValueTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryValueTextStyle(): string;
    set summaryValueTextStyle(v: string);
    /**
     * Gets or sets the units text for the data legend.
    */
    get summaryLabelText(): string;
    set summaryLabelText(v: string);
    /**
     * Gets or sets the units text color.
    */
    get summaryLabelTextColor(): string;
    set summaryLabelTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryLabelTextStyle(): string;
    set summaryLabelTextStyle(v: string);
    /**
     * Gets or sets the units text for the data legend.
    */
    get summaryUnitsText(): string;
    set summaryUnitsText(v: string);
    /**
     * Gets or sets the units text color.
    */
    get summaryUnitsTextColor(): string;
    set summaryUnitsTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryUnitsTextStyle(): string;
    set summaryUnitsTextStyle(v: string);
    get badgeMarginBottom(): number;
    set badgeMarginBottom(v: number);
    get badgeMarginLeft(): number;
    set badgeMarginLeft(v: number);
    get badgeMarginRight(): number;
    set badgeMarginRight(v: number);
    get badgeMarginTop(): number;
    set badgeMarginTop(v: number);
    ensureBadgeMargin(): void;
    /**
     * Gets or sets the BadgeShape for the data legend.
    */
    get badgeShape(): LegendItemBadgeShape;
    set badgeShape(v: LegendItemBadgeShape);
    /**
     * Gets or sets horizontal position (between 0.0 and 1.0) in viewport of the target component
    */
    get targetCursorPositionX(): number;
    set targetCursorPositionX(v: number);
    /**
     * Gets or sets vertical position (between 0.0 and 1.0) in viewport of the target component
    */
    get targetCursorPositionY(): number;
    set targetCursorPositionY(v: number);
    /**
     * Gets or sets the UnitsMode for the data legend.
    */
    get unitsDisplayMode(): DataLegendUnitsMode;
    set unitsDisplayMode(v: DataLegendUnitsMode);
    /**
     * Gets or sets the units text for the data legend.
    */
    get unitsText(): string;
    set unitsText(v: string);
    /**
     * Gets or sets the units text color.
    */
    get unitsTextColor(): string;
    set unitsTextColor(v: string);
    get unitsTextMarginBottom(): number;
    set unitsTextMarginBottom(v: number);
    get unitsTextMarginLeft(): number;
    set unitsTextMarginLeft(v: number);
    get unitsTextMarginRight(): number;
    set unitsTextMarginRight(v: number);
    get unitsTextMarginTop(): number;
    set unitsTextMarginTop(v: number);
    ensureUnitsTextMargin(): void;
    /**
     * Gets or Sets the style to use for the units text.
    */
    get unitsTextStyle(): string;
    set unitsTextStyle(v: string);
    get titleTextMarginBottom(): number;
    set titleTextMarginBottom(v: number);
    get titleTextMarginLeft(): number;
    set titleTextMarginLeft(v: number);
    get titleTextMarginRight(): number;
    set titleTextMarginRight(v: number);
    get titleTextMarginTop(): number;
    set titleTextMarginTop(v: number);
    ensureTitleTextMargin(): void;
    /**
     * Gets or sets the display text color.
    */
    get titleTextColor(): string;
    set titleTextColor(v: string);
    /**
     * Gets or Sets the style to use for the display text.
    */
    get titleTextStyle(): string;
    set titleTextStyle(v: string);
    /**
     * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
    */
    get labelDisplayMode(): DataLegendLabelMode;
    set labelDisplayMode(v: DataLegendLabelMode);
    /**
     * Gets or sets the units text color.
    */
    get labelTextColor(): string;
    set labelTextColor(v: string);
    get labelTextMarginBottom(): number;
    set labelTextMarginBottom(v: number);
    get labelTextMarginLeft(): number;
    set labelTextMarginLeft(v: number);
    get labelTextMarginRight(): number;
    set labelTextMarginRight(v: number);
    get labelTextMarginTop(): number;
    set labelTextMarginTop(v: number);
    ensureLabelTextMargin(): void;
    /**
     * Gets or Sets the style to use for the units text.
    */
    get labelTextStyle(): string;
    set labelTextStyle(v: string);
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control to appear blurry.
    */
    get pixelScalingRatio(): number;
    set pixelScalingRatio(v: number);
    /**
     * Gets or sets the layout of content in the data legend
    */
    get layoutMode(): DataLegendLayoutMode;
    set layoutMode(v: DataLegendLayoutMode);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
 * Returns the legend visuals expressed as a serialized string.

*/
    exportSerializedVisualData(): string;
    /**
     * Notifies the legend about changes to size
    
    */
    notifySizeChanged(): void;
    /**
     * Forces any pending refresh to the legend to be finished.
    
    */
    flush(): void;
    getAbbreviatedNumber(number: number, mode: DataAbbreviationMode, minDigits: number, maxDigits: number): number;
    getAbbreviatedSymbol(number: number, mode: DataAbbreviationMode, minDigits: number, maxDigits: number): string;
    getAbbreviatedString(number: number, mode: DataAbbreviationMode, minDigits: number, maxDigits: number): string;
    private _calculateColumnSummary;
    private _calculateColumnSummary_wrapped;
    /**
     * Event raised when calculating summary value for each column in data legend
    */
    get calculateColumnSummary(): (s: IgrDataLegend, e: IgrDataLegendSummaryEventArgs) => void;
    set calculateColumnSummary(ev: (s: IgrDataLegend, e: IgrDataLegendSummaryEventArgs) => void);
    private _styleHeaderRow;
    private _styleHeaderRow_wrapped;
    /**
     * Event raised when styling the header row
    */
    get styleHeaderRow(): (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void;
    set styleHeaderRow(ev: (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void);
    private _styleGroupRow;
    private _styleGroupRow_wrapped;
    /**
     * Event raised when styling the group row
    */
    get styleGroupRow(): (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void;
    set styleGroupRow(ev: (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void);
    private _styleSeriesRow;
    private _styleSeriesRow_wrapped;
    /**
     * Event raised when styling title and badge in series rows
    */
    get styleSeriesRow(): (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void;
    set styleSeriesRow(ev: (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void);
    private _styleSummaryRow;
    private _styleSummaryRow_wrapped;
    /**
     * Event raised when styling title in the summary row
    */
    get styleSummaryRow(): (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void;
    set styleSummaryRow(ev: (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void);
    private _styleSeriesColumn;
    private _styleSeriesColumn_wrapped;
    /**
     * Event raised when styling the label, value, and unit columns in series rows
    */
    get styleSeriesColumn(): (s: IgrDataLegend, e: IgrDataLegendStylingColumnEventArgs) => void;
    set styleSeriesColumn(ev: (s: IgrDataLegend, e: IgrDataLegendStylingColumnEventArgs) => void);
    private _styleSummaryColumn;
    private _styleSummaryColumn_wrapped;
    /**
     * Event raised when styling the label, value, and unit columns in summary row
    */
    get styleSummaryColumn(): (s: IgrDataLegend, e: IgrDataLegendStylingColumnEventArgs) => void;
    set styleSummaryColumn(ev: (s: IgrDataLegend, e: IgrDataLegendStylingColumnEventArgs) => void);
}
export interface IIgrDataLegendProps {
    width?: string;
    height?: string;
    children?: React.ReactNode;
    target?: any;
    /**
 * Gets whether or not at least one badge is visible based on BadgesShape and setting of a row's IsVisble in StyleSeriesRow event
*/
    actualBadgesVisible?: boolean | string;
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control to appear blurry.
    */
    actualPixelScalingRatio?: number | string;
    /**
     * Gets or sets indexes, titles, or names of series to include in displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The ExcludedSeries property takes precedence over values of IncludedSeries property
    */
    includedSeries?: string[];
    /**
     * Gets or sets indexes, titles, or names of series to exclude from displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The ExcludedSeries property takes precedence over values of IncludedSeries property
    */
    excludedSeries?: string[];
    /**
     * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedence over values of IncludedColumns property
    */
    includedColumns?: string[];
    /**
     * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedence over values of IncludedColumns property
    */
    excludedColumns?: string[];
    /**
     * Gets or sets whether the data legend should update when the series data is mutated.
    */
    shouldUpdateWhenSeriesDataChanges?: boolean | string;
    /**
     * Gets or sets mode for abbreviating large numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    valueFormatAbbreviation?: DataAbbreviationMode | string;
    /**
     * Gets or sets maximum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    valueFormatMaxFractions?: number | string;
    /**
     * Gets or sets minimum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    valueFormatMinFractions?: number | string;
    /**
     * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
    */
    valueFormatMode?: DataLegendValueMode | string;
    /**
     * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    valueFormatCulture?: string;
    /**
     * Gets or sets the currency code used for displaying currency symbol next to values, e.g. USD for $, EUR for â‚¬
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    valueFormatCurrencyCode?: string;
    /**
     * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    valueFormatUseGrouping?: boolean | string;
    /**
     * Gets or sets the format string for values displayed in the data legend.
    */
    valueFormatString?: string;
    /**
     * Gets or sets the format specifiers to use with the ValueFormatString string.
    */
    valueFormatSpecifiers?: any[];
    valueRowMarginBottom?: number | string;
    valueRowMarginLeft?: number | string;
    valueRowMarginRight?: number | string;
    valueRowMarginTop?: number | string;
    /**
     * Gets or sets whether to show series rows.
    */
    valueRowVisible?: boolean | string;
    /**
     * Gets or sets text displayed when data column is missing a value, e.g. "no data"
    */
    valueTextWhenMissingData?: string;
    /**
     * Gets or sets whether to use series colors when displaying values in the legend
    */
    valueTextUseSeriesColors?: boolean | string;
    valueTextMarginBottom?: number | string;
    valueTextMarginLeft?: number | string;
    valueTextMarginRight?: number | string;
    valueTextMarginTop?: number | string;
    /**
     * Gets or sets the units text color.
    */
    valueTextColor?: string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    valueTextStyle?: string;
    /**
     * Gets or sets the format string for header text displayed in the data legend.
    */
    headerFormatString?: string;
    /**
     * Gets or sets the format specifiers to use with the HeaderFormatString string.
    */
    headerFormatSpecifiers?: any[];
    /**
     * Gets or sets globalization culture applied to header only when it displays dates that are fetched from date/time axes
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    headerFormatCulture?: string;
    /**
     * Gets or sets date format for the header only when it displays dates that are fetched from date/time axes
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    headerFormatDate?: DataLegendHeaderDateMode | string;
    /**
     * Gets or sets time format for the header only when it displays dates that are fetched from date/time axes
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    headerFormatTime?: DataLegendHeaderTimeMode | string;
    /**
     * Gets or sets the HeaderText for the data legend.
    */
    headerText?: string;
    /**
     * Gets or sets the header text color.
    */
    headerTextColor?: string;
    headerTextMarginBottom?: number | string;
    headerTextMarginLeft?: number | string;
    headerTextMarginRight?: number | string;
    headerTextMarginTop?: number | string;
    headerRowMarginBottom?: number | string;
    headerRowMarginLeft?: number | string;
    headerRowMarginRight?: number | string;
    headerRowMarginTop?: number | string;
    /**
     * Gets or sets whether to show Header row.
    */
    headerRowVisible?: boolean | string;
    /**
     * Gets or Sets the style to use for the header text.
    */
    headerTextStyle?: string;
    /**
     * Gets or sets whether to show Header row.
    */
    groupRowVisible?: boolean | string;
    /**
     * Gets or sets the Group text color.
    */
    groupTextColor?: string;
    groupTextMarginBottom?: number | string;
    groupTextMarginLeft?: number | string;
    groupTextMarginRight?: number | string;
    groupTextMarginTop?: number | string;
    groupRowMarginBottom?: number | string;
    groupRowMarginLeft?: number | string;
    groupRowMarginRight?: number | string;
    groupRowMarginTop?: number | string;
    /**
     * Gets or Sets the style to use for the Group text.
    */
    groupTextStyle?: string;
    /**
     * Gets or sets the summary text color.
    */
    summaryTitleTextColor?: string;
    /**
     * Gets or Sets the style to use for the summary text.
    */
    summaryTitleTextStyle?: string;
    /**
     * Gets or sets the SummaryType for the data legend.
    */
    summaryType?: DataLegendSummaryType | string;
    /**
     * Gets or sets the SummaryTitleText for the data legend.
    */
    summaryTitleText?: string;
    summaryTitleTextMarginBottom?: number | string;
    summaryTitleTextMarginLeft?: number | string;
    summaryTitleTextMarginRight?: number | string;
    summaryTitleTextMarginTop?: number | string;
    summaryRowMarginBottom?: number | string;
    summaryRowMarginLeft?: number | string;
    summaryRowMarginRight?: number | string;
    summaryRowMarginTop?: number | string;
    /**
     * Gets or sets the units text color.
    */
    summaryValueTextColor?: string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    summaryValueTextStyle?: string;
    /**
     * Gets or sets the units text for the data legend.
    */
    summaryLabelText?: string;
    /**
     * Gets or sets the units text color.
    */
    summaryLabelTextColor?: string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    summaryLabelTextStyle?: string;
    /**
     * Gets or sets the units text for the data legend.
    */
    summaryUnitsText?: string;
    /**
     * Gets or sets the units text color.
    */
    summaryUnitsTextColor?: string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    summaryUnitsTextStyle?: string;
    badgeMarginBottom?: number | string;
    badgeMarginLeft?: number | string;
    badgeMarginRight?: number | string;
    badgeMarginTop?: number | string;
    /**
     * Gets or sets the BadgeShape for the data legend.
    */
    badgeShape?: LegendItemBadgeShape | string;
    /**
     * Gets or sets horizontal position (between 0.0 and 1.0) in viewport of the target component
    */
    targetCursorPositionX?: number | string;
    /**
     * Gets or sets vertical position (between 0.0 and 1.0) in viewport of the target component
    */
    targetCursorPositionY?: number | string;
    /**
     * Gets or sets the UnitsMode for the data legend.
    */
    unitsDisplayMode?: DataLegendUnitsMode | string;
    /**
     * Gets or sets the units text for the data legend.
    */
    unitsText?: string;
    /**
     * Gets or sets the units text color.
    */
    unitsTextColor?: string;
    unitsTextMarginBottom?: number | string;
    unitsTextMarginLeft?: number | string;
    unitsTextMarginRight?: number | string;
    unitsTextMarginTop?: number | string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    unitsTextStyle?: string;
    titleTextMarginBottom?: number | string;
    titleTextMarginLeft?: number | string;
    titleTextMarginRight?: number | string;
    titleTextMarginTop?: number | string;
    /**
     * Gets or sets the display text color.
    */
    titleTextColor?: string;
    /**
     * Gets or Sets the style to use for the display text.
    */
    titleTextStyle?: string;
    /**
     * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
    */
    labelDisplayMode?: DataLegendLabelMode | string;
    /**
     * Gets or sets the units text color.
    */
    labelTextColor?: string;
    labelTextMarginBottom?: number | string;
    labelTextMarginLeft?: number | string;
    labelTextMarginRight?: number | string;
    labelTextMarginTop?: number | string;
    /**
     * Gets or Sets the style to use for the units text.
    */
    labelTextStyle?: string;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control to appear blurry.
    */
    pixelScalingRatio?: number | string;
    /**
     * Gets or sets the layout of content in the data legend
    */
    layoutMode?: DataLegendLayoutMode | string;
    /**
 * Event raised when calculating summary value for each column in data legend
*/
    calculateColumnSummary?: (s: IgrDataLegend, e: IgrDataLegendSummaryEventArgs) => void;
    /**
     * Event raised when styling the header row
    */
    styleHeaderRow?: (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void;
    /**
     * Event raised when styling the group row
    */
    styleGroupRow?: (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void;
    /**
     * Event raised when styling title and badge in series rows
    */
    styleSeriesRow?: (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void;
    /**
     * Event raised when styling title in the summary row
    */
    styleSummaryRow?: (s: IgrDataLegend, e: IgrDataLegendStylingRowEventArgs) => void;
    /**
     * Event raised when styling the label, value, and unit columns in series rows
    */
    styleSeriesColumn?: (s: IgrDataLegend, e: IgrDataLegendStylingColumnEventArgs) => void;
    /**
     * Event raised when styling the label, value, and unit columns in summary row
    */
    styleSummaryColumn?: (s: IgrDataLegend, e: IgrDataLegendStylingColumnEventArgs) => void;
}
