import { IgPoint } from "igniteui-react-core";
import { IgrSeries } from "./igr-series";
import { IgrSeriesViewer } from "./igr-series-viewer";
import { DataChartMouseButtonEventArgs as DataChartMouseButtonEventArgs_internal } from "./DataChartMouseButtonEventArgs";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * Provides data for IgxDataChartComponent mouse button related events.
*
* `DataChartMouseButtonEventHandler` class represents the method that will handle IgxDataChartComponent mouse button related events.
*
* ```ts
* this.chart.seriesMouseLeftButtonDown.subscribe(this.chart_seriesMouseLeftButtonDown);
* chart_seriesMouseLeftButtonDown(sender :any,args: DataChartMouseButtonEventArgs )
*   {
*   }
* ```
*/
export declare class IgrDataChartMouseButtonEventArgs {
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): DataChartMouseButtonEventArgs_internal;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * Gets or sets a value that indicates the present state of the event handling for a routed
     * event as it travels the route.
     * ChartMouseButton events are not routed events; setting this property effects the underlying
     * MouseButtonEvent.
    *
    * Use the `handled` property to indicates the present state of the event handling for a routed event.
    */
    get handled(): boolean;
    set handled(v: boolean);
    /**
     * Gets or sets whether to cancel series selection.
    */
    get cancelSelection(): boolean;
    set cancelSelection(v: boolean);
    /**
     * Gets a reference to the object that raised the event.
    *
    * Use the `OriginalSource` property for the raised object event.
    *
    * ```ts
    * args.originalSource;
    * ```
    */
    get originalSource(): any;
    /**
     * Gets the ItemsSource item associated with the current event.
    *
    * Use the `Item` property to get the ItemsSource item associated with the current event.
    *
    * ```ts
    * var item1= args.item;
    * ```
    */
    get item(): any;
    set item(v: any);
    /**
     * Gets the series associated with the current event.
    *
    * Use the `Series` property for the associated current event.
    *
    * ```ts
    *  var DataSeries= args.series;
    * ```
    */
    get series(): IgrSeries;
    set series(v: IgrSeries);
    /**
     * Gets the mouse position relative to the plot area.
    */
    get plotAreaPosition(): IgPoint;
    set plotAreaPosition(v: IgPoint);
    /**
     * Gets the mouse position relative to the chart.
    */
    get chartPosition(): IgPoint;
    /**
     * Gets the Chart associated with the current event.
    *
    * Use the `Chart` property to get the chart associated with the current event.
    *
    * ```ts
    * var dataChart=  args.chart;
    * ```
    */
    get chart(): IgrSeriesViewer;
    set chart(v: IgrSeriesViewer);
    /**
     * Provides a human readable description of the mouse button event.
    
    *
    * Use the `ToString` property to provides a human readable discription.
    *
    * ```ts
    *   var item= args.item.label.toString();
    * ```
    */
    toString(): string;
    /**
     * Returns the x- and y- coordinates of the mouse pointer position, optionally evaluated
     * against the origin of a supplied UIElement.
    
    * @param relativeTo  * Any UIElement derived object that is contained by the the engine plug-in
     * and connected to the object tree. To specify the object relative to the overall the engine
     * coordinate system, use a relativeTo value of null.
    *
    * To get mouse X and Y position.
    *
    * ```ts
    *    var args.getPosition;
    * ```
    */
    getPosition(relativeTo: any): IgPoint;
}
