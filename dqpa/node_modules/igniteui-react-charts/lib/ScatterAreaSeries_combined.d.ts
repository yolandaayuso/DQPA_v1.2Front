import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import { ColorScale } from "./ColorScale";
import { Type, Point } from "igniteui-react-core";
import { Series } from "./Series";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { SeriesView } from "./SeriesView";
import { WriteableBitmap } from "igniteui-react-core";
import { TriangleRasterizer } from "./TriangleRasterizer";
import { ScalerParams } from "./ScalerParams";
import { ObservableColorCollection } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ScatterAreaSeries extends ScatterTriangulationSeries {
    static $t: Type;
    protected bj(): Series;
    protected get_eu(): boolean;
    constructor();
    private yt;
    get yv(): ColorScale;
    set yv(a: ColorScale);
    private zc;
    kq(a: any, b: string): any;
    md(a: string): string;
    y7: string;
    private yy;
    private get yz();
    private set yz(value);
    protected get_g7(): boolean;
    protected set_g7(a: boolean): void;
    protected q9(a: any, b: string, c: any, d: any): void;
    rs(a: boolean): void;
    rq(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected zd(a: SeriesView): void;
    private za;
    kn(a: Point): any;
    protected yr: number[];
    protected ys: number[];
    yx(a: SeriesView, b: ScalerParams, c: ScalerParams): TriangleRasterizer;
    protected y0(): ObservableColorCollection;
    yu: ColorScale;
    ze(): void;
    protected sh(): void;
    o5(a: boolean, b: SeriesView): void;
    protected cs(): SeriesView;
    q1(a: SeriesView): void;
    yw: ScatterAreaSeriesView;
    zb(a: any): void;
    y3: string;
    y5: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterAreaSeriesView extends SeriesView {
    static $t: Type;
    private b4;
    private b0;
    get b3(): number[];
    set b3(a: number[]);
    constructor(a: ScatterAreaSeries);
    cd(a: number, b: number): void;
    b9(a: any): void;
    private b8;
    private b7;
    private b6;
    b1(): number[];
    b2(a: boolean): number[];
    private cc;
    b5(a: Rect, b: ColorScale, c: IFastItemColumn$1<number>): TriangleRasterizer;
    cb(a: TriangleRasterizer): void;
    ca(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    ce(a: WriteableBitmap): void;
    an(a: any): void;
    getDefaultTooltipTemplate(): string;
}
