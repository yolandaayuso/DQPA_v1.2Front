import { IgrHighlightingInfo } from "igniteui-react-core";
import { AssigningSeriesStyleEventArgsBase as AssigningSeriesStyleEventArgsBase_internal } from "./AssigningSeriesStyleEventArgsBase";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * Represents event arguments base class for the AssigningCategoryStyleEventArgsBase
*/
export declare abstract class IgrAssigningSeriesStyleEventArgsBase {
    protected createImplementation(): AssigningSeriesStyleEventArgsBase_internal;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): AssigningSeriesStyleEventArgsBase_internal; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrAssigningSeriesStyleEventArgsBase;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * Gets the start index
    */
    get startIndex(): number;
    set startIndex(v: number);
    /**
     * Gets the end index
    */
    get endIndex(): number;
    set endIndex(v: number);
    /**
     * Gets the start date, if applicable
    */
    get startDate(): Date;
    set startDate(v: Date);
    /**
     * Gets the end date, if applicable
    */
    get endDate(): Date;
    set endDate(v: Date);
    /**
     * Gets a function that will return the items associated with this event.
    */
    get getItems(): (orderedStartIndex: number, orderedEndIndex: number) => any[];
    set getItems(v: (orderedStartIndex: number, orderedEndIndex: number) => any[]);
    /**
     * Gets or sets fill brush to use for the current item.
    */
    get fill(): string;
    set fill(v: string);
    /**
     * Gets or sets stroke to use for the current item.
    */
    get stroke(): string;
    set stroke(v: string);
    /**
     * Gets or sets opacity to use for the current item.
    */
    get opacity(): number;
    set opacity(v: number);
    /**
     * Gets or sets opacity to use for the current item.
    */
    get fadeOpacity(): number;
    set fadeOpacity(v: number);
    /**
     * Gets or sets highlighting info
    */
    get highlightingInfo(): IgrHighlightingInfo;
    set highlightingInfo(v: IgrHighlightingInfo);
    /**
     * Gets or sets selection highlighting info
    */
    get selectionHighlightingInfo(): IgrHighlightingInfo;
    set selectionHighlightingInfo(v: IgrHighlightingInfo);
    /**
     * Gets or sets focus highlighting info
    */
    get focusHighlightingInfo(): IgrHighlightingInfo;
    set focusHighlightingInfo(v: IgrHighlightingInfo);
    /**
     * Gets the max highlighting progress from all series.
    */
    get maxAllSeriesHighlightingProgress(): number;
    set maxAllSeriesHighlightingProgress(v: number);
    /**
     * Gets the sum of highlighting progress from all series.
    */
    get sumAllSeriesHighlightingProgress(): number;
    set sumAllSeriesHighlightingProgress(v: number);
    /**
     * Gets the max selection highlighting progress from all series.
    */
    get maxAllSeriesSelectionHighlightingProgress(): number;
    set maxAllSeriesSelectionHighlightingProgress(v: number);
    /**
     * Gets the sum of selection highlighting progress from all series.
    */
    get sumAllSeriesSelectionHighlightingProgress(): number;
    set sumAllSeriesSelectionHighlightingProgress(v: number);
    /**
     * Gets the max focus highlighting progress from all series.
    */
    get maxAllSeriesFocusHighlightingProgress(): number;
    set maxAllSeriesFocusHighlightingProgress(v: number);
    /**
     * Gets the sum of focus highlighting progress from all series.
    */
    get sumAllSeriesFocusHighlightingProgress(): number;
    set sumAllSeriesFocusHighlightingProgress(v: number);
    /**
     * Gets the average of highlighting progress from all the series.
    */
    get totalAllSeriesHighlightingProgress(): number;
    set totalAllSeriesHighlightingProgress(v: number);
    /**
     * Gets the high water mark highlighting progress.
    */
    get totalAllSeriesHighWaterMark(): number;
    set totalAllSeriesHighWaterMark(v: number);
    /**
     * Gets the high water mark focus highlighting progress.
    */
    get totalAllSeriesFocusHighWaterMark(): number;
    set totalAllSeriesFocusHighWaterMark(v: number);
    /**
     * Gets the high water mark selection highlighting progress.
    */
    get totalAllSeriesSelectionHighWaterMark(): number;
    set totalAllSeriesSelectionHighWaterMark(v: number);
    /**
     * Gets the average of selection highlighting progress from all the series.
    */
    get totalAllSeriesSelectionHighlightingProgress(): number;
    set totalAllSeriesSelectionHighlightingProgress(v: number);
    /**
     * Gets the average of selection highlighting progress from all the series.
    */
    get totalAllSeriesFocusHighlightingProgress(): number;
    set totalAllSeriesFocusHighlightingProgress(v: number);
    /**
     * Gets or sets if highlighting was handled by this event handler, and whether internal highlighting logic should be skipped.
    */
    get highlightingHandled(): boolean;
    set highlightingHandled(v: boolean);
    /**
     * Gets if this event has a valid date range
    */
    get hasDateRange(): boolean;
    set hasDateRange(v: boolean);
    /**
     * Gets if the current shape is identified as a negative shape if this series supports discrete negative shapes.
    */
    get isNegativeShape(): boolean;
    set isNegativeShape(v: boolean);
    /**
     * Gets if the current event is being raised for the thumbnail image.
    */
    get isThumbnail(): boolean;
    set isThumbnail(v: boolean);
    findByName(name: string): any;
}
