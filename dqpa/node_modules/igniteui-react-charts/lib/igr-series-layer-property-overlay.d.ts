import { IgrPropertyUpdatedEventArgs } from "igniteui-react-core";
import { IgrSeriesLayerPropertyOverlayValueResolvingEventArgs } from "./igr-series-layer-property-overlay-value-resolving-event-args";
import { SeriesLayerPropertyOverlay as SeriesLayerPropertyOverlay_internal } from "./SeriesLayerPropertyOverlay";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * Represents an axis annotation
*/
export declare class IgrSeriesLayerPropertyOverlay {
    protected createImplementation(): SeriesLayerPropertyOverlay_internal;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): SeriesLayerPropertyOverlay_internal;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * Gets or sets whether this property overlay targets the source series instead of the current layer while the layer is present.
    */
    get isSourceOverlay(): boolean;
    set isSourceOverlay(v: boolean);
    /**
     * Gets or sets whether this property overlay should be applied to the source or target even if the source property wasn't mutated.
    */
    get isAlwaysApplied(): boolean;
    set isAlwaysApplied(v: boolean);
    get internalPropertyName(): string;
    /**
     * Gets or sets the property to overlay on the series or series layer.
    */
    get propertyName(): string;
    set propertyName(v: string);
    /**
     * Gets or sets the property from which to get the current value, if different from property name.
    */
    get currentValuePropertyName(): string;
    set currentValuePropertyName(v: string);
    /**
     * Gets or sets the value to overlay on the series or series layer.
    */
    get value(): any;
    set value(v: any);
    findByName(name: string): any;
    private _propertyUpdated;
    private _propertyUpdated_wrapped;
    /**
     * Event raised when a property value is changed.
    */
    get propertyUpdated(): (s: IgrSeriesLayerPropertyOverlay, e: IgrPropertyUpdatedEventArgs) => void;
    set propertyUpdated(ev: (s: IgrSeriesLayerPropertyOverlay, e: IgrPropertyUpdatedEventArgs) => void);
    private _valueResolving;
    private _valueResolving_wrapped;
    get valueResolving(): (s: IgrSeriesLayerPropertyOverlay, e: IgrSeriesLayerPropertyOverlayValueResolvingEventArgs) => void;
    set valueResolving(ev: (s: IgrSeriesLayerPropertyOverlay, e: IgrSeriesLayerPropertyOverlayValueResolvingEventArgs) => void);
}
