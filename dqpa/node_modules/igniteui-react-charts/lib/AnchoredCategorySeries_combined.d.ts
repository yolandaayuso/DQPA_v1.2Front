import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { IHasSingleValueCategory } from "./IHasSingleValueCategory";
import { IHasCategoryTrendline } from "./IHasCategoryTrendline";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { IAnchoredCategorySeriesInteractionManager } from "./IAnchoredCategorySeriesInteractionManager";
import { Type, Point } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode } from "./CategoryMode";
import { ICategoryScaler } from "./ICategoryScaler";
import { IScaler } from "./IScaler";
import { IBucketizer } from "./IBucketizer";
import { CategorySeriesView } from "./CategorySeriesView";
import { IPreparesCategoryTrendline } from "./IPreparesCategoryTrendline";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior } from "./ConsolidatedItemHitTestBehavior";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ITrendLineManager } from "./ITrendLineManager";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { AxisRange } from "./AxisRange";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { RenderSurface } from "./RenderSurface";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { ValueLayerValueMode } from "./ValueLayerValueMode";
import { ValueCollisionMode } from "./ValueCollisionMode";
import { ChartSelection } from "./ChartSelection";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class AnchoredCategorySeries extends CategorySeries implements IIsCategoryBased, IHasSingleValueCategory, IHasCategoryTrendline, ITrendLineSeries {
    static $t: Type;
    private aaz;
    get aa0(): IAnchoredCategorySeriesInteractionManager;
    aav: AnchoredCategorySeriesView;
    getHostReferenceValue(): number;
    me(): string;
    protected cs(): SeriesView;
    q1(a: SeriesView): void;
    aa6: boolean;
    constructor();
    abn: string;
    kq(a: any, b: string): any;
    md(a: string): string;
    get valueColumn(): IFastItemColumn$1<number>;
    set valueColumn(a: IFastItemColumn$1<number>);
    private aa1;
    abf: string;
    abj: string;
    abl: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get aca(): Brush;
    set aca(a: Brush);
    static readonly abw: DependencyProperty;
    trendLineThickness: number;
    acc: PenLineCap;
    acb: DoubleCollection;
    trendLinePeriod: number;
    aba: number;
    gd(a: any): boolean;
    protected aas(a: number, b: number, c: Axis): any[];
    protected q9(a: any, b: string, c: any, d: any): void;
    ay(a: Axis): AxisRange;
    protected pb(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected zu(): number;
    aa9(a: CategorySeriesView): number;
    abt(a: PointCollection, b: number, c: CategorySeriesView): void;
    aat(a: List$1<number[]>, b: number, c: Rect, d: Rect): Clipper;
    aau(a: List$1<number[]>, b: number, c: Rect, d: Rect, e: boolean): Clipper;
    protected gb(): boolean;
    protected ht(): List$1<SeriesLayerPropertyOverlay>;
    private abp;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    o5(a: boolean, b: SeriesView): void;
    aah(a: CategoryFrame, b: CategorySeriesView): void;
    aak(a: CategoryFrame, b: CategorySeriesView): void;
    aaw: CategoryFrame;
    rq(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    abq(a: CategoryFrame, b: CategorySeriesView): void;
    protected sh(): void;
    kx(a: any, b: Point): any;
    get currentCategoryMode(): CategoryMode;
    get scaler(): ICategoryScaler;
    get yScaler(): IScaler;
    get bucketizer(): IBucketizer;
    get currentMode2Index(): number;
    provideCollisionDetector(): IDetectsCollisions;
    get trendlinePreparer(): IPreparesCategoryTrendline;
    protected abd: string;
    protected abc: string;
    abstract abr(a: Axis): void;
    abstract abs(a: Axis): void;
    protected pz(a: any): void;
    aax: CategorySeriesMarkerCollisionAvoidance;
    kn(a: Point): any;
    aay: ConsolidatedItemHitTestBehavior;
    get mayContainUnknowns(): boolean;
    iy(): number;
    protected get_abb(): number;
    protected get abb(): number;
    az(a: Rect): AxisRange;
    private abv;
    private aa3;
    private aa7;
    aa8: number;
    private abu;
    i8(a: ValueLayerValueMode, b: Axis): number;
    aq(a: ValueLayerValueMode): number[];
    wf(a: ValueLayerValueMode): Point;
    wg(a: number[]): Point;
    aad(a: ValueCollisionMode, b: List$1<ChartSelection>, c: number, d: number, e: number, f: number, g: SeriesSelectionBehavior): void;
    aa5(a: number, b: number, c: number): boolean;
    aa4(a: number, b: number, c: number): boolean;
    z7(a: List$1<ChartSelection>, b: number, c: SeriesSelectionBehavior): void;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredCategoryBucketCalculator extends CategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    protected i: AnchoredCategorySeriesView;
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
    private h;
    private j;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare class AnchoredCategorySeriesView extends CategorySeriesView {
    static $t: Type;
    c5: AnchoredCategorySeries;
    constructor(a: AnchoredCategorySeries);
    private c6;
    get c7(): ITrendLineManager;
    set c7(a: ITrendLineManager);
    get c8(): boolean;
    dc(): void;
    da(): void;
    c9(): void;
    cx(): CategoryBucketCalculator;
    db(): void;
    dd(): void;
    de(a: number): Rect;
    protected a7(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
