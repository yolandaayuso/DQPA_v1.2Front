import { StraightNumericAxisBase } from "./StraightNumericAxisBase";
import { IScaler } from "./IScaler";
import { AxisOrientation } from "./AxisOrientation";
import { AxisView } from "./AxisView";
import { Type, IList$1 } from "igniteui-react-core";
import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
import { NumericAxisRenderer } from "./NumericAxisRenderer";
import { ScalerParams } from "./ScalerParams";
import { NumericScaler } from "./NumericScaler";
import { Rect } from "igniteui-react-core";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { StraightNumericAxisBaseView } from "./StraightNumericAxisBaseView";
/**
 * @hidden
 */
export declare class NumericXAxis extends StraightNumericAxisBase implements IScaler {
    static $t: Type;
    a4(): AxisView;
    hv(a: AxisView): void;
    oj: NumericXAxisView;
    constructor();
    av(): AxisLabelPanelBase;
    k2(): NumericAxisRenderer;
    el(a: number, b: ScalerParams): number;
    eo(a: number, b: ScalerParams): number;
    hq(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    hp(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    hr(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    ok(a: number, b: number): void;
    k5(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    protected ic(a: boolean): void;
    protected is(a: Rect, b: Rect): void;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    k7(): NumericScaler;
    j$d(a: number, b: ScalerParams): number;
    j$c(a: number, b: ScalerParams): number;
    j$e(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$g(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$b(): boolean;
    j$a(): number[];
}
/**
 * @hidden
 */
export declare class NumericXAxisView extends StraightNumericAxisBaseView {
    static $t: Type;
    protected bo: NumericXAxis;
    constructor(a: NumericXAxis);
    al(): void;
}
