import { FinancialSeries } from "./FinancialSeries";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { TrendLineType } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PriceDisplayType } from "./PriceDisplayType";
import { CategoryCollisionMode } from "./CategoryCollisionMode";
import { Series } from "./Series";
import { SeriesView } from "./SeriesView";
import { Type, Point } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { ITrendLineManager } from "./ITrendLineManager";
import { Axis } from "./Axis";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { Pool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { GeometryGroup } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { ValueLayerValueMode } from "./ValueLayerValueMode";
import { ChartSelection } from "./ChartSelection";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { NumericAxisBase } from "./NumericAxisBase";
import { ValueCollisionMode } from "./ValueCollisionMode";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class FinancialPriceSeries extends FinancialSeries implements ITrendLineSeries {
    static $t: Type;
    protected bj(): Series;
    protected get_e9(): boolean;
    protected jk(): number;
    protected cs(): SeriesView;
    q1(a: SeriesView): void;
    aa2: FinancialPriceSeriesView;
    constructor();
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get acl(): Brush;
    set acl(a: Brush);
    static readonly ab2: DependencyProperty;
    trendLineThickness: number;
    aco: PenLineCap;
    acn: DoubleCollection;
    trendLinePeriod: number;
    aa9: number;
    protected pb(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    aa3: PriceDisplayType;
    aa1: CategoryCollisionMode;
    protected b2(): SeriesHitTestMode;
    wn(a: Point): Rect;
    private aa0;
    ao(a: Point): Rect[];
    gw(a: Point, b: boolean): boolean;
    protected gz(a: Point, b: boolean): boolean;
    protected q9(a: any, b: string, c: any, d: any): void;
    private ab1;
    ay(a: Axis): AxisRange;
    az(a: Rect): AxisRange;
    iy(): number;
    gd(a: any): boolean;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    aac(a: CategoryFrame, b: FinancialSeriesView): void;
    o5(a: boolean, b: SeriesView): void;
    protected sq(a: Rect, b: Rect): void;
    wv(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    protected get_ed(): boolean;
    aae(a: CategoryFrame, b: FinancialSeriesView): void;
    iw(): number;
    private abz;
    private aa7;
    private aby;
    kx(a: any, b: Point): any;
    protected sh(): void;
    protected pz(a: any): void;
    acm: Brush;
    vx(): Brush;
    r3(a: Brush, b: Brush): void;
    protected be(a: LegendItemBadgeShape): LegendItemBadgeShape;
    abk: string;
    abg: string;
    abb: string;
    abp: string;
    abm: string;
    abi: string;
    abd: string;
    abr: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    private aa4;
    private aa5;
    aa6: number;
    private ab0;
    aq(a: ValueLayerValueMode): number[];
    wf(a: ValueLayerValueMode): Point;
    wg(a: number[]): Point;
    ak(a: Rect, b: SeriesSelectionBehavior): ChartSelection[];
    p4(a: Rect, b: List$1<ChartSelection>, c: SeriesSelectionBehavior): void;
    abv(a: Rect, b: CategoryAxisBase, c: boolean, d: Rect, e: number, f: number): {
        p4: number;
        p5: number;
    };
    abu(a: Rect, b: NumericAxisBase, c: boolean, d: Rect, e: number, f: number): {
        p4: number;
        p5: number;
    };
    abt(a: List$1<ChartSelection>, b: number, c: SeriesSelectionBehavior): void;
    abx(a: List$1<ChartSelection>, b: number, c: number, d: SeriesSelectionBehavior): void;
    abw(a: ValueCollisionMode, b: List$1<ChartSelection>, c: number, d: number, e: number, f: number, g: SeriesSelectionBehavior): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialPriceSeriesView extends FinancialSeriesView {
    static $t: Type;
    protected b6: FinancialPriceSeries;
    constructor(a: FinancialPriceSeries);
    b9: Pool$1<Path>;
    cr(): Path;
    protected cc: List$1<Path>;
    ch(a: Path): void;
    cj(a: Path): void;
    ci(a: Path): void;
    protected b1(): FinancialBucketCalculator;
    au(): void;
    private cq;
    private cp;
    private b7;
    get b8(): ITrendLineManager;
    set b8(a: ITrendLineManager);
    get ca(): boolean;
    ck(): void;
    ce(): void;
    cd(): void;
    cn(): GeometryGroup;
    cm(): GeometryGroup;
    cl(): void;
    protected bd(): void;
    protected be(): void;
    protected ac(a: number): any;
    private co;
    protected ab(a: number): any;
    protected a8(a: RenderingContext, b: boolean): void;
    protected a7(a: RenderingContext, b: boolean): void;
    an(a: any): void;
    cf(): void;
    cb: boolean;
    cg(): void;
}
