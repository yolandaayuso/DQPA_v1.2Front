import { EventArgs, IList$1, Base, Type, IEnumerable$1, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { IHasCategoryAxis } from "./IHasCategoryAxis";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { Brush } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { NumericYAxis } from "./NumericYAxis";
import { HighlightingInfo } from "igniteui-react-core";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-react-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { Dictionary$2 } from "igniteui-react-core";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { TransitionOutSpeedType } from "./TransitionOutSpeedType";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CalculatedColumn } from "./CalculatedColumn";
import { ColumnSupportingCalculation } from "./ColumnSupportingCalculation";
import { RenderSurface } from "./RenderSurface";
import { SupportingCalculation$1 } from "./SupportingCalculation$1";
/**
 * @hidden
 */
export declare class FinancialEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: number, b: number, c: FinancialCalculationDataSource, d: FinancialCalculationSupportingCalculations, e: FinancialSeries);
    private _position;
    get position(): number;
    set position(a: number);
    private _count;
    get count(): number;
    set count(a: number);
    private _dataSource;
    get dataSource(): FinancialCalculationDataSource;
    set dataSource(a: FinancialCalculationDataSource);
    private _supportingCalculations;
    get supportingCalculations(): FinancialCalculationSupportingCalculations;
    set supportingCalculations(a: FinancialCalculationSupportingCalculations);
    private _basedOn;
    get basedOn(): IList$1<string>;
    set basedOn(a: IList$1<string>);
}
/**
 * @hidden
 */
export declare class FinancialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: FinancialSeriesView;
    constructor(a: FinancialSeriesView);
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    c: number;
    d: number;
    b: number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class FinancialSeries extends Series implements IHasCategoryAxis, IHasCategoryModePreference {
    static $t: Type;
    protected ht(): List$1<SeriesLayerPropertyOverlay>;
    private z9;
    private z7;
    private z8;
    private z6;
    private aaa;
    kv(): any;
    q1(a: SeriesView): void;
    xn: FinancialSeriesView;
    protected get_e6(): boolean;
    ai(): Axis[];
    kq(a: any, b: string): any;
    md(a: string): string;
    protected y6(): number;
    private y4;
    aj(a: Point): Point[][];
    al(a: Point): Point[][];
    constructor();
    aaw: Brush;
    vw(): Brush;
    vx(): Brush;
    o2(): void;
    protected get_ek(): boolean;
    protected get_f5(): boolean;
    w6: CategoryAxisBase;
    xp: NumericYAxis;
    zw: string;
    get x2(): IFastItemColumn$1<number>;
    set x2(a: IFastItemColumn$1<number>);
    private xx;
    zn: string;
    get x0(): IFastItemColumn$1<number>;
    set x0(a: IFastItemColumn$1<number>);
    private xv;
    zs: string;
    get x1(): IFastItemColumn$1<number>;
    set x1(a: IFastItemColumn$1<number>);
    private xw;
    za: string;
    get xz(): IFastItemColumn$1<number>;
    set xz(a: IFastItemColumn$1<number>);
    private xu;
    z0: string;
    get x4(): IFastItemColumn$1<number>;
    set x4(a: IFastItemColumn$1<number>);
    private xy;
    zj: string;
    zf: string;
    zh: string;
    zd: string;
    zl: string;
    protected gb(): boolean;
    yc: boolean;
    protected x7: boolean;
    assigningCategoryStyle: (sender: any, args: AssigningCategoryStyleEventArgs) => void;
    ye(): boolean;
    protected aad(a: AssigningCategoryStyleEventArgs): void;
    protected xf: CategorySeriesRenderManager;
    protected aab(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean, g: number): void;
    yw(a: Point): number;
    ka(a: Point, b: boolean): number;
    j8(a: Point, b: boolean): number;
    ip(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    wc(a: Point, b: boolean, c: boolean): Point;
    i5(a: Point, b: boolean, c: boolean): number;
    i1(a: Point, b: boolean, c: boolean): number;
    i3(a: Point, b: boolean, c: boolean): number;
    yy(a: Point, b: boolean, c: boolean): number;
    yz(a: Point, b: boolean, c: boolean): number;
    y0(a: Point, b: boolean, c: boolean): number;
    v8(a: Point, b: boolean, c: boolean): Point;
    wa(a: Point, b: boolean, c: boolean): Point;
    aay(a: Point, b: boolean, c: boolean): Point;
    aax(a: Point, b: boolean, c: boolean): Point;
    aaz(a: Point, b: boolean, c: boolean): Point;
    qb(): void;
    protected sr(a: Rect, b: Rect): void;
    protected sq(a: Rect, b: Rect): void;
    protected yh: Dictionary$2<IFastItemColumn$1<number>, string>;
    protected yi: Dictionary$2<string, string>;
    private x3;
    private z5;
    private x6;
    protected q9(a: any, b: string, c: any, d: any): void;
    x9(a: any): boolean;
    x8(a: any): boolean;
    protected wz(a: number, b: number, c: Axis): any[];
    protected y3(a: SeriesView): number;
    protected y5(a: SeriesView): number;
    wy(a: number, b: number): any[];
    private xt;
    protected get_fe(): boolean;
    o3(): void;
    dg(a: any, b: Point, c: boolean): HighlightingInfo;
    y7(a: Point): number;
    protected xs(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected xr(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected ya(): boolean;
    ir(a: Point): number;
    j3(a: Point): number;
    protected get_fs(): boolean;
    a0(): CategoryAxisBase;
    j5(a: Point): number;
    kn(a: Point): any;
    xa: CategoryFrame;
    xc: CategoryFrame;
    w8: CategoryFrame;
    w9(): CategoryFrame;
    protected yx(a: Rect, b: Rect, c: Rect): number;
    xh: CategoryTransitionInMode;
    yd: boolean;
    protected gn(): boolean;
    protected xg(): CategoryTransitionInMode;
    protected c4(): TransitionInSpeedType;
    protected c7(): TransitionOutSpeedType;
    aae(a: CategoryFrame, b: FinancialSeriesView): void;
    aac(a: CategoryFrame, b: FinancialSeriesView): void;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    xi: CategoryTransitionSourceFramePreparer;
    y1(a: FinancialSeriesView): number;
    protected o6(): void;
    rs(a: boolean): void;
    protected go(): boolean;
    typical: (sender: any, e: FinancialEventArgs) => void;
    typicalBasedOn: (sender: any, e: FinancialEventArgs) => void;
    protected yf(a: IList$1<string>): boolean;
    get yg(): boolean;
    protected yb(): boolean;
    protected z4(a: FinancialEventArgs): void;
    protected get yo(): IEnumerable$1<number>;
    private _yl;
    private yl;
    protected get yn(): IEnumerable$1<number>;
    private _yk;
    private yk;
    protected get ym(): IEnumerable$1<number>;
    private _yj;
    private yj;
    yq(a: IList$1<number>): IList$1<number>;
    private x5;
    protected yp(): IList$1<string>;
    private yu;
    getOpenColumnAsArray(): number[];
    private ys;
    getHighColumnAsArray(): number[];
    private yt;
    getLowColumnAsArray(): number[];
    private yr;
    getCloseColumnAsArray(): number[];
    private yv;
    getVolumeColumnAsArray(): number[];
    protected pb(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected xj(a: number, b: number): FinancialCalculationDataSource;
    y2(a: number): number;
    protected xk(a: FinancialCalculationDataSource): FinancialCalculationSupportingCalculations;
    get categoryAxis(): CategoryAxisBase;
    private xb;
    rt(a: Rect, b: RenderSurface): void;
    private w7;
    rq(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    aw(a: Axis): Axis;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    private xd;
    get xe(): CategoryMode;
    set xe(a: CategoryMode);
    protected get_fm(): boolean;
    r3(a: Brush, b: Brush): void;
    private aaf;
    private xo;
    private xq;
    kp(a: any): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialCalculationSupportingCalculations extends Base {
    static $t: Type;
    a: ColumnSupportingCalculation;
    c: ColumnSupportingCalculation;
    d: ColumnSupportingCalculation;
    b: ColumnSupportingCalculation;
    h: DataSourceSupportingCalculation;
    f: DataSourceSupportingCalculation;
    g: DataSourceSupportingCalculation;
    e: DataSourceSupportingCalculation;
    k: (arg1: (arg1: number) => number, arg2: number, arg3: number) => IEnumerable$1<number>;
    j: (arg1: (arg1: number) => number, arg2: number) => IEnumerable$1<number>;
    i: (arg1: number) => number;
}
/**
 * @hidden
 */
export declare class DataSourceSupportingCalculation extends SupportingCalculation$1<(dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>> {
    static $t: Type;
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>);
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>, c: IList$1<string>);
    constructor(a: number, ..._rest: any[]);
}
/**
 * @hidden
 */
export declare class FinancialCalculationDataSource extends Base {
    static $t: Type;
    private _openColumn;
    get openColumn(): IList$1<number>;
    set openColumn(a: IList$1<number>);
    private _closeColumn;
    get closeColumn(): IList$1<number>;
    set closeColumn(a: IList$1<number>);
    private _highColumn;
    get highColumn(): IList$1<number>;
    set highColumn(a: IList$1<number>);
    private _lowColumn;
    get lowColumn(): IList$1<number>;
    set lowColumn(a: IList$1<number>);
    private _volumeColumn;
    get volumeColumn(): IList$1<number>;
    set volumeColumn(a: IList$1<number>);
    private _indicatorColumn;
    get indicatorColumn(): IList$1<number>;
    set indicatorColumn(a: IList$1<number>);
    private _typicalColumn;
    get typicalColumn(): CalculatedColumn;
    set typicalColumn(a: CalculatedColumn);
    private _trueRange;
    get trueRange(): CalculatedColumn;
    set trueRange(a: CalculatedColumn);
    private _trueLow;
    get trueLow(): CalculatedColumn;
    set trueLow(a: CalculatedColumn);
    private _period;
    get period(): number;
    set period(a: number);
    private _shortPeriod;
    get shortPeriod(): number;
    set shortPeriod(a: number);
    private _longPeriod;
    get longPeriod(): number;
    set longPeriod(a: number);
    private _count;
    get count(): number;
    set count(a: number);
    private _calculateFrom;
    get calculateFrom(): number;
    set calculateFrom(a: number);
    private _calculateCount;
    get calculateCount(): number;
    set calculateCount(a: number);
    private _multiplier;
    get multiplier(): number;
    set multiplier(a: number);
    private _minimumValue;
    get minimumValue(): number;
    set minimumValue(a: number);
    private _maximumValue;
    get maximumValue(): number;
    set maximumValue(a: number);
    private _specifiesRange;
    get specifiesRange(): boolean;
    set specifiesRange(a: boolean);
    private _series;
    get series(): FinancialSeries;
    set series(a: FinancialSeries);
}
/**
 * @hidden
 */
export declare abstract class FinancialSeriesView extends SeriesView {
    static $t: Type;
    b2: FinancialSeries;
    b0: FinancialBucketCalculator;
    b4: number;
    b3(a: CategoryFrame): boolean;
    b5(a: CategoryFrame): void;
    constructor(a: FinancialSeries);
    protected abstract b1(): FinancialBucketCalculator;
    au(): void;
    getDefaultTooltipTemplate(): string;
    protected af(): void;
}
