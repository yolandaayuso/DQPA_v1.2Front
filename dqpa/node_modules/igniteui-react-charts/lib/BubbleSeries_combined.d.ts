import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries } from "igniteui-react-core";
import { ISupportsSizeScale } from "./ISupportsSizeScale";
import { ISupportsFillScale } from "./ISupportsFillScale";
import { Rect } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { ActualRange } from "./ActualRange";
import { Series } from "./Series";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { SeriesView } from "./SeriesView";
import { MarkerFillMode } from "./MarkerFillMode";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { Marker } from "./Marker";
import { ChartSelection } from "./ChartSelection";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { BrushSelectionMode } from "./BrushSelectionMode";
import { MarkerManagerBase } from "./MarkerManagerBase";
/**
 * @hidden
 */
export declare class BubbleSeries extends ScatterBase implements IScaleLegendSeries, ISupportsSizeScale, ISupportsFillScale {
    static $t: Type;
    protected bj(): Series;
    protected get_ei(): boolean;
    protected cs(): SeriesView;
    q1(a: SeriesView): void;
    acq: BubbleSeriesView;
    protected jl(): number;
    w1(): MarkerFillMode;
    constructor();
    private aeh;
    private aeg;
    isAttachedTo(a: IChartLegend): boolean;
    protected eh(): boolean;
    protected p2(a: (arg1: any) => void): void;
    get acy(): IFastItemColumn$1<number>;
    protected get_isColoredItemwise(): boolean;
    ac4: List$1<UIElement>;
    private aef;
    get legendReady(): boolean;
    get minScaleText(): string;
    get maxScaleText(): string;
    forScaleColors(a: (arg1: Brush, arg2: number) => void): boolean;
    adt: string;
    kq(a: any, b: string): any;
    md(a: string): string;
    get ac0(): IFastItemColumn$1<number>;
    set ac0(a: IFastItemColumn$1<number>);
    private acv;
    acs: SizeScale;
    adj: string;
    private acu;
    get acz(): IFastItemColumn$1<any>;
    set acz(a: IFastItemColumn$1<any>);
    ade: string;
    acp: BrushScale;
    private act;
    get acw(): IFastItemColumn$1<number>;
    set acw(a: IFastItemColumn$1<number>);
    ac1: boolean;
    ac2: boolean;
    ac8: number;
    ac7: number;
    ac3: boolean;
    aa4(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    abf(a: ScatterFrame, b: ScatterBaseView): void;
    private ady;
    static ac5(a: number, b: number, c: number, d: number, e: number): number;
    static ac6(a: number, b: number, c: number, d: number, logBase_: number, e: number): number;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    protected zr(a: string, b: FastItemsSourceEventAction): boolean;
    private adx;
    protected pb(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    qd(): void;
    qk(): void;
    protected q9(a: any, b: string, c: any, d: any): void;
    updateSizeScaleGlobals(): void;
    updateFillScaleGlobals(): void;
    aco(a: SizeScale): ActualRange;
    acn(): ActualRange;
    acr: SizeScale;
    ad0(a: List$1<Marker>, b: List$1<number>, c: Rect, d: boolean): void;
    adz(a: List$1<Marker>): void;
    ak(a: Rect, b: SeriesSelectionBehavior): ChartSelection[];
    p4(a: Rect, b: List$1<ChartSelection>, c: SeriesSelectionBehavior): void;
    private acx;
    adp: string;
    ada: string;
    adr: string;
    adc: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    get actualMarkerBrush(): Brush;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class CustomPaletteBrushScale extends BrushScale {
    static $t: Type;
    constructor();
    brushSelectionMode: BrushSelectionMode;
    getBrush1(a: number, b: number): Brush;
    protected get_isReady(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class BubbleSeriesView extends ScatterBaseView {
    static $t: Type;
    protected dk: BubbleSeries;
    constructor(a: BubbleSeries);
    au(): void;
    protected cz(): MarkerManagerBase;
    dm(): void;
    dn(): void;
    dl(): void;
    getDefaultTooltipTemplate(): string;
}
