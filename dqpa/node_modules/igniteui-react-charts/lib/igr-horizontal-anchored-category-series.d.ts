import { IgRect } from "igniteui-react-core";
import { IgPoint } from "igniteui-react-core";
import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { IgrNumericYAxis } from "./igr-numeric-y-axis";
import { IgrAnchoredCategorySeries, IIgrAnchoredCategorySeriesProps } from "./igr-anchored-category-series";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IgrAxis } from "./igr-axis";
/**
 * Base class for anchored category series with a category x-axis and a numeric y-axis.
*
* Instantiate HorizontalAnchoredCategorySeries
*
* ```ts
*  <IgrDataChart
*     dataSource={this.state.dataSource} >
*
*     <IgrCategoryXAxis name="xAxis" />
*     <IgrNumericYAxis name="yAxis" />
*
*     <IgrColumnSeries
*      name="series1"
*     xAxisName="xAxis"
* 	yAxisName="yAxis"
* 	valueMemberPath="Value" />
*  </IgrDataChart>
* ```
*
* ```ts
* this.columnSeries1 = new IgrColumnSeries({ name: "colSeries1" });
* this.columnSeries1.dataSource = this.categoryData;
* this.columnSeries1.xAxis = this.categoryXAxis;
* this.columnSeries1.yAxis = this.numericYAxis;
* this.columnSeries1.xAxisName = "categoryXAxis";
* this.columnSeries1.yAxisName = "numericYAxis";
* this.columnSeries1.valueMemberPath = "USA";
* ```
*/
export declare abstract class IgrHorizontalAnchoredCategorySeries<P extends IIgrHorizontalAnchoredCategorySeriesProps = IIgrHorizontalAnchoredCategorySeriesProps> extends IgrAnchoredCategorySeries<P> {
    /**
                                 * @hidden
                                 */
    get i(): HorizontalAnchoredCategorySeries;
    constructor(props: P);
    /**
     * Gets or sets the effective x-axis for this series.
    *
    * Instantiate xAxis
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * this.columnSeries1 = new IgrColumnSeries({ name: "colSeries1" });
    * this.columnSeries1.dataSource = this.categoryData;
    * this.columnSeries1.xAxis = this.categoryXAxis;
    * this.columnSeries1.yAxis = this.numericYAxis;
    * this.columnSeries1.xAxisName = "categoryXAxis";
    * this.columnSeries1.yAxisName = "numericYAxis";
    * this.columnSeries1.valueMemberPath = "USA";
    * ```
    */
    get xAxis(): IgrCategoryAxisBase;
    set xAxis(v: IgrCategoryAxisBase);
    private _xAxisName;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    get xAxisName(): string;
    set xAxisName(v: string);
    /**
     * Gets or sets the effective y-axis for this series.
    *
    * Instantiate yAxis
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * this.columnSeries1 = new IgrColumnSeries({ name: "colSeries1" });
    * this.columnSeries1.dataSource = this.categoryData;
    * this.columnSeries1.xAxis = this.categoryXAxis;
    * this.columnSeries1.yAxis = this.numericYAxis;
    * this.columnSeries1.xAxisName = "categoryXAxis";
    * this.columnSeries1.yAxisName = "numericYAxis";
    * this.columnSeries1.valueMemberPath = "USA";
    * ```
    */
    get yAxis(): IgrNumericYAxis;
    set yAxis(v: IgrNumericYAxis);
    private _yAxisName;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    get yAxisName(): string;
    set yAxisName(v: string);
    bindAxes(axes: IgrAxis[]): void;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinates for which to get a value marker bounding box for
    *
    * You can use the `GetCategoryWidth` to get the width of the category grouping a series is in.
    *
    * <!-- Angular JS -->
    *
    *     var x = financialSeries.GetSeriesValueMarkerBoundingBox(new IgxPoint());
    *
    * <!-- Ignite JS -->
    *
    *      N/A
    */
    getSeriesValueMarkerBoundingBox(world: IgPoint): IgRect;
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    *
    * You can use the `GetOffsetValue` to get the offset value for this series if grouped on a category axis.
    *
    * <!-- Angular JS -->
    *
    *       var g = series.getOffsetValue();
    *
    * <!-- Ignite JS -->
    *
    *      N/A
    */
    getOffsetValue(): number;
    /**
     * Returns the width of the category grouping this series is in.
    
    *
    * You can use the `GetCategoryWidth` to get the width of the category grouping a series is in.
    *
    * <!-- Angular JS -->
    *
    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);
    *
    * <!-- Ignite JS -->
    *
    *      N/A
    */
    getCategoryWidth(): number;
    getSeriesValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;
    getPreviousOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;
    getNextOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;
    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    *
    * You can use the `CanUseAsXAxis` method to determine if object can be used as XAxis
    *
    * <!-- Angular JS -->
    *
    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);
    */
    canUseAsXAxis(axis: any): boolean;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    *
    * You can use the `CanUseAsYAxis` method to determine if object can be used as YAxis
    *
    * <!-- Ignite JS -->
    *
    *      N/A
    */
    canUseAsYAxis(axis: any): boolean;
}
export interface IIgrHorizontalAnchoredCategorySeriesProps extends IIgrAnchoredCategorySeriesProps {
    /**
     * Gets or sets the effective x-axis for this series.
    *
    * Instantiate xAxis
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * this.columnSeries1 = new IgrColumnSeries({ name: "colSeries1" });
    * this.columnSeries1.dataSource = this.categoryData;
    * this.columnSeries1.xAxis = this.categoryXAxis;
    * this.columnSeries1.yAxis = this.numericYAxis;
    * this.columnSeries1.xAxisName = "categoryXAxis";
    * this.columnSeries1.yAxisName = "numericYAxis";
    * this.columnSeries1.valueMemberPath = "USA";
    * ```
    */
    xAxis?: IgrCategoryAxisBase;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    xAxisName?: string;
    /**
     * Gets or sets the effective y-axis for this series.
    *
    * Instantiate yAxis
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * this.columnSeries1 = new IgrColumnSeries({ name: "colSeries1" });
    * this.columnSeries1.dataSource = this.categoryData;
    * this.columnSeries1.xAxis = this.categoryXAxis;
    * this.columnSeries1.yAxis = this.numericYAxis;
    * this.columnSeries1.xAxisName = "categoryXAxis";
    * this.columnSeries1.yAxisName = "numericYAxis";
    * this.columnSeries1.valueMemberPath = "USA";
    * ```
    */
    yAxis?: IgrNumericYAxis;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    yAxisName?: string;
}
