import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { ICoalescingModerator } from "./ICoalescingModerator";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { OthersCategoryType } from "igniteui-react-core";
import { IList$1, Type } from "igniteui-react-core";
import { FastItemsSourceEventArgs } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
/**
 * @hidden
 */
export declare class ProportionalCategoryAngleAxis extends CategoryAngleAxis implements ICoalescingModerator {
    static $t: Type;
    private od;
    get ok(): string;
    set ok(a: string);
    fz(a: any, b: string): any;
    get normalizationMayContainUnknowns(): boolean;
    private nz;
    private get n1();
    private set n1(value);
    ob: number;
    ny: OthersCategoryType;
    oe: string;
    n0(a: string): IFastItemColumn$1<number>;
    protected hz(a: any, b: string, c: any, d: any): void;
    protected l7(a: FastItemsSourceEventArgs): void;
    private n3;
    private n8;
    getScaledAngle(a: number): number;
    protected get_cl(): boolean;
    m6(a: number, b: number, c: Rect, d: Rect, e: Rect): number;
    n9(a: number, b: Rect, c: Rect, d: Rect): number;
    m7(a: number, b: Rect, c: Rect, d: Rect): number;
    private n6;
    private n5;
    private n4;
    private n2;
    protected lm(): number;
    protected mx(a: number): boolean;
    protected nk(): string;
    protected my(a: number): boolean;
    protected ic(a: boolean): void;
    ensureSum(): void;
    private om;
    private n7;
    private oc;
    get othersValue(): number;
    get othersIndex(): number;
    get hasOthersCategory(): boolean;
    hq(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    getUnscaledAngle(a: number): number;
    isOthersValue(a: number): boolean;
    gf(a: number): string;
    oi(): string;
    getNormalizingValueAtIndex(a: number, b: number): number;
    oa(a: number): number;
    get isVertical(): boolean;
    j$d(a: number, b: ScalerParams): number;
    j$c(a: number, b: ScalerParams): number;
    j$e(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$g(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$b(): boolean;
    j$a(): number[];
    get itemsCount(): number;
    static $$p: string[];
}
