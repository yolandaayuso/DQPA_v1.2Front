import * as React from 'react';
import { IgRect } from "igniteui-react-core";
import { IgPoint } from "igniteui-react-core";
import { IgDataTemplate } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { MarkerFillMode } from "./MarkerFillMode";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { IgrPropertyUpdatedEventArgs } from "igniteui-react-core";
import { StackedFragmentSeries } from "./StackedFragmentSeries";
import { SeriesOutlineMode } from './SeriesOutlineMode';
import { LegendItemBadgeMode } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { CategoryTransitionInMode } from './CategoryTransitionInMode';
import { TransitionInSpeedType } from './TransitionInSpeedType';
import { PenLineCap } from "igniteui-react-core";
import { SeriesHighlightedValuesDisplayMode } from "igniteui-react-core";
/**
 * Represents a non-visual child of StackedSeriesBase.
*/
export declare class IgrStackedFragmentSeries<P extends IIgrStackedFragmentSeriesProps = IIgrStackedFragmentSeriesProps> extends React.Component<P, {}> {
    protected createImplementation(): StackedFragmentSeries;
    private onImplementationCreated;
    constructor(props: P);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    private provideRenderer;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): StackedFragmentSeries; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrStackedFragmentSeries;
    /**
 * Gets or sets the ItemsSource property for the current series object. Normally you will want to provide data to the parent series instead.
 * But if you have data as individual columns, it can be assigned here. The data must be aligned and have the same number of items for each fragment.
*/
    get dataSource(): any[];
    set dataSource(v: any[]);
    /**
     * Gets or sets the HighlightedItemsSource property for the current series object.
    */
    get highlightedDataSource(): any[];
    set highlightedDataSource(v: any[]);
    /**
     * Gets or sets the brush of the stacked fragment.
    */
    get brush(): string;
    set brush(v: string);
    /**
     * Gets the actual brush used by the series.
    */
    get actualBrush(): string;
    set actualBrush(v: string);
    /**
     * Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that
     * is used to outline the current series object.
    */
    get dashArray(): number[];
    set dashArray(v: number[]);
    /**
     * Gets or sets whether drop shadow should be enabled for this series.
    */
    get isDropShadowEnabled(): boolean;
    set isDropShadowEnabled(v: boolean);
    /**
     * Gets whether drop shadow is actually enabled for this series.
    */
    get actualIsDropShadowEnabled(): boolean;
    set actualIsDropShadowEnabled(v: boolean);
    /**
     * Gets or sets the shadow blur.
     * This property is ignored when
     * StackedFragmentSeries.UseSingleShadow is set to true.
    */
    get shadowBlur(): number;
    set shadowBlur(v: number);
    /**
     * Gets the actual shadow blur used by the series.
    */
    get actualShadowBlur(): number;
    set actualShadowBlur(v: number);
    /**
     * Gets or sets the drop shadow color.
    */
    get shadowColor(): string;
    set shadowColor(v: string);
    /**
     * Gets actual the drop shadow color used by the series.
    */
    get actualShadowColor(): string;
    set actualShadowColor(v: string);
    /**
     * Gets or sets whether drop shadow is applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
     * When this property is set to true, no
     * StackedFragmentSeries.ShadowBlur is applied.
    */
    get useSingleShadow(): boolean;
    set useSingleShadow(v: boolean);
    /**
     * Gets whether drop shadow is actually applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
    */
    get actualUseSingleShadow(): boolean;
    set actualUseSingleShadow(v: boolean);
    /**
     * Gets or sets the drop shadow x-offset.
    */
    get shadowOffsetX(): number;
    set shadowOffsetX(v: number);
    /**
     * Gets the actual drop shadow x-offset applied to the series.
    */
    get actualShadowOffsetX(): number;
    set actualShadowOffsetX(v: number);
    /**
     * Gets or sets the drop shadow y-offset.
    */
    get shadowOffsetY(): number;
    set shadowOffsetY(v: number);
    /**
     * Gets the actual drop shadow y-offset applied to the series.
    */
    get actualShadowOffsetY(): number;
    set actualShadowOffsetY(v: number);
    /**
     * The style of the end points of any lines or polylines representing this series.
     * Not every series type has a line at which it would be appropriate to display an end cap, so this property does not affect every series type.  LineSeries, for example, is affected by EndCap, but ColumnSeries is not.
    */
    get lineCap(): PenLineCap;
    set lineCap(v: PenLineCap);
    /**
     * Gets the actual end cap used by the series.
    */
    get actualLineCap(): PenLineCap;
    set actualLineCap(v: PenLineCap);
    /**
     * Gets or sets the LegendItemBadgeTemplate property.
     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
     * the series object itself.
    */
    get legendItemBadgeTemplate(): IgDataTemplate;
    set legendItemBadgeTemplate(v: IgDataTemplate);
    /**
     * Gets the actual legend item badge template used by the series.
    */
    get actualLegendItemBadgeTemplate(): IgDataTemplate;
    set actualLegendItemBadgeTemplate(v: IgDataTemplate);
    /**
     * Gets or sets the LegendItemTemplate property.
     * The legend item control content is created according to the LegendItemTemplate on-demand by
     * the series object itself.
    */
    get legendItemTemplate(): IgDataTemplate;
    set legendItemTemplate(v: IgDataTemplate);
    /**
     * Gets the actual legend item template used by the series.
    */
    get actualLegendItemTemplate(): IgDataTemplate;
    set actualLegendItemTemplate(v: IgDataTemplate);
    /**
     * Gets or sets the legend item visibility for the current series object.
    */
    get legendItemVisibility(): Visibility;
    set legendItemVisibility(v: Visibility);
    /**
     * Gets the actual visibility of the legend items in the series.
    */
    get actualLegendItemVisibility(): Visibility;
    set actualLegendItemVisibility(v: Visibility);
    /**
     * Gets or sets the type of legend badge representing the current series in a legend.
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on the series
    */
    get legendItemBadgeShape(): LegendItemBadgeShape;
    set legendItemBadgeShape(v: LegendItemBadgeShape);
    /**
     * Gets or sets the mode of legend badge representing the current series in a legend.
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on the series
    */
    get legendItemBadgeMode(): LegendItemBadgeMode;
    set legendItemBadgeMode(v: LegendItemBadgeMode);
    /**
     * Gets the actual LegendItemBadgeShape of the series.
    */
    get actualLegendItemBadgeShape(): LegendItemBadgeShape;
    set actualLegendItemBadgeShape(v: LegendItemBadgeShape);
    /**
     * Gets the actual LegendItemBadgeMode of the series.
    */
    get actualLegendItemBadgeMode(): LegendItemBadgeMode;
    set actualLegendItemBadgeMode(v: LegendItemBadgeMode);
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    get markerBrush(): string;
    set markerBrush(v: string);
    /**
     * Gets the actual marker brush of the series.
    */
    get actualMarkerBrush(): string;
    set actualMarkerBrush(v: string);
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    get markerOutline(): string;
    set markerOutline(v: string);
    /**
     * Gets the actual marker outline of the series.
    */
    get actualMarkerOutline(): string;
    set actualMarkerOutline(v: string);
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    get markerTemplate(): IgDataTemplate;
    set markerTemplate(v: IgDataTemplate);
    /**
     * Gets the actual marker template used by the series.
    */
    get actualMarkerTemplate(): IgDataTemplate;
    set actualMarkerTemplate(v: IgDataTemplate);
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    get markerType(): MarkerType;
    set markerType(v: MarkerType);
    /**
     * Gets the actual marker type set used in the series.
    */
    get actualMarkerType(): MarkerType;
    set actualMarkerType(v: MarkerType);
    /**
     * Gets or sets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
    */
    get markerFillMode(): MarkerFillMode;
    set markerFillMode(v: MarkerFillMode);
    /**
     * Gets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
    */
    get actualMarkerFillMode(): MarkerFillMode;
    set actualMarkerFillMode(v: MarkerFillMode);
    /**
     * Gets or sets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
    */
    get markerOutlineMode(): MarkerOutlineMode;
    set markerOutlineMode(v: MarkerOutlineMode);
    /**
     * Gets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
    */
    get actualMarkerOutlineMode(): MarkerOutlineMode;
    set actualMarkerOutlineMode(v: MarkerOutlineMode);
    /**
     * Gets or sets the Name of the stacked fragment.
    */
    get name(): string;
    set name(v: string);
    /**
     * Gets or sets the Opacity of the stacked fragment.
    */
    get opacity(): number;
    set opacity(v: number);
    /**
     * Gets the series opacity.
    */
    get actualOpacity(): number;
    set actualOpacity(v: number);
    /**
     * Gets or sets the brush to use for the outline of the series.
     * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.
    */
    get outline(): string;
    set outline(v: string);
    /**
     * Gets the series outline.
    */
    get actualOutline(): string;
    set actualOutline(v: string);
    /**
     * Gets or sets the AreaFillOpacity of the stacked fragment. This property only applies for area-like series.
    */
    get areaFillOpacity(): number;
    set areaFillOpacity(v: number);
    /**
     * Gets the series ActualAreaFillOpacity.  This property only applies for area-like series.
    */
    get actualAreaFillOpacity(): number;
    set actualAreaFillOpacity(v: number);
    /**
     * Gets or sets the opacity to use for the marker fills.
    */
    get markerFillOpacity(): number;
    set markerFillOpacity(v: number);
    /**
     * Gets the actual opacity to use for hte marker fills.
    */
    get actualMarkerFillOpacity(): number;
    set actualMarkerFillOpacity(v: number);
    /**
     * Gets or sets the outline mode to use for the fragment.
    */
    get outlineMode(): SeriesOutlineMode;
    set outlineMode(v: SeriesOutlineMode);
    /**
     * Gets the actual outline mode to use for the fragment.
    */
    get actualOutlineMode(): SeriesOutlineMode;
    set actualOutlineMode(v: SeriesOutlineMode);
    /**
     * Gets or sets the target opacity to fade to for fade style highlighting.
    */
    get highlightingFadeOpacity(): number;
    set highlightingFadeOpacity(v: number);
    /**
     * Gets the actual target opacity to fade to for fade style highlighting.
    */
    get actualHighlightingFadeOpacity(): number;
    set actualHighlightingFadeOpacity(v: number);
    /**
     * Gets the actual mode for displaying highlighted values.
    */
    get actualHighlightedValuesDisplayMode(): SeriesHighlightedValuesDisplayMode;
    set actualHighlightedValuesDisplayMode(v: SeriesHighlightedValuesDisplayMode);
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
    */
    get radiusX(): number;
    set radiusX(v: number);
    /**
     * Gets the actual corner radius of the series
    */
    get actualRadiusX(): number;
    set actualRadiusX(v: number);
    /**
     * Gets whether the spline part is considered to be part of the range
    */
    get actualIsSplineShapePartOfRange(): boolean;
    set actualIsSplineShapePartOfRange(v: boolean);
    /**
     * Gets or sets whether to include the spline shape in the axis range requested of the axis.
    */
    get isSplineShapePartOfRange(): boolean;
    set isSplineShapePartOfRange(v: boolean);
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
    */
    get radiusY(): number;
    set radiusY(v: number);
    /**
     * Gets the actual corner radius of the series
    */
    get actualRadiusY(): number;
    set actualRadiusY(v: number);
    /**
     * Gets or sets the width of the current series object's line thickness.
    */
    get thickness(): number;
    set thickness(v: number);
    /**
     * Gets or sets the thickness of this stacked fragment.
    */
    get actualThickness(): number;
    set actualThickness(v: number);
    /**
     * Gets or sets the width of the current series object's marker thickness.
    */
    get markerThickness(): number;
    set markerThickness(v: number);
    /**
     * Gets actual marker thickness of this stacked fragment.
    */
    get actualMarkerThickness(): number;
    set actualMarkerThickness(v: number);
    /**
     * Gets or sets the Title property.
     * The legend item control is created according to the Title on-demand by
     * the series object itself.
    */
    get title(): any;
    set title(v: any);
    /**
     * Gets or sets the EasingFunction used to morph the current series.
    */
    get transitionEasingFunction(): (time: number) => number;
    set transitionEasingFunction(v: (time: number) => number);
    /**
     * Gets or sets the duration of the current series's morph.
    */
    get transitionDuration(): number;
    set transitionDuration(v: number);
    /**
     * Gets or sets the duration of the current series's transition in morph.
    */
    get transitionInDuration(): number;
    set transitionInDuration(v: number);
    /**
     * Gets or sets the EasingFunction used to morph the current series during the initial transition.
    */
    get transitionInEasingFunction(): (time: number) => number;
    set transitionInEasingFunction(v: (time: number) => number);
    /**
     * Gets or sets the method by which to animate the data into the chart when the chart data source is swapped.
     * Note: Transitions are not currently supported for stacked series.
    */
    get transitionInMode(): CategoryTransitionInMode;
    set transitionInMode(v: CategoryTransitionInMode);
    /**
     * Gets or sets whether the series should transition into the plot area when a new data source is assigned.
     * Note: Transitions are not currently supported for stacked series.
    */
    get isTransitionInEnabled(): boolean;
    set isTransitionInEnabled(v: boolean);
    /**
     * Gets or sets the duration of the current series's transition in morph.
    */
    get transitionInSpeedType(): TransitionInSpeedType;
    set transitionInSpeedType(v: TransitionInSpeedType);
    /**
     * Gets the the resolved value of whether transition in is enabled.
    */
    get actualIsTransitionInEnabled(): boolean;
    set actualIsTransitionInEnabled(v: boolean);
    /**
     * Gets the resolved transition in duration
    */
    get actualTransitionInDuration(): number;
    set actualTransitionInDuration(v: number);
    /**
     * Gets the series transition easing function.
    */
    get actualTransitionInMode(): CategoryTransitionInMode;
    set actualTransitionInMode(v: CategoryTransitionInMode);
    /**
     * Gets the series transition easing function.
    */
    get actualTransitionInSpeedType(): TransitionInSpeedType;
    set actualTransitionInSpeedType(v: TransitionInSpeedType);
    /**
     * Gets the series transition easing function.
    */
    get actualTransitionInEasingFunction(): (time: number) => number;
    set actualTransitionInEasingFunction(v: (time: number) => number);
    /**
     * Gets the series transition easing function.
    */
    get actualTransitionEasingFunction(): (time: number) => number;
    set actualTransitionEasingFunction(v: (time: number) => number);
    /**
     * Gets the series transition duration.
    */
    get actualTransitionDuration(): number;
    set actualTransitionDuration(v: number);
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    get valueMemberPath(): string;
    set valueMemberPath(v: string);
    /**
     * Gets or sets the label displayed before series value in the Data Legend.
    */
    get valueMemberAsLegendLabel(): string;
    set valueMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the unit displayed after series value in the Data Legend.
    */
    get valueMemberAsLegendUnit(): string;
    set valueMemberAsLegendUnit(v: string);
    /**
     * Gets the label displayed before series value in the Data Legend.
    */
    get actualValueMemberAsLegendLabel(): string;
    set actualValueMemberAsLegendLabel(v: string);
    /**
     * Gets the unit displayed after series value in the Data Legend.
    */
    get actualValueMemberAsLegendUnit(): string;
    set actualValueMemberAsLegendUnit(v: string);
    /**
     * Gets or sets a name used for grouping multiple fragment series in the Data Legend
     * If not set, series will be grouped by series family, e.g. "Stacked Series"
    */
    get dataLegendGroup(): string;
    set dataLegendGroup(v: string);
    /**
     * Gets or sets a name used for grouping highlighted series in the Data Legend
     * If not set, series will default to main series' HighlightedValuesDataLegendGroup, e.g. "Stacked Highlight"
    */
    get highlightedValuesDataLegendGroup(): string;
    set highlightedValuesDataLegendGroup(v: string);
    /**
     * Gets the label displayed before series value in the Data Legend.
    */
    get actualDataLegendGroup(): string;
    set actualDataLegendGroup(v: string);
    /**
     * Gets the label displayed before series value in the Data Legend.
    */
    get actualHighlightedValuesDataLegendGroup(): string;
    set actualHighlightedValuesDataLegendGroup(v: string);
    /**
     * Gets or sets the Visibility of the stacked fragment.
    */
    get visibility(): Visibility;
    set visibility(v: Visibility);
    /**
     * Gets the actual visibility of the stacked fragment.
    */
    get actualVisibility(): Visibility;
    set actualVisibility(v: Visibility);
    /**
     * Gets the resolved brush used between the local series and the parent series.
    */
    get parentOrLocalBrush(): string;
    set parentOrLocalBrush(v: string);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
 * Gets the item index associated with the specified world position

*/
    getItemIndex(world: IgPoint): number;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    getPreviousOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;
    getNextOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;
    getSeriesValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;
    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    */
    getSeriesValueBoundingBox(world: IgPoint): IgRect;
    /**
     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinates for which to get a value marker bounding box for
    */
    getSeriesValueMarkerBoundingBox(world: IgPoint): IgRect;
    getSeriesHighValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;
    getSeriesHighValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    getSeriesLowValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;
    getSeriesLowValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    getSeriesValuePositionFromSeriesPixel(mouse: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    getSeriesValueFromSeriesPixel(mouse: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    getItemSpan(): number;
    /**
     * Converts a point from coordinates within the series plot area to a world position within axis space.
    
    * @param seriesPoint  * The pixel location within the plot area of the series.
    */
    toWorldPosition(seriesPoint: IgPoint): IgPoint;
    /**
     * Converts a point from world coordinates to coordinates within the viewport of the series.
    
    * @param world  * The world position from which to convert.
    */
    fromWorldPosition(world: IgPoint): IgPoint;
    /**
     * Requests that the provided item should be brought into view if possible.
    
    * @param item  * The item to attempt to bring into view.
    */
    scrollIntoView(item: any): boolean;
    /**
     * Gets the effective viewport, adjusted to account for margins and other factors.
    
    */
    getEffectiveViewport(): IgRect;
    /**
     * Notifies the series that a visual property has changed, requiring a visual update.
    
    */
    notifyVisualPropertiesChanged(): void;
    /**
     * Simulates a pointer hover over the series surface.
    
    * @param point  * The pointer position relative to the series viewport over which to hover.
    */
    simulateHover(point: IgPoint): void;
    /**
     * Moves the cursor point to the provided world position. Some series may react to the current cursor position.
    
    * @param point  * The cursor point, in world coordinates.
    */
    moveCursorPoint(point: IgPoint): void;
    replayTransitionIn(): void;
    private _propertyUpdated;
    private _propertyUpdated_wrapped;
    /**
     * Event raised when a property (including "effective" and non-dependency property) value changes.
    */
    get propertyUpdated(): (s: IgrStackedFragmentSeries, e: IgrPropertyUpdatedEventArgs) => void;
    set propertyUpdated(ev: (s: IgrStackedFragmentSeries, e: IgrPropertyUpdatedEventArgs) => void);
}
export interface IIgrStackedFragmentSeriesProps {
    /**
 * Gets or sets the ItemsSource property for the current series object. Normally you will want to provide data to the parent series instead.
 * But if you have data as individual columns, it can be assigned here. The data must be aligned and have the same number of items for each fragment.
*/
    dataSource?: any[];
    /**
     * Gets or sets the HighlightedItemsSource property for the current series object.
    */
    highlightedDataSource?: any[];
    /**
     * Gets or sets the brush of the stacked fragment.
    */
    brush?: string;
    /**
     * Gets the actual brush used by the series.
    */
    actualBrush?: string;
    /**
     * Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that
     * is used to outline the current series object.
    */
    dashArray?: number[] | string;
    /**
     * Gets or sets whether drop shadow should be enabled for this series.
    */
    isDropShadowEnabled?: boolean | string;
    /**
     * Gets whether drop shadow is actually enabled for this series.
    */
    actualIsDropShadowEnabled?: boolean | string;
    /**
     * Gets or sets the shadow blur.
     * This property is ignored when
     * StackedFragmentSeries.UseSingleShadow is set to true.
    */
    shadowBlur?: number | string;
    /**
     * Gets the actual shadow blur used by the series.
    */
    actualShadowBlur?: number | string;
    /**
     * Gets or sets the drop shadow color.
    */
    shadowColor?: string;
    /**
     * Gets actual the drop shadow color used by the series.
    */
    actualShadowColor?: string;
    /**
     * Gets or sets whether drop shadow is applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
     * When this property is set to true, no
     * StackedFragmentSeries.ShadowBlur is applied.
    */
    useSingleShadow?: boolean | string;
    /**
     * Gets whether drop shadow is actually applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
    */
    actualUseSingleShadow?: boolean | string;
    /**
     * Gets or sets the drop shadow x-offset.
    */
    shadowOffsetX?: number | string;
    /**
     * Gets the actual drop shadow x-offset applied to the series.
    */
    actualShadowOffsetX?: number | string;
    /**
     * Gets or sets the drop shadow y-offset.
    */
    shadowOffsetY?: number | string;
    /**
     * Gets the actual drop shadow y-offset applied to the series.
    */
    actualShadowOffsetY?: number | string;
    /**
     * The style of the end points of any lines or polylines representing this series.
     * Not every series type has a line at which it would be appropriate to display an end cap, so this property does not affect every series type.  LineSeries, for example, is affected by EndCap, but ColumnSeries is not.
    */
    lineCap?: PenLineCap | string;
    /**
     * Gets the actual end cap used by the series.
    */
    actualLineCap?: PenLineCap | string;
    /**
     * Gets or sets the LegendItemBadgeTemplate property.
     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
     * the series object itself.
    */
    legendItemBadgeTemplate?: IgDataTemplate;
    /**
     * Gets the actual legend item badge template used by the series.
    */
    actualLegendItemBadgeTemplate?: IgDataTemplate;
    /**
     * Gets or sets the LegendItemTemplate property.
     * The legend item control content is created according to the LegendItemTemplate on-demand by
     * the series object itself.
    */
    legendItemTemplate?: IgDataTemplate;
    /**
     * Gets the actual legend item template used by the series.
    */
    actualLegendItemTemplate?: IgDataTemplate;
    /**
     * Gets or sets the legend item visibility for the current series object.
    */
    legendItemVisibility?: Visibility | string;
    /**
     * Gets the actual visibility of the legend items in the series.
    */
    actualLegendItemVisibility?: Visibility | string;
    /**
     * Gets or sets the type of legend badge representing the current series in a legend.
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on the series
    */
    legendItemBadgeShape?: LegendItemBadgeShape | string;
    /**
     * Gets or sets the mode of legend badge representing the current series in a legend.
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on the series
    */
    legendItemBadgeMode?: LegendItemBadgeMode | string;
    /**
     * Gets the actual LegendItemBadgeShape of the series.
    */
    actualLegendItemBadgeShape?: LegendItemBadgeShape | string;
    /**
     * Gets the actual LegendItemBadgeMode of the series.
    */
    actualLegendItemBadgeMode?: LegendItemBadgeMode | string;
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    markerBrush?: string;
    /**
     * Gets the actual marker brush of the series.
    */
    actualMarkerBrush?: string;
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    markerOutline?: string;
    /**
     * Gets the actual marker outline of the series.
    */
    actualMarkerOutline?: string;
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    markerTemplate?: IgDataTemplate;
    /**
     * Gets the actual marker template used by the series.
    */
    actualMarkerTemplate?: IgDataTemplate;
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    markerType?: MarkerType | string;
    /**
     * Gets the actual marker type set used in the series.
    */
    actualMarkerType?: MarkerType | string;
    /**
     * Gets or sets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
    */
    markerFillMode?: MarkerFillMode | string;
    /**
     * Gets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
    */
    actualMarkerFillMode?: MarkerFillMode | string;
    /**
     * Gets or sets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
    */
    markerOutlineMode?: MarkerOutlineMode | string;
    /**
     * Gets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
    */
    actualMarkerOutlineMode?: MarkerOutlineMode | string;
    /**
     * Gets or sets the Name of the stacked fragment.
    */
    name?: string;
    /**
     * Gets or sets the Opacity of the stacked fragment.
    */
    opacity?: number | string;
    /**
     * Gets the series opacity.
    */
    actualOpacity?: number | string;
    /**
     * Gets or sets the brush to use for the outline of the series.
     * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.
    */
    outline?: string;
    /**
     * Gets the series outline.
    */
    actualOutline?: string;
    /**
     * Gets or sets the AreaFillOpacity of the stacked fragment. This property only applies for area-like series.
    */
    areaFillOpacity?: number | string;
    /**
     * Gets the series ActualAreaFillOpacity.  This property only applies for area-like series.
    */
    actualAreaFillOpacity?: number | string;
    /**
     * Gets or sets the opacity to use for the marker fills.
    */
    markerFillOpacity?: number | string;
    /**
     * Gets the actual opacity to use for hte marker fills.
    */
    actualMarkerFillOpacity?: number | string;
    /**
     * Gets or sets the outline mode to use for the fragment.
    */
    outlineMode?: SeriesOutlineMode | string;
    /**
     * Gets the actual outline mode to use for the fragment.
    */
    actualOutlineMode?: SeriesOutlineMode | string;
    /**
     * Gets or sets the target opacity to fade to for fade style highlighting.
    */
    highlightingFadeOpacity?: number | string;
    /**
     * Gets the actual target opacity to fade to for fade style highlighting.
    */
    actualHighlightingFadeOpacity?: number | string;
    /**
     * Gets the actual mode for displaying highlighted values.
    */
    actualHighlightedValuesDisplayMode?: SeriesHighlightedValuesDisplayMode | string;
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
    */
    radiusX?: number | string;
    /**
     * Gets the actual corner radius of the series
    */
    actualRadiusX?: number | string;
    /**
     * Gets whether the spline part is considered to be part of the range
    */
    actualIsSplineShapePartOfRange?: boolean | string;
    /**
     * Gets or sets whether to include the spline shape in the axis range requested of the axis.
    */
    isSplineShapePartOfRange?: boolean | string;
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
    */
    radiusY?: number | string;
    /**
     * Gets the actual corner radius of the series
    */
    actualRadiusY?: number | string;
    /**
     * Gets or sets the width of the current series object's line thickness.
    */
    thickness?: number | string;
    /**
     * Gets or sets the thickness of this stacked fragment.
    */
    actualThickness?: number | string;
    /**
     * Gets or sets the width of the current series object's marker thickness.
    */
    markerThickness?: number | string;
    /**
     * Gets actual marker thickness of this stacked fragment.
    */
    actualMarkerThickness?: number | string;
    /**
     * Gets or sets the Title property.
     * The legend item control is created according to the Title on-demand by
     * the series object itself.
    */
    title?: any;
    /**
     * Gets or sets the EasingFunction used to morph the current series.
    */
    transitionEasingFunction?: (time: number) => number;
    /**
     * Gets or sets the duration of the current series's morph.
    */
    transitionDuration?: number | string;
    /**
     * Gets or sets the duration of the current series's transition in morph.
    */
    transitionInDuration?: number | string;
    /**
     * Gets or sets the EasingFunction used to morph the current series during the initial transition.
    */
    transitionInEasingFunction?: (time: number) => number;
    /**
     * Gets or sets the method by which to animate the data into the chart when the chart data source is swapped.
     * Note: Transitions are not currently supported for stacked series.
    */
    transitionInMode?: CategoryTransitionInMode | string;
    /**
     * Gets or sets whether the series should transition into the plot area when a new data source is assigned.
     * Note: Transitions are not currently supported for stacked series.
    */
    isTransitionInEnabled?: boolean | string;
    /**
     * Gets or sets the duration of the current series's transition in morph.
    */
    transitionInSpeedType?: TransitionInSpeedType | string;
    /**
     * Gets the the resolved value of whether transition in is enabled.
    */
    actualIsTransitionInEnabled?: boolean | string;
    /**
     * Gets the resolved transition in duration
    */
    actualTransitionInDuration?: number | string;
    /**
     * Gets the series transition easing function.
    */
    actualTransitionInMode?: CategoryTransitionInMode | string;
    /**
     * Gets the series transition easing function.
    */
    actualTransitionInSpeedType?: TransitionInSpeedType | string;
    /**
     * Gets the series transition easing function.
    */
    actualTransitionInEasingFunction?: (time: number) => number;
    /**
     * Gets the series transition easing function.
    */
    actualTransitionEasingFunction?: (time: number) => number;
    /**
     * Gets the series transition duration.
    */
    actualTransitionDuration?: number | string;
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    valueMemberPath?: string;
    /**
     * Gets or sets the label displayed before series value in the Data Legend.
    */
    valueMemberAsLegendLabel?: string;
    /**
     * Gets or sets the unit displayed after series value in the Data Legend.
    */
    valueMemberAsLegendUnit?: string;
    /**
     * Gets the label displayed before series value in the Data Legend.
    */
    actualValueMemberAsLegendLabel?: string;
    /**
     * Gets the unit displayed after series value in the Data Legend.
    */
    actualValueMemberAsLegendUnit?: string;
    /**
     * Gets or sets a name used for grouping multiple fragment series in the Data Legend
     * If not set, series will be grouped by series family, e.g. "Stacked Series"
    */
    dataLegendGroup?: string;
    /**
     * Gets or sets a name used for grouping highlighted series in the Data Legend
     * If not set, series will default to main series' HighlightedValuesDataLegendGroup, e.g. "Stacked Highlight"
    */
    highlightedValuesDataLegendGroup?: string;
    /**
     * Gets the label displayed before series value in the Data Legend.
    */
    actualDataLegendGroup?: string;
    /**
     * Gets the label displayed before series value in the Data Legend.
    */
    actualHighlightedValuesDataLegendGroup?: string;
    /**
     * Gets or sets the Visibility of the stacked fragment.
    */
    visibility?: Visibility | string;
    /**
     * Gets the actual visibility of the stacked fragment.
    */
    actualVisibility?: Visibility | string;
    /**
     * Gets the resolved brush used between the local series and the parent series.
    */
    parentOrLocalBrush?: string;
    /**
 * Event raised when a property (including "effective" and non-dependency property) value changes.
*/
    propertyUpdated?: (s: IgrStackedFragmentSeries, e: IgrPropertyUpdatedEventArgs) => void;
}
