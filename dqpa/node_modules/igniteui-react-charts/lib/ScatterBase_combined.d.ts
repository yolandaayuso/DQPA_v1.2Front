import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { Axis } from "./Axis";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { HighlightingInfo } from "igniteui-react-core";
import { ScatterFrame } from "./ScatterFrame";
import { SeriesView } from "./SeriesView";
import { Point, Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { AxisRange } from "./AxisRange";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Thickness } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { Size } from "igniteui-react-core";
import { AssigningScatterStyleEventArgs } from "./AssigningScatterStyleEventArgs";
import { AssigningScatterMarkerStyleEventArgs } from "./AssigningScatterMarkerStyleEventArgs";
import { ChartSelection } from "./ChartSelection";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { MarkerCollisionMode } from "./MarkerCollisionMode";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { IErrorBarCalculator } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { ValueLayerValueMode } from "./ValueLayerValueMode";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class ScatterBase extends MarkerSeries implements ISupportsErrorBars, ITrendLineSeries {
    static $t: Type;
    protected cs(): SeriesView;
    o2(): void;
    q1(a: SeriesView): void;
    yx: ScatterBaseView;
    protected get_fw(): boolean;
    ai(): Axis[];
    kq(a: any, b: string): any;
    md(a: string): string;
    eb(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number, e: boolean): boolean;
    protected b2(): SeriesHitTestMode;
    wp(a: Point): Rect;
    gw(a: Point, b: boolean): boolean;
    constructor();
    yw: ScatterAxisInfoCache;
    xAxis: NumericXAxis;
    yAxis: NumericYAxis;
    aat: string;
    get zh(): IFastItemColumn$1<number>;
    set zh(a: IFastItemColumn$1<number>);
    private zf;
    aa1: string;
    get zi(): IFastItemColumn$1<number>;
    set zi(a: IFastItemColumn$1<number>);
    private zg;
    aad: string;
    aaf: string;
    protected gb(): boolean;
    protected zw(): boolean;
    protected ht(): List$1<SeriesLayerPropertyOverlay>;
    private aa8;
    private aa9;
    aap: string;
    aax: string;
    aar: string;
    aaz: string;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get aci(): Brush;
    set aci(a: Brush);
    static readonly abt: DependencyProperty;
    trendLineThickness: number;
    ack: PenLineCap;
    acj: DoubleCollection;
    trendLinePeriod: number;
    yt: CollisionAvoidanceType;
    get GetErrorBarsXAxis(): Axis;
    get GetErrorBarsYAxis(): Axis;
    aaa: number;
    z9: number;
    y8: ScatterItemSearchMode;
    z8: number;
    qb(): void;
    yy: ScatterErrorBarSettings;
    protected q9(a: any, b: string, c: any, d: any): void;
    protected zt(): boolean;
    protected zs(): boolean;
    zn(a: any): boolean;
    zm(a: any): boolean;
    private abr;
    private acl;
    private acm;
    private aa3;
    protected zr(a: string, b: FastItemsSourceEventAction): boolean;
    protected pb(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    abi(a: ScatterFrame): void;
    abj(a: ScatterFrame, b: Clipper): void;
    ay(a: Axis): AxisRange;
    kn(a: Point): any;
    private y5;
    get y6(): ScatterItemSearchMode;
    set y6(a: ScatterItemSearchMode);
    protected y7(): ScatterItemSearchMode;
    j3(a: Point): number;
    ir(a: Point): number;
    protected z4(a: Point): number;
    private ym;
    private yn;
    protected z3(a: Point): number;
    private aa6;
    protected get_zq(): boolean;
    protected get zq(): boolean;
    private z7;
    protected z6(a: Point): number;
    protected z2(a: Point): number;
    protected z5(a: Point): number;
    wc(a: Point, b: boolean, c: boolean): Point;
    gd(a: any): boolean;
    protected sq(a: Rect, b: Rect): void;
    protected sr(a: Rect, b: Rect): void;
    y2: ScatterFrame;
    y4: ScatterFrame;
    y0: ScatterFrame;
    y1(): ScatterFrame;
    aa4(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    abf(a: ScatterFrame, b: ScatterBaseView): void;
    o5(a: boolean, b: SeriesView): void;
    zp: boolean;
    zo: boolean;
    protected zl: boolean;
    protected zk: boolean;
    protected get_fe(): boolean;
    private zd;
    private ze;
    protected zb(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected zc(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    wv(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    protected za(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    dg(a: any, b: Point, c: boolean): HighlightingInfo;
    dh(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningScatterStyle: (sender: any, args: AssigningScatterStyleEventArgs) => void;
    assigningScatterMarkerStyle: (sender: any, args: AssigningScatterMarkerStyleEventArgs) => void;
    protected zv(): boolean;
    protected zu(): boolean;
    abq(a: ScatterFrame, b: ScatterBaseView): void;
    ak(a: Rect, b: SeriesSelectionBehavior): ChartSelection[];
    p4(a: Rect, b: List$1<ChartSelection>, c: SeriesSelectionBehavior): void;
    aa7(a: Rect, b: List$1<ChartSelection>, c: SeriesSelectionBehavior, d: MarkerCollisionMode, e: IFastItemColumn$1<number>): void;
    yp(a: number, b: number): any[];
    protected yq(a: number, b: number): any[];
    protected y9: ScatterSeriesRenderManager;
    aa5(a: ScatterBaseView, b: ScatterFrame): void;
    protected abb(a: number, b: number, c: boolean): void;
    protected aba(a: number, b: number, c: boolean): void;
    protected abl(a: AssigningScatterStyleEventArgs): void;
    protected abk(a: AssigningScatterMarkerStyleEventArgs): void;
    abd(a: ScatterFrame, b: ScatterBaseView): void;
    abg(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    abe(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    abc(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: any, e: number, f: number, g: boolean): {
        p4?: number;
        p5?: number;
    };
    abh(a: ErrorBarsHelper, b: IErrorBarCalculator, c: number, d: number, e: number, f: boolean): {
        p2?: number;
        p3?: number;
        p4?: number;
    };
    abn(a: ScatterFrame, b: ScatterBaseView): void;
    private abo;
    private abp;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    rs(a: boolean): void;
    protected sh(): void;
    y3: ScatterFrame;
    rt(a: Rect, b: RenderSurface): void;
    private yz;
    rq(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    abm(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    yo(a: ScatterBaseView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    zx(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    protected pz(a: any): void;
    iy(): number;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    private zj;
    private zy;
    private zz;
    z0: number;
    z1: number;
    private abs;
    i8(a: ValueLayerValueMode, b: Axis): number;
    aq(a: ValueLayerValueMode): number[];
    wg(a: number[]): Point;
    wf(a: ValueLayerValueMode): Point;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    aw: AssigningScatterMarkerStyleEventArgs;
    ax: AssigningScatterStyleEventArgs;
    ay(a: ScatterBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    az(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    a0(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class ScatterBaseView extends MarkerSeriesView {
    static $t: Type;
    c0: MarkerManagerBase;
    protected cy: Point[];
    protected c1: ScatterBase;
    protected c6: List$1<number>;
    constructor(a: ScatterBase);
    private dh;
    private di;
    c2: ScatterTrendLineManager;
    au(): void;
    private dg;
    dj(a: Marker): Size;
    protected cz(): MarkerManagerBase;
    protected de(a: IDictionary$2<any, OwnedPoint>): void;
    c5(): List$1<Marker>;
    cx(): Point[];
    protected cw(): Point[];
    protected c4(): List$1<number>;
    c7(): void;
    dc(a: PathGeometry): void;
    c8(): void;
    dd(a: PathGeometry): void;
    df(): void;
    c3: HashPool$2<any, Marker>;
    cj(a: (arg1: Marker) => void): void;
    da(a: (arg1: Marker) => void): void;
    db(): void;
    protected a7(a: RenderingContext, b: boolean): void;
    c9(a: boolean): void;
    getDefaultTooltipTemplate(): string;
}
