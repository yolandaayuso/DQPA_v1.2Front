import { OrderedDictionary } from "./OrderedDictionary";
import { IDictionary$2 } from "igniteui-react-core";
import { ICollection$1, IDictionary, IEnumerator$1, IEnumerator, Base, Type } from "igniteui-react-core";
import { KeyValuePair$2 } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class OrderedDictionary$2<TKey, TValue> extends OrderedDictionary implements IDictionary$2<TKey, TValue>, IDictionary {
    static $t: Type;
    protected $tKey: Type;
    protected $tValue: Type;
    private e;
    private f;
    constructor($tKey: Type, $tValue: Type);
    item1(a: number): TKey;
    item(a: TKey, b?: TValue): TValue;
    protected get_a(): number;
    get a(): number;
    get count(): number;
    get isReadOnly(): boolean;
    get keys(): ICollection$1<TKey>;
    get values(): ICollection$1<TValue>;
    add(a: KeyValuePair$2<TKey, TValue>): void;
    addItem(a: TKey, b: TValue): void;
    clear(): void;
    contains(a: KeyValuePair$2<TKey, TValue>): boolean;
    containsKey(a: TKey): boolean;
    copyTo(a: KeyValuePair$2<TKey, TValue>[], b: number): void;
    getEnumerator(): IEnumerator$1<KeyValuePair$2<TKey, TValue>>;
    remove(a: KeyValuePair$2<TKey, TValue>): boolean;
    removeItem(a: TKey): boolean;
    tryGetValue(a: TKey, b: TValue): {
        ret: boolean;
        p1: TValue;
    };
    getEnumeratorObject(): IEnumerator;
    b(a: number): any;
    c(a: any): any;
}
/**
 * @hidden
 */
export declare class OrderedDictionaryEnumerator$2<TKey, TValue> extends Base implements IEnumerator$1<KeyValuePair$2<TKey, TValue>>, IEnumerator {
    static $t: Type;
    protected $tKey: Type;
    protected $tValue: Type;
    private b;
    private a;
    constructor($tKey: Type, $tValue: Type, a: OrderedDictionary$2<TKey, TValue>);
    get currentObject(): any;
    get current(): KeyValuePair$2<TKey, TValue>;
    moveNext(): boolean;
    reset(): void;
    dispose(): void;
}
