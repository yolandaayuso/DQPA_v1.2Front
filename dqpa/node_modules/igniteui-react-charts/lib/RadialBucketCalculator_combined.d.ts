import { Base, Type, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { RadialLabelMode } from "igniteui-react-core";
import { CategoryCollisionMode } from "./CategoryCollisionMode";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { HighlightingInfo } from "igniteui-react-core";
import { OthersCategoryContext } from "./OthersCategoryContext";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { RadialFrame } from "./RadialFrame";
import { RadialSeriesRenderManager } from "./RadialSeriesRenderManager";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { AssigningRadialStyleEventArgs } from "./AssigningRadialStyleEventArgs";
import { AssigningRadialMarkerStyleEventArgs } from "./AssigningRadialMarkerStyleEventArgs";
import { RadialAxes } from "./RadialAxes";
import { ChartSelection } from "./ChartSelection";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { Pool$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class RadialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: RadialBaseView;
    constructor(a: RadialBaseView);
    c: number;
    d: number;
    b: number;
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class RadialBase extends MarkerSeries implements IHasCategoryModePreference {
    static $t: Type;
    q1(a: SeriesView): void;
    y9: RadialBaseView;
    constructor();
    private aa8;
    get categoryAxis(): CategoryAxisBase;
    a0(): CategoryAxisBase;
    yn(a: number, b: number): any[];
    z4: number;
    z5: number;
    aad: string;
    zf: RadialLabelMode;
    y0: CategoryCollisionMode;
    ze: RadialLabelMode;
    aaf: string;
    ym: any[];
    aa2: string;
    yr: any[];
    aas: string;
    yo: any[];
    aaz: string;
    yq: any[];
    aaw: string;
    yp: any[];
    protected zg: RadialSeriesRenderManager;
    ps(a: any): void;
    ee(a: any): boolean;
    pq(a: any): void;
    eb(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number, e: boolean): boolean;
    protected ks(a: number, b: boolean): any;
    protected aa5(a: any, b: any, c: number, d: number, e: number, f: boolean, g: boolean, h: boolean): string;
    private aam;
    private aan;
    private z1;
    private aao;
    private z2;
    protected z9(a: number, b: any): any;
    private aab;
    protected get_ft(): boolean;
    zs: boolean;
    zr: boolean;
    y3: CategoryTransitionInMode;
    zt: boolean;
    protected zn: boolean;
    protected zm: boolean;
    protected get_fe(): boolean;
    private zk;
    private zl;
    protected zh(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected zy(): boolean;
    protected ht(): List$1<SeriesLayerPropertyOverlay>;
    kv(): any;
    protected zi(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected zj(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    dg(a: any, b: Point, c: boolean): HighlightingInfo;
    dh(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningRadialStyle: (sender: any, args: AssigningRadialStyleEventArgs) => void;
    assigningRadialMarkerStyle: (sender: any, args: AssigningRadialMarkerStyleEventArgs) => void;
    protected zx(): boolean;
    protected zw(): boolean;
    protected abb(a: AssigningRadialStyleEventArgs): void;
    protected aba(a: AssigningRadialMarkerStyleEventArgs): void;
    z6(a: SeriesView): number;
    z7(a: SeriesView): number;
    yz: CategoryAngleAxis;
    y5: NumericRadiusAxis;
    ai(): Axis[];
    zq: boolean;
    protected sr(a: Rect, b: Rect): void;
    protected sq(a: Rect, b: Rect): void;
    abstract preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    private ys;
    private yw;
    private yt;
    private yv;
    private yu;
    protected q9(a: any, b: string, c: any, d: any): void;
    protected zv(): boolean;
    protected zu(): boolean;
    zp(a: any): boolean;
    zo(a: any): boolean;
    private y6;
    protected get_y7(): OthersCategoryContext;
    get y7(): OthersCategoryContext;
    kn(a: Point): any;
    zz(a: Point): number;
    ir(a: Point): number;
    z0(a: number, b: Rect, c: Rect, d: Rect): number;
    j3(a: Point): number;
    gd(a: any): boolean;
    zc: RadialFrame;
    zd: RadialFrame;
    za: RadialFrame;
    zb(): RadialFrame;
    abstract getOffsetValue(): number;
    abstract getCategoryWidth(): number;
    abstract aa9(a: RadialFrame, b: RadialBaseView): void;
    abstract abc(a: RadialFrame, b: RadialBaseView): void;
    y8: RadialAxes;
    qb(): void;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    y4: CategoryTransitionSourceFramePreparer;
    protected y2(): CategoryTransitionInMode;
    protected z3(): number;
    protected gn(): boolean;
    protected go(): boolean;
    rs(a: boolean): void;
    z8(): number;
    ak(a: Rect, b: SeriesSelectionBehavior): ChartSelection[];
    p4(a: Rect, b: List$1<ChartSelection>, c: SeriesSelectionBehavior): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class RadialBaseView extends MarkerSeriesView {
    static $t: Type;
    cx: RadialBucketCalculator;
    cw: RadialBase;
    constructor(a: RadialBase);
    cy: Pool$1<Marker>;
    cj(a: (arg1: Marker) => void): void;
    cz: number;
    c0: Point;
}
