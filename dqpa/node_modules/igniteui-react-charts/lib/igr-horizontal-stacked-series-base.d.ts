import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { IgrNumericYAxis } from "./igr-numeric-y-axis";
import { IgrStackedSeriesBase, IIgrStackedSeriesBaseProps } from "./igr-stacked-series-base";
import { HorizontalStackedSeriesBase } from "./HorizontalStackedSeriesBase";
import { IgrAxis } from "./igr-axis";
/**
 * Base class for stacked series with a category x-axis and a numeric y-axis.
*/
export declare abstract class IgrHorizontalStackedSeriesBase<P extends IIgrHorizontalStackedSeriesBaseProps = IIgrHorizontalStackedSeriesBaseProps> extends IgrStackedSeriesBase<P> {
    /**
                                 * @hidden
                                 */
    get i(): HorizontalStackedSeriesBase;
    constructor(props: P);
    /**
     * Gets or sets the effective x-axis for this series.
    */
    get xAxis(): IgrCategoryAxisBase;
    set xAxis(v: IgrCategoryAxisBase);
    private _xAxisName;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    get xAxisName(): string;
    set xAxisName(v: string);
    get hasValueAxis(): boolean;
    get isValueAxisInverted(): boolean;
    /**
     * Gets or sets the effective y-axis for this series.
    */
    get yAxis(): IgrNumericYAxis;
    set yAxis(v: IgrNumericYAxis);
    private _yAxisName;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    get yAxisName(): string;
    set yAxisName(v: string);
    bindAxes(axes: IgrAxis[]): void;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    */
    getOffsetValue(): number;
    /**
     * Returns the width of the category grouping this series is in.
    
    */
    getCategoryWidth(): number;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
}
export interface IIgrHorizontalStackedSeriesBaseProps extends IIgrStackedSeriesBaseProps {
    /**
     * Gets or sets the effective x-axis for this series.
    */
    xAxis?: IgrCategoryAxisBase;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    xAxisName?: string;
    /**
     * Gets or sets the effective y-axis for this series.
    */
    yAxis?: IgrNumericYAxis;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    yAxisName?: string;
}
