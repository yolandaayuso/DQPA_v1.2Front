import * as React from 'react';
import { IgRect } from "igniteui-react-core";
import { IgPoint } from "igniteui-react-core";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesSelectionMode } from "./SeriesSelectionMode";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { LegendItemBadgeMode } from "igniteui-react-core";
import { ChartHitTestMode } from "./ChartHitTestMode";
import { WindowResponse } from "./WindowResponse";
import { Visibility } from "igniteui-react-core";
import { ZoomCoercionMode } from "./ZoomCoercionMode";
import { InteractionState } from "igniteui-react-core";
import { ModifierKeys } from "igniteui-react-core";
import { SeriesHighlightedValuesDisplayMode } from "igniteui-react-core";
import { IgrChartSelectedItemCollection } from "./igr-chart-selected-item-collection";
import { HorizontalAlignment } from "igniteui-react-core";
import { IgrPlotAreaMouseButtonEventArgs } from "./igr-plot-area-mouse-button-event-args";
import { IgrPlotAreaMouseEventArgs } from "./igr-plot-area-mouse-event-args";
import { IgrChartCursorEventArgs } from "./igr-chart-cursor-event-args";
import { IgrDataChartMouseButtonEventArgs } from "./igr-data-chart-mouse-button-event-args";
import { IgrChartMouseEventArgs } from "./igr-chart-mouse-event-args";
import { IgrSeriesViewerManipulationEventArgs } from "./igr-series-viewer-manipulation-event-args";
import { IgrRectChangedEventArgs } from "igniteui-react-core";
import { IgrSeriesViewerSelectedSeriesItemsChangedEventArgs } from "./igr-series-viewer-selected-series-items-changed-event-args";
import { IgrRefreshCompletedEventArgs } from "./igr-refresh-completed-event-args";
import { IgrImageCapturedEventArgs } from "igniteui-react-core";
import { IgrSeries } from "./igr-series";
import { IgrCaptureImageSettings } from "igniteui-react-core";
import { SeriesViewer } from "./SeriesViewer";
import { ContentChildrenManager } from "igniteui-react-core";
import { ToolActionInfo } from "igniteui-react-core";
import { ICommandAvailabilityListener } from "igniteui-react-core";
import { ICommandStateChangedListener } from "igniteui-react-core";
/**
 * Represents a control for viewing series objects.
*/
export declare abstract class IgrSeriesViewer<P extends IIgrSeriesViewerProps = IIgrSeriesViewerProps> extends React.Component<P, {}> {
    protected createImplementation(): SeriesViewer;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): SeriesViewer; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrSeriesViewer;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    /**
     * Gets or sets the palette of brushes used for fill of plotted series.
     * These brushes are automatically assigned to series based on the index of series.
    */
    get brushes(): string[];
    set brushes(v: string[]);
    /**
     * Gets or sets the palette of brushes used for outlines of plotted series.
     * These outlines are automatically assigned to series based on the index of series.
    */
    get outlines(): string[];
    set outlines(v: string[]);
    /**
     * Gets or sets the palette of brushes used for fill of marker series.
     * These brushes are automatically assigned to markers based on the index of series.
    */
    get markerBrushes(): string[];
    set markerBrushes(v: string[]);
    /**
     * Gets or sets the palette of brushes used for outlines of plotted markers.
     * These outlines are automatically assigned to markers based on the index of series.
    */
    get markerOutlines(): string[];
    set markerOutlines(v: string[]);
    /**
     * Gets or sets the marker mode used for assigning a marker type to series when the marker type is automatic.
    */
    get markerAutomaticBehavior(): MarkerAutomaticBehavior;
    set markerAutomaticBehavior(v: MarkerAutomaticBehavior);
    /**
     * Gets or sets the cross hair point (in world coordinates)
     * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
     * case the relevant crosshair line is hidden.
    *
    * The `CrosshairPoint` property is used to gets/sets the cross hair point (in world coordinates).
    *
    * ```ts
    * this.chart.crosshairPoint = {x:.8,y:.2};
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	crosshairVisibility="visible"
    *     crosshairPoint={x:.8,y:.2} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    get crosshairPoint(): IgPoint;
    set crosshairPoint(v: IgPoint);
    /**
     * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
    *
    * `AnimateSeriesWhenAxisRangeChanges` is a Boolean property to override the default behavior in which series do not animate if an axis range changes.
    *
    * ```ts
    * this.chart.animateSeriesWhenAxisRangeChanges = true;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	animateSeriesWhenAxisRangeChanges={true}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get animateSeriesWhenAxisRangeChanges(): boolean;
    set animateSeriesWhenAxisRangeChanges(v: boolean);
    /**
     * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
    */
    get seriesValueLayerUseLegend(): boolean;
    set seriesValueLayerUseLegend(v: boolean);
    /**
     * Gets or sets whether to sync the vertical aspect of the window with the contained series content. This is only supported for a subset of the available series.
    */
    get isWindowSyncedToVisibleRange(): boolean;
    set isWindowSyncedToVisibleRange(v: boolean);
    /**
     * Gets or sets whether calling SimulateHover should shift the crosshair point.
    */
    get shouldSimulateHoverMoveCrosshairPoint(): boolean;
    set shouldSimulateHoverMoveCrosshairPoint(v: boolean);
    /**
     * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
    */
    get highlightingMode(): SeriesHighlightingMode;
    set highlightingMode(v: SeriesHighlightingMode);
    /**
     * Gets or sets the selection mode to use for the series in the component, when supported.
    */
    get selectionMode(): SeriesSelectionMode;
    set selectionMode(v: SeriesSelectionMode);
    /**
     * Gets or sets the selection behavior to use for the series in the component, when supported.
    */
    get selectionBehavior(): SeriesSelectionBehavior;
    set selectionBehavior(v: SeriesSelectionBehavior);
    /**
     * Gets or sets the focus mode to use for the series in the component, when supported.
    */
    get focusMode(): SeriesSelectionMode;
    set focusMode(v: SeriesSelectionMode);
    /**
     * Gets or sets the horizontal scrollbar mode to use for the series viewer.
    */
    get horizontalViewScrollbarMode(): SeriesViewerScrollbarMode;
    set horizontalViewScrollbarMode(v: SeriesViewerScrollbarMode);
    /**
     * Gets or sets the vertical scrollbar mode to use for the series viewer.
    */
    get verticalViewScrollbarMode(): SeriesViewerScrollbarMode;
    set verticalViewScrollbarMode(v: SeriesViewerScrollbarMode);
    /**
     * Gets or sets the position to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarPosition(): SeriesViewerHorizontalScrollbarPosition;
    set horizontalViewScrollbarPosition(v: SeriesViewerHorizontalScrollbarPosition);
    /**
     * Gets or sets the position to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarPosition(): SeriesViewerVerticalScrollbarPosition;
    set verticalViewScrollbarPosition(v: SeriesViewerVerticalScrollbarPosition);
    /**
     * Gets or sets the fill to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarFill(): string;
    set horizontalViewScrollbarFill(v: string);
    /**
     * Gets or sets the outline to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarOutline(): string;
    set horizontalViewScrollbarOutline(v: string);
    /**
     * Gets or sets the stroke thickness to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarStrokeThickness(): number;
    set horizontalViewScrollbarStrokeThickness(v: number);
    /**
     * Gets or sets the max opacity to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarMaxOpacity(): number;
    set horizontalViewScrollbarMaxOpacity(v: number);
    /**
     * Gets or sets the corner radius to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarCornerRadius(): number;
    set horizontalViewScrollbarCornerRadius(v: number);
    /**
     * Gets or sets the height to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarHeight(): number;
    set horizontalViewScrollbarHeight(v: number);
    /**
     * Gets or sets the inset distance to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarInset(): number;
    set horizontalViewScrollbarInset(v: number);
    /**
     * Gets or sets the track start inset to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarTrackStartInset(): number;
    set horizontalViewScrollbarTrackStartInset(v: number);
    /**
     * Gets or sets the track end inset to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarTrackEndInset(): number;
    set horizontalViewScrollbarTrackEndInset(v: number);
    /**
     * Gets or sets whether to use automatic track insets for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarShouldAddAutoTrackInsets(): boolean;
    set horizontalViewScrollbarShouldAddAutoTrackInsets(v: boolean);
    /**
     * Gets or sets the fill to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarFill(): string;
    set verticalViewScrollbarFill(v: string);
    /**
     * Gets or sets the outline to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarOutline(): string;
    set verticalViewScrollbarOutline(v: string);
    /**
     * Gets or sets the stroke thickness to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarStrokeThickness(): number;
    set verticalViewScrollbarStrokeThickness(v: number);
    /**
     * Gets or sets the max opacity to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarMaxOpacity(): number;
    set verticalViewScrollbarMaxOpacity(v: number);
    /**
     * Gets or sets the corner radius to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarCornerRadius(): number;
    set verticalViewScrollbarCornerRadius(v: number);
    /**
     * Gets or sets the width to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarWidth(): number;
    set verticalViewScrollbarWidth(v: number);
    /**
     * Gets or sets the inset distance to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarInset(): number;
    set verticalViewScrollbarInset(v: number);
    /**
     * Gets or sets the track start inset to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarTrackStartInset(): number;
    set verticalViewScrollbarTrackStartInset(v: number);
    /**
     * Gets or sets the track end inset to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarTrackEndInset(): number;
    set verticalViewScrollbarTrackEndInset(v: number);
    /**
     * Gets or sets whether to use automatic track insets for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarShouldAddAutoTrackInsets(): boolean;
    set verticalViewScrollbarShouldAddAutoTrackInsets(v: boolean);
    /**
     * Gets or sets the highlighting Behavior to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
    */
    get highlightingBehavior(): SeriesHighlightingBehavior;
    set highlightingBehavior(v: SeriesHighlightingBehavior);
    /**
     * Gets or sets the highlighting mode to use for the legend linked to the component, when supported.
    */
    get legendHighlightingMode(): LegendHighlightingMode;
    set legendHighlightingMode(v: LegendHighlightingMode);
    /**
     * Gets or sets type of legend badges representing all series displayed in a legend linked to this component
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
    */
    get legendItemBadgeShape(): LegendItemBadgeShape;
    set legendItemBadgeShape(v: LegendItemBadgeShape);
    /**
     * Gets or sets the mode of legend badges representing all series in this chart.
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
    */
    get legendItemBadgeMode(): LegendItemBadgeMode;
    set legendItemBadgeMode(v: LegendItemBadgeMode);
    /**
     * Gets the viewport rectangle associated with the SeriesViewer, the physical dimensions of the plot area.
    */
    get viewportRect(): IgRect;
    /**
     * Gets the EffectiveViewport rectangle, representing the effective viewport area after margins have been subtracted.
    *
    *  ``ts
    * let viewport: IgxRect = this.chart.effectiveViewport;
    *
    * ```
    *
    * ```
    */
    get effectiveViewport(): IgRect;
    set effectiveViewport(v: IgRect);
    /**
     * Represents the subset area within the viewport into which content should be mapped.
     * This is the projection of the current EffectiveViewport into the viewport at current zoom level.
    */
    get contentViewport(): IgRect;
    /**
     * A rectangle representing the portion of the SeriesViewer currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
    *
    * You can set the `WindowRect` to zoom in on an area of interest in the chart.
    *
    * ```ts
    * this.chart.windowRect = {left:0, top:1, width: .5, height: .5};
    * ```
    */
    get windowRect(): IgRect;
    set windowRect(v: IgRect);
    /**
     * Gets or sets whether the series viewer should use cached tiles during zooms rather than the default live content.
    */
    get useTiledZooming(): boolean;
    set useTiledZooming(v: boolean);
    /**
     * Gets or sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
    */
    get preferHigherResolutionTiles(): boolean;
    set preferHigherResolutionTiles(v: boolean);
    /**
     * Gets or sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
    */
    get zoomTileCacheSize(): number;
    set zoomTileCacheSize(v: number);
    /**
     * Gets or sets the duration the highlighting/de-highlighting effects.
    *
    * The `HighlightingTransitionDuration` property is used to set the time for highlighting transition in milliseconds .
    *
    * ```ts
    * chart.HighlightingTransitionDuration=500;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	HighlightingTransitionDuration={500} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    get highlightingTransitionDuration(): number;
    set highlightingTransitionDuration(v: number);
    /**
     * Gets or sets the duration the selection/de-Selection effects.
    */
    get selectionTransitionDuration(): number;
    set selectionTransitionDuration(v: number);
    /**
     * Gets or sets the duration the Focus/de-Focus effects.
    */
    get focusTransitionDuration(): number;
    set focusTransitionDuration(v: number);
    /**
     * Gets or sets the duration of the scrollbar effects.
    */
    get scrollbarsAnimationDuration(): number;
    set scrollbarsAnimationDuration(v: number);
    /**
     * Gets or sets the whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
    */
    get isPagePanningAllowed(): boolean;
    set isPagePanningAllowed(v: boolean);
    /**
     * Determines the method of hit testing used when mousing over elements in the chart.
    *
    * ```ts
    * this.chart.contentHitTestMode = ChartHitTestMode.Computational;
    * ```
    */
    get contentHitTestMode(): ChartHitTestMode;
    set contentHitTestMode(v: ChartHitTestMode);
    /**
     * Resolved method of hit testing used when the pointer is over elements in the chart.
    *
    * ```ts
    * let actualContentHitTestMode: ChartHitTestMode  =this.chart.actualContentHitTestMode;
    * ```
    */
    get actualContentHitTestMode(): ChartHitTestMode;
    set actualContentHitTestMode(v: ChartHitTestMode);
    /**
     * Gets or sets whether all surface interactions with the plot area should be disabled.
    *
    * The `IsSurfaceInteractionDisabled` property is used to enable/disable interactions with the plot surface.
    *
    * ```ts
    * chart.isSurfaceInteractionDisabled=true;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	 isSurfaceInteractionDisabled={true} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    get isSurfaceInteractionDisabled(): boolean;
    set isSurfaceInteractionDisabled(v: boolean);
    /**
     * Indicates if this SeriesViewer is a map.
    */
    get isMap(): boolean;
    /**
     * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
    *
    * The `WindowResponse` property is used to set the response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.
    * The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
    *
    * ```ts
    * this.chart.windowResponse="deferred";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	windowResponse="deferred">
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get windowResponse(): WindowResponse;
    set windowResponse(v: WindowResponse);
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
    *
    * The `WindowRectMinWidth` property is used to set or get the minimum width that the window rect is allowed to reach before being clamped.
    *
    * ```ts
    * this.chart.WindowRectMinWidth=".2";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	WindowRectMinWidth=".2">
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get windowRectMinWidth(): number;
    set windowRectMinWidth(v: number);
    /**
     * Sets or gets the minimum height that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
    */
    get windowRectMinHeight(): number;
    set windowRectMinHeight(v: number);
    /**
     * Gets the actual minimum width that the window rect is allowed to reach before being clamped.
    */
    get actualWindowRectMinWidth(): number;
    set actualWindowRectMinWidth(v: number);
    /**
     * Gets the actual minimum height that the window rect is allowed to reach before being clamped.
    */
    get actualWindowRectMinHeight(): number;
    set actualWindowRectMinHeight(v: number);
    /**
     * Sets or gets minimum pixel width that the window is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property is overridden by the WindowRectMinWidth property
    */
    get windowSizeMinWidth(): number;
    set windowSizeMinWidth(v: number);
    /**
     * Sets or gets minimum pixel height that the window is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property is overridden by the WindowRectMinHeight property
    */
    get windowSizeMinHeight(): number;
    set windowSizeMinHeight(v: number);
    /**
     * Gets or sets the current SeriesViewer's crosshair visibility override.
    *
    * The `CrosshairVisibility` property is used to gets or sets the current Chart's crosshair visibility override. Note: setting this property does not affect the mobile browser version of the chart.
    *
    * ```ts
    * this.chart.crosshairVisibility = Visibility.Visible;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	crosshairVisibility="visible"
    *     crosshairPoint={x:.8,y:.2} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    get crosshairVisibility(): Visibility;
    set crosshairVisibility(v: Visibility);
    /**
     * Gets or sets the current SeriesViewer's crosshair horizontal brush override.
    */
    get horizontalCrosshairBrush(): string;
    set horizontalCrosshairBrush(v: string);
    /**
     * Gets or sets the current SeriesViewer's crosshair vertical brush override.
    */
    get verticalCrosshairBrush(): string;
    set verticalCrosshairBrush(v: string);
    /**
     * Gets or sets zoom is constrained to within the axes. Setting this to false is a preview feature at the present time.
    */
    get zoomCoercionMode(): ZoomCoercionMode;
    set zoomCoercionMode(v: ZoomCoercionMode);
    /**
     * Gets or sets the brush used as the background for the current SeriesViewer object's plot area.
    *
    * `PlotAreaBackground` property set the background brush to the current Chart object's plot area.
    *
    * ```ts
    * this.chart.plotAreaBackground="#F0F8FF";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	dataSource={this.state.dataSource}
    * 	plotAreaBackground="#F0F8FF" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get plotAreaBackground(): string;
    set plotAreaBackground(v: string);
    /**
     * Gets or sets whether to match the z order of the series to their positional order in the series collection, regardless of mutation.
    */
    get shouldMatchZOrderToSeriesOrder(): boolean;
    set shouldMatchZOrderToSeriesOrder(v: boolean);
    /**
     * Gets or sets the DefaultInteraction property.
     * The default interaction state defines the SeriesViewer's response to mouse events.
    *
    * The default interaction state defines the chart's response to mouse events.
    *
    * ```ts
    * this.chart.defaultInteraction = InteractionState.DragPan;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	defaultInteraction="dragPan" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    get defaultInteraction(): InteractionState;
    set defaultInteraction(v: InteractionState);
    /**
     * Gets or sets the InteractionOverride property.
     * The interaction override overrides the default interaction and modifiers keys and defines the SeriesViewer's response to mouse events.
    */
    get interactionOverride(): InteractionState;
    set interactionOverride(v: InteractionState);
    /**
     * Gets or sets the RightButtonDefaultInteraction property.
     * The default interaction state defines the SeriesViewer's response to right button mouse events.
    */
    get rightButtonDefaultInteraction(): InteractionState;
    set rightButtonDefaultInteraction(v: InteractionState);
    /**
     * Gets or sets the current SeriesViewer's DragModifier property.
    *
    * `DragModifier` is useful to enable zooming when zooming is not the default interaction.
    *
    * ```ts
    * this.chart.dragModifier = ModifierKeys.Alt;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	isHorizontalZoomEnabled=true
    *     defaultInteraction="dragPan"
    *     dragModifier="alt" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get dragModifier(): ModifierKeys;
    set dragModifier(v: ModifierKeys);
    /**
     * Gets or sets the current SeriesViewer's PanModifier property.
    *
    * `PanModifier` is useful to enable panning when panning is not the default interaction.
    *
    * ```ts
    * this.chart.panModifier = ModifierKeys.Alt;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	dataSource={this.state.dataSource}
    * 	isHorizontalZoomEnabled=true
    * 	defaultInteraction="dragZoom"
    * 	panModifier="alt" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get panModifier(): ModifierKeys;
    set panModifier(v: ModifierKeys);
    /**
     * Gets or sets the current SeriesViewer's SelectionModifier property.
    */
    get selectionModifier(): ModifierKeys;
    set selectionModifier(v: ModifierKeys);
    /**
     * Gets or sets the preview rectangle.
     * The preview rectangle may be set to Rect.Empty, in which case the visible preview
     * strokePath is hidden.
    *
    * `PreviewRect` can be used to highlight an area of importance.
    *
    * ```ts
    * this.chart.previewRect = {left:0,top:0,height:.5,width:.5};
    * ```
    */
    get previewRect(): IgRect;
    set previewRect(v: IgRect);
    /**
     * Gets or sets whether and how to display highlighted values for the series by default. Note, this is distinct from the highlighting feature that indicates what is closest or under the mouse.
    */
    get highlightedValuesDisplayMode(): SeriesHighlightedValuesDisplayMode;
    set highlightedValuesDisplayMode(v: SeriesHighlightedValuesDisplayMode);
    private _selectedSeriesItems;
    /**
     * Gets the currently selected data items.  Adding or removing data items from this collection will
     * select or deselect the visuals associated with those items.
    */
    get selectedSeriesItems(): IgrChartSelectedItemCollection;
    set selectedSeriesItems(v: IgrChartSelectedItemCollection);
    private _focusedSeriesItems;
    /**
     * Gets the currently focused data items.  Adding or removing data items from this collection will
     * focus or blur the visuals associated with those items.
    */
    get focusedSeriesItems(): IgrChartSelectedItemCollection;
    set focusedSeriesItems(v: IgrChartSelectedItemCollection);
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the X position of the WindowRect property.
    *
    * ```ts
    * this.chart.windowPositionHorizontal = .2;
    * ```
    */
    get windowPositionHorizontal(): number;
    set windowPositionHorizontal(v: number);
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Y position of the WindowRect property.
    *
    * ```ts
    * this.chart.windowPositionVertical = .2;
    * ```
    */
    get windowPositionVertical(): number;
    set windowPositionVertical(v: number);
    /**
     * Gets or sets the selection brush to use for the series.
    */
    get selectionBrush(): string;
    set selectionBrush(v: string);
    /**
     * Gets or sets the Focus brush to use for the series.
    */
    get focusBrush(): string;
    set focusBrush(v: string);
    /**
     * Text to display above the plot area.
    *
    * The `Title` property is used to set the title to display for the component.
    *
    * ```ts
    * this.chart.title="Items Sold";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	title="Items Sold" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get chartTitle(): string;
    set chartTitle(v: string);
    /**
     * Gets or sets the TitleHorizontalAlignment property.
    *
    * The `subtitleHorizontalAlignment` property is used to set horizontal alignment for the subtitle.
    *
    * ```ts
    * this.chart.titleHorizontalAlignment="left";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	titleHorizontalAlignment="left"
    *     subtitleHorizontalAlignment="left" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get titleHorizontalAlignment(): HorizontalAlignment;
    set titleHorizontalAlignment(v: HorizontalAlignment);
    /**
     * Gets or sets the SubtitleHorizontalAlignment property.
    *
    * The `subtitleBottomMargin` property is used to set the horizontal alignment for the subtitle.
    *
    * ```ts
    * this.chart.subtitleHorizontalAlignment="left";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	subtitleHorizontalAlignment="left"	>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get subtitleHorizontalAlignment(): HorizontalAlignment;
    set subtitleHorizontalAlignment(v: HorizontalAlignment);
    /**
     * Font settings for the title.
    */
    get titleTextStyle(): string;
    set titleTextStyle(v: string);
    /**
     * Font settings for the subtitle.
    */
    get subtitleTextStyle(): string;
    set subtitleTextStyle(v: string);
    /**
     * Gets or sets the Color used for the Title Text.
    *
    * The `titleTextColor` property is used to set the title brush.
    *
    * ```ts
    * this.chart.titleTextColor="blue" ;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	titleTextColor="blue" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get titleTextColor(): string;
    set titleTextColor(v: string);
    /**
     * Gets or sets the Color used for the Subtitle Text.
    *
    * The `subtitleTextColor` property is used to set the color for the subtitle.
    *
    * ```ts
    * this.chart.subtitleTextColor="blue";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	title="Date of Sale: 1/1/2018"
    *     subtitleTextColor="blue">
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get subtitleTextColor(): string;
    set subtitleTextColor(v: string);
    /**
     * Margin applied above the title.
    *
    * The `titleTopMargin` property is used to set the top margin for the title.
    *
    * ```ts
    * this.chart.titleTopMargin=10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	titleLeftMarging= {10}
    *     titleTopMargin= {10 }
    *     titleRightMargin= {10}
    *     titleBottomMargin= {20}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get titleTopMargin(): number;
    set titleTopMargin(v: number);
    /**
     * Margin applied to the left of the title.
    *
    * The `titleLeftMarging` property is used to set the left margin for the title.
    *
    * ```ts
    * this.chart.titleLeftMarging=10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	title="Items Sold"
    *     titleLeftMarging={10}
    *     titleTopMargin={10}
    *     titleRightMargin={10}
    *     titleBottomMargin= {20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get titleLeftMargin(): number;
    set titleLeftMargin(v: number);
    /**
     * Margin applied to the right of the title.
    *
    * The `titleRightMargin` property is used to set the right margin for the title.
    *
    * ```ts
    * this.chart.titleRightMargin=10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	titleLeftMarging= {10}
    *     titleTopMargin= {10 }
    *     titleRightMargin= {10}
    *     titleBottomMargin= {20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get titleRightMargin(): number;
    set titleRightMargin(v: number);
    /**
     * Margin applied below the title.
    *
    * The `titleBottomMargin` property is used to set the bottom margin for the title.
    *
    * ```ts
    * this.chart.titleBottomMargin=20;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	title="Items Sold"
    * 	titleLeftMarging= {10}
    *     titleTopMargin= {10 }
    *     titleRightMargin= {10}
    *     titleBottomMargin= {20}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get titleBottomMargin(): number;
    set titleBottomMargin(v: number);
    /**
     * Margin applied above the subtitle.
    *
    * The `subtitleTopMargin` property is used to set the top margin for the subtitle.
    *
    * ```ts
    * this.chart.subtitleTopMargin =10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	subtitleLeftMarging= {10}
    *     subtitleTopMargin={10}
    *     subtitleRightMargin={10}
    *     subtitleBottomMargin={20}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get subtitleTopMargin(): number;
    set subtitleTopMargin(v: number);
    /**
     * Margin applied to the left of the subtitle.
    *
    * The `subtitleLeftMarging` property is used to set the left margin for the subtitle.
    *
    * ```ts
    * this.chart.subtitleLeftMarging=10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	subtitleLeftMarging= {10}
    *     subtitleTopMargin={10}
    *     subtitleRightMargin={10}
    *     subtitleBottomMargin={20}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get subtitleLeftMargin(): number;
    set subtitleLeftMargin(v: number);
    /**
     * Margin applied to the right of the subtitle.
    *
    * The `subTitleRightMargin` property is used to set the right margin for the subtitle.
    *
    * ```ts
    * this.chart.subtitleLeftMarging=10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	subtitleLeftMarging= {10}
    *     subtitleTopMargin= {10}
    *     subtitleRightMargin={10}
    *     subtitleBottomMargin={20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get subtitleRightMargin(): number;
    set subtitleRightMargin(v: number);
    /**
     * Margin applied below the subtitle.
    *
    * The `subtitleBottomMargin` property is used to set the bottom margin for the subtitle.
    *
    * ```ts
    * this.chart.subtitleBottomMargin = 20;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	 subtitleBottomMargin={20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get subtitleBottomMargin(): number;
    set subtitleBottomMargin(v: number);
    /**
     * Gets or sets the Subtitle property.
     * The Title property defines the Subtitle of the chart
    *
    * The `Subtitle` property is used to display subtitle for the component.
    *
    * ```ts
    * this.chart.subtitle="Date of Sale: 1/1/2018";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	dataSource={this.state.dataSource}
    * 	subtitle="Date of Sale: 1/1/2018" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get subtitle(): string;
    set subtitle(v: string);
    /**
     * Sets or gets the top margin to use around the chart content.
    *
    * The `topMargin` property is used to set the top margin.
    *
    * ```ts
    * this.chart.topMargin=30;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	leftMargin= {20}
    *     rightMargin={20}
    *     topMargin={30}
    *     bottomMargin= {20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get topMargin(): number;
    set topMargin(v: number);
    /**
     * Sets or gets the left margin to use around the chart content.
    *
    * The `LeftMargin` property is used to set the left margin.
    *
    * ```ts
    *  this.chart.leftMargin = 20;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	 leftMargin={20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    * />
    *  </IgrDataChart>
    * ```
    */
    get leftMargin(): number;
    set leftMargin(v: number);
    /**
     * Sets or gets the right margin to use around the chart content.
    *
    * The `RightMargin` property is used to set the left margin around the chart content in the canvas.
    *
    * ```ts
    * this.chart.rightMargin=20;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	leftMargin= {20}
    * 	rightMargin={20}
    * 	topMargin={30}
    * 	bottomMargin={20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get rightMargin(): number;
    set rightMargin(v: number);
    /**
     * Sets or gets the bottom margin to use around the chart content.
    *
    * The `bottomMargin` property is used to gets/set the bottom margin around the chart content in the canvas.
    *
    * ```ts
    * this.chart.bottomMargin = 50;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	 bottomMargin={50} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    get bottomMargin(): number;
    set bottomMargin(v: number);
    /**
     * Sets or gets the automatic width to add when automatically adding margins to the chart.
    *
    * The `autoMarginWidth` propertry is used find the automatic width to add when automatically adding margins to the chart.
    *
    * ```ts
    * this.chart.autoMarginWidth = 50;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	autoMarginWidth={50} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    get autoMarginWidth(): number;
    set autoMarginWidth(v: number);
    /**
     * Sets or gets the automatic height to add when automatically adding margins to the chart.
    *
    * ```ts
    *  this.chart.autoMarginHeight = 50;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	autoMarginHeight={50}
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    get autoMarginHeight(): number;
    set autoMarginHeight(v: number);
    /**
     * Gets or sets the IsAntiAliasingEnabledDuringInteraction property.
    */
    get isAntiAliasingEnabledDuringInteraction(): boolean;
    set isAntiAliasingEnabledDuringInteraction(v: boolean);
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get pixelScalingRatio(): number;
    set pixelScalingRatio(v: number);
    /**
     * Method of pixel scaling to use during end user interaction with the chart.
    */
    get interactionPixelScalingRatio(): number;
    set interactionPixelScalingRatio(v: number);
    /**
     * Gets the resolved pixel scaling ratio.
    *
    * A higher scaling ratio will produce crisper visuals at the expense of memory. Lower values will cause the control to appear blurry
    *
    * ```ts
    * let actualPixelScalingRatio: number = this.chart.actualPixelScalingRatio;
    * ```
    */
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(v: number);
    /**
     * Resolved method of pixel scaling to use during end user interaction with the chart.
    *
    * ```ts
    * let actualInteractionPixelScalingRatio: number = this.chart.actualInteractionPixelScalingRatio;
    * ```
    */
    get actualInteractionPixelScalingRatio(): number;
    set actualInteractionPixelScalingRatio(v: number);
    /**
     * Gets or sets a whether the chart should pan its content when zooming in passed max zoom level.
    */
    get shouldPanOnMaximumZoom(): boolean;
    set shouldPanOnMaximumZoom(v: boolean);
    /**
     * Gets the actual value of the window rectangle, which represents the current zoom level.
    */
    get actualWindowRect(): IgRect;
    set actualWindowRect(v: IgRect);
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the Left of the ActualWindowRect property.
    *
    * ```ts
    * let actualWindowPositionHorizontal: number = this.chart.actualWindowPositionHorizontal;
    * ```
    */
    get actualWindowPositionHorizontal(): number;
    set actualWindowPositionHorizontal(v: number);
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Top of the ActualWindowRect property.
    *
    * ```ts
    * let actualWindowPositionVertical: number = this.chart.actualWindowPositionVertical;
    * ``
    * ```
    */
    get actualWindowPositionVertical(): number;
    set actualWindowPositionVertical(v: number);
    /**
     * Gets or sets the brush used as the border for the current SeriesViewer object's preview path.
     * Null is treated as auto.
    */
    get previewPathStroke(): string;
    set previewPathStroke(v: string);
    /**
     * Gets or sets the brush used as the fill for the current SeriesViewer object's preview path.
     * Null is treated as auto.
    */
    get previewPathFill(): string;
    set previewPathFill(v: string);
    /**
     * Gets or sets the opacity used as for the fill for the current SeriesViewer object's preview path.
     * Null is treated as auto.
    */
    get previewPathOpacity(): number;
    set previewPathOpacity(v: number);
    get isDetached(): boolean;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    getDesiredToolbarActions(): ToolActionInfo[];
    addCommandAvailabilityListener(listener: ICommandAvailabilityListener): void;
    removeCommandAvailabilityListener(listener: ICommandAvailabilityListener): void;
    addCommandStateChangedListener(listener: ICommandStateChangedListener): void;
    removeCommandStateChangedListener(listener: ICommandStateChangedListener): void;
    /**
     * Hides the active main tooltip, if displayed.
    
    *
    * ```ts
    * this.chart.hideToolTip();
    * ```
    */
    hideToolTip(): void;
    simulateHover(point: IgPoint): void;
    queueForAnimationIdle(action: () => void, version: number): void;
    getAnimationIdleVersionNumber(): number;
    isAnimationActive(): boolean;
    /**
     * Manually starts a tiled zoom if one isn't already running.
    
    */
    startTiledZoomingIfNecessary(): void;
    /**
     * Manually ends a tiled zoom if one is running.
    
    */
    endTiledZoomingIfRunning(): void;
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.
    
    */
    clearTileZoomCache(): void;
    /**
     * Performs zoom in action on the chart by specified percentage of current window rect
    
    */
    zoomIn(percentage: number): void;
    /**
     * Performs zoom out action on the chart by specified percentage of current window rect
    
    */
    zoomOut(percentage: number): void;
    /**
     * Resets the zoom level to default.
    
    */
    resetZoom(): void;
    cancelManipulation(): void;
    /**
     * Gets actual window scale for horizontal dimension of the control
    
    *
    * ```ts
    * let actualWindowScaleHorizontal: number = chart.getActualWindowScaleHorizontal();
    * ```
    */
    getActualWindowScaleHorizontal(): number;
    /**
     * Gets actual window scale for vertical dimension of the control
    
    *
    * ```ts
    * let actualWindowScaleVertical: number = chart.getActualWindowScaleVertical();
    * ```
    */
    getActualWindowScaleVertical(): number;
    /**
     * Notification from the containing object that the container has been resized.
    
    */
    notifyContainerResized(): void;
    /**
     * Attaches the given series to the chart.
    
    * @param s  * The series to attach to the chart.
    */
    attachSeries(s: IgrSeries): void;
    notifySetItem(source_: any, index: number, oldItem: any, newItem: any): void;
    /**
     * Used to manually notify the SeriesViewer that the data source has reset or cleared its items.  Invoking this method is only necessary if that datasource is not observable.
    
    * @param source_  * The data source which was cleared or reset.
    *
    * ```ts
    * this.chart.notifyClearItems(this.data);
    * ```
    */
    notifyClearItems(source_: any): void;
    notifyInsertItem(source_: any, index: number, newItem: any): void;
    notifyRemoveItem(source_: any, index: number, oldItem: any): void;
    /**
     * Release any resources held by the control.
    
    */
    destroy(): void;
    getCurrentActualWindowRect(): IgRect;
    renderToImage(width: number, height: number): any;
    /**
     * Use to force the SeriesViewer to finish any deferred work before printing or evaluating its visual.
     * This should only be called if the visual of the SeriesViewer needs to be synchronously saved or evaluated.
     * Calling this method too often will hinder the performance of the SeriesViewer.
    
    *
    * ```ts
    * this.chart.flush();
    * ```
    */
    flush(): void;
    captureImage(settings: IgrCaptureImageSettings): void;
    private _plotAreaMouseLeftButtonDown;
    private _plotAreaMouseLeftButtonDown_wrapped;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over the plot area.
    */
    get plotAreaMouseLeftButtonDown(): (s: IgrSeriesViewer, e: IgrPlotAreaMouseButtonEventArgs) => void;
    set plotAreaMouseLeftButtonDown(ev: (s: IgrSeriesViewer, e: IgrPlotAreaMouseButtonEventArgs) => void);
    private _plotAreaMouseLeftButtonUp;
    private _plotAreaMouseLeftButtonUp_wrapped;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over the plot area.
    */
    get plotAreaMouseLeftButtonUp(): (s: IgrSeriesViewer, e: IgrPlotAreaMouseButtonEventArgs) => void;
    set plotAreaMouseLeftButtonUp(ev: (s: IgrSeriesViewer, e: IgrPlotAreaMouseButtonEventArgs) => void);
    private _plotAreaClicked;
    private _plotAreaClicked_wrapped;
    /**
     * Occurs when the left mouse button is clicked while the mouse pointer is over the plot area.
    */
    get plotAreaClicked(): (s: IgrSeriesViewer, e: IgrPlotAreaMouseButtonEventArgs) => void;
    set plotAreaClicked(ev: (s: IgrSeriesViewer, e: IgrPlotAreaMouseButtonEventArgs) => void);
    private _plotAreaMouseEnter;
    private _plotAreaMouseEnter_wrapped;
    /**
     * Occurs when the pointer enters the plot area.
    */
    get plotAreaMouseEnter(): (s: IgrSeriesViewer, e: IgrPlotAreaMouseEventArgs) => void;
    set plotAreaMouseEnter(ev: (s: IgrSeriesViewer, e: IgrPlotAreaMouseEventArgs) => void);
    private _plotAreaMouseLeave;
    private _plotAreaMouseLeave_wrapped;
    /**
     * Occurs when the pointer exits the plot area.
    */
    get plotAreaMouseLeave(): (s: IgrSeriesViewer, e: IgrPlotAreaMouseEventArgs) => void;
    set plotAreaMouseLeave(ev: (s: IgrSeriesViewer, e: IgrPlotAreaMouseEventArgs) => void);
    private _plotAreaMouseOver;
    private _plotAreaMouseOver_wrapped;
    /**
     * Occurs when the pointer if over the plot area.
    */
    get plotAreaMouseOver(): (s: IgrSeriesViewer, e: IgrPlotAreaMouseEventArgs) => void;
    set plotAreaMouseOver(ev: (s: IgrSeriesViewer, e: IgrPlotAreaMouseEventArgs) => void);
    private _seriesCursorMouseMove;
    private _seriesCursorMouseMove_wrapped;
    /**
     * Occurs when the cursors are moved over a series in this SeriesViewer.
    */
    get seriesCursorMouseMove(): (s: IgrSeriesViewer, e: IgrChartCursorEventArgs) => void;
    set seriesCursorMouseMove(ev: (s: IgrSeriesViewer, e: IgrChartCursorEventArgs) => void);
    private _seriesMouseLeftButtonDown;
    private _seriesMouseLeftButtonDown_wrapped;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over a Series.
    *
    * The `SeriesMouseLeftButtonDown` event occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSeriesMouseLeftButtonDown(event: {sender: any, args: DataChartMouseButtonEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	seriesMouseLeftButtonDown= {this.onSeriesMouseLeftButtonDown}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get seriesMouseLeftButtonDown(): (s: IgrSeriesViewer, e: IgrDataChartMouseButtonEventArgs) => void;
    set seriesMouseLeftButtonDown(ev: (s: IgrSeriesViewer, e: IgrDataChartMouseButtonEventArgs) => void);
    private _seriesMouseLeftButtonUp;
    private _seriesMouseLeftButtonUp_wrapped;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over a Series.
    *
    * The `SeriesMouseLeftButtonUp` event occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSeriesMouseLeftButtonUp(event: {sender: any, args: DataChartMouseButtonEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	seriesMouseLeftButtonUp ={this.onSeriesMouseLeftButtonUp}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * public onSeriesMouseLeftButtonUp =(event: any, args: DataChartMouseButtonEventArgs )
    * {
    *
    * }
    * ```
    */
    get seriesMouseLeftButtonUp(): (s: IgrSeriesViewer, e: IgrDataChartMouseButtonEventArgs) => void;
    set seriesMouseLeftButtonUp(ev: (s: IgrSeriesViewer, e: IgrDataChartMouseButtonEventArgs) => void);
    private _seriesClick;
    private _seriesClick_wrapped;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over a Series.
    */
    get seriesClick(): (s: IgrSeriesViewer, e: IgrDataChartMouseButtonEventArgs) => void;
    set seriesClick(ev: (s: IgrSeriesViewer, e: IgrDataChartMouseButtonEventArgs) => void);
    private _seriesMouseMove;
    private _seriesMouseMove_wrapped;
    /**
     * Occurs when the mouse pointer moves while over a Series.
    *
    * The `SeriesMouseMove` event occurs when the left mouse pointer moves while over an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSeriesMouseMove(event: {sender: any, args: ChartMouseEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	seriesMouseMove={this.onSeriesMouseMove} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * public onSeriesMouseMove =( event: any, args: ChartMouseEventArgs) => {
    *                  }
    * ```
    */
    get seriesMouseMove(): (s: IgrSeriesViewer, e: IgrChartMouseEventArgs) => void;
    set seriesMouseMove(ev: (s: IgrSeriesViewer, e: IgrChartMouseEventArgs) => void);
    private _seriesMouseEnter;
    private _seriesMouseEnter_wrapped;
    /**
     * Occurs when the mouse pointer enters a Series.
    *
    * The `SeriesMouseEnter` event occurs when the left mouse pointer enters an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSeriesMouseEnter(event: {sender: any, args: ChartMouseEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	seriesMouseEnter={this.onSeriesMouseEnter}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get seriesMouseEnter(): (s: IgrSeriesViewer, e: IgrChartMouseEventArgs) => void;
    set seriesMouseEnter(ev: (s: IgrSeriesViewer, e: IgrChartMouseEventArgs) => void);
    private _seriesMouseLeave;
    private _seriesMouseLeave_wrapped;
    /**
     * Occurs when the mouse pointer leaves a Series.
    *
    * The `SeriesMouseLeave` event occurs when the left mouse pointer leaves an element of this chart.
    *
    * ```ts
    * public onSeriesMouseLeave(event: {sender: any, args: ChartMouseEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	 seriesMouseLeave ={this.onSeriesMouseLeave}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get seriesMouseLeave(): (s: IgrSeriesViewer, e: IgrChartMouseEventArgs) => void;
    set seriesMouseLeave(ev: (s: IgrSeriesViewer, e: IgrChartMouseEventArgs) => void);
    private _viewerManipulationStarting;
    private _viewerManipulationStarting_wrapped;
    /**
     * Raised when an ongoing manipulation of the series viewer is started.
    */
    get viewerManipulationStarting(): (s: IgrSeriesViewer, e: IgrSeriesViewerManipulationEventArgs) => void;
    set viewerManipulationStarting(ev: (s: IgrSeriesViewer, e: IgrSeriesViewerManipulationEventArgs) => void);
    private _viewerManipulationEnding;
    private _viewerManipulationEnding_wrapped;
    /**
     * Raised when an ongoing manipulation of the series viewer is ended.
    */
    get viewerManipulationEnding(): (s: IgrSeriesViewer, e: IgrSeriesViewerManipulationEventArgs) => void;
    set viewerManipulationEnding(ev: (s: IgrSeriesViewer, e: IgrSeriesViewerManipulationEventArgs) => void);
    private _windowRectChanged;
    private _windowRectChanged_wrapped;
    /**
     * Occurs just after the current SeriesViewer's window rectangle is changed.
    *
    * &lt;-- position: content member-->
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * <IgrDataChart
    * 	width="100%"
    * 	height="100%"
    * 	dataSource={this.data}
    * 	windowRectChanged={this.onWindowRectChanged} >
    * <IgrCategoryXAxis name="xAxis" label="Year"/>
    * <IgrNumericYAxis name="yAxis" minimumValue={0} />
    * <IgrLineSeries name="series3" title="Russia"
    *     valueMemberPath="Russia"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     markerType={this.state.markersType} />
    * </IgrDataChart>
    * ```
    *
    * ```ts
    * public onWindowRectChanged =( s:any, e: RectChangedEventArgs) => {
    *
    *        }
    * ```
    */
    get windowRectChanged(): (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void;
    set windowRectChanged(ev: (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void);
    private _sizeChanged;
    private _sizeChanged_wrapped;
    /**
     * Occurs after the size of the series viewer changes.
    *
    * &lt;-- position: content member-->
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	sizeChanged={this.onSizeChanged=} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * public onSizeChanged =(event: any, args: RectChangedEventArgs}){
    *
    * }
    * ```
    */
    get sizeChanged(): (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void;
    set sizeChanged(ev: (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void);
    private _actualWindowRectChanged;
    private _actualWindowRectChanged_wrapped;
    /**
     * Raised when the actual window rectangle of the SeriesViewer changes.
    */
    get actualWindowRectChanged(): (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void;
    set actualWindowRectChanged(ev: (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void);
    private _gridAreaRectChanged;
    private _gridAreaRectChanged_wrapped;
    /**
     * Occurs just after the current SeriesViewer's grid area rectangle is changed.
     * The grid area may change as the result of the SeriesViewer being resized, or
     * of an axis being added or changing size, possibly in another SeriesViewer.
    */
    get gridAreaRectChanged(): (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void;
    set gridAreaRectChanged(ev: (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void);
    private _selectedSeriesItemsChanged;
    private _selectedSeriesItemsChanged_wrapped;
    /**
     * Raised when the SelectedItems collection has changed.
    */
    get selectedSeriesItemsChanged(): (s: IgrSeriesViewer, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    set selectedSeriesItemsChanged(ev: (s: IgrSeriesViewer, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void);
    private _focusedSeriesItemsChanged;
    private _focusedSeriesItemsChanged_wrapped;
    /**
     * Raised when the SelectedItems collection has changed.
    */
    get focusedSeriesItemsChanged(): (s: IgrSeriesViewer, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    set focusedSeriesItemsChanged(ev: (s: IgrSeriesViewer, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void);
    private _refreshCompleted;
    private _refreshCompleted_wrapped;
    /**
     * Raised when the SeriesViewer's processing for an update has completed.
    */
    get refreshCompleted(): (s: IgrSeriesViewer, e: IgrRefreshCompletedEventArgs) => void;
    set refreshCompleted(ev: (s: IgrSeriesViewer, e: IgrRefreshCompletedEventArgs) => void);
    private _imageCaptured;
    private _imageCaptured_wrapped;
    /**
     * Event raised when an image of the component is saved
    */
    get imageCaptured(): (s: IgrSeriesViewer, e: IgrImageCapturedEventArgs) => void;
    set imageCaptured(ev: (s: IgrSeriesViewer, e: IgrImageCapturedEventArgs) => void);
}
export interface IIgrSeriesViewerProps {
    children?: React.ReactNode;
    /**
     * Gets or sets the palette of brushes used for fill of plotted series.
     * These brushes are automatically assigned to series based on the index of series.
    */
    brushes?: string[] | string;
    /**
     * Gets or sets the palette of brushes used for outlines of plotted series.
     * These outlines are automatically assigned to series based on the index of series.
    */
    outlines?: string[] | string;
    /**
     * Gets or sets the palette of brushes used for fill of marker series.
     * These brushes are automatically assigned to markers based on the index of series.
    */
    markerBrushes?: string[] | string;
    /**
     * Gets or sets the palette of brushes used for outlines of plotted markers.
     * These outlines are automatically assigned to markers based on the index of series.
    */
    markerOutlines?: string[] | string;
    /**
     * Gets or sets the marker mode used for assigning a marker type to series when the marker type is automatic.
    */
    markerAutomaticBehavior?: MarkerAutomaticBehavior | string;
    /**
     * Gets or sets the cross hair point (in world coordinates)
     * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
     * case the relevant crosshair line is hidden.
    *
    * The `CrosshairPoint` property is used to gets/sets the cross hair point (in world coordinates).
    *
    * ```ts
    * this.chart.crosshairPoint = {x:.8,y:.2};
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	crosshairVisibility="visible"
    *     crosshairPoint={x:.8,y:.2} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    crosshairPoint?: IgPoint | string;
    /**
     * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
    *
    * `AnimateSeriesWhenAxisRangeChanges` is a Boolean property to override the default behavior in which series do not animate if an axis range changes.
    *
    * ```ts
    * this.chart.animateSeriesWhenAxisRangeChanges = true;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	animateSeriesWhenAxisRangeChanges={true}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    animateSeriesWhenAxisRangeChanges?: boolean | string;
    /**
     * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
    */
    seriesValueLayerUseLegend?: boolean | string;
    /**
     * Gets or sets whether to sync the vertical aspect of the window with the contained series content. This is only supported for a subset of the available series.
    */
    isWindowSyncedToVisibleRange?: boolean | string;
    /**
     * Gets or sets whether calling SimulateHover should shift the crosshair point.
    */
    shouldSimulateHoverMoveCrosshairPoint?: boolean | string;
    /**
     * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
    */
    highlightingMode?: SeriesHighlightingMode | string;
    /**
     * Gets or sets the selection mode to use for the series in the component, when supported.
    */
    selectionMode?: SeriesSelectionMode | string;
    /**
     * Gets or sets the selection behavior to use for the series in the component, when supported.
    */
    selectionBehavior?: SeriesSelectionBehavior | string;
    /**
     * Gets or sets the focus mode to use for the series in the component, when supported.
    */
    focusMode?: SeriesSelectionMode | string;
    /**
     * Gets or sets the horizontal scrollbar mode to use for the series viewer.
    */
    horizontalViewScrollbarMode?: SeriesViewerScrollbarMode | string;
    /**
     * Gets or sets the vertical scrollbar mode to use for the series viewer.
    */
    verticalViewScrollbarMode?: SeriesViewerScrollbarMode | string;
    /**
     * Gets or sets the position to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarPosition?: SeriesViewerHorizontalScrollbarPosition | string;
    /**
     * Gets or sets the position to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarPosition?: SeriesViewerVerticalScrollbarPosition | string;
    /**
     * Gets or sets the fill to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarFill?: string;
    /**
     * Gets or sets the outline to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarOutline?: string;
    /**
     * Gets or sets the stroke thickness to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarStrokeThickness?: number | string;
    /**
     * Gets or sets the max opacity to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarMaxOpacity?: number | string;
    /**
     * Gets or sets the corner radius to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarCornerRadius?: number | string;
    /**
     * Gets or sets the height to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarHeight?: number | string;
    /**
     * Gets or sets the inset distance to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarInset?: number | string;
    /**
     * Gets or sets the track start inset to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarTrackStartInset?: number | string;
    /**
     * Gets or sets the track end inset to use for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarTrackEndInset?: number | string;
    /**
     * Gets or sets whether to use automatic track insets for the horizontal scrollbar in the component, when enabled.
    */
    horizontalViewScrollbarShouldAddAutoTrackInsets?: boolean | string;
    /**
     * Gets or sets the fill to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarFill?: string;
    /**
     * Gets or sets the outline to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarOutline?: string;
    /**
     * Gets or sets the stroke thickness to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarStrokeThickness?: number | string;
    /**
     * Gets or sets the max opacity to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarMaxOpacity?: number | string;
    /**
     * Gets or sets the corner radius to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarCornerRadius?: number | string;
    /**
     * Gets or sets the width to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarWidth?: number | string;
    /**
     * Gets or sets the inset distance to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarInset?: number | string;
    /**
     * Gets or sets the track start inset to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarTrackStartInset?: number | string;
    /**
     * Gets or sets the track end inset to use for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarTrackEndInset?: number | string;
    /**
     * Gets or sets whether to use automatic track insets for the vertical scrollbar in the component, when enabled.
    */
    verticalViewScrollbarShouldAddAutoTrackInsets?: boolean | string;
    /**
     * Gets or sets the highlighting Behavior to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
    */
    highlightingBehavior?: SeriesHighlightingBehavior | string;
    /**
     * Gets or sets the highlighting mode to use for the legend linked to the component, when supported.
    */
    legendHighlightingMode?: LegendHighlightingMode | string;
    /**
     * Gets or sets type of legend badges representing all series displayed in a legend linked to this component
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
    */
    legendItemBadgeShape?: LegendItemBadgeShape | string;
    /**
     * Gets or sets the mode of legend badges representing all series in this chart.
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
    */
    legendItemBadgeMode?: LegendItemBadgeMode | string;
    /**
     * Gets the EffectiveViewport rectangle, representing the effective viewport area after margins have been subtracted.
    *
    *  ``ts
    * let viewport: IgxRect = this.chart.effectiveViewport;
    *
    * ```
    *
    * ```
    */
    effectiveViewport?: IgRect | string;
    /**
     * A rectangle representing the portion of the SeriesViewer currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
    *
    * You can set the `WindowRect` to zoom in on an area of interest in the chart.
    *
    * ```ts
    * this.chart.windowRect = {left:0, top:1, width: .5, height: .5};
    * ```
    */
    windowRect?: IgRect | string;
    /**
     * Gets or sets whether the series viewer should use cached tiles during zooms rather than the default live content.
    */
    useTiledZooming?: boolean | string;
    /**
     * Gets or sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
    */
    preferHigherResolutionTiles?: boolean | string;
    /**
     * Gets or sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
    */
    zoomTileCacheSize?: number | string;
    /**
     * Gets or sets the duration the highlighting/de-highlighting effects.
    *
    * The `HighlightingTransitionDuration` property is used to set the time for highlighting transition in milliseconds .
    *
    * ```ts
    * chart.HighlightingTransitionDuration=500;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	HighlightingTransitionDuration={500} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    highlightingTransitionDuration?: number | string;
    /**
     * Gets or sets the duration the selection/de-Selection effects.
    */
    selectionTransitionDuration?: number | string;
    /**
     * Gets or sets the duration the Focus/de-Focus effects.
    */
    focusTransitionDuration?: number | string;
    /**
     * Gets or sets the duration of the scrollbar effects.
    */
    scrollbarsAnimationDuration?: number | string;
    /**
     * Gets or sets the whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
    */
    isPagePanningAllowed?: boolean | string;
    /**
     * Determines the method of hit testing used when mousing over elements in the chart.
    *
    * ```ts
    * this.chart.contentHitTestMode = ChartHitTestMode.Computational;
    * ```
    */
    contentHitTestMode?: ChartHitTestMode | string;
    /**
     * Resolved method of hit testing used when the pointer is over elements in the chart.
    *
    * ```ts
    * let actualContentHitTestMode: ChartHitTestMode  =this.chart.actualContentHitTestMode;
    * ```
    */
    actualContentHitTestMode?: ChartHitTestMode | string;
    /**
     * Gets or sets whether all surface interactions with the plot area should be disabled.
    *
    * The `IsSurfaceInteractionDisabled` property is used to enable/disable interactions with the plot surface.
    *
    * ```ts
    * chart.isSurfaceInteractionDisabled=true;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	 isSurfaceInteractionDisabled={true} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    isSurfaceInteractionDisabled?: boolean | string;
    /**
     * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
    *
    * The `WindowResponse` property is used to set the response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.
    * The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
    *
    * ```ts
    * this.chart.windowResponse="deferred";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	windowResponse="deferred">
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    windowResponse?: WindowResponse | string;
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
    *
    * The `WindowRectMinWidth` property is used to set or get the minimum width that the window rect is allowed to reach before being clamped.
    *
    * ```ts
    * this.chart.WindowRectMinWidth=".2";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	WindowRectMinWidth=".2">
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    windowRectMinWidth?: number | string;
    /**
     * Sets or gets the minimum height that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
    */
    windowRectMinHeight?: number | string;
    /**
     * Gets the actual minimum width that the window rect is allowed to reach before being clamped.
    */
    actualWindowRectMinWidth?: number | string;
    /**
     * Gets the actual minimum height that the window rect is allowed to reach before being clamped.
    */
    actualWindowRectMinHeight?: number | string;
    /**
     * Sets or gets minimum pixel width that the window is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property is overridden by the WindowRectMinWidth property
    */
    windowSizeMinWidth?: number | string;
    /**
     * Sets or gets minimum pixel height that the window is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property is overridden by the WindowRectMinHeight property
    */
    windowSizeMinHeight?: number | string;
    /**
     * Gets or sets the current SeriesViewer's crosshair visibility override.
    *
    * The `CrosshairVisibility` property is used to gets or sets the current Chart's crosshair visibility override. Note: setting this property does not affect the mobile browser version of the chart.
    *
    * ```ts
    * this.chart.crosshairVisibility = Visibility.Visible;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	crosshairVisibility="visible"
    *     crosshairPoint={x:.8,y:.2} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    crosshairVisibility?: Visibility | string;
    /**
     * Gets or sets the current SeriesViewer's crosshair horizontal brush override.
    */
    horizontalCrosshairBrush?: string;
    /**
     * Gets or sets the current SeriesViewer's crosshair vertical brush override.
    */
    verticalCrosshairBrush?: string;
    /**
     * Gets or sets zoom is constrained to within the axes. Setting this to false is a preview feature at the present time.
    */
    zoomCoercionMode?: ZoomCoercionMode | string;
    /**
     * Gets or sets the brush used as the background for the current SeriesViewer object's plot area.
    *
    * `PlotAreaBackground` property set the background brush to the current Chart object's plot area.
    *
    * ```ts
    * this.chart.plotAreaBackground="#F0F8FF";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	dataSource={this.state.dataSource}
    * 	plotAreaBackground="#F0F8FF" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    plotAreaBackground?: string;
    /**
     * Gets or sets whether to match the z order of the series to their positional order in the series collection, regardless of mutation.
    */
    shouldMatchZOrderToSeriesOrder?: boolean | string;
    /**
     * Gets or sets the DefaultInteraction property.
     * The default interaction state defines the SeriesViewer's response to mouse events.
    *
    * The default interaction state defines the chart's response to mouse events.
    *
    * ```ts
    * this.chart.defaultInteraction = InteractionState.DragPan;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	defaultInteraction="dragPan" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    defaultInteraction?: InteractionState | string;
    /**
     * Gets or sets the InteractionOverride property.
     * The interaction override overrides the default interaction and modifiers keys and defines the SeriesViewer's response to mouse events.
    */
    interactionOverride?: InteractionState | string;
    /**
     * Gets or sets the RightButtonDefaultInteraction property.
     * The default interaction state defines the SeriesViewer's response to right button mouse events.
    */
    rightButtonDefaultInteraction?: InteractionState | string;
    /**
     * Gets or sets the current SeriesViewer's DragModifier property.
    *
    * `DragModifier` is useful to enable zooming when zooming is not the default interaction.
    *
    * ```ts
    * this.chart.dragModifier = ModifierKeys.Alt;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	isHorizontalZoomEnabled=true
    *     defaultInteraction="dragPan"
    *     dragModifier="alt" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    dragModifier?: ModifierKeys | string;
    /**
     * Gets or sets the current SeriesViewer's PanModifier property.
    *
    * `PanModifier` is useful to enable panning when panning is not the default interaction.
    *
    * ```ts
    * this.chart.panModifier = ModifierKeys.Alt;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	dataSource={this.state.dataSource}
    * 	isHorizontalZoomEnabled=true
    * 	defaultInteraction="dragZoom"
    * 	panModifier="alt" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    panModifier?: ModifierKeys | string;
    /**
     * Gets or sets the current SeriesViewer's SelectionModifier property.
    */
    selectionModifier?: ModifierKeys | string;
    /**
     * Gets or sets the preview rectangle.
     * The preview rectangle may be set to Rect.Empty, in which case the visible preview
     * strokePath is hidden.
    *
    * `PreviewRect` can be used to highlight an area of importance.
    *
    * ```ts
    * this.chart.previewRect = {left:0,top:0,height:.5,width:.5};
    * ```
    */
    previewRect?: IgRect | string;
    /**
     * Gets or sets whether and how to display highlighted values for the series by default. Note, this is distinct from the highlighting feature that indicates what is closest or under the mouse.
    */
    highlightedValuesDisplayMode?: SeriesHighlightedValuesDisplayMode | string;
    /**
     * Gets the currently selected data items.  Adding or removing data items from this collection will
     * select or deselect the visuals associated with those items.
    */
    selectedSeriesItems?: IgrChartSelectedItemCollection | string;
    /**
     * Gets the currently focused data items.  Adding or removing data items from this collection will
     * focus or blur the visuals associated with those items.
    */
    focusedSeriesItems?: IgrChartSelectedItemCollection | string;
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the X position of the WindowRect property.
    *
    * ```ts
    * this.chart.windowPositionHorizontal = .2;
    * ```
    */
    windowPositionHorizontal?: number | string;
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Y position of the WindowRect property.
    *
    * ```ts
    * this.chart.windowPositionVertical = .2;
    * ```
    */
    windowPositionVertical?: number | string;
    /**
     * Gets or sets the selection brush to use for the series.
    */
    selectionBrush?: string;
    /**
     * Gets or sets the Focus brush to use for the series.
    */
    focusBrush?: string;
    /**
     * Text to display above the plot area.
    *
    * The `Title` property is used to set the title to display for the component.
    *
    * ```ts
    * this.chart.title="Items Sold";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	title="Items Sold" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    chartTitle?: string;
    /**
     * Gets or sets the TitleHorizontalAlignment property.
    *
    * The `subtitleHorizontalAlignment` property is used to set horizontal alignment for the subtitle.
    *
    * ```ts
    * this.chart.titleHorizontalAlignment="left";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	titleHorizontalAlignment="left"
    *     subtitleHorizontalAlignment="left" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    titleHorizontalAlignment?: HorizontalAlignment | string;
    /**
     * Gets or sets the SubtitleHorizontalAlignment property.
    *
    * The `subtitleBottomMargin` property is used to set the horizontal alignment for the subtitle.
    *
    * ```ts
    * this.chart.subtitleHorizontalAlignment="left";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	subtitleHorizontalAlignment="left"	>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    subtitleHorizontalAlignment?: HorizontalAlignment | string;
    /**
     * Font settings for the title.
    */
    titleTextStyle?: string;
    /**
     * Font settings for the subtitle.
    */
    subtitleTextStyle?: string;
    /**
     * Gets or sets the Color used for the Title Text.
    *
    * The `titleTextColor` property is used to set the title brush.
    *
    * ```ts
    * this.chart.titleTextColor="blue" ;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	titleTextColor="blue" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    titleTextColor?: string;
    /**
     * Gets or sets the Color used for the Subtitle Text.
    *
    * The `subtitleTextColor` property is used to set the color for the subtitle.
    *
    * ```ts
    * this.chart.subtitleTextColor="blue";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	title="Date of Sale: 1/1/2018"
    *     subtitleTextColor="blue">
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    subtitleTextColor?: string;
    /**
     * Margin applied above the title.
    *
    * The `titleTopMargin` property is used to set the top margin for the title.
    *
    * ```ts
    * this.chart.titleTopMargin=10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	titleLeftMarging= {10}
    *     titleTopMargin= {10 }
    *     titleRightMargin= {10}
    *     titleBottomMargin= {20}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    titleTopMargin?: number | string;
    /**
     * Margin applied to the left of the title.
    *
    * The `titleLeftMarging` property is used to set the left margin for the title.
    *
    * ```ts
    * this.chart.titleLeftMarging=10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	title="Items Sold"
    *     titleLeftMarging={10}
    *     titleTopMargin={10}
    *     titleRightMargin={10}
    *     titleBottomMargin= {20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    titleLeftMargin?: number | string;
    /**
     * Margin applied to the right of the title.
    *
    * The `titleRightMargin` property is used to set the right margin for the title.
    *
    * ```ts
    * this.chart.titleRightMargin=10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	titleLeftMarging= {10}
    *     titleTopMargin= {10 }
    *     titleRightMargin= {10}
    *     titleBottomMargin= {20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    titleRightMargin?: number | string;
    /**
     * Margin applied below the title.
    *
    * The `titleBottomMargin` property is used to set the bottom margin for the title.
    *
    * ```ts
    * this.chart.titleBottomMargin=20;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	title="Items Sold"
    * 	titleLeftMarging= {10}
    *     titleTopMargin= {10 }
    *     titleRightMargin= {10}
    *     titleBottomMargin= {20}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    titleBottomMargin?: number | string;
    /**
     * Margin applied above the subtitle.
    *
    * The `subtitleTopMargin` property is used to set the top margin for the subtitle.
    *
    * ```ts
    * this.chart.subtitleTopMargin =10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	subtitleLeftMarging= {10}
    *     subtitleTopMargin={10}
    *     subtitleRightMargin={10}
    *     subtitleBottomMargin={20}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    subtitleTopMargin?: number | string;
    /**
     * Margin applied to the left of the subtitle.
    *
    * The `subtitleLeftMarging` property is used to set the left margin for the subtitle.
    *
    * ```ts
    * this.chart.subtitleLeftMarging=10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	subtitleLeftMarging= {10}
    *     subtitleTopMargin={10}
    *     subtitleRightMargin={10}
    *     subtitleBottomMargin={20}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    subtitleLeftMargin?: number | string;
    /**
     * Margin applied to the right of the subtitle.
    *
    * The `subTitleRightMargin` property is used to set the right margin for the subtitle.
    *
    * ```ts
    * this.chart.subtitleLeftMarging=10;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	subtitleLeftMarging= {10}
    *     subtitleTopMargin= {10}
    *     subtitleRightMargin={10}
    *     subtitleBottomMargin={20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    subtitleRightMargin?: number | string;
    /**
     * Margin applied below the subtitle.
    *
    * The `subtitleBottomMargin` property is used to set the bottom margin for the subtitle.
    *
    * ```ts
    * this.chart.subtitleBottomMargin = 20;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	 subtitleBottomMargin={20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    subtitleBottomMargin?: number | string;
    /**
     * Gets or sets the Subtitle property.
     * The Title property defines the Subtitle of the chart
    *
    * The `Subtitle` property is used to display subtitle for the component.
    *
    * ```ts
    * this.chart.subtitle="Date of Sale: 1/1/2018";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	dataSource={this.state.dataSource}
    * 	subtitle="Date of Sale: 1/1/2018" >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    subtitle?: string;
    /**
     * Sets or gets the top margin to use around the chart content.
    *
    * The `topMargin` property is used to set the top margin.
    *
    * ```ts
    * this.chart.topMargin=30;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	leftMargin= {20}
    *     rightMargin={20}
    *     topMargin={30}
    *     bottomMargin= {20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    topMargin?: number | string;
    /**
     * Sets or gets the left margin to use around the chart content.
    *
    * The `LeftMargin` property is used to set the left margin.
    *
    * ```ts
    *  this.chart.leftMargin = 20;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	 leftMargin={20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    * />
    *  </IgrDataChart>
    * ```
    */
    leftMargin?: number | string;
    /**
     * Sets or gets the right margin to use around the chart content.
    *
    * The `RightMargin` property is used to set the left margin around the chart content in the canvas.
    *
    * ```ts
    * this.chart.rightMargin=20;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	leftMargin= {20}
    * 	rightMargin={20}
    * 	topMargin={30}
    * 	bottomMargin={20} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    rightMargin?: number | string;
    /**
     * Sets or gets the bottom margin to use around the chart content.
    *
    * The `bottomMargin` property is used to gets/set the bottom margin around the chart content in the canvas.
    *
    * ```ts
    * this.chart.bottomMargin = 50;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	 bottomMargin={50} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    bottomMargin?: number | string;
    /**
     * Sets or gets the automatic width to add when automatically adding margins to the chart.
    *
    * The `autoMarginWidth` propertry is used find the automatic width to add when automatically adding margins to the chart.
    *
    * ```ts
    * this.chart.autoMarginWidth = 50;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	autoMarginWidth={50} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    autoMarginWidth?: number | string;
    /**
     * Sets or gets the automatic height to add when automatically adding margins to the chart.
    *
    * ```ts
    *  this.chart.autoMarginHeight = 50;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	autoMarginHeight={50}
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrAreaSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    *     brush="Gray"
    *     outline="Black" />
    *  </IgrDataChart>
    * ```
    */
    autoMarginHeight?: number | string;
    /**
     * Gets or sets the IsAntiAliasingEnabledDuringInteraction property.
    */
    isAntiAliasingEnabledDuringInteraction?: boolean | string;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    pixelScalingRatio?: number | string;
    /**
     * Method of pixel scaling to use during end user interaction with the chart.
    */
    interactionPixelScalingRatio?: number | string;
    /**
     * Gets the resolved pixel scaling ratio.
    *
    * A higher scaling ratio will produce crisper visuals at the expense of memory. Lower values will cause the control to appear blurry
    *
    * ```ts
    * let actualPixelScalingRatio: number = this.chart.actualPixelScalingRatio;
    * ```
    */
    actualPixelScalingRatio?: number | string;
    /**
     * Resolved method of pixel scaling to use during end user interaction with the chart.
    *
    * ```ts
    * let actualInteractionPixelScalingRatio: number = this.chart.actualInteractionPixelScalingRatio;
    * ```
    */
    actualInteractionPixelScalingRatio?: number | string;
    /**
     * Gets or sets a whether the chart should pan its content when zooming in passed max zoom level.
    */
    shouldPanOnMaximumZoom?: boolean | string;
    /**
     * Gets the actual value of the window rectangle, which represents the current zoom level.
    */
    actualWindowRect?: IgRect | string;
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the Left of the ActualWindowRect property.
    *
    * ```ts
    * let actualWindowPositionHorizontal: number = this.chart.actualWindowPositionHorizontal;
    * ```
    */
    actualWindowPositionHorizontal?: number | string;
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Top of the ActualWindowRect property.
    *
    * ```ts
    * let actualWindowPositionVertical: number = this.chart.actualWindowPositionVertical;
    * ``
    * ```
    */
    actualWindowPositionVertical?: number | string;
    /**
     * Gets or sets the brush used as the border for the current SeriesViewer object's preview path.
     * Null is treated as auto.
    */
    previewPathStroke?: string;
    /**
     * Gets or sets the brush used as the fill for the current SeriesViewer object's preview path.
     * Null is treated as auto.
    */
    previewPathFill?: string;
    /**
     * Gets or sets the opacity used as for the fill for the current SeriesViewer object's preview path.
     * Null is treated as auto.
    */
    previewPathOpacity?: number | string;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over the plot area.
    */
    plotAreaMouseLeftButtonDown?: (s: IgrSeriesViewer, e: IgrPlotAreaMouseButtonEventArgs) => void;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over the plot area.
    */
    plotAreaMouseLeftButtonUp?: (s: IgrSeriesViewer, e: IgrPlotAreaMouseButtonEventArgs) => void;
    /**
     * Occurs when the left mouse button is clicked while the mouse pointer is over the plot area.
    */
    plotAreaClicked?: (s: IgrSeriesViewer, e: IgrPlotAreaMouseButtonEventArgs) => void;
    /**
     * Occurs when the pointer enters the plot area.
    */
    plotAreaMouseEnter?: (s: IgrSeriesViewer, e: IgrPlotAreaMouseEventArgs) => void;
    /**
     * Occurs when the pointer exits the plot area.
    */
    plotAreaMouseLeave?: (s: IgrSeriesViewer, e: IgrPlotAreaMouseEventArgs) => void;
    /**
     * Occurs when the pointer if over the plot area.
    */
    plotAreaMouseOver?: (s: IgrSeriesViewer, e: IgrPlotAreaMouseEventArgs) => void;
    /**
     * Occurs when the cursors are moved over a series in this SeriesViewer.
    */
    seriesCursorMouseMove?: (s: IgrSeriesViewer, e: IgrChartCursorEventArgs) => void;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over a Series.
    *
    * The `SeriesMouseLeftButtonDown` event occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSeriesMouseLeftButtonDown(event: {sender: any, args: DataChartMouseButtonEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	seriesMouseLeftButtonDown= {this.onSeriesMouseLeftButtonDown}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    seriesMouseLeftButtonDown?: (s: IgrSeriesViewer, e: IgrDataChartMouseButtonEventArgs) => void;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over a Series.
    *
    * The `SeriesMouseLeftButtonUp` event occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSeriesMouseLeftButtonUp(event: {sender: any, args: DataChartMouseButtonEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	seriesMouseLeftButtonUp ={this.onSeriesMouseLeftButtonUp}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * public onSeriesMouseLeftButtonUp =(event: any, args: DataChartMouseButtonEventArgs )
    * {
    *
    * }
    * ```
    */
    seriesMouseLeftButtonUp?: (s: IgrSeriesViewer, e: IgrDataChartMouseButtonEventArgs) => void;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over a Series.
    */
    seriesClick?: (s: IgrSeriesViewer, e: IgrDataChartMouseButtonEventArgs) => void;
    /**
     * Occurs when the mouse pointer moves while over a Series.
    *
    * The `SeriesMouseMove` event occurs when the left mouse pointer moves while over an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSeriesMouseMove(event: {sender: any, args: ChartMouseEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	seriesMouseMove={this.onSeriesMouseMove} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * public onSeriesMouseMove =( event: any, args: ChartMouseEventArgs) => {
    *                  }
    * ```
    */
    seriesMouseMove?: (s: IgrSeriesViewer, e: IgrChartMouseEventArgs) => void;
    /**
     * Occurs when the mouse pointer enters a Series.
    *
    * The `SeriesMouseEnter` event occurs when the left mouse pointer enters an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSeriesMouseEnter(event: {sender: any, args: ChartMouseEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	seriesMouseEnter={this.onSeriesMouseEnter}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    seriesMouseEnter?: (s: IgrSeriesViewer, e: IgrChartMouseEventArgs) => void;
    /**
     * Occurs when the mouse pointer leaves a Series.
    *
    * The `SeriesMouseLeave` event occurs when the left mouse pointer leaves an element of this chart.
    *
    * ```ts
    * public onSeriesMouseLeave(event: {sender: any, args: ChartMouseEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	 seriesMouseLeave ={this.onSeriesMouseLeave}>
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    seriesMouseLeave?: (s: IgrSeriesViewer, e: IgrChartMouseEventArgs) => void;
    /**
     * Raised when an ongoing manipulation of the series viewer is started.
    */
    viewerManipulationStarting?: (s: IgrSeriesViewer, e: IgrSeriesViewerManipulationEventArgs) => void;
    /**
     * Raised when an ongoing manipulation of the series viewer is ended.
    */
    viewerManipulationEnding?: (s: IgrSeriesViewer, e: IgrSeriesViewerManipulationEventArgs) => void;
    /**
     * Occurs just after the current SeriesViewer's window rectangle is changed.
    *
    * &lt;-- position: content member-->
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * <IgrDataChart
    * 	width="100%"
    * 	height="100%"
    * 	dataSource={this.data}
    * 	windowRectChanged={this.onWindowRectChanged} >
    * <IgrCategoryXAxis name="xAxis" label="Year"/>
    * <IgrNumericYAxis name="yAxis" minimumValue={0} />
    * <IgrLineSeries name="series3" title="Russia"
    *     valueMemberPath="Russia"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     markerType={this.state.markersType} />
    * </IgrDataChart>
    * ```
    *
    * ```ts
    * public onWindowRectChanged =( s:any, e: RectChangedEventArgs) => {
    *
    *        }
    * ```
    */
    windowRectChanged?: (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void;
    /**
     * Occurs after the size of the series viewer changes.
    *
    * &lt;-- position: content member-->
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 	sizeChanged={this.onSizeChanged=} >
    *
    *     <IgrNumericXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * public onSizeChanged =(event: any, args: RectChangedEventArgs}){
    *
    * }
    * ```
    */
    sizeChanged?: (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void;
    /**
     * Raised when the actual window rectangle of the SeriesViewer changes.
    */
    actualWindowRectChanged?: (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void;
    /**
     * Occurs just after the current SeriesViewer's grid area rectangle is changed.
     * The grid area may change as the result of the SeriesViewer being resized, or
     * of an axis being added or changing size, possibly in another SeriesViewer.
    */
    gridAreaRectChanged?: (s: IgrSeriesViewer, e: IgrRectChangedEventArgs) => void;
    /**
     * Raised when the SelectedItems collection has changed.
    */
    selectedSeriesItemsChanged?: (s: IgrSeriesViewer, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    /**
     * Raised when the SelectedItems collection has changed.
    */
    focusedSeriesItemsChanged?: (s: IgrSeriesViewer, e: IgrSeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    /**
     * Raised when the SeriesViewer's processing for an update has completed.
    */
    refreshCompleted?: (s: IgrSeriesViewer, e: IgrRefreshCompletedEventArgs) => void;
    /**
     * Event raised when an image of the component is saved
    */
    imageCaptured?: (s: IgrSeriesViewer, e: IgrImageCapturedEventArgs) => void;
}
