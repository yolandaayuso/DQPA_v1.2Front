import { IgRect } from "igniteui-react-core";
import { IgPoint } from "igniteui-react-core";
import { ConsolidatedItemsPosition } from "./ConsolidatedItemsPosition";
import { IgrHorizontalAnchoredCategorySeries, IIgrHorizontalAnchoredCategorySeriesProps } from "./igr-horizontal-anchored-category-series";
import { ColumnSeries } from "./ColumnSeries";
/**
 * Represents a IgxDataChartComponent column series.
 * Compare values across categories by using vertical rectangles.
 * Use it when the order of categories is not important or for displaying
 * item counts such as a histogram.
*
* ```ts
*  <IgrDataChart
* 		ref={this.onChartRef}
*         dataSource={this.data}>
*
*         <IgrCategoryXAxis name="xAxisYears"/>
*         <IgrCategoryXAxis name="xAxisMonths" />
*         <IgrNumericYAxis  name="yAxisLeft"  />
*         <IgrNumericYAxis  name="yAxisRight" />
*
*         <IgrColumnSeries name="series1"
*         valueMemberPath="volume"
*         xAxisName="xAxisMonths"
*         yAxisName="yAxisLeft"
*         isTransitionInEnabled="true" />
* </IgrDataChart>
* ```
*
* ```ts
* 	this.columnSeries1 = new IgrColumnSeries({ name: "colSeries1" });
* 	this.columnSeries1.dataSource = this.categoryData;
* 	this.columnSeries1.xAxis = this.categoryXAxis;
* 	this.columnSeries1.yAxis = this.numericYAxis;
* 	this.columnSeries1.xAxisName = "categoryXAxis";
* 	this.columnSeries1.yAxisName = "numericYAxis";
* 	this.columnSeries1.valueMemberPath = "volume";
* ```
*/
export declare class IgrColumnSeries extends IgrHorizontalAnchoredCategorySeries<IIgrColumnSeriesProps> {
    protected createImplementation(): ColumnSeries;
    /**
                                 * @hidden
                                 */
    get i(): ColumnSeries;
    constructor(props: IIgrColumnSeriesProps);
    /**
     * Gets whether the current series shows a column shape.
    */
    get isColumn(): boolean;
    /**
     * Overridden by derived series classes to indicate when marker-less display is preferred or not.
    */
    get isMarkerlessDisplayPreferred(): boolean;
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
    */
    get radiusX(): number;
    set radiusX(v: number);
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
    */
    get radiusY(): number;
    set radiusY(v: number);
    /**
     * The positioning logic to use for columns which have been consolidated into a single visual element.
    */
    get consolidatedColumnVerticalPosition(): ConsolidatedItemsPosition;
    set consolidatedColumnVerticalPosition(v: ConsolidatedItemsPosition);
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    */
    getSeriesValueBoundingBox(world: IgPoint): IgRect;
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    getItemSpan(): number;
}
export interface IIgrColumnSeriesProps extends IIgrHorizontalAnchoredCategorySeriesProps {
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
    */
    radiusX?: number | string;
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
    */
    radiusY?: number | string;
    /**
     * The positioning logic to use for columns which have been consolidated into a single visual element.
    */
    consolidatedColumnVerticalPosition?: ConsolidatedItemsPosition | string;
}
