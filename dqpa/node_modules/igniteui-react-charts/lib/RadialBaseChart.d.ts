import { DomainChart } from "./DomainChart";
import { IEnumerable$1, Type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { VerticalAlignment } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { ValueAxisLabelLocation } from "./ValueAxisLabelLocation";
import { AngleAxisLabelLocation } from "./AngleAxisLabelLocation";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { TitleSettings } from "./TitleSettings";
import { DataSeries } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
/**
 * @hidden
 */
export declare abstract class RadialBaseChart extends DomainChart {
    static $t: Type;
    provideContainer(a: any): void;
    protected u5(): void;
    protected vx(a: string, b: any, c: any): void;
    private z6;
    get z8(): (item: any) => string;
    set z8(a: (item: any) => string);
    private z7;
    get z9(): (item: any) => string;
    set z9(a: (item: any) => string);
    private aal;
    get abj(): number;
    set abj(a: number);
    private aan;
    get abl(): number;
    set abl(a: number);
    private aam;
    get abk(): number;
    set abk(a: number);
    private aak;
    get abi(): number;
    set abi(a: number);
    private aa2;
    get ab4(): number;
    set ab4(a: number);
    private aa4;
    get ab6(): number;
    set ab6(a: number);
    private aa3;
    get ab5(): number;
    set ab5(a: number);
    private aa1;
    get ab3(): number;
    set ab3(a: number);
    private afv;
    get agb(): Brush;
    set agb(a: Brush);
    private af2;
    get agi(): Brush;
    set agi(a: Brush);
    private aft;
    get af9(): Brush;
    set af9(a: Brush);
    private afu;
    get aga(): Brush;
    set aga(a: Brush);
    private aaw;
    get abu(): number;
    set abu(a: number);
    private abd;
    get acf(): number;
    set acf(a: number);
    private aav;
    get abt(): number;
    set abt(a: number);
    private abc;
    get ace(): number;
    set ace(a: number);
    private aay;
    get abw(): number;
    set abw(a: number);
    private abf;
    get ach(): number;
    set ach(a: number);
    private aax;
    get abv(): number;
    set abv(a: number);
    private abe;
    get acg(): number;
    set acg(a: number);
    private aau;
    get abs(): number;
    set abs(a: number);
    private abb;
    get acd(): number;
    set acd(a: number);
    private af1;
    get agh(): Brush;
    set agh(a: Brush);
    private af8;
    get ago(): Brush;
    set ago(a: Brush);
    protected vy(a: string, b: any, c: any): void;
    private acn;
    get ada(): string;
    set ada(a: string);
    private acr;
    get aeg(): string;
    set aeg(a: string);
    private acp;
    get ady(): string;
    set ady(a: string);
    private act;
    get ae4(): string;
    set ae4(a: string);
    private afa;
    private afc;
    protected wo(a: DataSeries): void;
    protected abstract z4(): Axis;
    protected abstract z5(): Axis;
    protected afd(a: (arg1: Axis) => void): void;
    protected afe(a: (arg1: Axis) => void, b: string): void;
    protected afj(a: (arg1: Axis) => void, b: boolean): void;
    protected afi(a: (arg1: Axis) => void): void;
    protected uo(a: (arg1: Axis) => void, b: boolean): void;
    protected afh(a: (arg1: TitleSettings) => void): void;
    protected afm(a: (arg1: TitleSettings) => void): void;
    protected afk(a: (arg1: AxisLabelSettings) => void): void;
    protected aff(a: (arg1: AxisLabelSettings) => void): void;
    abx(a: number): number;
    abz(a: number): number;
    aby(a: number): number;
    ab0(a: number): number;
    protected wl(a: XamDataChart): void;
    static ad1(a: CategoryAxisBase, b: IEnumerable$1<DataSeries>): string;
    protected u0(a: XamDataChart, b: any): void;
    protected ae9(a: Axis): void;
    protected afb(a: Axis): void;
    protected ux(): void;
    protected ae7(a: Axis, b: (arg1: AxisLabelSettings) => void): void;
    protected ae8(a: Axis, b: (arg1: TitleSettings) => void): void;
    protected vu(a: string, b: any, c: any): void;
    afl(): void;
    afg(): void;
    aab(a: ValueAxisLabelLocation): AxisLabelsLocation;
    aaa(a: AngleAxisLabelLocation): AxisLabelsLocation;
    private aci;
    get ack(): any;
    set ack(a: any);
    private acj;
    get acl(): any;
    set acl(a: any);
    private afw;
    get agc(): Brush;
    set agc(a: Brush);
    private af3;
    get agj(): Brush;
    set agj(a: Brush);
    private aao;
    get abm(): number;
    set abm(a: number);
    private aa5;
    get ab7(): number;
    set ab7(a: number);
    private aap;
    get abn(): number;
    set abn(a: number);
    private aa6;
    get ab8(): number;
    set ab8(a: number);
    private afy;
    get age(): Brush;
    set age(a: Brush);
    private af5;
    get agl(): Brush;
    set agl(a: Brush);
    private afz;
    get agf(): Brush;
    set agf(a: Brush);
    private af6;
    get agm(): Brush;
    set agm(a: Brush);
    private aaq;
    get abo(): number;
    set abo(a: number);
    private aa7;
    get ab9(): number;
    set ab9(a: number);
    private aar;
    get abp(): number;
    set abp(a: number);
    private aa8;
    get aca(): number;
    set aca(a: number);
    private af0;
    get agg(): Brush;
    set agg(a: Brush);
    private af7;
    get agn(): Brush;
    set agn(a: Brush);
    private aas;
    get abq(): number;
    set abq(a: number);
    private aa9;
    get acb(): number;
    set acb(a: number);
    private aco;
    get adp(): string;
    set adp(a: string);
    private acs;
    get aev(): string;
    set aev(a: string);
    private afx;
    get agd(): Brush;
    set agd(a: Brush);
    private af4;
    get agk(): Brush;
    set agk(a: Brush);
    private aaj;
    get abh(): number;
    set abh(a: number);
    private aa0;
    get ab2(): number;
    set ab2(a: number);
    private aai;
    get abg(): number;
    set abg(a: number);
    private aaz;
    get ab1(): number;
    set ab1(a: number);
    private aat;
    get abr(): number;
    set abr(a: number);
    private aba;
    get acc(): number;
    set acc(a: number);
    private aae;
    get aag(): boolean;
    set aag(a: boolean);
    private aaf;
    get aah(): boolean;
    set aah(a: boolean);
    private afo;
    get afr(): HorizontalAlignment;
    set afr(a: HorizontalAlignment);
    private agr;
    get agu(): VerticalAlignment;
    set agu(a: VerticalAlignment);
    private afn;
    get afq(): HorizontalAlignment;
    set afq(a: HorizontalAlignment);
    private afp;
    protected get_afs(): HorizontalAlignment;
    protected set_afs(a: HorizontalAlignment): void;
    get afs(): HorizontalAlignment;
    set afs(a: HorizontalAlignment);
    private agp;
    get ags(): VerticalAlignment;
    set ags(a: VerticalAlignment);
    private agq;
    get agt(): VerticalAlignment;
    set agt(a: VerticalAlignment);
    private agv;
    get agx(): Visibility;
    set agx(a: Visibility);
    private agw;
    get agy(): Visibility;
    set agy(a: Visibility);
    private aac;
    protected get_aad(): ValueAxisLabelLocation;
    protected set_aad(a: ValueAxisLabelLocation): void;
    get aad(): ValueAxisLabelLocation;
    set aad(a: ValueAxisLabelLocation);
    private z2;
    protected get_z3(): AngleAxisLabelLocation;
    protected set_z3(a: AngleAxisLabelLocation): void;
    get z3(): AngleAxisLabelLocation;
    set z3(a: AngleAxisLabelLocation);
    private acm;
    get ac1(): string;
    set ac1(a: string);
    private zy;
    get z0(): any[];
    set z0(a: any[]);
    private acq;
    get ad7(): string;
    set ad7(a: string);
    private zz;
    get z1(): any[];
    set z1(a: any[]);
}
