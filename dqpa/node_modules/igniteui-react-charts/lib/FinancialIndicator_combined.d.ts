import { FinancialSeries } from "./FinancialSeries";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { IndicatorDisplayType } from "./IndicatorDisplayType";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { SeriesView } from "./SeriesView";
import { CategoryFrame } from "./CategoryFrame";
import { Axis } from "./Axis";
import { Point, IList$1, Type } from "igniteui-react-core";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { Rect } from "igniteui-react-core";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { ITrendLineManager } from "./ITrendLineManager";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { Clipper } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class FinancialIndicator extends FinancialSeries implements ITrendLineSeries {
    static $t: Type;
    protected get_e7(): boolean;
    protected cs(): SeriesView;
    q1(a: SeriesView): void;
    aa1: FinancialIndicatorView;
    constructor();
    abe(a: boolean): void;
    protected aa6(a: Point, b: Point, c: boolean): boolean;
    protected b2(): SeriesHitTestMode;
    wn(a: Point): Rect;
    gw(a: Point, b: boolean): boolean;
    protected pb(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    aa3: IndicatorDisplayType;
    protected get_aa2(): IndicatorDisplayType;
    get aa2(): IndicatorDisplayType;
    aa9: number;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get abr(): Brush;
    set abr(a: Brush);
    static readonly abh: DependencyProperty;
    trendLineThickness: number;
    abt: PenLineCap;
    abs: DoubleCollection;
    trendLinePeriod: number;
    protected abb(): number;
    aba: number;
    private _indicatorColumn;
    get indicatorColumn(): List$1<number>;
    set indicatorColumn(a: List$1<number>);
    protected aa0: AxisRange;
    protected abstract aa4(a: number, b: number): boolean;
    protected abstract aa7(a: number, b: number): IList$1<string>;
    protected q9(a: any, b: string, c: any, d: any): void;
    i5(a: Point, b: boolean, c: boolean): number;
    ka(a: Point, b: boolean): number;
    j8(a: Point, b: boolean): number;
    protected get_hd(): boolean;
    private aa5;
    private abg;
    ay(a: Axis): AxisRange;
    gd(a: any): boolean;
    he(a: Rect, b: Rect, c: SeriesView): boolean;
    aac(a: CategoryFrame, b: FinancialSeriesView): void;
    o5(a: boolean, b: SeriesView): void;
    protected xg(): CategoryTransitionInMode;
    aae(a: CategoryFrame, b: FinancialSeriesView): void;
    protected sh(): void;
    protected abf(): void;
    protected pz(a: any): void;
    protected be(a: LegendItemBadgeShape): LegendItemBadgeShape;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialIndicatorBucketCalculator extends FinancialBucketCalculator {
    static $t: Type;
    constructor(a: FinancialSeriesView);
    protected f: FinancialIndicatorView;
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class FinancialIndicatorView extends FinancialSeriesView {
    static $t: Type;
    b6: FinancialIndicator;
    constructor(a: FinancialIndicator);
    protected b1(): FinancialBucketCalculator;
    au(): void;
    private readonly b9;
    private cj;
    private cc;
    cx: Path;
    ct: Path;
    cy: Path;
    cu: Path;
    cz: Path;
    cv: Path;
    cw: Path;
    cs: Path;
    private b7;
    get b8(): ITrendLineManager;
    set b8(a: ITrendLineManager);
    get ca(): boolean;
    cb(a: boolean): void;
    ch(): void;
    cf(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: Clipper): void;
    cd(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: number, f: Clipper): void;
    ce(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: number): void;
    ci(): void;
    private cp;
    private cr;
    private cq;
    private co;
    private cl;
    private cn;
    private cm;
    private ck;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    protected a7(a: RenderingContext, b: boolean): void;
    an(a: any): void;
    cg(): void;
}
