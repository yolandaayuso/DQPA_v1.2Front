/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { String_$type, markType, getEnumerator } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CommodityChannelIndexIndicatorStrategy = /*@__PURE__*/ (() => {
    class CommodityChannelIndexIndicatorStrategy extends IndicatorCalculationStrategy {
        b(a, b) {
            let c = new List$1(String_$type, 0);
            c.o(a.typicalColumn.basedOn);
            c.o(b.c.c);
            return c;
        }
        a(a, b) {
            let c = a.period;
            let d = a.typicalColumn;
            let e = a.indicatorColumn;
            let f = getEnumerator(b.c.b(d, c));
            let g = getEnumerator(d);
            let h = new Array(c);
            for (let i = 0; i < c; i++) {
                h[i] = 0;
            }
            let j = 0;
            while (g.moveNext() && f.moveNext()) {
                h[j % c] = g.current;
                let k = 0;
                for (let l = 0; l < c; ++l) {
                    k += Math.abs(f.current - h[l]);
                }
                k /= c;
                e.item(j, b.i((g.current - f.current) / (0.015 * k)));
                ++j;
            }
            return true;
        }
    }
    CommodityChannelIndexIndicatorStrategy.$t = /*@__PURE__*/ markType(CommodityChannelIndexIndicatorStrategy, 'CommodityChannelIndexIndicatorStrategy', IndicatorCalculationStrategy.$);
    return CommodityChannelIndexIndicatorStrategy;
})();
