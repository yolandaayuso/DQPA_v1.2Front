/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { IHasSingleValueCategory_$type } from "./IHasSingleValueCategory";
import { IHasCategoryTrendline_$type } from "./IHasCategoryTrendline";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { IAnchoredCategorySeriesInteractionManager_$type } from "./IAnchoredCategorySeriesInteractionManager";
import { DVContainer } from "igniteui-react-core";
import { Point_$type, enumGetBox, typeCast, runOn, delegateCombine, markType, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { IScaler_$type } from "./IScaler";
import { CategorySeriesView } from "./CategorySeriesView";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior_$type } from "./ConsolidatedItemHitTestBehavior";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ISortingAxis_$type } from "./ISortingAxis";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { AxisRange } from "./AxisRange";
import { NumericYAxis } from "./NumericYAxis";
import { ScalerParams } from "./ScalerParams";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { CollisionAvoider } from "./CollisionAvoider";
import { NonCollisionAvoider } from "./NonCollisionAvoider";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { ChartSelection } from "./ChartSelection";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
/**
 * @hidden
 */
export let AnchoredCategorySeries = /*@__PURE__*/ (() => {
    class AnchoredCategorySeries extends CategorySeries {
        get aa0() {
            if (this.aaz == null) {
                this.aaz = DVContainer.instance.createInstance(IAnchoredCategorySeriesInteractionManager_$type, () => this.dr.n);
            }
            return this.aaz;
        }
        getHostReferenceValue() {
            return this.iy();
        }
        me() {
            return AnchoredCategorySeries.$$p[5];
        }
        cs() {
            let a = new AnchoredCategorySeriesView(this);
            return a;
        }
        q1(a) {
            super.q1(a);
            this.aav = a;
        }
        constructor() {
            super();
            this.aaz = null;
            this.aa6 = false;
            this.aa1 = null;
            this.aaw = null;
            this.abd = null;
            this.abc = null;
            this.aa3 = true;
            this.aa7 = 0;
            this.aa8 = 0;
            this.yz = new CategoryFramePreparer(1, this, this.y3, this, this, this.y3.cw);
        }
        kq(a, b) {
            let c = this.nd(b);
            if (c == AnchoredCategorySeries.$$p[5]) {
                return this.kr(a, b, this.abn);
            }
            if (c == AnchoredCategorySeries.$$p[1]) {
                return this.kr(a, b, this.abf);
            }
            return super.kq(a, b);
        }
        md(a) {
            let b = this.nd(a);
            if (b == AnchoredCategorySeries.$$p[5]) {
                return this.abn;
            }
            if (b == AnchoredCategorySeries.$$p[1]) {
                return this.abf;
            }
            return super.md(a);
        }
        get valueColumn() {
            return this.aa1;
        }
        set valueColumn(a) {
            if (this.aa1 != a) {
                let b = this.aa1;
                this.aa1 = a;
                if (!this.aa6) {
                    this.raisePropertyChanged("ValueColumn", b, this.aa1);
                }
            }
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = new DataLegendSeriesValueInfo();
            c.a = 0;
            c.l = this.i5({ $type: Point_$type, x: a, y: b }, false, false);
            c.r = this.abn != null ? this.abn : "Value";
            c.q = "Value";
            c.s = this.abj != null ? this.abj : "V:";
            c.t = this.abl != null ? this.abl : "";
            let d = new DataLegendSeriesContext();
            d.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(c);
                return $ret;
            })());
            d.h = this.mc();
            return d;
        }
        get aca() {
            return this.c(AnchoredCategorySeries.abw);
        }
        set aca(a) {
            this.h(AnchoredCategorySeries.abw, a);
        }
        gd(a) {
            let b = new Rect(0, 0, 0, 1, 1);
            let c = this.fetchXAxis();
            let d = this.fetchYAxis();
            let e = this.wl(this.cv);
            let f = c != null ? this.yz.r(typeCast(ICategoryScaler_$type, c), b, b, e) : 0;
            return this.aa0.c$a(this, this.valueColumn, c, d, f, a);
        }
        aas(a, b, c) {
            if (b < a || a < 0 || a > this.valueColumn.count || b < 0 || b > this.valueColumn.count || c == null) {
                return null;
            }
            let d = new Array((b - a) + 1);
            let e = c.cn;
            let f = null;
            if (e) {
                f = c.i$b;
            }
            for (let g = a; g <= b; g++) {
                let h = g;
                if (e) {
                    h = f._inner[h];
                }
                d[g - a] = this.dn.item(g);
            }
            return d;
        }
        q9(a, b, c, d) {
            super.q9(a, b, c, d);
            if (this.aav.c8 && this.aav.c7.g$b(a, b, c, d)) {
                let e = false;
                if (b == "FastItemsSource") {
                    e = this.gg && c != null;
                }
                this.rr(e);
                this.ql();
            }
            switch (b) {
                case AnchoredCategorySeries.$$p[3]:
                case AnchoredCategorySeries.$$p[4]:
                    this.qf();
                    break;
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.valueColumn);
                        this.valueColumn = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.valueColumn = this.dk(this.abn);
                    }
                    let f = typeCast(NumericAxisBase.$, this.fetchYAxis());
                    if (f != null && !f.c1()) {
                        this.aav.cw.g(this.id);
                        this.rr(this.gg && c != null);
                    }
                    break;
                case AnchoredCategorySeries.$$p[5]:
                    if (this.dn != null) {
                        this.dn.deregisterColumn(this.valueColumn);
                        this.valueColumn = this.dk(this.abn);
                    }
                    this.abd = this.abn;
                    break;
                case AnchoredCategorySeries.$$p[1]:
                    this.abc = this.abf;
                    this.rr(true);
                    break;
                case "ValueColumn":
                    if (this.aav.c8) {
                        this.aav.c7.g$i();
                    }
                    let g = typeCast(NumericAxisBase.$, this.fetchYAxis());
                    if (g != null && !g.c1()) {
                        this.aav.cw.g(this.id);
                        this.rr(this.gg && this.d7);
                    }
                    this.abv();
                    this.sn();
                    break;
                case "TrendLineBrush":
                    this.rf(b);
                    break;
                case "ErrorBarSettings":
                    this.rr(false);
                    break;
                case "TrendLineType":
                    this.ql();
                    break;
                case AnchoredCategorySeries.$$p[2]:
                    this.rr(false);
                    break;
            }
        }
        ay(a) {
            if (this.valueColumn == null || this.valueColumn.count == 0) {
                return null;
            }
            if (a == this.fetchXAxis()) {
                return new AxisRange(0, this.valueColumn.count - 1);
            }
            if (a == this.fetchYAxis()) {
                return new AxisRange(this.valueColumn.minimum, this.valueColumn.maximum);
            }
            return null;
        }
        pb(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.aav.cw.g(this.id);
                    break;
            }
            if (this.aav.c8) {
                this.aav.c7.g$e(a, b, c, d);
            }
            this.abv();
            this.sn();
            if (a == 0 || a == 2 || a == 3 || a == 4) {
                this.aa3 = true;
            }
            else if (a == 1) {
                for (let e = b; e < b + c; e++) {
                    this.aa7 += this.valueColumn.item(e);
                }
                this.aa8 = this.aa7 / this.valueColumn.count;
            }
        }
        zu() {
            return this.aa9(this.y3);
        }
        aa9(a) {
            let b = 0;
            let c = a.by;
            let d = a.bx;
            let e = this.getEffectiveViewport1(a);
            let f = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!c.isEmpty && !d.isEmpty && f != null) {
                let g = new ScalerParams(0, c, d, f.ch, e);
                if (f.cp) {
                    g.b = this.iy();
                }
                b = f.el(f.me, g);
            }
            return b;
        }
        abt(a, b, c) {
            let d = this.aa9(c);
            if (a.count > 0) {
                let e = d;
                a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
            }
        }
        aat(a, b, c, d) {
            return this.aau(a, b, c, d, false);
        }
        aau(a, b, c, d, e) {
            return CategorySeries.yn(a, b, c, d, e);
        }
        gb() {
            return this.highlightedItemsSource != null || this.abf != null;
        }
        ht() {
            let a = super.ht();
            {
                let b = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.ad = "ValueMemberPath";
                    $ret.p = true;
                    $ret.y = "HighlightedValueMemberPath";
                    $ret.q = true;
                    return $ret;
                })());
                b.valueResolving = delegateCombine(b.valueResolving, runOn(this, this.abp));
                a.add(b);
            }
            return a;
        }
        abp(a, b) {
            if (this.abf != null) {
                b.value = this.abf;
                return;
            }
            b.value = this.abn;
        }
        he(a, b, c) {
            let d = super.he(a, b, c);
            let e = c;
            if (this.valueColumn == null || this.valueColumn.count == 0 || e.cw.d < 1) {
                d = false;
            }
            return d;
        }
        o5(a, b) {
            super.o5(a, b);
            let c = b;
            c.c2();
            if (c.c8) {
                c.c7.g$d();
            }
        }
        aah(a, b) {
            super.aah(a, b);
            this.y0(b).d(a, b);
        }
        aak(a, b) {
            super.aak(a, b);
            let c = typeCast(AnchoredCategorySeriesView.$, b);
            c.b7 = true;
            if (c.c8) {
                c.c7.g$g(a.q);
            }
            if (this.xg()) {
                CategoryMarkerManager.e(this, a.n, b.cz, this.xi);
                this.z9(b, a);
                b.cr();
            }
            this.abq(a, b);
        }
        rq(a, b, c, d, e) {
            super.rq(a, b, c, d, e);
            let f = this.ba.a$j.item(d);
            let g = f;
            g.cw.g(this.id);
            f.a3(c);
            if (this.d5(g)) {
                return;
            }
            if (this.aaw == null) {
                this.aaw = new CategoryFrame(3);
            }
            this.aaw.v();
            this.aah(this.aaw, g);
            this.aak(this.aaw, g);
        }
        abq(a, b) {
        }
        sh() {
            super.sh();
            if (this.index < 0) {
                return;
            }
            this.aav.dc();
            if (this.trendLineBrush != null) {
                this.aav.da();
            }
            else {
                this.aav.c9();
            }
        }
        kx(a, b) {
            if (this.aav.c8 && a == this.aav.c7.g$j) {
                return null;
            }
            return super.kx(a, b);
        }
        get currentCategoryMode() {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.ys()));
        }
        get scaler() {
            return typeCast(ICategoryScaler_$type, this.ys());
        }
        get yScaler() {
            return typeCast(IScaler_$type, this.y9());
        }
        get bucketizer() {
            return this.aav.cw;
        }
        get currentMode2Index() {
            return this.zy();
        }
        provideCollisionDetector() {
            if (this.aax == 1) {
                return new CollisionAvoider();
            }
            return NonCollisionAvoider.b;
        }
        get trendlinePreparer() {
            return this.aav.c8 ? this.aav.c7 : null;
        }
        pz(a) {
            super.pz(a);
            if (this.aav.c8) {
                this.bc.exportTrendlineData(this, a, this.aav.c7.g$j);
            }
        }
        kn(a) {
            let b = this.fetchXAxis();
            let c = this.fetchYAxis();
            return this.aa0.c$b(this, a, this.zv(this.cv), this.valueColumn, b, c, this.aay == 1, (d) => super.kn(d));
        }
        get mayContainUnknowns() {
            return this.valueColumn == null || this.valueColumn.mayContainUnknowns;
        }
        iy() {
            return Series.iz(this.valueColumn, typeCast(ISortingAxis_$type, this.fetchXAxis()));
        }
        get_abb() {
            return 0;
        }
        get abb() {
            return this.get_abb();
        }
        az(a) {
            if (a.isEmpty && this.db != null) {
                a = this.db.v4;
            }
            if (this.valueColumn == null) {
                return null;
            }
            let b = this.wj(this.cv);
            let c = this.ys();
            let d = new ScalerParams(0, a, this.db.wk, c.ch, this.getEffectiveViewport());
            let e = (c.eo(b.left, d));
            let f = (c.eo(b.right, d));
            if (c.ch) {
                let g = e;
                e = f;
                f = g;
            }
            e -= this.abb;
            f += this.abb;
            let h = null;
            if (c.cn) {
                h = c;
                e = h.i$f(e);
                f = h.i$f(f);
            }
            else {
                e = Math.floor(e);
                f = Math.ceil(f);
            }
            if (isNaN_(e) || isNaN_(f)) {
                return null;
            }
            e = Math.max(0, Math.min(this.valueColumn.count - 1, e));
            f = Math.max(0, Math.min(this.valueColumn.count - 1, f));
            let i = 1.7976931348623157E+308;
            let j = -1.7976931348623157E+308;
            if (truncate(e) <= truncate(f)) {
                for (let k = truncate(e); k <= truncate(f); k++) {
                    let l = k;
                    if (h != null) {
                        l = h.i$b._inner[k];
                    }
                    let m = this.valueColumn.item(l);
                    if (this.valueColumn.mayContainUnknowns) {
                        if (isInfinity(m) || isNaN_(m)) {
                            continue;
                        }
                    }
                    i = Math.min(i, m);
                    j = Math.max(j, m);
                }
            }
            let n = new AxisRange(i, j);
            n = this.ax(n, this.y9(), a);
            return n;
        }
        abv() {
            this.im = this.valueColumn == null || this.valueColumn.count == 0 ? NaN : this.valueColumn.item(this.valueColumn.count - 1);
        }
        abu() {
            if (this.aa3) {
                this.aa7 = 0;
                for (let a = 0; a < this.valueColumn.count; a++) {
                    this.aa7 += this.valueColumn.item(a);
                }
                this.aa8 = this.aa7 / this.valueColumn.count;
                this.aa3 = false;
            }
        }
        i8(a, b) {
            if (b == null || !b.cj) {
                return NaN;
            }
            let c = this.y9();
            if (b != c) {
                return NaN;
            }
            let d = this.aq(a);
            if (c.cp) {
                return d[1];
            }
            else {
                return d[0];
            }
        }
        aq(a) {
            let b = NaN;
            switch (a) {
                case 5:
                case 2:
                    b = this.valueColumn.maximum;
                    break;
                case 4:
                case 1:
                    b = this.valueColumn.minimum;
                    break;
                case 6:
                case 3:
                    if (this.aa3) {
                        this.abu();
                    }
                    b = this.aa8;
                    break;
            }
            let c = this.y9();
            if (c.cp) {
                return [NaN, b];
            }
            else {
                return [b, NaN];
            }
        }
        wf(a) {
            let b = NaN;
            switch (a) {
                case 5:
                case 2:
                    b = this.valueColumn.maximum;
                    break;
                case 4:
                case 1:
                    b = this.valueColumn.minimum;
                    break;
                case 6:
                case 3:
                    if (this.aa3) {
                        this.abu();
                    }
                    b = this.aa8;
                    break;
            }
            if (isNaN_(b)) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let c = this.y9();
            let d = this.getEffectiveViewport1(this.cv);
            let e = new ScalerParams(0, this.cv.by, this.cv.bx, c.ch, d);
            if (c.cp) {
                e.b = this.iy();
            }
            e.c = d;
            if (c.cp) {
                return { $type: Point_$type, x: NaN, y: c.el(b, e) };
            }
            else {
                return { $type: Point_$type, x: c.el(b, e), y: NaN };
            }
        }
        wg(a) {
            let b = this.y9();
            let c = this.getEffectiveViewport1(this.cv);
            let d = new ScalerParams(0, this.cv.by, this.cv.bx, b.ch, c);
            if (b.cp) {
                d.b = this.iy();
            }
            d.c = c;
            if (b.cp) {
                return { $type: Point_$type, x: NaN, y: b.el(a[1], d) };
            }
            else {
                return { $type: Point_$type, x: b.el(a[0], d), y: NaN };
            }
        }
        aad(a, b, c, d, e, f, g) {
            if (c < 0 || d < 0) {
                return;
            }
            for (let h = c; h <= d; h++) {
                if (a == 1) {
                    if (this.aa4(e, f, h)) {
                        if (g == 7 || g == 6) {
                            b.add(((() => {
                                let $ret = new ChartSelection();
                                $ret.series = this;
                                return $ret;
                            })()));
                            return;
                        }
                        this.z7(b, h, g);
                    }
                }
                else {
                    if (this.aa5(e, f, h)) {
                        if (g == 7 || g == 6) {
                            b.add(((() => {
                                let $ret = new ChartSelection();
                                $ret.series = this;
                                return $ret;
                            })()));
                            return;
                        }
                        this.z7(b, h, g);
                    }
                }
            }
        }
        aa5(a, b, c) {
            return this.valueColumn.item(c) < b && a < this.valueColumn.item(c);
        }
        aa4(a, b, c) {
            return 0 < b && a < this.valueColumn.item(c);
        }
        z7(a, b, c) {
            if (c == 2 || c == 1) {
                a.add(((() => {
                    let $ret = new ChartSelection();
                    $ret.item = this.dn.item(b);
                    return $ret;
                })()));
            }
            else {
                a.add(((() => {
                    let $ret = new ChartSelection();
                    $ret.item = this.dn.item(b);
                    $ret.series = this;
                    return $ret;
                })()));
            }
        }
        get useHighMarkerFidelity() {
            return this.zq;
        }
    }
    AnchoredCategorySeries.$t = /*@__PURE__*/ markType(AnchoredCategorySeries, 'AnchoredCategorySeries', CategorySeries.$, [IIsCategoryBased_$type, IHasSingleValueCategory_$type, IHasCategoryTrendline_$type, ITrendLineSeries_$type]);
    AnchoredCategorySeries.abw = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, AnchoredCategorySeries.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    AnchoredCategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, AnchoredCategorySeries, 'raisePropertyChanged', ['ConsolidatedItemHitTestBehavior:aay:abx', [ConsolidatedItemHitTestBehavior_$type, /*@__PURE__*/ enumGetBox(ConsolidatedItemHitTestBehavior_$type, 0)], 'HighlightedValueMemberPath:abf:aby', [2, null], 'MarkerCollisionAvoidance:aax:abz', [CategorySeriesMarkerCollisionAvoidance_$type, /*@__PURE__*/ enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, 1)], 'ValueMemberAsLegendLabel:abj:ab7', [2, null], 'ValueMemberAsLegendUnit:abl:ab8', [2, null], 'ValueMemberPath:abn:ab9', [2, null], 'TrendLineType::ab5', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::ab4', [1, 1.5], 'TrendLinePeriod::ab3', [1, 7], 'TrendLineBrush::ab0', [Brush.$, null], 'TrendLineZIndex:aba:ab6', [1, 1001], 'TrendLineDashArray:acb:ab1', [DoubleCollection.$], 'TrendLineDashCap:acc:ab2', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return AnchoredCategorySeries;
})();
/**
 * @hidden
 */
export let AnchoredCategoryBucketCalculator = /*@__PURE__*/ (() => {
    class AnchoredCategoryBucketCalculator extends CategoryBucketCalculator {
        constructor(a) {
            super(a);
            this.i = null;
            this.h = null;
            this.j = 0;
            this.i = a;
        }
        getBucketWithoutUnknowns(a) {
            let b = this.h;
            let c = this.j;
            let d = a * this.d;
            let e = d + this.d - 1;
            let f = c - 1;
            d = d < f ? d : f;
            e = e < f ? e : f;
            let g = 1.7976931348623157E+308;
            let h = -1.7976931348623157E+308;
            let i = true;
            for (let j = d; j <= e; ++j) {
                let k = b[j];
                g = g < k ? g : k;
                h = h > k ? h : k;
                i = false;
            }
            if (!i) {
                return [0.5 * (d + e), g, h];
            }
            return [0.5 * (d + e), NaN, NaN];
        }
        getBucket(a) {
            let b = this.h;
            let c = this.j;
            let d = a * this.d;
            let e = d + this.d - 1;
            let f = c - 1;
            d = d < f ? d : f;
            e = e < f ? e : f;
            let g = 0;
            let h = 0;
            let i = true;
            for (let j = d; j <= e; ++j) {
                let k = b[j];
                if (!i) {
                    if (!isNaN_(k)) {
                        g = g < k ? g : k;
                        h = h > k ? h : k;
                    }
                }
                else {
                    if (!isNaN_(k)) {
                        g = k;
                        h = k;
                        i = false;
                    }
                }
            }
            if (!i) {
                return [0.5 * (d + e), g, h];
            }
            return [0.5 * (d + e), NaN, NaN];
        }
        cacheValues() {
            this.j = this.i.c5.valueColumn.count;
            this.h = this.i.c5.valueColumn.asArray();
        }
        unCacheValues() {
            this.h = null;
        }
    }
    AnchoredCategoryBucketCalculator.$t = /*@__PURE__*/ markType(AnchoredCategoryBucketCalculator, 'AnchoredCategoryBucketCalculator', CategoryBucketCalculator.$);
    return AnchoredCategoryBucketCalculator;
})();
/**
 * @hidden
 */
export let AnchoredCategorySeriesView = /*@__PURE__*/ (() => {
    class AnchoredCategorySeriesView extends CategorySeriesView {
        constructor(a) {
            super(a);
            this.c5 = null;
            this.c6 = null;
            this.c5 = a;
        }
        get c7() {
            if (this.c6 == null) {
                this.c6 = CategoryTrendLineManagerFactory.a(this.c6, this.e.a0(), this.e.sv, this.e, this.e.dr);
            }
            return this.c6;
        }
        set c7(a) {
            this.c6 = a;
        }
        get c8() {
            return this.c6 != null;
        }
        dc() {
            this.c5.aca = null;
        }
        da() {
            this.c5.aca = this.c5.trendLineBrush;
        }
        c9() {
            this.c5.aca = this.c5.u9;
        }
        cx() {
            return new AnchoredCategoryBucketCalculator(this);
        }
        db() {
            this.cw.cacheValues();
        }
        dd() {
            this.cw.unCacheValues();
        }
        de(a) {
            let b = this.cz.item(a);
            return this.cu(b);
        }
        a7(a, b) {
            if (a.d) {
                if (this.c5.trendLineType != 0 && !b) {
                    let c = this.c7.g$j;
                    c.ad = this.c5.trendLineThickness;
                    c._stroke = this.c5.aca;
                    c.ai = this.c5.acb;
                    c.aj = this.c5.acc;
                    a.v(c);
                }
            }
            super.a7(a, b);
        }
        getDefaultTooltipTemplate() {
            return this.c5.aa0.c$c(this.e, this.c5.abn);
        }
    }
    AnchoredCategorySeriesView.$t = /*@__PURE__*/ markType(AnchoredCategorySeriesView, 'AnchoredCategorySeriesView', CategorySeriesView.$);
    return AnchoredCategorySeriesView;
})();
