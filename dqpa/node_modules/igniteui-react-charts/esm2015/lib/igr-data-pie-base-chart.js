import { PieChartSweepDirection_$type } from "./PieChartSweepDirection";
import { CalloutCollisionMode_$type } from "igniteui-react-core";
import { LegendEmptyValuesMode_$type } from "igniteui-react-core";
import { OthersCategoryType_$type } from "igniteui-react-core";
import { AxisRangeBufferMode_$type } from "./AxisRangeBufferMode";
import { RadialLabelMode_$type } from "igniteui-react-core";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { IgrRadialBaseChart } from "./igr-radial-base-chart";
import { ensureEnum, brushToString, stringToBrush, ensureBool, arrayFindByName } from "igniteui-react-core";
/**
 * Represents a base class for PieBase chart control that can plot scatter data
*/
export class IgrDataPieBaseChart extends IgrRadialBaseChart {
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the label format for the slices.
    */
    get sliceLabelFormat() {
        return this.i.ajs;
    }
    set sliceLabelFormat(v) {
        this.i.ajs = v;
    }
    /**
     * Gets or sets the format specifiers to use with the labels for the slices.
    */
    get sliceLabelFormatSpecifiers() {
        return this.i.ag6;
    }
    set sliceLabelFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.ag6 = v;
    }
    /**
     * Gets or sets the label format for the LegendSlices.
    */
    get legendSliceLabelFormat() {
        return this.i.ajc;
    }
    set legendSliceLabelFormat(v) {
        this.i.ajc = v;
    }
    /**
     * Gets or sets the format specifiers to use with the labels for the LegendSlices.
    */
    get legendSliceLabelFormatSpecifiers() {
        return this.i.ag4;
    }
    set legendSliceLabelFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.ag4 = v;
    }
    /**
     * Gets or sets the label format for the OthersSlices.
    */
    get othersSliceLabelFormat() {
        return this.i.ajl;
    }
    set othersSliceLabelFormat(v) {
        this.i.ajl = v;
    }
    /**
     * Gets or sets the format specifiers to use with the labels for the OthersSlices.
    */
    get othersSliceLabelFormatSpecifiers() {
        return this.i.ag5;
    }
    set othersSliceLabelFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.ag5 = v;
    }
    /**
     * Gets or sets the label format for the LegendOthersSlices.
    */
    get legendOthersSliceLabelFormat() {
        return this.i.ai8;
    }
    set legendOthersSliceLabelFormat(v) {
        this.i.ai8 = v;
    }
    /**
     * Gets or sets the format specifiers to use with the labels for the LegendOthersSlices.
    */
    get legendOthersSliceLabelFormatSpecifiers() {
        return this.i.ag3;
    }
    set legendOthersSliceLabelFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.ag3 = v;
    }
    /**
     * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
     * a value between 0.0 and 1.0.
    */
    get innerExtent() {
        return this.i.aid;
    }
    set innerExtent(v) {
        this.i.aid = +v;
    }
    /**
     * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
     * a value between 0.0 and 1.0.
    */
    get sweepDirection() {
        return this.i.ahk;
    }
    set sweepDirection(v) {
        this.i.ahk = ensureEnum(PieChartSweepDirection_$type, v);
    }
    /**
     * Defines the positioning mode of the slice labels for the pie chart.
    */
    get sliceLabelPositionMode() {
        return this.i.aha;
    }
    set sliceLabelPositionMode(v) {
        this.i.aha = ensureEnum(CalloutCollisionMode_$type, v);
    }
    /**
     * Gets or sets the light color to use for slice labels.
    */
    get lightSliceLabelColor() {
        return brushToString(this.i.akk);
    }
    set lightSliceLabelColor(v) {
        this.i.akk = stringToBrush(v);
    }
    /**
     * Gets or sets the Dark color to use for slice labels.
    */
    get darkSliceLabelColor() {
        return brushToString(this.i.akj);
    }
    set darkSliceLabelColor(v) {
        this.i.akj = stringToBrush(v);
    }
    /**
     * Gets or sets the overridden value member path to use.
    */
    get valueMemberPath() {
        return this.i.aj8;
    }
    set valueMemberPath(v) {
        this.i.aj8 = v;
    }
    /**
     * Gets or sets the legend label member path to use.
    */
    get legendLabelMemberPath() {
        return this.i.ai6;
    }
    set legendLabelMemberPath(v) {
        this.i.ai6 = v;
    }
    get legendEmptyValuesMode() {
        return this.i.ahe;
    }
    set legendEmptyValuesMode(v) {
        this.i.ahe = ensureEnum(LegendEmptyValuesMode_$type, v);
    }
    /**
     * Gets or sets whether to use numeric or percent-based threshold value.
    */
    get othersCategoryType() {
        return this.i.ahi;
    }
    set othersCategoryType(v) {
        this.i.ahi = ensureEnum(OthersCategoryType_$type, v);
    }
    /**
     * Gets or sets the threshold value that determines if slices are grouped into the Others slice.
    */
    get othersCategoryThreshold() {
        return this.i.aie;
    }
    set othersCategoryThreshold(v) {
        this.i.aie = +v;
    }
    /**
     * Gets or sets the label of the Others slice.
    */
    get othersCategoryText() {
        return this.i.ajh;
    }
    set othersCategoryText(v) {
        this.i.ajh = v;
    }
    /**
     * Gets or sets the overridden value member path to use.
    */
    get labelMemberPath() {
        return this.i.ai3;
    }
    set labelMemberPath(v) {
        this.i.ai3 = v;
    }
    /**
     * Gets or sets whether the axis should favor emitting a label at the end of the scale.
    */
    get valueAxisFavorLabellingScaleEnd() {
        return this.i.ahz;
    }
    set valueAxisFavorLabellingScaleEnd(v) {
        this.i.ahz = ensureBool(v);
    }
    /**
     * Gets or sets how the numeric axis will adjust its range buffer to less closely fix the data from the series.
    */
    get valueAxisAutoRangeBufferMode() {
        return this.i.ag8;
    }
    set valueAxisAutoRangeBufferMode(v) {
        this.i.ag8 = ensureEnum(AxisRangeBufferMode_$type, v);
    }
    /**
     * Gets or sets the frequency of displayed labels along the X-axis.
     * Gets or sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    */
    get angleAxisInterval() {
        return this.i.aib;
    }
    set angleAxisInterval(v) {
        this.i.aib = +v;
    }
    /**
     * Gets or sets the frequency of displayed minor lines along the X-axis.
     * Gets or sets the set value is a factor that determines how the minor lines will be displayed.
    */
    get angleAxisMinorInterval() {
        return this.i.aic;
    }
    set angleAxisMinorInterval(v) {
        this.i.aic = +v;
    }
    /**
     * Gets or sets the distance between each label and grid line along the Y-axis.
    */
    get valueAxisInterval() {
        return this.i.aij;
    }
    set valueAxisInterval(v) {
        this.i.aij = +v;
    }
    /**
     * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.
     * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
    */
    get valueAxisIsLogarithmic() {
        return this.i.ah0;
    }
    set valueAxisIsLogarithmic(v) {
        this.i.ah0 = ensureBool(v);
    }
    /**
     * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.
     * This property is effective only when ValueAxisIsLogarithmic is true.
    */
    get valueAxisLogarithmBase() {
        return this.i.aio;
    }
    set valueAxisLogarithmBase(v) {
        this.i.aio = +v;
    }
    /**
     * Gets or sets the data value corresponding to the minimum value of the Y-axis.
    */
    get valueAxisMinimumValue() {
        return this.i.ail;
    }
    set valueAxisMinimumValue(v) {
        this.i.ail = +v;
    }
    /**
     * Gets or sets the data value corresponding to the maximum value of the Y-axis.
    */
    get valueAxisMaximumValue() {
        return this.i.aik;
    }
    set valueAxisMaximumValue(v) {
        this.i.aik = +v;
    }
    /**
     * Gets or sets the frequency of displayed minor lines along the Y-axis.
    */
    get valueAxisMinorInterval() {
        return this.i.aim;
    }
    set valueAxisMinorInterval(v) {
        this.i.aim = +v;
    }
    /**
     * Gets the current minimum value for the Y-axis.
    */
    get valueAxisActualMinimum() {
        return this.i.aii;
    }
    /**
     * Gets the current maximum value for the Y-axis.
    */
    get valueAxisActualMaximum() {
        return this.i.aih;
    }
    /**
     * Gets or sets the extent of the chart's radius. Value between 0 and 1.
    */
    get radiusExtent() {
        return this.i.aif;
    }
    set radiusExtent(v) {
        this.i.aif = +v;
    }
    /**
     * Gets or sets the start angle to use for the pie chart measured in degrees from the positive x axis.
    */
    get startAngle() {
        return this.i.aig;
    }
    set startAngle(v) {
        this.i.aig = +v;
    }
    /**
     * Gets or sets the label of the Others slice.
    */
    get sliceLabelContentSeparator() {
        return this.i.ajq;
    }
    set sliceLabelContentSeparator(v) {
        this.i.ajq = v;
    }
    /**
     * Gets or sets the label of the Others slice.
    */
    get sliceLabelContentMode() {
        return this.i.ahq;
    }
    set sliceLabelContentMode(v) {
        this.i.ahq = ensureEnum(RadialLabelMode_$type, v);
    }
    /**
     * Gets or sets the label of the Others slice.
    */
    get legendSliceLabelContentMode() {
        return this.i.ahp;
    }
    set legendSliceLabelContentMode(v) {
        this.i.ahp = ensureEnum(RadialLabelMode_$type, v);
    }
    /**
     * Gets or sets whether to favor labelling the end of the scale.
    */
    get angleAxisFavorLabellingScaleEnd() {
        return this.i.ahw;
    }
    set angleAxisFavorLabellingScaleEnd(v) {
        this.i.ahw = ensureBool(v);
    }
    /**
     * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.
    */
    get valueAxisAbbreviateLargeNumbers() {
        return this.i.ahy;
    }
    set valueAxisAbbreviateLargeNumbers(v) {
        this.i.ahy = ensureBool(v);
    }
    /**
     * Gets or sets collision avoidance between markers on series that support this behaviour.
    */
    get markerCollision() {
        return this.i.ahc;
    }
    set markerCollision(v) {
        this.i.ahc = ensureEnum(CollisionAvoidanceType_$type, v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.sliceLabelFormatSpecifiers != null && arrayFindByName(this.sliceLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.sliceLabelFormatSpecifiers, name);
        }
        if (this.legendSliceLabelFormatSpecifiers != null && arrayFindByName(this.legendSliceLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.legendSliceLabelFormatSpecifiers, name);
        }
        if (this.othersSliceLabelFormatSpecifiers != null && arrayFindByName(this.othersSliceLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.othersSliceLabelFormatSpecifiers, name);
        }
        if (this.legendOthersSliceLabelFormatSpecifiers != null && arrayFindByName(this.legendOthersSliceLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.legendOthersSliceLabelFormatSpecifiers, name);
        }
        return null;
    }
}
