import { AxisAnnotation as AxisAnnotation_internal } from "./AxisAnnotation";
import { brushToString, stringToBrush, arrayFindByName } from "igniteui-react-core";
/**
 * Represents an axis annotation
*/
export class IgrAxisAnnotation {
    createImplementation() {
        return new AxisAnnotation_internal();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    /**
     * Gets or sets the value at which this annotation is displayed on the axis.
    */
    get value() {
        return this.i.value;
    }
    set value(v) {
        this.i.value = v;
    }
    /**
     * Gets or sets the text that should be displayed for the annotation. Leave null to display the value automatically.
    */
    get text() {
        return this.i.text;
    }
    set text(v) {
        this.i.text = v;
    }
    /**
     * Gets or sets the corner radius to use for the axis annotation borders.
    */
    get backgroundCornerRadius() {
        return this.i.backgroundCornerRadius;
    }
    set backgroundCornerRadius(v) {
        this.i.backgroundCornerRadius = +v;
    }
    /**
     * Gets or sets the label format string to use for the label.
    */
    get labelFormat() {
        return this.i.labelFormat;
    }
    set labelFormat(v) {
        this.i.labelFormat = v;
    }
    /**
     * Gets or sets the format specifiers to use with the LabelFormat string.
    */
    get labelFormatSpecifiers() {
        return this.i.labelFormatSpecifiers;
    }
    set labelFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.labelFormatSpecifiers = v;
    }
    /**
     * Sets or gets a function which takes an object that produces a formatted label for the value of this annotation.
    */
    get formatLabel() {
        return this.i.formatLabel;
    }
    set formatLabel(v) {
        this.i.formatLabel = v;
    }
    /**
     * Gets or sets the color to use for the text in the annotation.
    */
    get textColor() {
        return brushToString(this.i.textColor);
    }
    set textColor(v) {
        this.i.textColor = stringToBrush(v);
    }
    /**
     * Gets or sets the background to use for tha axis annotation box.
    */
    get background() {
        return brushToString(this.i.background);
    }
    set background(v) {
        this.i.background = stringToBrush(v);
    }
    /**
     * Gets or sets the Outline to use for tha axis annotation box.
    */
    get outline() {
        return brushToString(this.i.outline);
    }
    set outline(v) {
        this.i.outline = stringToBrush(v);
    }
    /**
     * Gets or sets the border stroke thickness to use for tha axis annotation box.
    */
    get strokeThickness() {
        return this.i.strokeThickness;
    }
    set strokeThickness(v) {
        this.i.strokeThickness = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get backgroundPaddingLeft() {
        return this.i.backgroundPaddingLeft;
    }
    set backgroundPaddingLeft(v) {
        this.i.backgroundPaddingLeft = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get backgroundPaddingTop() {
        return this.i.backgroundPaddingTop;
    }
    set backgroundPaddingTop(v) {
        this.i.backgroundPaddingTop = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get backgroundPaddingRight() {
        return this.i.backgroundPaddingRight;
    }
    set backgroundPaddingRight(v) {
        this.i.backgroundPaddingRight = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get backgroundPaddingBottom() {
        return this.i.backgroundPaddingBottom;
    }
    set backgroundPaddingBottom(v) {
        this.i.backgroundPaddingBottom = +v;
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {
            return arrayFindByName(this.labelFormatSpecifiers, name);
        }
        return null;
    }
    resetCachedExtent() {
        this.i.resetCachedExtent();
    }
    resolveLabelValue() {
        let iv = this.i.resolveLabelValue();
        return (iv);
    }
}
