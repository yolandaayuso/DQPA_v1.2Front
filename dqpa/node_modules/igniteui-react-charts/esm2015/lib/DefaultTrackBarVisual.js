/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Point_$type, markType } from "igniteui-react-core";
import { ITrackBarVisual_$type } from "./ITrackBarVisual";
import { Path } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { PolyLineSegment } from "igniteui-react-core";
/**
 * @hidden
 */
export let DefaultTrackBarVisual = /*@__PURE__*/ (() => {
    class DefaultTrackBarVisual extends Base {
        get translateX() {
            return this._translateX;
        }
        set translateX(a) {
            this._translateX = a;
        }
        get translateY() {
            return this._translateY;
        }
        set translateY(a) {
            this._translateY = a;
        }
        constructor() {
            super();
            this._translateX = 0;
            this._translateY = 0;
            this.b = -1;
            this.a = -1;
            this._barBox = null;
            this._allPaths = null;
            this.barBox = new Path();
            this.allPaths = new List$1(Path.$, 0);
            this.allPaths.add(this.barBox);
            this.barBox._fill = this.getBarBoxDefaultBrush();
        }
        getBarBoxDefaultBrush() {
            return ((() => {
                let $ret = new Brush();
                $ret.color = Color.u(255, 218, 218, 218);
                return $ret;
            })());
        }
        getBarBoxDefaultOutline() {
            return null;
        }
        getBarBoxDefaultStrokeThickness() {
            return 0;
        }
        c() {
            let a = new PathGeometry();
            let b = new PathFigure();
            let c = new PolyLineSegment();
            b._isClosed = true;
            b._isFilled = true;
            b._startPoint = { $type: Point_$type, x: this.width / -2, y: this.height / -2 };
            c._points.add({ $type: Point_$type, x: this.width / 2, y: this.height / -2 });
            c._points.add({ $type: Point_$type, x: this.width / 2, y: this.height / 2 });
            c._points.add({ $type: Point_$type, x: this.width / -2, y: this.height / 2 });
            b._segments.add(c);
            a.c.add(b);
            this.barBox.an = a;
        }
        get width() {
            return this.b;
        }
        set width(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.d();
            }
        }
        d() {
            if (this.width > 0 && this.height > 0) {
                this.c();
            }
        }
        get height() {
            return this.a;
        }
        set height(a) {
            let b = this.a;
            this.a = a;
            if (this.a != b) {
                this.d();
            }
        }
        get barBox() {
            return this._barBox;
        }
        set barBox(a) {
            this._barBox = a;
        }
        get allPaths() {
            return this._allPaths;
        }
        set allPaths(a) {
            this._allPaths = a;
        }
    }
    DefaultTrackBarVisual.$t = /*@__PURE__*/ markType(DefaultTrackBarVisual, 'DefaultTrackBarVisual', Base.$, [ITrackBarVisual_$type]);
    return DefaultTrackBarVisual;
})();
