import { IgrCategorySeries } from "./igr-category-series";
/**
 * Represents the base class for all IgxDataChartComponent ranged category/value series.
*
* The `RangeCategorySeries` represents the base class for all IgxDataChartComponent ranged category/value series.
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*
*     <IgrCategoryXAxis name="xAxis" label="Year" />
*     <IgrNumericYAxis  name="yAxis" />
*
*     <IgrRangeColumnSeries
*         name="series1"
*         xAxisName="xAxis"
*         yAxisName="yAxis"
*         highMemberPath="High"
*         lowMemberPath="Low" />
*  </IgrDataChart>
* ```
*
* ```ts
* let series1 = new IgrRangeColumnSeries({ name: "series1" });
* series1.highMemberPath = "High";
* series1.lowMemberPath  = "Low";
* series1.xAxisName = "xAxis";
* series1.yAxisName = "yAxis";
* this.chart.series.add(series1);
* ```
*/
export class IgrRangeCategorySeries extends IgrCategorySeries {
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the value mapping property for the current series object.
    *
    * The `LowMemberPath` is used for low mapping property of the current series object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *     <IgrCategoryXAxis name="xAxis" label="Year" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *     <IgrRangeColumnSeries
    *         name="series1"
    *         xAxisName="xAxis"
    *         yAxisName="yAxis"
    *         highMemberPath="High"
    *         lowMemberPath="Low" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * const series1 = new IgrRangeColumnSeries({ name: "series1" });
    * series1.highMemberPath = "High";
    * series1.lowMemberPath  = "Low";
    * ```
    */
    get lowMemberPath() {
        return this.i.aa7;
    }
    set lowMemberPath(v) {
        this.i.aa7 = v;
    }
    /**
     * Gets or sets the value mapping property for the current series object.
    *
    * Use `HighMemberPath` propert for high mapping of the current series object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *     <IgrCategoryXAxis name="xAxis" label="Year" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *     <IgrRangeColumnSeries
    *         name="series1"
    *         xAxisName="xAxis"
    *         yAxisName="yAxis"
    *         highMemberPath="High"
    *         lowMemberPath="Low" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.highMemberPath = "high";
    * ```
    *
    * ```ts
    * const series1 = new IgrRangeColumnSeries({ name: "series1" });
    * series1.highMemberPath = "High";
    * series1.lowMemberPath  = "Low";
    * ```
    */
    get highMemberPath() {
        return this.i.aa4;
    }
    set highMemberPath(v) {
        this.i.aa4 = v;
    }
    /**
     * Gets or sets the highlighted low value mapping property for the current series object.
    */
    get highlightedLowMemberPath() {
        return this.i.aa2;
    }
    set highlightedLowMemberPath(v) {
        this.i.aa2 = v;
    }
    /**
     * Gets or sets the highlighted High value mapping property for the current series object.
    */
    get highlightedHighMemberPath() {
        return this.i.aa0;
    }
    set highlightedHighMemberPath(v) {
        this.i.aa0 = v;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.kq(item, memberPathName);
        return (iv);
    }
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName) {
        let iv = this.i.md(memberPathName);
        return (iv);
    }
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    *
    * `ScrollIntoView` method Scrolls the series to display the item for the specified data item.
    */
    scrollIntoView(item) {
        let iv = this.i.gd(item);
        return (iv);
    }
}
