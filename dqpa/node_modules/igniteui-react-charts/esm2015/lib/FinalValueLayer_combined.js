/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { FinalValueSelectionMode_$type } from "./FinalValueSelectionMode";
import { Brush } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FinalValueLayerFrame } from "./FinalValueLayerFrame";
import { List$1 } from "igniteui-react-core";
import { Axis } from "./Axis";
import { Dictionary$2 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { AxisAnnotation } from "./AxisAnnotation";
import { Base, enumGetBox, fromEnum, Point_$type, markType, markDep } from "igniteui-react-core";
import { AxisAnnotationFrameManager } from "./AxisAnnotationFrameManager";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { BrushUtil } from "igniteui-react-core";
/**
 * @hidden
 */
export let FinalValueLayer = /*@__PURE__*/ (() => {
    class FinalValueLayer extends AnnotationLayer {
        bj() {
            return new FinalValueLayer();
        }
        get_eq() {
            return true;
        }
        constructor() {
            super();
            this.axisAnnotationFormatLabel = null;
            this.z3 = null;
            this.z2 = null;
            let a = new FinalValueLayerFrame();
            let b = new FinalValueLayerFrame();
            let c = new FinalValueLayerFrame();
            let d = this.kd / 1000;
            this.xc = a;
            this.xb = b;
            this.xd = c;
            this.ab = FinalValueLayer.$;
        }
        cs() {
            return new FinalValueLayerView(this);
        }
        q1(a) {
            super.q1(a);
            this.zy = a;
        }
        get aa8() {
            return new Thickness(1, this.z6, this.z8, this.z7, this.z5);
        }
        z1() {
            return this.axisAnnotationFormatLabel != null;
        }
        yp(a, b) {
            if (this.z0 == null || this.z0 == a) {
                if (!this.a1.c) {
                    this.rr(b);
                }
            }
        }
        yr(a, b) {
            super.yr(a, b);
            let c = a;
            c.f.clear();
            c.r.clear();
            c.q.clear();
            c.ac.clear();
            c.p.clear();
            c.ab.clear();
            c.h.clear();
            c.g.clear();
            c.i.clear();
            c.k.clear();
            c.m.clear();
            c.l.clear();
            c.j.clear();
            c.n.clear();
            c.o.clear();
            c.t.clear();
            c.s.clear();
            c.u.clear();
            c.w.clear();
            c.y.clear();
            c.x.clear();
            c.v.clear();
            c.z.clear();
            c.aa.clear();
            if (this.xi(this.z0)) {
                this.aap(this.z0, c);
            }
            else {
                for (let d of fromEnum(this.db.series)) {
                    if (this.xi(d)) {
                        this.aap(d, c);
                    }
                    if (d.isStacked) {
                        d.p3((e) => {
                            if (this.xi(e)) {
                                this.aap(e, c);
                            }
                            if (e.eg) {
                                e.p1((f) => {
                                    if (this.xi(f)) {
                                        this.aap(f, c);
                                    }
                                    return true;
                                });
                            }
                            return true;
                        });
                    }
                    if (d.eg) {
                        d.p1((e) => {
                            if (this.xi(e)) {
                                this.aap(e, c);
                            }
                            return true;
                        });
                    }
                }
            }
        }
        xi(a) {
            if (!super.xi(a)) {
                return false;
            }
            if (this.aam != null) {
                if (a.fb) {
                    let b = a.nc();
                    if (!Base.equalsStatic(this.aam, b)) {
                        return false;
                    }
                }
                else {
                    if (!Base.equalsStatic(this.aam, a.name)) {
                        return false;
                    }
                }
            }
            return true;
        }
        qp() {
            super.qp();
            if (!this.a1.c && !this.d3()) {
                return;
            }
            if (this.d3()) {
                this.aaq(this.xd, false);
            }
            else {
                this.aaq(this.xb, false);
            }
        }
        aa7(a) {
            let b = NaN;
            let c = NaN;
            let d = this.zz;
            if (d == 0) {
                d = 1;
            }
            let e = false;
            if (d == 2) {
                e = true;
            }
            if (a.isVertical) {
                let f = a.a0();
                if (f != null) {
                    if (d == 1 || d == 2) {
                        let g = this.wj(this.cv);
                        if (f.ch) {
                            c = a.wh({ $type: Point_$type, x: g.right, y: g.bottom }).y;
                        }
                        else {
                            c = a.wh({ $type: Point_$type, x: g.right, y: g.top }).y;
                        }
                    }
                    else {
                        if (f.ch) {
                            c = 1;
                        }
                        else {
                            c = 0;
                        }
                    }
                }
                return a.wc({ $type: Point_$type, x: 0, y: c }, e, true);
            }
            else {
                let h = a.a0();
                if (h != null) {
                    if (d == 1 || d == 2) {
                        let i = this.wj(this.cv);
                        if (h.ch) {
                            b = a.wh({ $type: Point_$type, x: i.left, y: i.top }).x;
                        }
                        else {
                            b = a.wh({ $type: Point_$type, x: i.right, y: i.top }).x;
                        }
                    }
                    else {
                        if (h.ch) {
                            b = 0;
                        }
                        else {
                            b = 1;
                        }
                    }
                }
                if (a.e6) {
                    return a.wc({ $type: Point_$type, x: b, y: 0 }, e, true);
                }
                else {
                    return a.wc({ $type: Point_$type, x: b, y: 0 }, e, true);
                }
            }
        }
        aap(a, b) {
            let c = this.aa7(a);
            let d = this.wh(c);
            let e = this.u9;
            if (e == null) {
                e = this.vf;
            }
            if (e == null) {
                e = a.u9;
                if (e != null) {
                    e = this.zy.b8(e);
                }
            }
            AxisAnnotationFrameManager.c(b, c, a, this.db, this.getEffectiveViewport(), e, this.aa4, this.z4, this.aa6, this.aa5, this.aa8, this.z9, this.aa4, this.z4, this.aa6, this.aa5, this.aa8, this.z9, this._visibility == 0 && a.isVertical, this._visibility == 0 && !a.isVertical);
        }
        aaq(a, b) {
            let c = false;
            if (this.z2 == null) {
                c = true;
                this.z3 = new List$1(Axis.$, 0);
                this.z2 = new Dictionary$2(Axis.$, Pool$1.$.specialize(AxisAnnotation.$), 0);
            }
            AxisAnnotationFrameManager.d(this, a, c, this.z2, this.z3, b, this.aaa, this.aaa, this.axisAnnotationFormatLabel, this.axisAnnotationFormatLabel);
        }
        yu(a, b) {
            super.yu(a, b);
            if (this.d3()) {
                this.aaq(this.xd, true);
            }
            else {
                this.aaq(this.xb, false);
            }
        }
        ga() {
            return true;
        }
        q9(a, b, c, d) {
            super.q9(a, b, c, d);
            switch (b) {
                case FinalValueLayer.$$p[11]:
                case FinalValueLayer.$$p[12]:
                    this.rr(true);
                    break;
                case FinalValueLayer.$$p[1]:
                case FinalValueLayer.$$p[0]:
                case FinalValueLayer.$$p[3]:
                case FinalValueLayer.$$p[5]:
                case FinalValueLayer.$$p[7]:
                case FinalValueLayer.$$p[6]:
                case FinalValueLayer.$$p[4]:
                case "Visibility":
                case FinalValueLayer.$$p[8]:
                case FinalValueLayer.$$p[9]:
                case FinalValueLayer.$$p[10]:
                    this.rr(true);
                    break;
                case "SeriesViewer":
                    let e = this.z3;
                    let f = this.z2;
                    if (f != null) {
                        for (let g of fromEnum(f)) {
                            let h = g.value;
                            h.c((i) => g.key.an.remove(i));
                            h.clear();
                        }
                        e.clear();
                        f.clear();
                    }
                    break;
            }
        }
        o5(a, b) {
            super.o5(a, b);
            if (a) {
                AxisAnnotationFrameManager.b(this.xb);
                this.aaq(this.xb, false);
            }
        }
    }
    FinalValueLayer.$t = /*@__PURE__*/ markType(FinalValueLayer, 'FinalValueLayer', AnnotationLayer.$);
    FinalValueLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, FinalValueLayer, 'raisePropertyChanged', ['AxisAnnotationBackgroundCornerRadius:z4:aar', [1, /*@__PURE__*/ DeviceUtils.g(3)], 'AxisAnnotationBackground:aa4:aas', [Brush.$, null], 'AxisAnnotationInterpolatedValuePrecision:aaa:aat', [1, -1], 'AxisAnnotationOutline:aa5:aau', [Brush.$, null], 'AxisAnnotationPaddingBottom:z5:aav', [1, NaN], 'AxisAnnotationPaddingLeft:z6:aaw', [1, NaN], 'AxisAnnotationPaddingRight:z7:aax', [1, NaN], 'AxisAnnotationPaddingTop:z8:aay', [1, NaN], 'AxisAnnotationStrokeThickness:z9:aaz', [1, NaN], 'AxisAnnotationTextColor:aa6:aa0', [Brush.$, null], 'FinalValueSelectionMode:zz:aa1', [FinalValueSelectionMode_$type, /*@__PURE__*/ enumGetBox(FinalValueSelectionMode_$type, 0)], 'TargetSeriesName:aam:aa2', [2, null], 'TargetSeries:z0:aa3', [Series.$, null]]);
    return FinalValueLayer;
})();
/**
 * @hidden
 */
export let FinalValueLayerView = /*@__PURE__*/ (() => {
    class FinalValueLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b7 = null;
            this.b7 = a;
        }
        au() {
            super.au();
        }
        b8(a) {
            if (a == null) {
                return a;
            }
            return BrushUtil.m(a, 0.1);
        }
        an(a) {
            super.an(a);
        }
    }
    FinalValueLayerView.$t = /*@__PURE__*/ markType(FinalValueLayerView, 'FinalValueLayerView', AnnotationLayerView.$);
    return FinalValueLayerView;
})();
