/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Frame } from "./Frame";
import { List$1 } from "igniteui-react-core";
import { Base, Number_$type, markType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { FrameExtended } from "./FrameExtended";
/**
 * @hidden
 */
export let CalloutLayerFrame = /*@__PURE__*/ (() => {
    class CalloutLayerFrame extends Frame {
        c(a, b, c) {
            let d = b;
            let e = c;
            FrameExtended.a(this.p, a, d.p, e.p, 0);
            FrameExtended.a(this.f, a, d.f, e.f, 0);
            FrameExtended.a(this.i, a, d.i, e.i, 0);
            FrameExtended.a(this.h, a, d.h, e.h, 0);
            Frame.b(this.k, a, d.k, e.k);
            Frame.b(this.m, a, d.m, e.m);
            Frame.b(this.l, a, d.l, e.l);
            Frame.b(this.j, a, d.j, e.j);
            Frame.b(this.g, a, d.g, e.g);
            Frame.b(this.o, a, d.o, e.o);
            Frame.b(this.u, a, d.u, e.u);
            Frame.b(this.v, a, d.v, e.v);
            Frame.b(this.s, a, d.s, e.s);
            Frame.b(this.t, a, d.t, e.t);
            CalloutLayerFrame.w(this.q, a, d.q, e.q);
            CalloutLayerFrame.w(this.n, a, d.n, e.n);
            CalloutLayerFrame.w(this.r, a, d.r, e.r);
        }
        static w(a, b, c, d) {
            let e = c.count;
            let f = d.count;
            let g = Math.max(e, f);
            let h = 1 - b;
            if (a.count < g) {
                let i = new Array(g - a.count);
                for (let j = 0; j < g - a.count; j++) {
                    i[j] = null;
                }
                a.s(a.count, i);
            }
            if (a.count > g) {
                a.v(g, a.count - g);
            }
            for (let k = 0; k < Math.min(e, f); ++k) {
                if (b == 0) {
                    a._inner[k] = c._inner[k];
                }
                else {
                    a._inner[k] = d._inner[k];
                }
            }
            if (e < f) {
                let l = e > 0 ? c._inner[e - 1] : null;
                for (let m = e; m < f; ++m) {
                    if (b == 0) {
                        a._inner[m] = l;
                    }
                    else {
                        a._inner[m] = d._inner[m];
                    }
                }
            }
            if (e > f) {
                let n = f > 0 ? d._inner[f - 1] : null;
                for (let o = f; o < e; ++o) {
                    if (b == 0) {
                        a._inner[o] = c._inner[o];
                    }
                    else {
                        a._inner[o] = n;
                    }
                }
            }
        }
        constructor() {
            super();
            this.q = null;
            this.n = null;
            this.r = null;
            this.p = null;
            this.i = null;
            this.h = null;
            this.f = null;
            this.o = null;
            this.k = null;
            this.m = null;
            this.l = null;
            this.j = null;
            this.g = null;
            this.u = null;
            this.v = null;
            this.s = null;
            this.t = null;
            this.q = new List$1(Base.$, 0);
            this.n = new List$1(Base.$, 0);
            this.r = new List$1(Base.$, 0);
            this.p = new List$1(Brush.$, 0);
            this.i = new List$1(Brush.$, 0);
            this.h = new List$1(Brush.$, 0);
            this.f = new List$1(Brush.$, 0);
            this.o = new List$1(Number_$type, 0);
            this.k = new List$1(Number_$type, 0);
            this.m = new List$1(Number_$type, 0);
            this.l = new List$1(Number_$type, 0);
            this.j = new List$1(Number_$type, 0);
            this.g = new List$1(Number_$type, 0);
            this.u = new List$1(Number_$type, 0);
            this.v = new List$1(Number_$type, 0);
            this.s = new List$1(Number_$type, 0);
            this.t = new List$1(Number_$type, 0);
        }
    }
    CalloutLayerFrame.$t = /*@__PURE__*/ markType(CalloutLayerFrame, 'CalloutLayerFrame', Frame.$);
    return CalloutLayerFrame;
})();
