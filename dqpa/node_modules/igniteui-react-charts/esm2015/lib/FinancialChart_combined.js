/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { IndicatorPane } from "./IndicatorPane";
import { Base, BaseError, EventArgs, runOn, delegateRemove, delegateCombine, fromEnum, typeCast, EnumUtil, Number_$type, String_$type, enumGetBox, markType, TypeRegistrar, fromEn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleFinancialPriceSeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType_$type } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode_$type } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode_$type } from "./FinancialChartYAxisMode";
import { FinancialChartType_$type } from "./FinancialChartType";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { FinancialChartZoomSliderType_$type } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartViewModel } from "./FinancialChartViewModel";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { BrushUtil } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerSeries } from "./MarkerSeries";
import { IZoomableCategoryAxis_$type } from "./IZoomableCategoryAxis";
import { SyncSettings } from "./SyncSettings";
import { SyncManager } from "./SyncManager";
import { FinancialOverlayType_$type } from "./FinancialOverlayType";
import { ArrayExtension } from "igniteui-react-core";
import { FinancialIndicatorType_$type } from "./FinancialIndicatorType";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FinancialChartVisualData } from "./FinancialChartVisualData";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { ScalerParams } from "./ScalerParams";
import { stringReplace, stringJoin, stringIsNullOrEmpty } from "igniteui-react-core";
import { timeSpanFromDays } from "igniteui-react-core";
import { dateMaxValue, dateMinValue } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType_$type } from "igniteui-react-core";
import { FinancialChartIndicatorMenuContext } from "./FinancialChartIndicatorMenuContext";
import { FinancialChartTypePickerContext } from "./FinancialChartTypePickerContext";
import { FinancialChartRangeSelectorContext } from "./FinancialChartRangeSelectorContext";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorView } from "./FinancialChartRangeSelectorView";
/**
 * @hidden
 */
export let FinancialChart = /*@__PURE__*/ (() => {
    class FinancialChart extends XYChart {
        vy(a, b, c) {
            super.vy(a, b, c);
            switch (a) {
                case "ToolbarTemplate":
                case "RangeSelectorTemplate":
                    this.ahy = new FinancialChartToolbar(this, this.amf);
                    break;
                case "Toolbar":
                    let d = b;
                    if (d != null) {
                        d.chartTypeChanged = delegateRemove(d.chartTypeChanged, runOn(this, this.ao9));
                        d.trendLineTypeChanged = delegateRemove(d.trendLineTypeChanged, runOn(this, this.apc));
                        d.volumeTypeChanged = delegateRemove(d.volumeTypeChanged, runOn(this, this.apd));
                        d.l(null);
                    }
                    if (this.ahy != null) {
                        this.ahy.ac = this.ah5;
                        this.ahy.ai = this.trendLineType;
                        this.ahy.y = this.ah0;
                        this.ahy.al = this.ajy;
                        if (this.alm != null) {
                            this.ahy.l(this.alm);
                        }
                        let e = this.ahy;
                        e.chartTypeChanged = delegateCombine(e.chartTypeChanged, runOn(this, this.ao9));
                        ;
                        let f = this.ahy;
                        f.trendLineTypeChanged = delegateCombine(f.trendLineTypeChanged, runOn(this, this.apc));
                        let g = this.ahy;
                        g.volumeTypeChanged = delegateCombine(g.volumeTypeChanged, runOn(this, this.apd));
                    }
                    break;
                case "ChartType":
                    if (this.ahy != null) {
                        this.ahy.y = this.ah0;
                    }
                    break;
                case "VolumeType":
                    if (this.ahy != null) {
                        this.ahy.ac = this.ah5;
                    }
                    break;
                case "TrendLineType":
                    if (this.ahy != null) {
                        this.ahy.ai = this.trendLineType;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.ahy == null) {
                        break;
                    }
                    this.ahy.al = this.ajy;
                    this.setGridRows();
                    break;
            }
        }
        apd(a, b) {
            this.ah5 = this.ahy.ac;
        }
        apc(a, b) {
            this.trendLineType = this.ahy.ai;
        }
        ao9(a, b) {
            this.ah0 = this.ahy.y;
        }
        apm() {
            this.air = new IndicatorPane();
            this.aii = TypeRegistrar.create("FinancialLegend");
        }
        provideGrid(a) {
            this.alp = a;
            this.ap7();
            this.setGridRows();
            if (this.ahy != null) {
                this.ahy.bg(a);
            }
        }
        onDocumentClick(a) {
            if (this.ahy != null) {
                this.ahy.bl(a);
            }
        }
        getContext() {
            let a = this.ahy.v();
            let b = new FinancialChartContext();
            b.vm = new FinancialChartViewModel();
            b.vm.toolbar = a;
            b.container = this.lt;
            b.toolbarContainer = this.alm;
            b.legendContainer = this.all;
            b.indicatorsContainer = this.alk;
            b.volumeContainer = this.aln;
            b.zoomContainer = this.alo;
            return b;
        }
        provideContainer(a) {
            let b = a;
            if (b != null) {
                let c = "financialChartMainGrid";
                let d = b.createElement("div");
                d.setStyleProperty("width", "100%");
                d.setStyleProperty("height", "100%");
                if (this.ahy == null) {
                    this.ahy = new FinancialChartToolbar(this, this.amf);
                }
                this.ahy.w.isIndicatorMenuVisible = this.ajp && this.ajq;
                this.alm = b.getSubRenderer(d);
                this.ahy.l(this.alm);
                let e = b.createElement("div");
                e.setStyleProperty("width", "100%");
                e.setStyleProperty("height", "100%");
                let f = b.createElement("div");
                f.setStyleProperty("width", "100%");
                f.setStyleProperty("height", "100%");
                this.all = b.getSubRenderer(f);
                let g = b.createElement("div");
                g.setStyleProperty("width", "100%");
                g.setStyleProperty("height", "100%");
                this.alk = b.getSubRenderer(g);
                let h = b.createElement("div");
                h.setStyleProperty("width", "100%");
                h.setStyleProperty("height", "100%");
                this.aln = b.getSubRenderer(h);
                let i = b.createElement("div");
                i.setStyleProperty("width", "100%");
                i.setStyleProperty("height", "100%");
                this.alo = b.getSubRenderer(i);
                a = b.getSubRenderer(e);
            }
            else {
                this.alm = null;
                if (this.ahy != null) {
                    this.ahy.l(null);
                }
                if (this.ajg != null) {
                    this.ajg.provideContainer(null);
                    this.ajg = null;
                }
                if (this.aii != null) {
                    this.aii.provideContainer(null);
                }
            }
            super.provideContainer(a);
            if (b != null) {
                if (this.volumeChart != null) {
                    this.volumeChart.c9.b4(this.aln);
                }
                if (this.air != null) {
                    this.air.h(this.alk);
                }
                if (this.zoomSliderChart != null) {
                    this.zoomSliderChart.c9.b4(this.alo);
                    if (a != null) {
                        this.aot();
                    }
                    else {
                        this.ajg = null;
                    }
                }
                if (this.aii != null) {
                    this.aii.provideContainer(this.all);
                }
                this.setGridRows();
            }
        }
        apx(a, b, c) {
            if (a != null) {
                a.provideContainer(null);
            }
            if (b != null) {
                b.c9.b4(c);
            }
            this.setGridRows();
        }
        aqb(a, b) {
            this.apx(a, b, this.alo);
            if (b == null) {
                return;
            }
            this.aot();
        }
        aot() {
            if (this.alo == null) {
                return;
            }
            if (this.ajg != null) {
                this.ajg.provideContainer(null);
            }
            this.ajg = TypeRegistrar.create("ZoomSlider");
            this.ajg.provideContainer(this.alo);
            let a = this.ajg;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, (a, b) => {
                if (this.dataChart != null) {
                    this.dataChart.wl = new Rect(0, this.ajg.windowRect.left, this.dataChart.v4.top, this.ajg.windowRect.width, this.dataChart.v4.height);
                }
            });
            this.aou();
        }
        ap9(a, b) {
            this.apx(a, b, this.aln);
        }
        setGridRows() {
            if (this.alp == null) {
                return;
            }
            let a = new Array(6);
            a[0] = (this.ajy ? this.ak6 : 0) + "px";
            a[1] = this.aju ? "min-content" : "0px";
            a[2] = "auto";
            a[3] = this.indicatorCharts == null || this.indicatorCharts.count == 0 ? "0px" : this.indicatorCharts.count * 150 + "px";
            a[4] = this.volumeChart == null ? "0px" : "100px";
            a[5] = this.zoomSliderChart == null ? "0px" : "100px";
            if (this.ajg != null) {
                if (a[5] == "0px") {
                    this.ajg.hide();
                }
                else {
                    this.ajg.show();
                }
            }
            this.alp.setStyleProperty("-ms-grid-rows", stringReplace(stringJoin(" ", ...a), "auto", "1fr"));
            this.alp.setStyleProperty("grid-template-rows", stringJoin(" ", ...a));
            if (this.lt == null) {
                return;
            }
            if (this.dataChart != null) {
                this.dataChart.notifyContainerResized();
            }
            if (this.air != null) {
                this.air.f();
            }
            if (this.volumeChart != null) {
                this.volumeChart.notifyContainerResized();
            }
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.notifyContainerResized();
            }
            if (this.ajg != null) {
                this.ajg.notifySizeChanged();
            }
        }
        u5() {
            super.u5();
            this.aad = 1;
            this.afs = 0;
            this.aca = 0;
            this.agm = null;
            this.agf = AxisDefaults.g;
            this.abu = AxisDefaults.e;
            this.abt = AxisDefaults.f;
            this.agg = AxisDefaults.j;
            this.agc = null;
            this.aqd = AxisDefaults.h;
            this.alj = AxisDefaults.b;
            this.finalValueAnnotationsVisible = true;
            this.crosshairsAnnotationEnabled = true;
            this.gn = false;
            this.crosshairsDisplayMode = 0;
            this.jl = Defaults.j;
            this.yc = Defaults.ae;
            this.x7 = Defaults.af;
            this.x8 = Defaults.ag;
            this.j5 = NaN;
            this.jx = 40;
            this.g3 = true;
            this.hb = false;
            if (this.dataChart != null) {
                let a = this.dataChart.c9.j.e();
                this.ag9 = a.d;
                this.aha = a.e;
                this.ag8 = a.d;
                this.aqd = this.dataChart.aaq;
            }
            let b = new BrushCollection();
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8BDC5C";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8961A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#6DB1FF";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#82E9D9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#EA3C63";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#735656";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#F8CE4F";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#A8A8B7";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#E051A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#FF903B";
                return $ret;
            })()));
            let c = new BrushCollection();
            for (let d of fromEnum(b)) {
                c.add(BrushUtil.n(d, 0.3));
            }
            this.ahb = c;
            this.ahc = b;
        }
        apt() {
            if (this.air != null) {
                this.air.b = null;
                this.air.b = this.indicatorCharts;
            }
            this.setGridRows();
        }
        apu() {
            this.setGridRows();
        }
        ap3() {
            this.apt();
        }
        aos() {
            if (this.ajg == null || this.zoomSliderChart == null || this.dataChart == null || this.dataChart.series.count == 0) {
                return;
            }
            let a = this.lt.rootWrapper.width();
            let b = this.dataChart.wk.left + this.dataChart.wk.width;
            let c = this.dataChart.wk.left;
            let d = a - b;
            this.ajg.startInset = c - this.ajg.trackStartInset;
            this.ajg.endInset = d - this.ajg.trackEndInset;
            if (this.ajg.endInset < 0) {
                let e = this.ajg.endInset;
                this.ajg.endInset = 0;
                this.dataChart.h7 += (e * -1);
            }
            if (this.ajg.startInset < 0) {
                let f = this.ajg.startInset;
                this.ajg.startInset = 0;
                this.dataChart.h2 += (f * -1);
            }
            this.zoomSliderChart.h2 = c;
            this.zoomSliderChart.h7 = d;
            this.zoomSliderChart.hp = this.ajg.barExtent;
        }
        apj() {
            this.aos();
        }
        u2(a) {
            super.u2(a);
            if (a != null) {
                a.ho = 0;
            }
        }
        aqe(a) {
            return a.vx();
        }
        aqh() {
            return this.all == null ? null : this.aqg(this.all.rootWrapper);
        }
        aqf(a) {
            if (a == null || a.d == null) {
                return null;
            }
            return this.aqg(a.d.rootWrapper);
        }
        aqg(a) {
            if (a == null) {
                return null;
            }
            let b = a.getOffset();
            return new Rect(0, b.left, b.top, a.width(), a.height());
        }
        ak1() {
            if (this.alp == null) {
                return NaN;
            }
            let a = this.alp.getOffset();
            return this.alp.width() + (a == null ? 0 : a.left);
        }
        ve(source_, a, b) {
            super.ve(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.oe(source_, a, b);
            }
        }
        vf(source_, a, b) {
            super.vf(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.of(source_, a, b);
            }
        }
        vd(source_) {
            super.vd(source_);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.n7(source_);
            }
        }
        vh(source_, a, b, c) {
            super.vh(source_, a, b, c);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.og(source_, a, b, c);
            }
        }
        u8(a, b) {
            super.u8(a, b);
            if (this.ajv(a)) {
                a.toolTip = null;
            }
        }
        get ahy() {
            return this.ahx;
        }
        set ahy(a) {
            let b = this.ahy;
            if (a != b) {
                this.ahx = a;
                this.vu("Toolbar", b, this.ahy);
            }
        }
        get ame() {
            return this.al7;
        }
        set ame(a) {
            let b = this.ame;
            if (a != b) {
                this.al7 = a;
                this.vu("RangeSelectorTemplate", b, this.ame);
            }
        }
        get amf() {
            return this.al8;
        }
        set amf(a) {
            let b = this.amf;
            if (a != b) {
                this.al8 = a;
                this.vu("ToolbarTemplate", b, this.amf);
            }
        }
        get amb() {
            return this.al4;
        }
        set amb(a) {
            let b = this.amb;
            if (a != b) {
                this.al4 = a;
                this.vu("ChartTypePickerTemplate", b, this.amb);
            }
        }
        get amg() {
            return this.al9;
        }
        set amg(a) {
            let b = this.amg;
            if (a != b) {
                this.al9 = a;
                this.vu("TrendLineTypePickerTemplate", b, this.amg);
            }
        }
        get amh() {
            return this.ama;
        }
        set amh(a) {
            let b = this.amh;
            if (a != b) {
                this.ama = a;
                this.vu("VolumeTypePickerTemplate", b, this.amh);
            }
        }
        get amc() {
            return this.al5;
        }
        set amc(a) {
            let b = this.amc;
            if (a != b) {
                this.al5 = a;
                this.vu("IndicatorMenuTemplate", b, this.amc);
            }
        }
        get amd() {
            return this.al6;
        }
        set amd(a) {
            let b = this.amd;
            if (a != b) {
                this.al6 = a;
                this.vu("OverlayPickerTemplate", b, this.amd);
            }
        }
        get ajg() {
            return this.ajf;
        }
        set ajg(a) {
            let b = this.ajg;
            if (a != b) {
                this.ajf = a;
                this.vu("ZoomSlider", b, this.ajg);
            }
        }
        get_jx() {
            return super.get_jx();
        }
        set_jx(a) {
            super.set_jx(a);
        }
        get_g3() {
            return super.get_g3();
        }
        set_g3(a) {
            super.set_g3(a);
        }
        get ak6() {
            return this.akp;
        }
        set ak6(a) {
            let b = this.ak6;
            if (a != b) {
                this.akp = a;
                this.vu("ToolbarHeight", b, this.ak6);
            }
        }
        constructor() {
            super();
            this.air = null;
            this.alp = null;
            this.aln = null;
            this.alk = null;
            this.alm = null;
            this.alo = null;
            this.all = null;
            this.ahx = null;
            this.al7 = null;
            this.al8 = null;
            this.al4 = null;
            this.al9 = null;
            this.ama = null;
            this.al5 = null;
            this.al6 = null;
            this.ajf = null;
            this.akp = 40;
            this.ail = null;
            this.aij = null;
            this.ain = null;
            this.ais = null;
            this.ami = null;
            this.ajb = null;
            this.aj1 = false;
            this.aj0 = false;
            this.aj8 = false;
            this.ajn = false;
            this.alv = 10;
            this.akw = NaN;
            this.aky = NaN;
            this.akx = NaN;
            this.akz = 0;
            this.ah3 = 0;
            this.ah6 = 0;
            this.akr = 3;
            this.aku = NaN;
            this.aks = NaN;
            this.akt = NaN;
            this.akv = NaN;
            this.ah8 = 0;
            this.aji = true;
            this.ahz = 0;
            this.ajj = false;
            this.aid = null;
            this.aif = null;
            this.aka = null;
            this.ajl = true;
            this.ajk = false;
            this.ajm = false;
            this.ajc = null;
            this.aia = 1;
            this.ag1 = null;
            this.ag2 = null;
            this.ag3 = null;
            this.ag4 = null;
            this.ag6 = null;
            this.ag5 = null;
            this.ag0 = null;
            this.agz = null;
            this.akq = 1;
            this.ako = 1;
            this.akn = 2;
            this.akm = 1;
            this.aip = null;
            this.alr = -2147483648;
            this.akl = 2;
            this.alu = 3;
            this.als = 10;
            this.alq = 30;
            this.alt = 9;
            this.ahu = null;
            this.ahv = null;
            this.ahq = null;
            this.applyCustomIndicators = null;
            this.aqc = null;
            this.ak0 = 1;
            this.ajh = false;
            this.aih = null;
            this.aki = dateMinValue();
            this.akh = dateMaxValue();
            this.akf = null;
            this.ul();
            this.akf = new ObservableCollection$1(Base.$, 0);
            if (this.xAxisBreaks != null) {
                let a = this.xAxisBreaks;
                a.collectionChanged = delegateCombine(a.collectionChanged, (a, b) => this.ap1());
            }
            this.apm();
        }
        z2() {
            return this.xAxis;
        }
        z3() {
            return this.yAxis;
        }
        onAttachedToUI() {
            super.onAttachedToUI();
            if (this.ajg != null) {
                this.ajg.onAttachedToUI();
            }
        }
        onDetachedFromUI() {
            super.onDetachedFromUI();
            if (this.ajg != null) {
                this.ajg.onDetachedFromUI();
            }
        }
        be(a) {
            return 20;
        }
        get_hx() {
            return ((() => {
                let $ret = new List$1(DataSeriesType_$type, 0);
                $ret.add(20);
                return $ret;
            })());
        }
        get hx() {
            return this.get_hx();
        }
        get_hw() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleFinancialPriceSeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get hw() {
            return this.get_hw();
        }
        ahk(a) {
            return this.ahl(a);
        }
        aiy(a) {
            return this.aiz(a);
        }
        ahj(a) {
            let b = this.ahk(0);
            b.name = a;
            return b;
        }
        ug() {
            this.xAxis = this.ahj("xAxis");
            this.yAxis = this.aiy(0);
            this.yAxis.name = "yAxis";
            this.volumeAxis = this.aiy(0);
            this.volumeAxis.name = "volumeAxis";
            this.volumeXAxis = this.ahj("volumeXAxis");
            this.akc = new List$1(NumericYAxis.$, 0);
            this.ake = new List$1(CategoryAxisBase.$, 0);
            this.indicatorAxis = this.aiy(0);
            this.indicatorAxis.name = "indicatorAxis";
            this.indicatorXAxis = this.ahj("indicatorXAxis_0");
            this.akc.add(this.indicatorAxis);
            this.ake.add(this.indicatorXAxis);
            if (this.xAxis.az == null) {
                this.xAxis.az = new AxisLabelSettings();
            }
            if (this.yAxis.az == null) {
                this.yAxis.az = new AxisLabelSettings();
            }
            if (this.volumeAxis.az == null) {
                this.volumeAxis.az = new AxisLabelSettings();
            }
            if (this.volumeXAxis.az == null) {
                this.volumeAxis.az = new AxisLabelSettings();
            }
            if (this.indicatorAxis.az == null) {
                this.indicatorAxis.az = new AxisLabelSettings();
            }
            if (this.indicatorXAxis.az == null) {
                this.indicatorXAxis.az = new AxisLabelSettings();
            }
            this.zoomSliderAxis = this.aiy(0);
            this.zoomSliderAxis.name = "zoomSliderAxis";
            this.zoomSliderXAxis = this.ahj("zoomSliderXAxis");
            if (this.zoomSliderAxis.az == null) {
                this.zoomSliderAxis.az = new AxisLabelSettings();
            }
            if (this.zoomSliderXAxis.az == null) {
                this.zoomSliderXAxis.az = new AxisLabelSettings();
            }
        }
        ua(a, b) {
            let c = typeCast(MarkerSeries.$, a);
            if (c != null) {
                c.xa = this.c2(a, b);
            }
        }
        c1(a) {
            if (a != null) {
                return 1;
            }
            return super.c1(a);
        }
        wn(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.lo = true;
                this.yAxis.mm = 10;
            }
        }
        wq() {
            this.yAxis.lo = this.aj5;
            this.yAxis.mm = this.al3;
        }
        ah2(a) {
            let b;
            if (this.ah0 == 0) {
                if (a == null || a.index > 0 || stringIsNullOrEmpty(a.getMemberPathFor(12))) {
                    b = 4;
                }
                else {
                    b = 2;
                }
            }
            else {
                b = this.ah0;
            }
            b = this.ah1(b);
            return b;
        }
        ah1(a) {
            if ((a == 1 || a == 2)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        aib(a) {
            if ((a == 2 || a == 3)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 5;
            }
            if (a == 5) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 6;
            }
            if (a == 6) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        ah4(a) {
            if (a == 2) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 1;
            }
            if (a == 1) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        amq(a) {
            let b = a.getMemberPathFor(14);
            if (stringIsNullOrEmpty(b)) {
                b = a.getMemberPathFor(11);
            }
            return b;
        }
        ahl(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createXAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        aiz(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createYAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        ai5() {
            return this.de(1);
        }
        ai6() {
            return this.de(0);
        }
        ai4() {
            return this.de(2);
        }
        ai7() {
            return this.de(20);
        }
        get ajo() {
            return (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy"));
        }
        get aim() {
            if (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy")) {
                return TypeRegistrar.create("HorizontalAnchoredCategorySeriesProxy");
            }
            else {
                throw new BaseError(1, "horizontal series module is not loaded, but is required.");
            }
        }
        get ajr() {
            return (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy"));
        }
        get aik() {
            if (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy")) {
                return TypeRegistrar.create("FinancialPriceSeriesProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get ajp() {
            return (TypeRegistrar.isRegistered("IndicatorProxy"));
        }
        get aio() {
            if (TypeRegistrar.isRegistered("IndicatorProxy")) {
                return TypeRegistrar.create("IndicatorProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get ajq() {
            return (TypeRegistrar.isRegistered("OverlayProxy"));
        }
        get ait() {
            if (TypeRegistrar.isRegistered("OverlayProxy")) {
                return TypeRegistrar.create("OverlayProxy");
            }
            else {
                throw new BaseError(1, "overlay series module is not loaded, but is required.");
            }
        }
        dc(a, b) {
            let c = this.amq(a);
            switch (this.ah2(a)) {
                case 3:
                    let d = this.ai5();
                    this.aim.setValueMemberPath(d, c);
                    this.aim.setXAxis(d, this.xAxis);
                    this.aim.setYAxis(d, this.yAxis);
                    this.aim.setCategoryMode(d, 1);
                    return d;
                case 4:
                    let e = this.ai6();
                    this.aim.setValueMemberPath(e, c);
                    this.aim.setXAxis(e, this.xAxis);
                    this.aim.setYAxis(e, this.yAxis);
                    this.aim.setCategoryMode(e, 1);
                    return e;
                default:
                case 1:
                case 2:
                    let f = this.ai7();
                    this.aik.setOpenMemberPath(f, a.getMemberPathFor(11));
                    this.aik.setHighMemberPath(f, a.getMemberPathFor(12));
                    this.aik.setLowMemberPath(f, a.getMemberPathFor(13));
                    this.aik.setCloseMemberPath(f, a.getMemberPathFor(14));
                    this.aik.setVolumeMemberPath(f, a.getMemberPathFor(15));
                    this.aik.setXAxis(f, this.xAxis);
                    this.aik.setYAxis(f, this.yAxis);
                    this.aik.setDisplayType(f, this.ah0 == 1 ? 1 : 0);
                    this.aik.setCategoryMode(f, 1);
                    return f;
            }
        }
        wp() {
            super.wp();
            this.aph(this.xAxis);
            this.ap5(false);
            if (this.ah5 != 0 && this.volumeChart != null) {
                this.apo();
            }
            this.aph(this.volumeXAxis);
            this.aph(this.indicatorXAxis);
            this.ap2();
            this.ap4();
            if (this.aic != 0) {
                this.app();
                this.aph(this.zoomSliderXAxis);
            }
        }
        afe(a, b) {
            super.afe(a, b);
            a(this.volumeXAxis);
            if (this.ake != null) {
                for (let c of fromEnum(this.ake)) {
                    a(c);
                }
            }
            let d = true;
            switch (b) {
                case "XAxisMajorStroke":
                case "XAxisMajorStrokeThickness":
                    d = false;
                    break;
            }
            if (d) {
                a(this.zoomSliderXAxis);
            }
        }
        afj(a, b) {
            super.afj(a, b);
            if (b) {
                a(this.volumeAxis);
                if (this.akc != null) {
                    for (let c of fromEnum(this.akc)) {
                        a(c);
                    }
                }
                a(this.zoomSliderAxis);
            }
        }
        apl(a) {
            let b = typeCast(IZoomableCategoryAxis_$type, this.xAxis);
            if (b != null) {
                a(b);
            }
        }
        afh(a) {
            super.afh(a);
            this.ae8(this.volumeXAxis, a);
            this.ae8(this.indicatorXAxis, a);
            this.ae8(this.zoomSliderXAxis, a);
        }
        afm(a) {
            super.afm(a);
            this.ae8(this.volumeAxis, a);
            this.ae8(this.indicatorAxis, a);
            this.ae8(this.zoomSliderAxis, a);
        }
        afk(a) {
            super.afk(a);
            this.ae7(this.volumeAxis, a);
            this.ae7(this.indicatorAxis, a);
            this.ae7(this.zoomSliderAxis, a);
        }
        aff(a) {
            super.aff(a);
            this.ae7(this.volumeXAxis, a);
            this.ae7(this.indicatorXAxis, a);
            this.ae7(this.zoomSliderXAxis, a);
        }
        u1(a) {
            super.u1(a);
            if (a == null) {
                return;
            }
            if (a == this.zoomSliderChart) {
                a.xg = a.xj = false;
                a.legend = null;
                if (this.dataChart != null) {
                    a.ag = this.dataChart.ag;
                    a.aj = this.dataChart.aj;
                }
            }
            else {
                SyncManager.d(a, ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = this.anl();
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })()));
                SyncManager.c(a);
            }
            a.cw = 2;
        }
        anl() {
            if (this.ami == null) {
                FinancialChart.al2++;
                this.ami = FinancialChart.al2.toString();
            }
            return this.ami;
        }
        ao3(a, b) {
            this.aop();
            this.apj();
        }
        aop() {
            if (this.yAxis.b8()) {
                return;
            }
            let a = this.yAxis.aw.bd;
            if (this.ah5 != 0) {
                a = Math.max(a, this.volumeAxis.aw.bd);
            }
            for (let b of fromEnum(this.akc)) {
                a = Math.max(a, b.aw.bd);
            }
            this.aoq(a);
        }
        aoq(a) {
            if (this.yAxis.b8()) {
                return;
            }
            this.yAxis.eu = this.volumeAxis.eu = a;
            for (let b of fromEnum(this.akc)) {
                b.eu = a;
            }
            this.zoomSliderAxis.eu = this.yAxis.eu;
        }
        aov(a) {
            if (this.indicatorCharts == null) {
                return;
            }
            for (let b = 0; b < this.indicatorCharts.count; b++) {
                let c = this.indicatorCharts._inner[b];
                for (let d = 0; d < c.series.count; d++) {
                    let e = c.series._inner[d];
                    if (!(this.ajt(e))) {
                        continue;
                    }
                    a(c.series._inner[d], b);
                }
            }
        }
        aoy(a) {
            if (this.volumeChart == null) {
                return;
            }
            for (let b = 0; b < this.volumeChart.series.count; b++) {
                let c = this.volumeChart.series._inner[b];
                if (c.es) {
                    continue;
                }
                a(this.volumeChart.series._inner[b], b);
            }
        }
        aow(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!this.ajv(c)) {
                    continue;
                }
                a(c, b);
            }
        }
        aox(a, b) {
            if (this.dataChart == null) {
                return;
            }
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.ajv(d)) {
                    continue;
                }
                let e = this.alw(d, c);
                a(d, e);
            }
            if (b) {
                this.aoz(a);
            }
        }
        aoz(a) {
            if (this.zoomSliderChart == null) {
                return;
            }
            for (let b = 0; b < this.zoomSliderChart.series.count; b++) {
                let c = this.zoomSliderChart.series._inner[b];
                if (c.es) {
                    continue;
                }
                a(this.zoomSliderChart.series._inner[b], b);
            }
        }
        alw(a, b) {
            if (a.c9 != this.dataChart) {
                return b;
            }
            let c = this.bf == null || this.bf.dataSeries == null ? 0 : this.bf.dataSeries.count;
            let d = this.aig == null ? 0 : this.aig.count;
            return b - (c * d);
        }
        uq(a) {
            super.uq(a);
            this.aoy(a);
            this.aov(a);
            this.aoz(a);
        }
        get volumeChart() {
            return this.ajb;
        }
        set volumeChart(a) {
            let b = this.volumeChart;
            if (a != b) {
                this.ajb = a;
                this.vu("VolumeChart", b, this.volumeChart);
            }
        }
        apo() {
            if (this.dataChart == null) {
                return;
            }
            this.volumeChart.series.clear();
            let a = new List$1(Series.$, 0);
            let b = -1;
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.ajv(d) || d.es) {
                    continue;
                }
                b++;
                let e;
                let f = this.ah5;
                f = this.ah4(f);
                switch (f) {
                    case 2:
                        e = this.ai6();
                        break;
                    case 3:
                        e = this.ai4();
                        break;
                    default:
                    case 1:
                        e = this.ai5();
                        break;
                }
                this.aim.setCategoryMode(e, 1);
                e.name = "volumeSeries_" + b;
                e.itemsSource = d.itemsSource;
                this.aim.setXAxis(e, this.volumeXAxis);
                this.aim.setYAxis(e, this.volumeAxis);
                this.aim.setValueMemberPath(e, this.bf != null && this.bf.dataSeries != null && this.bf.dataSeries.count > b ? this.bf.dataSeries._inner[b].getMemberPathFor(15) : null);
                e.title = d.title + " Volume";
                e.vf = ArrayExtension.getModulus$1(Brush.$, this.ahd, b);
                e.vv = ArrayExtension.getModulus$1(Brush.$, this.ahe, b);
                e.jp = this.ak7;
                a.add(e);
            }
            let g = this.ht("volume", false);
            if (g != null) {
                a.o(g);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.volumeChart.series.add(i);
                this.u6(i, h);
            }
        }
        ajs(a) {
            if (!this.ajo) {
                return false;
            }
            return this.aim.matchesType(a);
        }
        ajw(a) {
            if (!this.ajr) {
                return false;
            }
            return this.aik.matchesType(a);
        }
        ajt(a) {
            if (!this.ajp) {
                return false;
            }
            return this.aio.matchesType(a);
        }
        ajv(a) {
            if (!this.ajq) {
                return false;
            }
            return this.ait.matchesType(a);
        }
        apn() {
            if (this.dataChart == null) {
                return;
            }
            let a = 0;
            let b = this.aie == null ? 0 : this.aie.count;
            let c = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let d = b + c;
            for (let e = 0; e < d; e++) {
                let f = new List$1(Series.$, 0);
                let g = this.indicatorCharts._inner[e];
                let h = e >= b;
                let i = h ? this.customIndicatorNames._inner[e - b] : EnumUtil.getName(FinancialIndicatorType_$type, this.aie._inner[e]);
                let j = -1;
                for (let k = 0; k < this.dataChart.series.count; k++) {
                    let l = this.dataChart.series._inner[k];
                    if (this.ajv(l) || l.es) {
                        continue;
                    }
                    j++;
                    let m;
                    if (h) {
                        let n = this.ai8("Custom");
                        this.aio.handleCustomIndicatorEvent(n, runOn(this, this.ao1));
                        m = n;
                    }
                    else {
                        m = this.aja(this.aie._inner[e]);
                    }
                    if (m == null) {
                        continue;
                    }
                    m.name = "indicator_" + a++;
                    this.aio.setXAxis(m, this.ake._inner[e]);
                    this.aio.setYAxis(m, this.akc._inner[e]);
                    m.itemsSource = l.itemsSource;
                    this.aio.setOpenMemberPath(m, this.bf.dataSeries._inner[j].getMemberPathFor(11));
                    this.aio.setHighMemberPath(m, this.bf.dataSeries._inner[j].getMemberPathFor(12));
                    this.aio.setLowMemberPath(m, this.bf.dataSeries._inner[j].getMemberPathFor(13));
                    this.aio.setCloseMemberPath(m, this.bf.dataSeries._inner[j].getMemberPathFor(14));
                    this.aio.setVolumeMemberPath(m, this.bf.dataSeries._inner[j].getMemberPathFor(15));
                    m.title = l.title + " " + i;
                    m.vf = ArrayExtension.getModulus$1(Brush.$, this.ag7, e);
                    m.jp = this.ak3;
                    if (this.ajt(m)) {
                        this.aio.setNegativeBrush(m, ArrayExtension.getModulus$1(Brush.$, this.ag8, e));
                        this.aio.setDisplayType(m, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.aiq, e));
                    }
                    if (this.aly != -2147483648 && this.ajt(m)) {
                        this.aio.setPeriodOverride(m, this.aly);
                    }
                    if (this.ajt(m)) {
                        this.aio.setSmoothingPeriod(m, this.al1);
                    }
                    if (this.ajt(m)) {
                        this.aio.setSignalPeriod(m, this.al0);
                    }
                    if (this.ajt(m)) {
                        this.aio.setShortPeriod(m, this.alz);
                        this.aio.setLongPeriod(m, this.alx);
                    }
                    this.u6(m, e);
                    f.add(m);
                }
                let o = this.ht(i, false);
                for (let p = 0; p < f.count; p++) {
                    let q = f._inner[p];
                    g.series.add(q);
                }
                if (o != null) {
                    for (let r = 0; r < o.count; r++) {
                        let s = o._inner[r];
                        g.series.add(s);
                        this.u6(s, r);
                    }
                }
            }
        }
        ai8(indicatorName_) {
            return (this.externalObject.createIndicator(indicatorName_ + 'Indicator').i);
        }
        aja(a) {
            return this.ai8(EnumUtil.getName(FinancialIndicatorType_$type, a));
        }
        ap5(a) {
            if (this.ahy == null) {
                return;
            }
            let b = this.xAxis;
            if (b.actualMinimumValue > b.actualMaximumValue) {
                return;
            }
            this.ahy.as = b.actualMinimumValue;
            this.ahy.ar = b.actualMaximumValue;
            if (a) {
                this.ahy.au = b.visibleMinimum;
                this.ahy.at = b.visibleMaximum;
            }
            this.ahy.bn();
        }
        lu() {
            let a = ((() => {
                let $ret = new FinancialChartVisualData();
                $ret.mainChart = super.lu();
                $ret.volumeChart = this.volumeChart == null ? null : this.volumeChart.ys();
                $ret.toolbar = this.ahy == null ? null : this.ahy.aj();
                $ret.zoomChart = this.zoomSliderChart == null ? null : this.zoomSliderChart.ys();
                return $ret;
            })());
            if (this.indicatorCharts != null) {
                a.indicatorCharts = new List$1(Base.$, 0);
                for (let b of fromEnum(this.indicatorCharts)) {
                    a.indicatorCharts.add1(b.ys());
                }
            }
            if (this.dataChart != null) {
                a.mainChartLeft = this.aqe(this.dataChart).x;
                a.mainChartTop = this.aqe(this.dataChart).y;
            }
            if (this.volumeChart != null) {
                a.volumeChartLeft = this.aqe(this.volumeChart).x;
                a.volumeChartTop = this.aqe(this.volumeChart).y;
            }
            if (this.zoomSliderChart != null) {
                a.zoomChartLeft = this.aqe(this.zoomSliderChart).x;
                a.zoomChartTop = this.aqe(this.zoomSliderChart).y;
            }
            if (this.ahy != null) {
                let c = this.aqf(this.ahy);
                a.toolbarLeft = c.left;
                a.toolbarTop = c.top;
                a.toolbarWidth = c.width;
                a.toolbarHeight = c.height;
            }
            if (this.indicatorCharts != null) {
                a.indicatorChartLefts = new List$1(Number_$type, 0);
                a.indicatorChartTops = new List$1(Number_$type, 0);
                for (let d of fromEnum(this.indicatorCharts)) {
                    a.indicatorChartLefts.add(this.aqe(d).x);
                    a.indicatorChartTops.add(this.aqe(d).y);
                }
            }
            let e = this.aqh();
            a.legendLeft = e.left;
            a.legendTop = e.top;
            a.legendWidth = e.width;
            a.legendHeight = e.height;
            a.legend = this.aii == null ? null : this.aii.exportVisualData();
            return a;
        }
        amn() {
            let a = this.lu();
            a.scaleByViewport();
            return a.serialize();
        }
        ai9(overlayName_) {
            return (this.externalObject.createOverlay(overlayName_ + 'Overlay').i);
        }
        ap4() {
            if (this.dataChart == null) {
                return;
            }
            let a = new List$1(Series.$, 0);
            for (let b of fromEnum(this.dataChart.series)) {
                if (this.ajv(b)) {
                    a.add(b);
                }
            }
            for (let c of fromEnum(a)) {
                this.dataChart.series.remove(c);
            }
            if (this.aig == null) {
                return;
            }
            let d = new List$1(Series.$, 0);
            let e = -1;
            for (let f = 0; f < this.dataChart.series.count; f++) {
                let g = this.dataChart.series._inner[f];
                if (this.ajv(g) || g.es) {
                    continue;
                }
                e++;
                for (let h = 0; h < this.aig.count; h++) {
                    let i = this.aig._inner[h];
                    let j;
                    switch (i) {
                        case 1:
                            j = this.ai9(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                        default:
                        case 0:
                            j = this.ai9(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                    }
                    j.name = g.name + "_" + EnumUtil.getName(FinancialOverlayType_$type, i);
                    this.ait.setXAxis(j, this.xAxis);
                    this.ait.setYAxis(j, this.yAxis);
                    j.itemsSource = g.itemsSource;
                    let k = e * this.aig.count + h;
                    j.vf = ArrayExtension.getModulus$1(Brush.$, this.ahb, k);
                    j.vv = ArrayExtension.getModulus$1(Brush.$, this.ahc, k);
                    j.jp = this.ak5;
                    j.title = g.title + " " + EnumUtil.getName(FinancialOverlayType_$type, i);
                    let l = g;
                    if (l == null) {
                        continue;
                    }
                    let m = this.bf.dataSeries._inner[e];
                    this.ait.setOpenMemberPath(j, m.getMemberPathFor(11));
                    this.ait.setHighMemberPath(j, m.getMemberPathFor(12));
                    this.ait.setLowMemberPath(j, m.getMemberPathFor(13));
                    this.ait.setCloseMemberPath(j, m.getMemberPathFor(14));
                    this.ait.setVolumeMemberPath(j, m.getMemberPathFor(15));
                    d.add(j);
                }
            }
            let n = new Array(this.dataChart.series.count);
            this.dataChart.series.copyTo(n, 0);
            this.dataChart.skipDataCleanup = true;
            this.dataChart.series.clear();
            this.dataChart.skipDataCleanup = false;
            for (let o = 0; o < n.length; o++) {
                n[o].index = -1;
            }
            d.o(n);
            for (let p = 0; p < d.count; p++) {
                let q = d._inner[p];
                this.dataChart.series.add(q);
                this.u6(q, p);
            }
        }
        ap2() {
            if (this.aj1) {
                return;
            }
            this.aj1 = true;
            if (this.indicatorCharts != null) {
                let a = this.indicatorCharts;
                this.indicatorCharts = null;
                for (let b of fromEnum(a)) {
                    this.api(b);
                }
            }
            if ((this.aie == null || this.aie.count == 0) && (this.customIndicatorNames == null || this.customIndicatorNames.count == 0)) {
                this.indicatorCharts = null;
                if (this.akc != null) {
                    this.akc.clear();
                }
                if (this.ake != null) {
                    this.ake.clear();
                }
                this.apt();
                this.ap3();
                this.aj1 = false;
                return;
            }
            if (this.indicatorCharts == null) {
                this.indicatorCharts = new List$1(XamDataChart.$, 0);
            }
            this.indicatorCharts.clear();
            this.akc.clear();
            this.ake.clear();
            let c = this.aie == null ? 0 : this.aie.count;
            let d = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let e = c + d;
            for (let f = 0; f < e; f++) {
                let g = new XamDataChart();
                this.indicatorCharts.add(g);
                this.apg(g, null);
                let h = f >= c;
                if (h) {
                    g.l3 = this.customIndicatorNames._inner[f - c];
                }
                else {
                    g.l3 = this.amp(this.aie._inner[f]);
                }
                if (this.indicatorAxis != null) {
                    let i;
                    let j;
                    if (f == 0) {
                        i = this.indicatorAxis;
                        j = this.indicatorXAxis;
                    }
                    else {
                        i = new NumericYAxis();
                        if (!this.indicatorXAxis.ce) {
                            j = this.ahk(0);
                        }
                        else {
                            j = this.ahk(1);
                        }
                    }
                    j.name = "indicatorXAxis_" + f;
                    i.name = "indicatorAxis_" + f;
                    g.axes.add(i);
                    g.axes.add(j);
                    this.akc.add(i);
                    this.ake.add(j);
                    if (this.gh) {
                        this.afb(i);
                    }
                    if (this.gh) {
                        this.ae9(j);
                    }
                }
            }
            this.apt();
            this.apn();
            if (this.ahy != null) {
                this.ahy.ae = this.aie;
            }
            this.aor();
            this.ap3();
            this.aj1 = false;
        }
        uy() {
            super.uy();
            this.ae9(this.xAxis);
            this.ae9(this.volumeXAxis);
            if (this.ake != null) {
                for (let a of fromEnum(this.ake)) {
                    this.ae9(a);
                }
            }
            this.afb(this.yAxis);
            this.afb(this.volumeAxis);
            if (this.akc != null) {
                for (let b of fromEnum(this.akc)) {
                    this.afb(b);
                }
            }
            this.ae9(this.zoomSliderXAxis);
            this.afb(this.zoomSliderAxis);
        }
        get_ha() {
            return !this.ajz;
        }
        get aj7() {
            return (this.externalObject._dynamicContent);
        }
        aqa(a, b) {
            this.apw(a, b, this.alo);
            this.aor();
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                this.zoomSliderChart.axes.add(this.zoomSliderXAxis);
            }
            this.app();
            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
            this.apu();
            this.aqb(a, b);
        }
        app() {
            if (this.dataChart == null || this.zoomSliderChart == null) {
                return;
            }
            this.zoomSliderChart.series.clear();
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (this.ajv(c) || c.es) {
                    continue;
                }
                let d;
                let e = this.aic;
                e = this.aib(e);
                let f = this.alw(c, b);
                if (e == 1) {
                    switch (this.ah2(this.bf != null && this.bf.dataSeries != null && this.bf.dataSeries.count > f ? this.bf.dataSeries._inner[f] : null)) {
                        case 1:
                            e = 2;
                            break;
                        case 2:
                            e = 3;
                            break;
                        case 3:
                            e = 4;
                            break;
                        case 4:
                            e = 5;
                            break;
                    }
                }
                switch (e) {
                    case 2:
                        d = this.ai7();
                        this.aik.setDisplayType(d, 1);
                        break;
                    case 3:
                        d = this.ai7();
                        this.aik.setDisplayType(d, 0);
                        break;
                    case 5:
                        d = this.ai6();
                        break;
                    case 6:
                        d = this.ai4();
                        break;
                    default:
                    case 4:
                        d = this.ai5();
                        break;
                }
                let g = this.bf != null && this.bf.dataSeries != null && this.bf.dataSeries.count > f ? this.bf.dataSeries._inner[f] : null;
                if (d.ey && !d.e6) {
                    this.aim.setCategoryMode(d, 1);
                    this.aim.setXAxis(d, this.zoomSliderXAxis);
                    this.aim.setYAxis(d, this.zoomSliderAxis);
                    this.aim.setValueMemberPath(d, g == null ? null : this.amq(g));
                }
                else if (d.e6) {
                    this.aik.setCategoryMode(d, 1);
                    this.aik.setXAxis(d, this.zoomSliderXAxis);
                    this.aik.setYAxis(d, this.zoomSliderAxis);
                    if (g != null) {
                        this.aik.setOpenMemberPath(d, g.getMemberPathFor(11));
                        this.aik.setHighMemberPath(d, g.getMemberPathFor(12));
                        this.aik.setLowMemberPath(d, g.getMemberPathFor(13));
                        this.aik.setCloseMemberPath(d, g.getMemberPathFor(14));
                        this.aik.setVolumeMemberPath(d, g.getMemberPathFor(15));
                    }
                }
                d.name = "zoomSliderSeries_" + f;
                d.itemsSource = c.itemsSource;
                d.title = c.title;
                d.jp = this.kb;
                a.add(d);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.zoomSliderChart.series.add(i);
                this.u6(i, h);
            }
        }
        vm(a, b, c) {
            super.vm(a, b, c);
            if (a == null || !b) {
                return;
            }
            let d = true;
            let e = true;
            switch (c) {
                case "Brushes":
                case "Outlines":
                    d = e = false;
                    break;
            }
            if (this.indicatorCharts != null && d) {
                for (let f of fromEnum(this.indicatorCharts)) {
                    a(f);
                }
            }
            if (this.volumeChart != null && e) {
                a(this.volumeChart);
            }
            if (this.zoomSliderChart != null) {
                a(this.zoomSliderChart);
            }
        }
        ao1(a, b) {
            let c = b;
            let d = a;
            let e = -1;
            if (this.indicatorCharts != null) {
                e = this.indicatorCharts.indexOf(d.c9);
            }
            e -= this.aie == null ? 0 : this.aie.count;
            if (this.applyCustomIndicators != null) {
                this.applyCustomIndicators(this, new FinancialChartCustomIndicatorArgs(c, d, e));
            }
        }
        apy(a, b, c) {
            if (a != null) {
                if (b != null) {
                    a.axes.remove(b);
                }
                a.axes.add(c);
            }
            if (this.gh) {
                this.ae9(c);
            }
        }
        get aj6() {
            return TypeRegistrar.isRegistered("IgxZoomSliderComponent");
        }
        ao2(a, b) {
            this.ap2();
        }
        ajx(a, b) {
            if (b <= (0)) {
                return false;
            }
            switch (a) {
                case 5: return true;
                case 4:
                case 3: return b >= timeSpanFromDays(365);
                case 2: return b >= timeSpanFromDays(180);
                case 1: return b >= timeSpanFromDays(90);
                case 0: return b >= timeSpanFromDays(30);
            }
            return false;
        }
        aps() {
            let a = this.ahw != null ? this.ahw : new FinancialChartRangeSelectorOptionCollection(1, [5, 4, 3, 2, 1, 0]);
            let b = new FinancialChartRangeSelectorOptionCollection(0);
            let c = this.xAxis;
            let d = +(c.actualMaximumValue) - +(c.actualMinimumValue);
            for (let e of fromEnum(a)) {
                if (this.ajx(e, d)) {
                    b.add(e);
                }
            }
            this.ahv = b;
            if (this.ahy != null) {
                this.ahy.u = this.ahv;
            }
        }
        ao6(a, b) {
            this.aps();
        }
        apb(a, b) {
            this.aig = this.ahy.ag;
        }
        apa(a, b) {
            this.aie = this.ahy.ae;
        }
        ao4(a, b) {
            this.ap2();
        }
        ao5(a, b) {
            this.ap4();
        }
        apf(a, b) {
            let c = a;
            if (c.bg == null) {
                return;
            }
            if (this.ajz) {
                this.apr(c.bg);
            }
        }
        api(a) {
            SyncManager.e(a);
            a.axes.clear();
            a.series.clear();
            a.gridAreaRectChanged = delegateRemove(a.gridAreaRectChanged, runOn(this, this.ao3));
            a.provideContainer(null);
            if (this.volumeChart == null && this.indicatorCharts == null) {
                this.yAxis.eu = this.volumeAxis.eu = this.indicatorAxis.eu = 0;
                this.xAxis.az.visibility = this.agx;
            }
        }
        apg(a, b) {
            let c = a != this.zoomSliderChart;
            if (c) {
                if (this.dataChart != null) {
                    a.wl = new Rect(0, this.dataChart.v4.x, a.wl.y, this.dataChart.v4.width, a.wl.height);
                }
                let d = ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = "one";
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })());
                SyncManager.d(a, d);
                SyncManager.c(a);
            }
            a.gridAreaRectChanged = delegateCombine(a.gridAreaRectChanged, runOn(this, this.ao3));
            this.u0(a, b);
        }
        aor() {
            if (this.indicatorCharts != null || this.volumeChart != null) {
                this.ae7(this.xAxis, (a) => a.visibility = 1);
            }
            for (let a = 0; a < this.ake.count; a++) {
                let b = this.ake._inner[a];
                let c = a < this.ake.count - 1 || this.volumeChart != null;
                this.ae7(b, (d) => d.visibility = c ? 1 : 0);
            }
        }
        apw(a, b, c) {
            if (a != null) {
                this.api(a);
            }
            if (b != null) {
                this.apg(b, c);
            }
        }
        ap8(a, b) {
            this.apw(a, b, this.aln);
            this.aor();
            if (this.volumeChart != null) {
                if (this.volumeAxis != null) {
                    this.volumeChart.axes.add(this.volumeAxis);
                    this.volumeChart.axes.add(this.volumeXAxis);
                }
                this.apo();
                this.volumeXAxis.itemsSource = this.xAxis.itemsSource;
            }
            this.ap9(a, b);
        }
        ao7(a, b) {
            this.ap6();
        }
        ap6() {
            if (this.ahy == null || +(this.ahy.au) == +(dateMaxValue()) || +(this.ahy.at) == +(dateMinValue()) || this.dataChart == null) {
                return;
            }
            let a = this.xAxis;
            let b = a.getWindowRectForSelection(this.ahy.au, this.ahy.at);
            if (b.width == 0 || isNaN_(b.width) || isInfinity(b.width)) {
                return;
            }
            this.aj0 = true;
            this.dataChart.wl = new Rect(0, b.left, this.dataChart.wl.top, b.width, this.dataChart.wl.height);
            if (this.ajg != null) {
                this.ajg.windowRect = this.dataChart.v4;
            }
            if (this.ajz) {
                this.apr(this.dataChart);
            }
            this.aj0 = false;
        }
        ape(a, b) {
            this.aps();
            this.ap5(!this.aj0);
        }
        ao0(a, b) {
            if (!this.aj0) {
                if (this.ajz) {
                    this.apr(a);
                }
                let c = false;
                let d = this.v2(() => this.ap5(true), c);
                c = d.p1;
                if (this.ajg != null) {
                    this.ajg.windowRect = this.dataChart.v4;
                }
            }
        }
        ap0(a, b, c, d) {
            if (a == null || b == null) {
                return;
            }
            if (c != -1) {
                this.aj0 = true;
                a.wl = new Rect(0, d, a.v4.top, c, a.v4.height);
                this.aj0 = false;
            }
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            let g = new Rect(0, 0, 0, 1, 1);
            let h = new ScalerParams(0, g, g, this.yAxis.ch, a.v8);
            for (let i of fromEnum(a.series)) {
                h.b = i.iy();
                let j = i.az(a.v4);
                let k = j == null || j.c == 1.7976931348623157E+308 || isNaN_(j.c);
                if (k) {
                    continue;
                }
                let l = b.el(j.c, h);
                let m = b.el(j.b, h);
                f = Math.max(f, l);
                e = Math.min(e, m);
            }
            let n = a.v4.width;
            if (c != -1) {
                n = c;
            }
            let o = a.v4.left;
            if (d != -1) {
                o = d;
            }
            if (e == 1.7976931348623157E+308 || f == -1.7976931348623157E+308 || isNaN_(e) || isNaN_(f)) {
                return;
            }
            this.aj0 = true;
            let p = new Rect(0, o, e, n, f - e);
            a.wl = p;
            this.aj0 = false;
        }
        apz(a) {
            if (a == null) {
                return;
            }
            if (a == this.dataChart) {
                this.ap0(this.dataChart, this.yAxis, -1, -1);
                if (this.volumeChart != null) {
                    this.ap0(this.volumeChart, this.volumeAxis, this.dataChart.v4.width, this.dataChart.v4.left);
                }
            }
            else if (a == this.volumeChart) {
                this.ap0(this.volumeChart, this.volumeAxis, -1, -1);
                this.ap0(this.dataChart, this.yAxis, this.volumeChart.v4.width, this.volumeChart.v4.left);
            }
        }
        apr(a) {
            this.v1(() => this.apz(a));
        }
        ao8(a, b) {
            if (this.ajz) {
                this.apr(a);
            }
        }
        ap7() {
            if (!this.aj7) {
                return;
            }
            this.aou();
            if (this.aic == 0) {
                this.resetZoom();
                this.zoomSliderChart = null;
                this.alo.rootWrapper.removeChildren();
            }
            else if (this.zoomSliderChart == null) {
                this.zoomSliderChart = ((() => {
                    let $ret = new XamDataChart();
                    $ret.name = "ZoomSliderChart";
                    return $ret;
                })());
                this.apu();
            }
            else {
                this.app();
            }
        }
        aou() {
            let container_ = this.alo.rootWrapper.getNativeElement();
            let containerParent_ = container_.parentElement;
            if (this.ajg != null && containerParent_ != null && !this.aj8) {
                this.aj8 = true;
                if (TypeRegistrar.isRegistered("IgxZoomSliderComponent")) {
                    let z_ = this.ajg;
                    let f_ = this.externalObject;
                    let sliderComponent_ = TypeRegistrar.get("IgxZoomSliderComponent");
                    let sliderInstance_ = TypeRegistrar.create("IgxZoomSliderComponent");
                    sliderInstance_._implementation = z_;
                    sliderComponent_._staticStyling(container_, sliderInstance_, f_);
                }
            }
        }
        ap1() {
            if (this.ah7 != 1) {
                return;
            }
            this.afd((a) => {
                let b;
                b = a.breaks;
                b.clear();
                if (this.xAxisBreaks == null) {
                    return;
                }
                for (let c of fromEnum(this.xAxisBreaks)) {
                    b.add(c);
                }
            });
        }
        wu(a, b, c) {
            super.wu(a, b, c);
            if (this.bf.dataSeries.count > 0) {
                if (this.ah7 == 1 && stringIsNullOrEmpty(this.no)) {
                    this.ce.setXMemberPath(a, c.getMemberPathFor(17));
                }
                if (stringIsNullOrEmpty(this.nq)) {
                    this.ce.setYMemberPath(a, this.amq(c));
                }
                if (stringIsNullOrEmpty(this.nb)) {
                    this.ce.setLabelMemberPath(a, this.amq(c));
                }
                if (stringIsNullOrEmpty(this.m7)) {
                    this.ce.setContentMemberPath(a, this.amq(c));
                }
            }
        }
        amp(a) {
            switch (a) {
                case 0: return "Absolute Volume Oscillator";
                case 1: return "Accumulation/Distribution Indicator";
                case 2: return "Average Directional Index";
                case 3: return "Average True Range Indicator";
                case 4: return "Bollinger Bandwidth";
                case 5: return "Chaikin Oscillator";
                case 6: return "Chaikin Volatility Indicator";
                case 7: return "Commodity Channel Index";
                case 8: return "Detrended Price Oscillator";
                case 9: return "Ease of Movement Indicator";
                case 10: return "Fast Stochastic Oscillator";
                case 11: return "Force Index Indicator";
                case 12: return "Full Stochastic Oscillator";
                case 13: return "Market Facilitation Index";
                case 14: return "Mass Index Indicator";
                case 15: return "Median Price Indicator";
                case 16: return "Money Flow Index";
                case 17: return "MACD Indicator";
                case 18: return "Negative Volume Index";
                case 19: return "On Balance Volume Indicator";
                case 20: return "Percentage Price Oscillator";
                case 21: return "Percentage Volume Oscillator";
                case 22: return "Positive Volume Index";
                case 23: return "Price Volume Trend";
                case 24: return "ROC - Rate of Change Indicator";
                case 25: return "RSI - Relative Strength Index";
                case 26: return "Slow Stochastic Oscillator";
                case 27: return "Standard Deviation Indicator";
                case 28: return "Stoch RSI";
                case 29: return "TRIX Indicator";
                case 30: return "Typical Price Indicator";
                case 31: return "Ultimate Oscillator";
                case 32: return "Weighted Close Indicator";
                case 33: return "Williams %R Indicator";
                default: return "Unknown";
            }
        }
        ae9(a) {
            super.ae9(a);
            let b = a;
            this.aph(b);
            if (a.bg != null) {
                for (let c of fromEnum(a.bg.series)) {
                    if (this.ajs(c)) {
                        this.aim.setXAxis(c, b);
                    }
                    else if (this.ajw(c)) {
                        this.aik.setXAxis(c, b);
                    }
                    else if (this.ajt(c)) {
                        this.aio.setXAxis(c, b);
                    }
                    else if (this.ajv(c)) {
                        this.ait.setXAxis(c, b);
                    }
                }
            }
            this.apl((d) => {
                d.zoomMaximumCategoryRange = this.ak8;
                d.zoomMaximumItemSpan = this.ak9;
                d.zoomToCategoryRange = this.ala;
                d.zoomToCategoryStart = this.alb;
                d.zoomToItemSpan = this.alc;
            });
            let d = a == this.zoomSliderXAxis;
            if (d) {
                a.jz = this.aqd;
                a.et = this.alj;
                this.ae7(a, (e) => e.visibility = 1);
            }
            let e = a;
            e.minimumValue = this.akk;
            e.maximumValue = this.akj;
            a.b1 = this.aj2;
        }
        afb(a) {
            super.afb(a);
            if (a.bg != null && a == this.yAxis) {
                for (let b of fromEnum(a.bg.series)) {
                    if (this.ajs(b)) {
                        this.aim.setYAxis(b, this.yAxis);
                    }
                    else if (this.ajw(b)) {
                        this.aik.setYAxis(b, this.yAxis);
                    }
                    else if (this.ajt(b)) {
                        this.aio.setYAxis(b, this.yAxis);
                    }
                    else if (this.ajv(b)) {
                        this.ait.setYAxis(b, this.yAxis);
                    }
                }
            }
            a.lf = this.aj3;
            a.mc = this.alh;
            a.mb = this.alg;
            if (a == this.yAxis) {
                a.l8 = this.alf;
            }
            let c = a == this.zoomSliderAxis;
            if (c) {
                this.ae7(a, (d) => d.visibility = 1);
            }
            a.b1 = this.aj4;
        }
        aph(a) {
            a.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            a.f2 = XYChart.acw(a, this.bf.dataSeries);
            if (this.bf.dataSeries.count > 0) {
                let b = this.bf.dataSeries._inner[0].getMemberPathFor(17);
                a.h1(b);
            }
        }
        u6(a, b) {
            if (a == null) {
                return;
            }
            let c = this.zoomSliderChart == a.c9;
            let d = this.dataChart != null && this.dataChart.series.contains(a);
            if (d && !a.es && !this.ajv(a)) {
                a.l3 = "Financial Series";
            }
            super.u6(a, b);
            if ((d || c) && a.fm) {
                a.r3(this.ag9 != null ? ArrayExtension.getModulus$1(Brush.$, this.ag9, b) : null, this.aha != null ? ArrayExtension.getModulus$1(Brush.$, this.aha, b) : null);
            }
            let e = this.ajt(a);
            if (this.ajv(a)) {
                a.vf = this.ahb != null ? ArrayExtension.getModulus$1(Brush.$, this.ahb, b) : null;
                a.vv = this.ahc != null ? ArrayExtension.getModulus$1(Brush.$, this.ahc, b) : null;
                a.jp = this.ak5;
            }
            else if (e) {
                a.vf = this.ag7 != null ? ArrayExtension.getModulus$1(Brush.$, this.ag7, b) : null;
                a.jp = this.ak3;
            }
            else if (!a.es && (d || c)) {
                a.vf = this.z != null ? ArrayExtension.getModulus$1(Brush.$, this.z, b) : null;
                a.vv = this.ad != null ? ArrayExtension.getModulus$1(Brush.$, this.ad, b) : null;
            }
            let f = this.volumeChart != null && this.volumeChart == a.c9;
            if (f) {
                a.jp = this.ak7;
            }
            a.legend = c || f || e || !a.isUsableInLegend ? null : this.legend != null ? this.legend : this.aju ? this.aii : null;
        }
        u7(a, b) {
            super.u7(a, b);
            if (a == null) {
                return;
            }
        }
        vu(a, b, c) {
            super.vu(a, b, c);
            switch (a) {
                case "YAxisIsLogarithmic":
                    this.yAxis.lo = this.aj5;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.lo = this.aj5;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.lo = this.aj5;
                    }
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.mm = this.al3;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.mm = this.al3;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.mm = this.al3;
                    }
                    break;
                case "VolumeType":
                    let d = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, b);
                    if (this.ah5 == 0) {
                        this.volumeChart = null;
                    }
                    else if (this.volumeChart == null) {
                        this.volumeChart = ((() => {
                            let $ret = new XamDataChart();
                            $ret.name = "VolumeChart";
                            return $ret;
                        })());
                    }
                    else {
                        this.apo();
                    }
                    break;
                case "VolumeChart":
                    this.ap8(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "DataChart":
                    if (typeCast(XamDataChart.$, b) !== null) {
                        let e = b;
                        e.gridAreaRectChanged = delegateRemove(e.gridAreaRectChanged, runOn(this, this.ao3));
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.ao0));
                        e.seriesDataUpdated = delegateRemove(e.seriesDataUpdated, runOn(this, this.ao8));
                    }
                    if (this.dataChart != null) {
                        let f = this.dataChart;
                        f.gridAreaRectChanged = delegateCombine(f.gridAreaRectChanged, runOn(this, this.ao3));
                        let g = this.dataChart;
                        g.actualWindowRectChanged = delegateCombine(g.actualWindowRectChanged, runOn(this, this.ao0));
                        let h = this.dataChart;
                        h.seriesDataUpdated = delegateCombine(h.seriesDataUpdated, runOn(this, this.ao8));
                    }
                    this.ap7();
                    break;
                case "XAxisMode":
                    this.xAxis = this.ahk(this.ah7);
                    this.xAxis.name = "xAxis";
                    this.volumeXAxis = this.ahk(this.ah7);
                    this.volumeXAxis.name = "volumeXAxis";
                    this.indicatorXAxis = this.ahk(this.ah7);
                    this.indicatorXAxis.name = "indicatorXAxis_0";
                    this.zoomSliderXAxis = this.ahk(this.ah7);
                    this.zoomSliderXAxis.name = "zoomSliderXAxis";
                    this.ae7(this.zoomSliderXAxis, (i) => i.visibility = 1);
                    this.aor();
                    if (this.ah7 == 1) {
                        this.ap1();
                    }
                    break;
                case "YAxisMode":
                    this.yAxis = this.aiy(this.ah9);
                    this.yAxis.name = "yAxis";
                    this.zoomSliderAxis = this.aiy(this.ah9);
                    this.zoomSliderAxis.name = "zoomSliderAxis";
                    this.volumeAxis = this.aiy(this.ah9);
                    this.volumeAxis.name = "volumeAxis";
                    break;
                case "Toolbar":
                    let i = typeCast(FinancialChartToolbar.$, b);
                    if (i != null) {
                        i.rangeChanged = delegateRemove(i.rangeChanged, runOn(this, this.ao7));
                        i.indicatorTypesChanged = delegateRemove(i.indicatorTypesChanged, runOn(this, this.apa));
                        i.overlayTypesChanged = delegateRemove(i.overlayTypesChanged, runOn(this, this.apb));
                    }
                    if (this.ahy != null) {
                        this.ahy.ae = this.aie;
                        this.ahy.ag = this.aig;
                        this.ahy.u = this.ahv;
                        this.ap5(true);
                        let j = this.ahy;
                        j.rangeChanged = delegateCombine(j.rangeChanged, runOn(this, this.ao7));
                        let k = this.ahy;
                        k.indicatorTypesChanged = delegateCombine(k.indicatorTypesChanged, runOn(this, this.apa));
                        let l = this.ahy;
                        l.overlayTypesChanged = delegateCombine(l.overlayTypesChanged, runOn(this, this.apb));
                    }
                    break;
                case "XAxis":
                    let m = typeCast(CategoryAxisBase.$, b);
                    if (m != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(m);
                        }
                    }
                    let n = typeCast(ITimeRangeSelectorAxis_$type, b);
                    if (n != null) {
                        n.visibleRangeChanged = delegateRemove(n.visibleRangeChanged, runOn(this, this.ape));
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.xAxis);
                    }
                    if (this.gh) {
                        this.ae9(this.xAxis);
                        this.un();
                    }
                    this.ap5(false);
                    this.ap6();
                    this.aps();
                    let o = this.xAxis;
                    o.visibleRangeChanged = delegateCombine(o.visibleRangeChanged, runOn(this, this.ape));
                    break;
                case "XAxisZoomMaximumCategoryRange":
                    this.apl((p) => p.zoomMaximumCategoryRange = this.ak8);
                    break;
                case "XAxisZoomMaximumItemSpan":
                    this.apl((p) => p.zoomMaximumItemSpan = this.ak9);
                    break;
                case "XAxisZoomToCategoryRange":
                    this.apl((p) => p.zoomToCategoryRange = this.ala);
                    break;
                case "XAxisZoomToCategoryStart":
                    this.apl((p) => p.zoomToCategoryStart = this.alb);
                    break;
                case "XAxisZoomToItemSpan":
                    this.apl((p) => p.zoomToItemSpan = this.alc);
                    break;
                case "ChartType":
                    this.ur();
                    break;
                case "VolumeXAxis":
                    this.apy(this.volumeChart, typeCast(Axis.$, b), this.volumeXAxis);
                    break;
                case "ZoomSliderXAxis":
                    this.apy(this.zoomSliderChart, typeCast(Axis.$, b), this.zoomSliderXAxis);
                    break;
                case "IndicatorXAxis":
                    this.ap2();
                    break;
                case "YAxis":
                    let p = typeCast(NumericYAxis.$, b);
                    if (p != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(p);
                        }
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.yAxis);
                    }
                    if (this.gh) {
                        this.afb(this.yAxis);
                        this.afb(this.yAxis);
                    }
                    let q = this.yAxis;
                    q.rangeChanged = delegateCombine(q.rangeChanged, runOn(this, this.apf));
                    break;
                case "VolumeAxis":
                    let r = typeCast(Axis.$, b);
                    if (this.volumeChart != null && r != null) {
                        this.volumeChart.axes.remove(r);
                    }
                    if (this.volumeChart != null && this.volumeAxis != null) {
                        this.volumeChart.axes.add(this.volumeAxis);
                        this.apo();
                    }
                    if (this.gh) {
                        this.afb(this.volumeAxis);
                    }
                    let s = this.volumeAxis;
                    s.rangeChanged = delegateCombine(s.rangeChanged, runOn(this, this.apf));
                    break;
                case "IndicatorAxis":
                    if (this.indicatorCharts != null) {
                        for (let t = 0; t < this.indicatorCharts.count; t++) {
                            let u = this.indicatorCharts._inner[t];
                            let v = new List$1(Axis.$, 0);
                            for (let w of fromEnum(u.axes)) {
                                if (typeCast(NumericYAxis.$, w) !== null) {
                                    v.add(w);
                                }
                            }
                            for (let x of fromEnum(v)) {
                                u.axes.remove(x);
                            }
                            let y = null;
                            if (t == 0) {
                                y = this.indicatorAxis;
                            }
                            else if (this.ah9 == 1) {
                                y = this.aiy(this.ah9);
                            }
                            else if (typeCast(NumericYAxis.$, this.indicatorAxis) !== null) {
                                y = new NumericYAxis();
                            }
                            if (y != null) {
                                u.axes.add(y);
                            }
                            if (this.gh) {
                                this.afb(y);
                            }
                        }
                    }
                    break;
                case "IsWindowSyncedToVisibleRange":
                    if (this.dataChart != null) {
                        this.dataChart.xj = this.hb && this.ha;
                    }
                    if (this.volumeChart != null) {
                        this.volumeChart.xj = this.hb && this.ha;
                    }
                    if (this.ajz) {
                        this.apz(this.dataChart);
                    }
                    else {
                        this.volumeChart.yq = 1;
                    }
                    break;
                case "IndicatorTypes":
                    let z = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), b);
                    if (z != null) {
                        z.collectionChanged = delegateRemove(z.collectionChanged, runOn(this, this.ao4));
                    }
                    let aa = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), c);
                    if (aa != null) {
                        aa.collectionChanged = delegateCombine(aa.collectionChanged, runOn(this, this.ao4));
                    }
                    this.ap2();
                    break;
                case "OverlayTypes":
                    let ab = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), b);
                    if (ab != null) {
                        ab.collectionChanged = delegateRemove(ab.collectionChanged, runOn(this, this.ao5));
                    }
                    let ac = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), c);
                    if (ac != null) {
                        ac.collectionChanged = delegateCombine(ac.collectionChanged, runOn(this, this.ao5));
                    }
                    this.ap4();
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.afi((ad) => ad.lf = this.aj3);
                    break;
                case "YAxisMinimumValue":
                    this.afj((ad) => ad.mc = this.alh, false);
                    break;
                case "YAxisMaximumValue":
                    this.afj((ad) => ad.mb = this.alg, false);
                    break;
                case "YAxisInterval":
                    this.afj((ad) => ad.l8 = this.alf, false);
                    break;
                case "Thickness":
                case "ZoomSliderType":
                    this.ap7();
                    break;
                case "ZoomSliderChart":
                    if (!this.aj6) {
                        return;
                    }
                    this.aqa(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.aox((ad, ae) => {
                        if (ad.fm) {
                            ad.r3(this.ag9 != null ? ArrayExtension.getModulus$1(Brush.$, this.ag9, ae) : null, this.aha != null ? ArrayExtension.getModulus$1(Brush.$, this.aha, ae) : null);
                        }
                    }, true);
                    break;
                case "OverlayBrushes":
                    this.aow((ad, ae) => ad.vf = this.ahb != null ? ArrayExtension.getModulus$1(Brush.$, this.ahb, ae) : null);
                    break;
                case "OverlayOutlines":
                    this.aow((ad, ae) => ad.vv = this.ahc != null ? ArrayExtension.getModulus$1(Brush.$, this.ahc, ae) : null);
                    break;
                case "OverlayThickness":
                    this.aow((ad, ae) => ad.jp = this.ak5);
                    break;
                case "OverlayMultiplier":
                    this.aow((ad, ae) => this.ait.setMultiplier(ad, this.ak4));
                    break;
                case "VolumeBrushes":
                    this.aoy((ad, ae) => ad.vf = ArrayExtension.getModulus$1(Brush.$, this.ahd, ae));
                    break;
                case "VolumeOutlines":
                    this.aoy((ad, ae) => ad.vv = ArrayExtension.getModulus$1(Brush.$, this.ahe, ae));
                    break;
                case "VolumeThickness":
                    this.aoy((ad, ae) => ad.jp = this.ak7);
                    break;
                case "IndicatorNegativeBrushes":
                    this.aov((ad, ae) => this.aio.setNegativeBrush(ad, ArrayExtension.getModulus$1(Brush.$, this.ag8, ae)));
                    break;
                case "IndicatorBrushes":
                    this.aov((ad, ae) => ad.vf = ArrayExtension.getModulus$1(Brush.$, this.ag7, ae));
                    break;
                case "IndicatorThickness":
                    this.aov((ad, ae) => ad.jp = this.ak3);
                    break;
                case "IndicatorDisplayTypes":
                    this.aov((ad, ae) => this.aio.setDisplayType(ad, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.aiq, ae)));
                    break;
                case "IndicatorPeriod":
                    this.aov((ad, ae) => {
                        if (this.aly == -2147483648) {
                            return;
                        }
                        this.aio.setPeriodOverride(ad, this.aly);
                    });
                    break;
                case "IndicatorMultiplier":
                    this.aov((ad, ae) => this.aio.setMultiplier(ad, this.ak2));
                    break;
                case "IndicatorSmoothingPeriod":
                    this.aov((ad, ae) => this.aio.setSmoothingPeriod(ad, this.al1));
                    break;
                case "IndicatorShortPeriod":
                    this.aov((ad, ae) => this.aio.setShortPeriod(ad, this.alz));
                    break;
                case "IndicatorLongPeriod":
                    this.aov((ad, ae) => this.aio.setLongPeriod(ad, this.alx));
                    break;
                case "IndicatorSignalPeriod":
                    this.aov((ad, ae) => this.aio.setSignalPeriod(ad, this.al0));
                    break;
                case "RangeSelectorOptions":
                    let ad = typeCast(FinancialChartRangeSelectorOptionCollection.$, b);
                    if (ad != null) {
                        ad.collectionChanged = delegateRemove(ad.collectionChanged, runOn(this, this.ao6));
                    }
                    if (this.ahw != null) {
                        let ae = this.ahw;
                        ae.collectionChanged = delegateCombine(ae.collectionChanged, runOn(this, this.ao6));
                    }
                    this.aps();
                    break;
                case "CustomIndicatorNames":
                    let af = typeCast(ObservableCollection$1.$.specialize(String_$type), b);
                    if (af != null) {
                        af.collectionChanged = delegateRemove(af.collectionChanged, runOn(this, this.ao2));
                    }
                    if (this.customIndicatorNames != null) {
                        let ag = this.customIndicatorNames;
                        ag.collectionChanged = delegateCombine(ag.collectionChanged, runOn(this, this.ao2));
                    }
                    this.ap2();
                    break;
                case "Legend":
                    if (this.zoomSliderChart != null) {
                        this.zoomSliderChart.legend = null;
                    }
                    break;
                case "Brushes":
                    this.aox((ah, ai) => ah.vf = this.z != null ? ArrayExtension.getModulus$1(Brush.$, this.z, ai) : null, true);
                    break;
                case "Outlines":
                    this.aox((ah, ai) => ah.vv = this.ad != null ? ArrayExtension.getModulus$1(Brush.$, this.ad, ai) : null, true);
                    break;
                case "XAxisLabelVisibility":
                    if (this.agx == 0 && this.zoomSliderXAxis != null) {
                        this.ae7(this.zoomSliderXAxis, (ah) => ah.visibility = 1);
                    }
                    this.aor();
                    break;
                case "YAxisLabelVisibility":
                    if (this.agy != 0 || this.zoomSliderAxis == null) {
                        break;
                    }
                    this.ae7(this.zoomSliderAxis, (ah) => ah.visibility = 1);
                    break;
                case "ZoomSliderXAxisMajorStroke":
                    this.zoomSliderXAxis.jz = this.aqd;
                    break;
                case "ZoomSliderXAxisMajorStrokeThickness":
                    this.zoomSliderXAxis.et = this.alj;
                    break;
                case "FinancialChartLegend":
                case "IsLegendVisible":
                    let ah = this.aju && this.legend == null;
                    {
                        let ai = (aj, ak) => {
                            if (aj.isUsableInLegend) {
                                aj.legend = ah ? this.aii : null;
                            }
                        };
                        this.aox(ai, false);
                        this.aow(ai);
                    }
                    break;
                case "ZoomSliderAxis":
                    let aj = typeCast(Axis.$, b);
                    if (aj != null && this.zoomSliderChart != null) {
                        this.zoomSliderChart.axes.remove(aj);
                    }
                    if (this.zoomSliderAxis != null) {
                        if (this.zoomSliderChart != null) {
                            this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                            this.app();
                            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
                        }
                        if (this.gh) {
                            this.afb(this.zoomSliderAxis);
                        }
                        this.ae7(this.zoomSliderAxis, (ak) => ak.visibility = 1);
                    }
                    break;
                case "XAxisMinimumValue":
                    this.afd((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.minimumValue = this.akk;
                        }
                    });
                    break;
                case "XAxisMaximumValue":
                    this.afd((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.maximumValue = this.akj;
                        }
                    });
                    break;
                case FinancialChart.any:
                    this.afe((ak) => ak.b1 = this.aj2, a);
                    break;
                case FinancialChart.an9:
                    this.afi((ak) => ak.b1 = this.aj4);
                    break;
            }
        }
        get_cb() {
            return 1;
        }
        get cb() {
            return this.get_cb();
        }
        get aj5() {
            return this.ajn;
        }
        set aj5(a) {
            let b = this.aj5;
            if (a != b) {
                this.ajn = a;
                this.vu("YAxisIsLogarithmic", b, this.aj5);
            }
        }
        get al3() {
            return this.alv;
        }
        set al3(a) {
            let b = this.al3;
            if (a != b) {
                this.alv = a;
                this.vu("YAxisLogarithmBase", b, this.al3);
            }
        }
        get alf() {
            return this.akw;
        }
        set alf(a) {
            let b = this.alf;
            if (a != b) {
                this.akw = a;
                this.vu("YAxisInterval", b, this.alf);
            }
        }
        get alh() {
            return this.aky;
        }
        set alh(a) {
            let b = this.alh;
            if (a != b) {
                this.aky = a;
                this.vu("YAxisMinimumValue", b, this.alh);
            }
        }
        get alg() {
            return this.akx;
        }
        set alg(a) {
            let b = this.alg;
            if (a != b) {
                this.akx = a;
                this.vu("YAxisMaximumValue", b, this.alg);
            }
        }
        get ali() {
            return this.akz;
        }
        set ali(a) {
            let b = this.ali;
            if (a != b) {
                this.akz = a;
                this.vu("YAxisMinorInterval", b, this.ali);
            }
        }
        get ale() {
            return this.yAxis.l4;
        }
        get ald() {
            return this.yAxis.l3;
        }
        get ah5() {
            return this.ah3;
        }
        set ah5(a) {
            let b = this.ah5;
            if (a != b) {
                this.ah3 = a;
                this.vu("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ah5));
            }
        }
        get ah7() {
            return this.ah6;
        }
        set ah7(a) {
            let b = this.ah7;
            if (a != b) {
                this.ah6 = a;
                this.vu("XAxisMode", enumGetBox(FinancialChartXAxisMode_$type, b), enumGetBox(FinancialChartXAxisMode_$type, this.ah7));
            }
        }
        get ak8() {
            return this.akr;
        }
        set ak8(a) {
            let b = this.ak8;
            if (a != b) {
                this.akr = a;
                this.vu("XAxisZoomMaximumCategoryRange", b, this.ak8);
            }
        }
        get alb() {
            return this.aku;
        }
        set alb(a) {
            let b = this.alb;
            if (a != b) {
                this.aku = a;
                this.vu("XAxisZoomToCategoryStart", b, this.alb);
            }
        }
        get ak9() {
            return this.aks;
        }
        set ak9(a) {
            let b = this.ak9;
            if (a != b) {
                this.aks = a;
                this.vu("XAxisZoomMaximumItemSpan", b, this.ak9);
            }
        }
        get ala() {
            return this.akt;
        }
        set ala(a) {
            let b = this.ala;
            if (a != b) {
                this.akt = a;
                this.vu("XAxisZoomToCategoryRange", b, this.ala);
            }
        }
        get alc() {
            return this.akv;
        }
        set alc(a) {
            let b = this.alc;
            if (a != b) {
                this.akv = a;
                this.vu("XAxisZoomToItemSpan", b, this.alc);
            }
        }
        get ah9() {
            return this.ah8;
        }
        set ah9(a) {
            let b = this.ah9;
            if (a != b) {
                this.ah8 = a;
                this.vu("YAxisMode", enumGetBox(FinancialChartYAxisMode_$type, b), enumGetBox(FinancialChartYAxisMode_$type, this.ah9));
            }
        }
        get ajy() {
            return this.aji;
        }
        set ajy(a) {
            let b = this.ajy;
            if (a != b) {
                this.aji = a;
                this.vu("IsToolbarVisible", b, this.ajy);
            }
        }
        get ah0() {
            return this.ahz;
        }
        set ah0(a) {
            let b = this.ah0;
            if (a != b) {
                this.ahz = a;
                this.vu("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.ah0));
            }
        }
        get_afs() {
            return super.get_afs();
        }
        set_afs(a) {
            super.set_afs(a);
        }
        get ajz() {
            return this.ajj;
        }
        set ajz(a) {
            let b = this.ajz;
            if (a != b) {
                this.ajj = a;
                this.vu("IsWindowSyncedToVisibleRange", b, this.ajz);
            }
        }
        get aie() {
            return this.aid;
        }
        set aie(a) {
            let b = this.aie;
            if (a != b) {
                this.aid = a;
                this.vu("IndicatorTypes", b, this.aie);
            }
        }
        get aig() {
            return this.aif;
        }
        set aig(a) {
            let b = this.aig;
            if (a != b) {
                this.aif = a;
                this.vu("OverlayTypes", b, this.aig);
            }
        }
        get indicatorCharts() {
            return this.aka;
        }
        set indicatorCharts(a) {
            let b = this.indicatorCharts;
            if (a != b) {
                this.aka = a;
                this.vu("IndicatorCharts", b, this.indicatorCharts);
            }
        }
        get aj3() {
            return this.ajl;
        }
        set aj3(a) {
            let b = this.aj3;
            if (a != b) {
                this.ajl = a;
                this.vu("YAxisAbbreviateLargeNumbers", b, this.aj3);
            }
        }
        get_j5() {
            return super.get_j5();
        }
        set_j5(a) {
            super.set_j5(a);
        }
        get aj2() {
            return this.ajk;
        }
        set aj2(a) {
            let b = this.aj2;
            if (a != b) {
                this.ajk = a;
                this.vu(FinancialChart.any, b, this.aj2);
            }
        }
        get aj4() {
            return this.ajm;
        }
        set aj4(a) {
            let b = this.aj4;
            if (a != b) {
                this.ajm = a;
                this.vu(FinancialChart.an9, b, this.aj4);
            }
        }
        get zoomSliderChart() {
            return this.ajc;
        }
        set zoomSliderChart(a) {
            let b = this.zoomSliderChart;
            if (a != b) {
                this.ajc = a;
                this.vu("ZoomSliderChart", b, this.zoomSliderChart);
            }
        }
        get zoomSliderAxis() {
            return this.aix;
        }
        set zoomSliderAxis(a) {
            let b = this.zoomSliderAxis;
            if (a != b) {
                this.aix = a;
                this.vu("ZoomSliderAxis", b, this.zoomSliderAxis);
            }
        }
        get zoomSliderXAxis() {
            return this.ahi;
        }
        set zoomSliderXAxis(a) {
            let b = this.zoomSliderXAxis;
            if (a != b) {
                this.ahi = a;
                this.vu("ZoomSliderXAxis", b, this.zoomSliderXAxis);
            }
        }
        get aic() {
            return this.aia;
        }
        set aic(a) {
            let b = this.aic;
            if (a != b) {
                this.aia = a;
                this.vu("ZoomSliderType", enumGetBox(FinancialChartZoomSliderType_$type, b), enumGetBox(FinancialChartZoomSliderType_$type, this.aic));
            }
        }
        get ag9() {
            return this.ag1;
        }
        set ag9(a) {
            let b = this.ag9;
            if (a != b) {
                this.ag1 = a;
                this.vu("NegativeBrushes", b, this.ag9);
            }
        }
        get aha() {
            return this.ag2;
        }
        set aha(a) {
            let b = this.aha;
            if (a != b) {
                this.ag2 = a;
                this.vu("NegativeOutlines", b, this.aha);
            }
        }
        get ahb() {
            return this.ag3;
        }
        set ahb(a) {
            let b = this.ahb;
            if (a != b) {
                this.ag3 = a;
                this.vu("OverlayBrushes", b, this.ahb);
            }
        }
        get ahc() {
            return this.ag4;
        }
        set ahc(a) {
            let b = this.ahc;
            if (a != b) {
                this.ag4 = a;
                this.vu("OverlayOutlines", b, this.ahc);
            }
        }
        get ahe() {
            return this.ag6;
        }
        set ahe(a) {
            let b = this.ahe;
            if (a != b) {
                this.ag6 = a;
                this.vu("VolumeOutlines", b, this.ahe);
            }
        }
        get ahd() {
            return this.ag5;
        }
        set ahd(a) {
            let b = this.ahd;
            if (a != b) {
                this.ag5 = a;
                this.vu("VolumeBrushes", b, this.ahd);
            }
        }
        get ag8() {
            return this.ag0;
        }
        set ag8(a) {
            let b = this.ag8;
            if (a != b) {
                this.ag0 = a;
                this.vu("IndicatorNegativeBrushes", b, this.ag8);
            }
        }
        get ag7() {
            return this.agz;
        }
        set ag7(a) {
            let b = this.ag7;
            if (a != b) {
                this.agz = a;
                this.vu("IndicatorBrushes", b, this.ag7);
            }
        }
        get ak7() {
            return this.akq;
        }
        set ak7(a) {
            let b = this.ak7;
            if (a != b) {
                this.akq = a;
                this.vu("VolumeThickness", b, this.ak7);
            }
        }
        get ak5() {
            return this.ako;
        }
        set ak5(a) {
            let b = this.ak5;
            if (a != b) {
                this.ako = a;
                this.vu("OverlayThickness", b, this.ak5);
            }
        }
        get ak4() {
            return this.akn;
        }
        set ak4(a) {
            let b = this.ak4;
            if (a != b) {
                this.akn = a;
                this.vu("OverlayMultiplier", b, this.ak4);
            }
        }
        get ak3() {
            return this.akm;
        }
        set ak3(a) {
            let b = this.ak3;
            if (a != b) {
                this.akm = a;
                this.vu("IndicatorThickness", b, this.ak3);
            }
        }
        get aiq() {
            return this.aip;
        }
        set aiq(a) {
            let b = this.aiq;
            if (a != b) {
                this.aip = a;
                this.vu("IndicatorDisplayTypes", b, this.aiq);
            }
        }
        get aly() {
            return this.alr;
        }
        set aly(a) {
            let b = this.aly;
            if (a != b) {
                this.alr = a;
                this.vu("IndicatorPeriod", b, this.aly);
            }
        }
        get ak2() {
            return this.akl;
        }
        set ak2(a) {
            let b = this.ak2;
            if (a != b) {
                this.akl = a;
                this.vu("IndicatorMultiplier", b, this.ak2);
            }
        }
        get al1() {
            return this.alu;
        }
        set al1(a) {
            let b = this.al1;
            if (a != b) {
                this.alu = a;
                this.vu("IndicatorSmoothingPeriod", b, this.al1);
            }
        }
        get alz() {
            return this.als;
        }
        set alz(a) {
            let b = this.alz;
            if (a != b) {
                this.als = a;
                this.vu("IndicatorShortPeriod", b, this.alz);
            }
        }
        get alx() {
            return this.alq;
        }
        set alx(a) {
            let b = this.alx;
            if (a != b) {
                this.alq = a;
                this.vu("IndicatorLongPeriod", b, this.alx);
            }
        }
        get al0() {
            return this.alt;
        }
        set al0(a) {
            let b = this.al0;
            if (a != b) {
                this.alt = a;
                this.vu("IndicatorSignalPeriod", b, this.al0);
            }
        }
        get ahw() {
            return this.ahu;
        }
        set ahw(a) {
            let b = this.ahw;
            if (a != b) {
                this.ahu = a;
                this.vu("RangeSelectorOptions", b, this.ahw);
            }
        }
        get customIndicatorNames() {
            return this.ahq;
        }
        set customIndicatorNames(a) {
            let b = this.ahq;
            if (a != b) {
                this.ahq = a;
                this.vu("CustomIndicatorNames", b, this.customIndicatorNames);
            }
        }
        get_hb() {
            return super.get_hb();
        }
        set_hb(a) {
            super.set_hb(a);
        }
        get aqd() {
            return this.aqc;
        }
        set aqd(a) {
            let b = this.aqd;
            if (a != b) {
                this.aqc = a;
                this.vu("ZoomSliderXAxisMajorStroke", b, this.aqd);
            }
        }
        get alj() {
            return this.ak0;
        }
        set alj(a) {
            let b = this.alj;
            if (a != b) {
                this.ak0 = a;
                this.vu("ZoomSliderXAxisMajorStrokeThickness", b, this.alj);
            }
        }
        get aju() {
            return this.ajh;
        }
        set aju(a) {
            let b = this.aju;
            if (a != b) {
                this.ajh = a;
                this.vu("IsLegendVisible", b, this.aju);
            }
        }
        get aii() {
            return this.aih;
        }
        set aii(a) {
            let b = this.aii;
            if (a != b) {
                this.aih = a;
                this.vu("FinancialChartLegend", b, this.aii);
            }
        }
        get xAxis() {
            return this.ahh;
        }
        set xAxis(a) {
            let b = this.xAxis;
            if (a != b) {
                this.ahh = a;
                this.vu("XAxis", b, this.xAxis);
            }
        }
        get yAxis() {
            return this.aiw;
        }
        set yAxis(a) {
            let b = this.yAxis;
            if (a != b) {
                this.aiw = a;
                this.vu("YAxis", b, this.yAxis);
            }
        }
        get volumeAxis() {
            return this.aiv;
        }
        set volumeAxis(a) {
            let b = this.volumeAxis;
            if (a != b) {
                this.aiv = a;
                this.vu("VolumeAxis", b, this.volumeAxis);
            }
        }
        get volumeXAxis() {
            return this.ahg;
        }
        set volumeXAxis(a) {
            let b = this.volumeXAxis;
            if (a != b) {
                this.ahg = a;
                this.vu("VolumeXAxis", b, this.volumeXAxis);
            }
        }
        get indicatorAxis() {
            return this.aiu;
        }
        set indicatorAxis(a) {
            let b = this.indicatorAxis;
            if (a != b) {
                this.aiu = a;
                this.vu("IndicatorAxis", b, this.indicatorAxis);
            }
        }
        get indicatorXAxis() {
            return this.ahf;
        }
        set indicatorXAxis(a) {
            let b = this.indicatorXAxis;
            if (a != b) {
                this.ahf = a;
                this.vu("IndicatorXAxis", b, this.indicatorXAxis);
            }
        }
        get akc() {
            return this.aj9;
        }
        set akc(a) {
            let b = this.akc;
            if (a != b) {
                this.aj9 = a;
                this.vu("IndicatorAxes", b, this.akc);
            }
        }
        get ake() {
            return this.akb;
        }
        set ake(a) {
            let b = this.ake;
            if (a != b) {
                this.akb = a;
                this.vu("IndicatorXAxes", b, this.ake);
            }
        }
        get akk() {
            return this.aki;
        }
        set akk(a) {
            let b = this.akk;
            if (+a != +b) {
                this.aki = a;
                this.vu("XAxisMinimumValue", b, this.akk);
            }
        }
        get akj() {
            return this.akh;
        }
        set akj(a) {
            let b = this.akj;
            if (+a != +b) {
                this.akh = a;
                this.vu("XAxisMaximumValue", b, this.akj);
            }
        }
        get xAxisBreaks() {
            return this.akf;
        }
    }
    FinancialChart.$t = /*@__PURE__*/ markType(FinancialChart, 'FinancialChart', XYChart.$);
    FinancialChart.al2 = 0;
    FinancialChart.any = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    FinancialChart.an9 = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return FinancialChart;
})();
/**
 * @hidden
 */
export let FinancialChartToolbar = /*@__PURE__*/ (() => {
    class FinancialChartToolbar extends TemplatedHtmlControl {
        bg(a) {
            let b = a.querySelectorAll(".financialChartToolbarArea");
            if (b != null && b.length > 0) {
                this.g = b[0];
                if (!this.al) {
                    this.g.hide();
                }
            }
            let c = a.querySelectorAll(".financialChartIndicatorMenu");
            if (c != null && c.length > 0) {
                this.q.g = c[0];
            }
            let d = a.querySelectorAll(".financialChartRangeSelector");
            if (d != null && d.length > 0) {
                this.s.g = d[0];
            }
            let e = a.querySelectorAll(".financialChartTypePicker");
            if (e != null && e.length > 0) {
                this.aa.g = e[0];
            }
        }
        bl(a) {
            this.q.u(a);
            this.aa.u(a);
        }
        constructor(a, b) {
            super("financialChartToolbar", b, "");
            this.o = null;
            this.r = null;
            this.z = null;
            this.p = null;
            this.w = null;
            this.aq = dateMaxValue();
            this.ap = dateMinValue();
            this.ao = dateMaxValue();
            this.an = dateMinValue();
            this.rangeChanged = null;
            this.chartTypeChanged = null;
            this.trendLineTypeChanged = null;
            this.volumeTypeChanged = null;
            this.indicatorTypesChanged = null;
            this.overlayTypesChanged = null;
            this.x = 0;
            this.ah = 0;
            this.ab = 0;
            this.ad = null;
            this.af = null;
            this.t = null;
            this.ak = false;
            this.o = a;
            this.w = new FinancialChartToolbarViewModel();
            this.s = new FinancialChartRangeSelector(a != null ? a.ame : null);
            this.aa = new FinancialChartTypePicker(a != null ? a.amb : null);
            this.q = new FinancialChartIndicatorMenu(1, a != null ? a.amc : null);
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.s;
            if (a != b) {
                this.r = a;
                this.bm("RangeSelector", b, this.s);
            }
        }
        get aa() {
            return this.z;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.z = a;
                this.bm("ChartTypePicker", b, this.aa);
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.q;
            if (a != b) {
                this.p = a;
                this.bm("IndicatorMenu", b, this.q);
            }
        }
        bm(a, b, c) {
            switch (a) {
                case "RangeStart":
                    if (this.s != null) {
                        this.s.t = this.as;
                    }
                    break;
                case "RangeEnd":
                    if (this.s != null) {
                        this.s.s = this.ar;
                    }
                    break;
                case "SelectionStart":
                    if (this.s != null) {
                        this.s.v = this.au;
                    }
                    break;
                case "SelectionEnd":
                    if (this.s != null) {
                        this.s.u = this.at;
                    }
                    break;
                case "RangeSelector":
                    let d = b;
                    if (d != null) {
                        d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.bj));
                    }
                    if (this.s != null) {
                        this.s.t = this.as;
                        this.s.s = this.ar;
                        this.s.o = this.u;
                        this.s.v = this.au;
                        this.s.u = this.at;
                        let e = this.s;
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.bj));
                    }
                    break;
                case "ChartTypePicker":
                    let f = b;
                    if (f != null) {
                        f.selectionChanged = delegateRemove(f.selectionChanged, runOn(this, this.bi));
                    }
                    if (this.aa != null) {
                        this.aa.w = this.y;
                        let g = this.aa;
                        g.selectionChanged = delegateCombine(g.selectionChanged, runOn(this, this.bi));
                    }
                    break;
                case "ChartType":
                    if (this.aa != null) {
                        this.aa.w = this.y;
                    }
                    break;
                case "RangeSelectorOptions":
                    if (this.s != null) {
                        this.s.o = this.u;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.g == null) {
                        break;
                    }
                    if (this.al) {
                        this.g.show();
                    }
                    else {
                        this.g.hide();
                    }
                    break;
                case "IndicatorMenu":
                    let h = typeCast(FinancialChartIndicatorMenu.$, b);
                    if (h != null) {
                        h.selectionChanged = delegateRemove(h.selectionChanged, runOn(this, this.bh));
                    }
                    if (this.q != null) {
                        let i = this.q;
                        i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.bh));
                    }
                    break;
                case "IndicatorTypes":
                    if (this.indicatorTypesChanged != null) {
                        this.indicatorTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "OverlayTypes":
                    if (this.overlayTypesChanged != null) {
                        this.overlayTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "TrendLineType":
                    if (this.trendLineTypeChanged != null) {
                        this.trendLineTypeChanged(this, EventArgs.empty);
                    }
                    break;
                case "VolumeType":
                    if (this.volumeTypeChanged != null) {
                        this.volumeTypeChanged(this, EventArgs.empty);
                    }
                    break;
            }
        }
        bh(a, b) {
            this.ag = this.q.z;
            this.ae = this.q.y;
            this.ai = this.q.aa;
            this.ac = this.q.x;
        }
        bi(a, b) {
            this.y = this.aa.w;
            if (this.chartTypeChanged != null) {
                this.chartTypeChanged(this, b);
            }
        }
        bj(a, b) {
            this.au = this.s.v;
            this.at = this.s.u;
            if (this.rangeChanged != null) {
                this.rangeChanged(this, b);
            }
        }
        v() {
            let a = new FinancialChartToolbarContext();
            a.container = this.d;
            a.vm = this.w;
            a.vm.financialChartIndicatorMenu = ((() => {
                let $ret = new FinancialChartIndicatorMenuContext();
                $ret.vm = this.q.p;
                return $ret;
            })());
            a.vm.financialChartTypePicker = ((() => {
                let $ret = new FinancialChartTypePickerContext();
                $ret.vm = this.aa.p;
                return $ret;
            })());
            a.vm.financialChartRangeSelector = ((() => {
                let $ret = new FinancialChartRangeSelectorContext();
                $ret.vm = this.s.q;
                return $ret;
            })());
            return a;
        }
        l(a) {
            super.l(a);
            if (a == null) {
                return;
            }
            this.s.l(a);
            this.aa.l(a);
            this.q.l(a);
            this.bk();
        }
        bk() {
        }
        get au() {
            return this.aq;
        }
        set au(a) {
            let b = this.au;
            if (+a != +b) {
                this.aq = a;
                this.bm("SelectionStart", b, this.au);
            }
        }
        get at() {
            return this.ap;
        }
        set at(a) {
            let b = this.at;
            if (+a != +b) {
                this.ap = a;
                this.bm("SelectionEnd", b, this.at);
            }
        }
        get as() {
            return this.ao;
        }
        set as(a) {
            let b = this.as;
            if (+a != +b) {
                this.ao = a;
                this.bm("RangeStart", b, this.as);
            }
        }
        get ar() {
            return this.an;
        }
        set ar(a) {
            let b = this.ar;
            if (+a != +b) {
                this.an = a;
                this.bm("RangeEnd", b, this.ar);
            }
        }
        bn() {
            if (this.s != null) {
                this.s.ab();
            }
        }
        get y() {
            return this.x;
        }
        set y(a) {
            let b = this.y;
            if (a != b) {
                this.x = a;
                this.bm("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.y));
            }
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ai;
            if (a != b) {
                this.ah = a;
                this.bm("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ai));
            }
        }
        get ac() {
            return this.ab;
        }
        set ac(a) {
            let b = this.ac;
            if (a != b) {
                this.ab = a;
                this.bm("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ac));
            }
        }
        get ae() {
            return this.ad;
        }
        set ae(a) {
            let b = this.ae;
            if (!FinancialChartToolbar.am(b, a)) {
                this.ad = a;
                this.bm("IndicatorTypes", b, this.ae);
            }
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            let b = this.ag;
            if (!FinancialChartToolbar.am(b, a)) {
                this.af = a;
                this.bm("OverlayTypes", b, this.ag);
            }
        }
        static am(a, b) {
            if (a == b) {
                return true;
            }
            if ((a == null && b != null) || (a != null && b == null)) {
                return false;
            }
            if (a.count != b.count) {
                return false;
            }
            for (let c of fromEn(a)) {
                if (!b.contains(c)) {
                    return false;
                }
            }
            return true;
        }
        aj() {
            return ((() => {
                let $ret = new FinancialChartToolbarVisualData();
                $ret.rangeSelector = this.s == null ? null : this.s.r();
                return $ret;
            })());
        }
        get u() {
            return this.t;
        }
        set u(a) {
            let b = this.u;
            if (a != b) {
                this.t = a;
                this.bm("RangeSelectorOptions", b, this.u);
            }
        }
        get al() {
            return this.ak;
        }
        set al(a) {
            let b = this.al;
            if (a != b) {
                this.ak = a;
                this.bm("IsToolbarVisible", b, this.al);
            }
        }
    }
    FinancialChartToolbar.$t = /*@__PURE__*/ markType(FinancialChartToolbar, 'FinancialChartToolbar', TemplatedHtmlControl.$);
    return FinancialChartToolbar;
})();
/**
 * @hidden
 */
export let FinancialChartRangeSelector = /*@__PURE__*/ (() => {
    class FinancialChartRangeSelector extends TemplatedHtmlControl {
        get v() {
            return this.q.selectionStart;
        }
        set v(a) {
            this.q.selectionStart = a;
        }
        get u() {
            return this.q.selectionEnd;
        }
        set u(a) {
            this.q.selectionEnd = a;
        }
        get t() {
            return this.q.rangeStart;
        }
        set t(a) {
            this.q.rangeStart = a;
        }
        get s() {
            return this.q.rangeEnd;
        }
        set s(a) {
            this.q.rangeEnd = a;
        }
        ab() {
            if (this.q.onPropertiesChanged()) {
                this.p.g(this.q);
            }
        }
        constructor(a) {
            super("financialChartRangeSelector", a, "");
            this.q = null;
            this.rangeChanged = null;
            this.p = null;
            this.p = new FinancialChartRangeSelectorView();
            this.q = new FinancialChartRangeSelectorViewModel();
            this.q.onRangeChanged = runOn(this, this.z);
            this.p.c = this.q;
        }
        l(a) {
            super.l(a);
            this.p.f(this.d, this.q);
        }
        z() {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, EventArgs.empty);
            }
        }
        r() {
            return this.p.d(this.g);
        }
        get o() {
            return this.q.options;
        }
        set o(a) {
            let b = !FinancialChartToolbar.am(this.q.options, a);
            if (b) {
                this.q.options = a;
                this.aa();
            }
        }
        aa() {
            let a = false;
            if (this.q != null) {
                a = this.q.p();
            }
            if (this.p != null) {
                this.p.i(this.o);
                if (a) {
                    if (this.q.notifyChanged != null) {
                        this.q.notifyChanged();
                    }
                }
            }
        }
    }
    FinancialChartRangeSelector.$t = /*@__PURE__*/ markType(FinancialChartRangeSelector, 'FinancialChartRangeSelector', TemplatedHtmlControl.$);
    FinancialChartRangeSelector.x = 0;
    return FinancialChartRangeSelector;
})();
