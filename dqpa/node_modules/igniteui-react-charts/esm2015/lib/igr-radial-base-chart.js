import { HorizontalAlignment_$type } from "igniteui-react-core";
import { VerticalAlignment_$type } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { ValueAxisLabelLocation_$type } from "./ValueAxisLabelLocation";
import { AngleAxisLabelLocation_$type } from "./AngleAxisLabelLocation";
import { IgrDomainChart } from "./igr-domain-chart";
import { brushToString, stringToBrush, ensureBool, ensureEnum, arrayFindByName } from "igniteui-react-core";
/**
 * Represents a base class for domain charts with X/Y axes
*/
export class IgrRadialBaseChart extends IgrDomainChart {
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets function which takes an context object and returns a formatted label for the X-axis.
    */
    get angleAxisFormatLabel() {
        return this.i.z8;
    }
    set angleAxisFormatLabel(v) {
        this.i.z8 = v;
    }
    /**
     * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.
    */
    get valueAxisFormatLabel() {
        return this.i.z9;
    }
    set valueAxisFormatLabel(v) {
        this.i.z9 = v;
    }
    /**
     * Gets or sets the left margin of labels on the X-axis
    */
    get angleAxisLabelLeftMargin() {
        return this.i.abj;
    }
    set angleAxisLabelLeftMargin(v) {
        this.i.abj = +v;
    }
    /**
     * Gets or sets the top margin of labels on the X-axis
    */
    get angleAxisLabelTopMargin() {
        return this.i.abl;
    }
    set angleAxisLabelTopMargin(v) {
        this.i.abl = +v;
    }
    /**
     * Gets or sets the right margin of labels on the X-axis
    */
    get angleAxisLabelRightMargin() {
        return this.i.abk;
    }
    set angleAxisLabelRightMargin(v) {
        this.i.abk = +v;
    }
    /**
     * Gets or sets the bottom margin of labels on the X-axis
    */
    get angleAxisLabelBottomMargin() {
        return this.i.abi;
    }
    set angleAxisLabelBottomMargin(v) {
        this.i.abi = +v;
    }
    /**
     * Gets or sets the left margin of labels on the Y-axis
    */
    get valueAxisLabelLeftMargin() {
        return this.i.ab4;
    }
    set valueAxisLabelLeftMargin(v) {
        this.i.ab4 = +v;
    }
    /**
     * Gets or sets the top margin of labels on the Y-axis
    */
    get valueAxisLabelTopMargin() {
        return this.i.ab6;
    }
    set valueAxisLabelTopMargin(v) {
        this.i.ab6 = +v;
    }
    /**
     * Gets or sets the right margin of labels on the Y-axis
    */
    get valueAxisLabelRightMargin() {
        return this.i.ab5;
    }
    set valueAxisLabelRightMargin(v) {
        this.i.ab5 = +v;
    }
    /**
     * Gets or sets the bottom margin of labels on the Y-axis
    */
    get valueAxisLabelBottomMargin() {
        return this.i.ab3;
    }
    set valueAxisLabelBottomMargin(v) {
        this.i.ab3 = +v;
    }
    /**
     * Gets or sets color of labels on the X-axis
    */
    get angleAxisLabelTextColor() {
        return brushToString(this.i.agb);
    }
    set angleAxisLabelTextColor(v) {
        this.i.agb = stringToBrush(v);
    }
    /**
     * Gets or sets color of labels on the Y-axis
    */
    get valueAxisLabelTextColor() {
        return brushToString(this.i.agi);
    }
    set valueAxisLabelTextColor(v) {
        this.i.agi = stringToBrush(v);
    }
    /**
     * Gets the actual color of labels on the X-axis
    */
    get actualAngleAxisLabelTextColor() {
        return brushToString(this.i.af9);
    }
    set actualAngleAxisLabelTextColor(v) {
        this.i.af9 = stringToBrush(v);
    }
    /**
     * Gets the actual color of labels on the Y-axis
    */
    get actualValueAxisLabelTextColor() {
        return brushToString(this.i.aga);
    }
    set actualValueAxisLabelTextColor(v) {
        this.i.aga = stringToBrush(v);
    }
    /**
     * Gets or sets the margin around a title on the X-axis
    */
    get angleAxisTitleMargin() {
        return this.i.abu;
    }
    set angleAxisTitleMargin(v) {
        this.i.abu = +v;
    }
    /**
     * Gets or sets the margin around a title on the Y-axis
    */
    get valueAxisTitleMargin() {
        return this.i.acf;
    }
    set valueAxisTitleMargin(v) {
        this.i.acf = +v;
    }
    /**
     * Gets or sets the left margin of a title on the X-axis
    */
    get angleAxisTitleLeftMargin() {
        return this.i.abt;
    }
    set angleAxisTitleLeftMargin(v) {
        this.i.abt = +v;
    }
    /**
     * Gets or sets the left margin of a title on the Y-axis
    */
    get valueAxisTitleLeftMargin() {
        return this.i.ace;
    }
    set valueAxisTitleLeftMargin(v) {
        this.i.ace = +v;
    }
    /**
     * Gets or sets the top margin of a title on the X-axis
    */
    get angleAxisTitleTopMargin() {
        return this.i.abw;
    }
    set angleAxisTitleTopMargin(v) {
        this.i.abw = +v;
    }
    /**
     * Gets or sets the top margin of a title on the Y-axis
    */
    get valueAxisTitleTopMargin() {
        return this.i.ach;
    }
    set valueAxisTitleTopMargin(v) {
        this.i.ach = +v;
    }
    /**
     * Gets or sets the right margin of a title on the X-axis
    */
    get angleAxisTitleRightMargin() {
        return this.i.abv;
    }
    set angleAxisTitleRightMargin(v) {
        this.i.abv = +v;
    }
    /**
     * Gets or sets the right margin of a title on the Y-axis
    */
    get valueAxisTitleRightMargin() {
        return this.i.acg;
    }
    set valueAxisTitleRightMargin(v) {
        this.i.acg = +v;
    }
    /**
     * Gets or sets the bottom margin of a title on the X-axis
    */
    get angleAxisTitleBottomMargin() {
        return this.i.abs;
    }
    set angleAxisTitleBottomMargin(v) {
        this.i.abs = +v;
    }
    /**
     * Gets or sets the bottom margin of a title on the Y-axis
    */
    get valueAxisTitleBottomMargin() {
        return this.i.acd;
    }
    set valueAxisTitleBottomMargin(v) {
        this.i.acd = +v;
    }
    /**
     * Gets or sets color of title on the X-axis
    */
    get angleAxisTitleTextColor() {
        return brushToString(this.i.agh);
    }
    set angleAxisTitleTextColor(v) {
        this.i.agh = stringToBrush(v);
    }
    /**
     * Gets or sets color of title on the Y-axis
    */
    get valueAxisTitleTextColor() {
        return brushToString(this.i.ago);
    }
    set valueAxisTitleTextColor(v) {
        this.i.ago = stringToBrush(v);
    }
    /**
     * Gets or sets CSS font property for labels on X-axis
    */
    get angleAxisLabelTextStyle() {
        return this.i.ada;
    }
    set angleAxisLabelTextStyle(v) {
        this.i.ada = v;
    }
    /**
     * Gets or sets CSS font property for labels on Y-axis
    */
    get valueAxisLabelTextStyle() {
        return this.i.aeg;
    }
    set valueAxisLabelTextStyle(v) {
        this.i.aeg = v;
    }
    /**
     * Gets or sets CSS font property for title on X-axis
    */
    get angleAxisTitleTextStyle() {
        return this.i.ady;
    }
    set angleAxisTitleTextStyle(v) {
        this.i.ady = v;
    }
    /**
     * Gets or sets CSS font property for title on Y-axis
    */
    get valueAxisTitleTextStyle() {
        return this.i.ae4;
    }
    set valueAxisTitleTextStyle(v) {
        this.i.ae4 = v;
    }
    /**
     * Gets or sets the format for labels along the X-axis.
    */
    get angleAxisLabel() {
        return this.i.ack;
    }
    set angleAxisLabel(v) {
        this.i.ack = v;
    }
    /**
     * Gets or sets the property or string from which the labels are derived.
    */
    get valueAxisLabel() {
        return this.i.acl;
    }
    set valueAxisLabel(v) {
        this.i.acl = v;
    }
    /**
     * Gets or sets the color to apply to major gridlines along the X-axis.
    */
    get angleAxisMajorStroke() {
        return brushToString(this.i.agc);
    }
    set angleAxisMajorStroke(v) {
        this.i.agc = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to major gridlines along the Y-axis.
    */
    get valueAxisMajorStroke() {
        return brushToString(this.i.agj);
    }
    set valueAxisMajorStroke(v) {
        this.i.agj = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness to apply to major gridlines along the X-axis.
    */
    get angleAxisMajorStrokeThickness() {
        return this.i.abm;
    }
    set angleAxisMajorStrokeThickness(v) {
        this.i.abm = +v;
    }
    /**
     * Gets or sets the thickness to apply to major gridlines along the Y-axis.
    */
    get valueAxisMajorStrokeThickness() {
        return this.i.ab7;
    }
    set valueAxisMajorStrokeThickness(v) {
        this.i.ab7 = +v;
    }
    /**
     * Gets or sets the thickness to apply to minor gridlines along the X-axis.
    */
    get angleAxisMinorStrokeThickness() {
        return this.i.abn;
    }
    set angleAxisMinorStrokeThickness(v) {
        this.i.abn = +v;
    }
    /**
     * Gets or sets the thickness to apply to minor gridlines along the Y-axis.
    */
    get valueAxisMinorStrokeThickness() {
        return this.i.ab8;
    }
    set valueAxisMinorStrokeThickness(v) {
        this.i.ab8 = +v;
    }
    /**
     * Gets or sets the color to apply to stripes along the X-axis.
    */
    get angleAxisStrip() {
        return brushToString(this.i.age);
    }
    set angleAxisStrip(v) {
        this.i.age = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to stripes along the Y-axis.
    */
    get valueAxisStrip() {
        return brushToString(this.i.agl);
    }
    set valueAxisStrip(v) {
        this.i.agl = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to the X-axis line.
    */
    get angleAxisStroke() {
        return brushToString(this.i.agf);
    }
    set angleAxisStroke(v) {
        this.i.agf = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to the Y-axis line.
    */
    get valueAxisStroke() {
        return brushToString(this.i.agm);
    }
    set valueAxisStroke(v) {
        this.i.agm = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness to apply to the X-axis line.
    */
    get angleAxisStrokeThickness() {
        return this.i.abo;
    }
    set angleAxisStrokeThickness(v) {
        this.i.abo = +v;
    }
    /**
     * Gets or sets the thickness to apply to the Y-axis line.
    */
    get valueAxisStrokeThickness() {
        return this.i.ab9;
    }
    set valueAxisStrokeThickness(v) {
        this.i.ab9 = +v;
    }
    /**
     * Gets or sets the length of tickmarks along the X-axis.
    */
    get angleAxisTickLength() {
        return this.i.abp;
    }
    set angleAxisTickLength(v) {
        this.i.abp = +v;
    }
    /**
     * Gets or sets the length of tickmarks along the Y-axis.
    */
    get valueAxisTickLength() {
        return this.i.aca;
    }
    set valueAxisTickLength(v) {
        this.i.aca = +v;
    }
    /**
     * Gets or sets the color to apply to tickmarks along the X-axis.
    */
    get angleAxisTickStroke() {
        return brushToString(this.i.agg);
    }
    set angleAxisTickStroke(v) {
        this.i.agg = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to tickmarks along the Y-axis.
    */
    get valueAxisTickStroke() {
        return brushToString(this.i.agn);
    }
    set valueAxisTickStroke(v) {
        this.i.agn = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness to apply to tickmarks along the X-axis.
    */
    get angleAxisTickStrokeThickness() {
        return this.i.abq;
    }
    set angleAxisTickStrokeThickness(v) {
        this.i.abq = +v;
    }
    /**
     * Gets or sets the thickness to apply to tickmarks along the Y-axis.
    */
    get valueAxisTickStrokeThickness() {
        return this.i.acb;
    }
    set valueAxisTickStrokeThickness(v) {
        this.i.acb = +v;
    }
    /**
     * Gets or sets the Text to display below the X-axis.
    */
    get angleAxisTitle() {
        return this.i.adp;
    }
    set angleAxisTitle(v) {
        this.i.adp = v;
    }
    /**
     * Gets or sets the Text to display to the left of the Y-axis.
    */
    get valueAxisTitle() {
        return this.i.aev;
    }
    set valueAxisTitle(v) {
        this.i.aev = v;
    }
    /**
     * Gets or sets the color to apply to minor gridlines along the X-axis.
    */
    get angleAxisMinorStroke() {
        return brushToString(this.i.agd);
    }
    set angleAxisMinorStroke(v) {
        this.i.agd = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to minor gridlines along the Y-axis.
    */
    get valueAxisMinorStroke() {
        return brushToString(this.i.agk);
    }
    set valueAxisMinorStroke(v) {
        this.i.agk = stringToBrush(v);
    }
    /**
     * Gets or sets the angle of rotation for labels along the X-axis.
    */
    get angleAxisLabelAngle() {
        return this.i.abh;
    }
    set angleAxisLabelAngle(v) {
        this.i.abh = +v;
    }
    /**
     * Gets or sets the angle of rotation for labels along the Y-axis.
    */
    get valueAxisLabelAngle() {
        return this.i.ab2;
    }
    set valueAxisLabelAngle(v) {
        this.i.ab2 = +v;
    }
    /**
     * Gets or sets the distance between the X-axis and the bottom of the chart.
    */
    get angleAxisExtent() {
        return this.i.abg;
    }
    set angleAxisExtent(v) {
        this.i.abg = +v;
    }
    /**
     * Gets or sets the distance between the Y-axis and the left edge of the chart.
    */
    get valueAxisExtent() {
        return this.i.ab1;
    }
    set valueAxisExtent(v) {
        this.i.ab1 = +v;
    }
    /**
     * Gets or sets the angle of rotation for the X-axis title.
    */
    get angleAxisTitleAngle() {
        return this.i.abr;
    }
    set angleAxisTitleAngle(v) {
        this.i.abr = +v;
    }
    /**
     * Gets or sets the angle of rotation for the Y-axis title.
    */
    get valueAxisTitleAngle() {
        return this.i.acc;
    }
    set valueAxisTitleAngle(v) {
        this.i.acc = +v;
    }
    /**
     * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
    */
    get angleAxisInverted() {
        return this.i.aag;
    }
    set angleAxisInverted(v) {
        this.i.aag = ensureBool(v);
    }
    /**
     * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
    */
    get valueAxisInverted() {
        return this.i.aah;
    }
    set valueAxisInverted(v) {
        this.i.aah = ensureBool(v);
    }
    /**
     * Gets or sets Horizontal alignment of the X-axis title.
    */
    get angleAxisTitleAlignment() {
        return this.i.afr;
    }
    set angleAxisTitleAlignment(v) {
        this.i.afr = ensureEnum(HorizontalAlignment_$type, v);
    }
    /**
     * Gets or sets Vertical alignment of the Y-axis title.
    */
    get valueAxisTitleAlignment() {
        return this.i.agu;
    }
    set valueAxisTitleAlignment(v) {
        this.i.agu = ensureEnum(VerticalAlignment_$type, v);
    }
    /**
     * Gets or sets Horizontal alignment of X-axis labels.
    */
    get angleAxisLabelHorizontalAlignment() {
        return this.i.afq;
    }
    set angleAxisLabelHorizontalAlignment(v) {
        this.i.afq = ensureEnum(HorizontalAlignment_$type, v);
    }
    /**
     * Gets or sets Horizontal alignment of Y-axis labels.
    */
    get valueAxisLabelHorizontalAlignment() {
        return this.i.afs;
    }
    set valueAxisLabelHorizontalAlignment(v) {
        this.i.afs = ensureEnum(HorizontalAlignment_$type, v);
    }
    /**
     * Gets or sets Vertical alignment of X-axis labels.
    */
    get angleAxisLabelVerticalAlignment() {
        return this.i.ags;
    }
    set angleAxisLabelVerticalAlignment(v) {
        this.i.ags = ensureEnum(VerticalAlignment_$type, v);
    }
    /**
     * Gets or sets Vertical alignment of Y-axis labels.
    */
    get valueAxisLabelVerticalAlignment() {
        return this.i.agt;
    }
    set valueAxisLabelVerticalAlignment(v) {
        this.i.agt = ensureEnum(VerticalAlignment_$type, v);
    }
    /**
     * Gets or sets Visibility of X-axis labels.
    */
    get angleAxisLabelVisibility() {
        return this.i.agx;
    }
    set angleAxisLabelVisibility(v) {
        this.i.agx = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets Visibility of Y-axis labels.
    */
    get valueAxisLabelVisibility() {
        return this.i.agy;
    }
    set valueAxisLabelVisibility(v) {
        this.i.agy = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets location of Y-axis labels, relative to the plot area.
    */
    get valueAxisLabelLocation() {
        return this.i.aad;
    }
    set valueAxisLabelLocation(v) {
        this.i.aad = ensureEnum(ValueAxisLabelLocation_$type, v);
    }
    /**
     * Gets or sets location of X-axis labels, relative to the plot area.
    */
    get angleAxisLabelLocation() {
        return this.i.z3;
    }
    set angleAxisLabelLocation(v) {
        this.i.z3 = ensureEnum(AngleAxisLabelLocation_$type, v);
    }
    /**
     * Gets or sets the format string for the X axis label.
    */
    get angleAxisLabelFormat() {
        return this.i.ac1;
    }
    set angleAxisLabelFormat(v) {
        this.i.ac1 = v;
    }
    /**
     * Gets or sets the format specifiers to use with the AngleAxisLabelFormat string.
    */
    get angleAxisLabelFormatSpecifiers() {
        return this.i.z0;
    }
    set angleAxisLabelFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.z0 = v;
    }
    /**
     * Gets or sets the format string for the Y axis label.
    */
    get valueAxisLabelFormat() {
        return this.i.ad7;
    }
    set valueAxisLabelFormat(v) {
        this.i.ad7 = v;
    }
    /**
     * Gets or sets the format specifiers to use with the ValueAxisLabelFormat string.
    */
    get valueAxisLabelFormatSpecifiers() {
        return this.i.z1;
    }
    set valueAxisLabelFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.z1 = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.angleAxisLabelFormatSpecifiers != null && arrayFindByName(this.angleAxisLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.angleAxisLabelFormatSpecifiers, name);
        }
        if (this.valueAxisLabelFormatSpecifiers != null && arrayFindByName(this.valueAxisLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.valueAxisLabelFormatSpecifiers, name);
        }
        return null;
    }
    /**
     * Called by the UI framework to provide a UI container for rendering this control.
    
    * @param container  * The UI container element.
    */
    provideContainer(container) {
        this.i.provideContainer(container);
    }
    /**
     * Converts the given visual location to a data value.
    
    * @param unscaledValue  * The x-coordinate of the location to scale.
    */
    getScaledAngle(unscaledValue) {
        let iv = this.i.abx(unscaledValue);
        return (iv);
    }
    /**
     * Converts the given data value to a visual location.
    
    * @param scaledValue  * The data value to un-scale.
    */
    getUnscaledAngle(scaledValue) {
        let iv = this.i.abz(scaledValue);
        return (iv);
    }
    /**
     * Converts the given visual location to a data value.
    
    * @param unscaledValue  * The y-coordinate of the location to scale.
    */
    getScaledValue(unscaledValue) {
        let iv = this.i.aby(unscaledValue);
        return (iv);
    }
    /**
     * Converts the given data value to a visual location.
    
    * @param scaledValue  * The data value to un-scale.
    */
    getUnscaledValue(scaledValue) {
        let iv = this.i.ab0(scaledValue);
        return (iv);
    }
}
