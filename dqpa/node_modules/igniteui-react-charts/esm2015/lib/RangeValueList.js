/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, IList$1_$type, Number_$type, markType } from "igniteui-react-core";
import { NotImplementedException } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
export let RangeValueList = /*@__PURE__*/ (() => {
    class RangeValueList extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.b = null;
            this.a = a;
            this.b = b;
        }
        indexOf(a) {
            throw new NotImplementedException(0);
        }
        insert(a, b) {
            throw new NotImplementedException(0);
        }
        removeAt(a) {
            throw new NotImplementedException(0);
        }
        item(a, b) {
            if (arguments.length === 2) {
                return b;
            }
            else {
                let b = NaN;
                let c = NaN;
                if (this.a != null && a >= 0 && a < this.a.count) {
                    b = this.a.item(a);
                }
                if (this.b != null && a >= 0 && a < this.b.count) {
                    c = this.b.item(a);
                }
                let d = isNaN_(b);
                let e = isNaN_(c);
                if (!d && !e) {
                    return (b + c) / 2;
                }
                if (!d) {
                    return b;
                }
                if (!e) {
                    return c;
                }
                return NaN;
            }
        }
        add(a) {
            throw new NotImplementedException(0);
        }
        clear() {
            throw new NotImplementedException(0);
        }
        contains(a) {
            throw new NotImplementedException(0);
        }
        copyTo(a, b) {
            throw new NotImplementedException(0);
        }
        get count() {
            let a = 0;
            let b = 0;
            if (this.a != null) {
                a = this.a.count;
            }
            if (this.b != null) {
                b = this.b.count;
            }
            let c = 0;
            c = Math.max(c, a);
            c = Math.max(c, b);
            return c;
        }
        get isReadOnly() {
            return true;
        }
        remove(a) {
            throw new NotImplementedException(0);
        }
        getEnumerator() {
            throw new NotImplementedException(0);
        }
        getEnumeratorObject() {
            throw new NotImplementedException(0);
        }
    }
    RangeValueList.$t = /*@__PURE__*/ markType(RangeValueList, 'RangeValueList', Base.$, [/*@__PURE__*/ IList$1_$type.specialize(Number_$type)]);
    return RangeValueList;
})();
