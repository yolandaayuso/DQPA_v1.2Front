/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { TrendLineManagerBase$1 } from "./TrendLineManagerBase$1";
import { IPreparesCategoryTrendline_$type } from "./IPreparesCategoryTrendline";
import { Number_$type, typeCast, markType } from "igniteui-react-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { ScalerParams } from "./ScalerParams";
import { Series } from "./Series";
import { SortedReadOnlyDoubleCollection } from "./SortedReadOnlyDoubleCollection";
/**
 * @hidden
 */
export let CategoryTrendLineManagerBase = /*@__PURE__*/ (() => {
    class CategoryTrendLineManagerBase extends TrendLineManagerBase$1 {
        constructor() {
            super(Number_$type);
        }
        get_g$a() {
            return 0;
        }
        get g$a() {
            return this.get_g$a();
        }
        prepareLine(a, b, c, d) {
            let e = b.n;
            let f = b.m;
            let g = new ScalerParams(0, b.p, b.o, b.b.j$b, e);
            let h = new ScalerParams(0, b.p, b.o, b.c.j$b, e);
            let i = b.b.j$a();
            let j = i[0];
            let k = i[1];
            if (typeCast(Series.$, a) !== null) {
                h.b = a.iy();
            }
            let l = c.f;
            if (b.d != null && b.d.i$b != null) {
                l = new SortedReadOnlyDoubleCollection(l, b.d.i$b);
            }
            let m = ((() => {
                let $ret = new TrendResolutionParams();
                $ret.e = b.j;
                $ret.f = b.k;
                $ret.g = b.l;
                $ret.a = d;
                $ret.d = b.i;
                $ret.i = b.o;
                $ret.h = b.n;
                $ret.c = j;
                $ret.b = k;
                return $ret;
            })());
            if (a.trendLineType != 0) {
                if (a.isVertical) {
                    this.prepareLineCore(b.a.q, a.trendLineType, l, a.trendLinePeriod, (n) => b.c.j$c(n, h), (n) => b.b.j$c(n, g), m);
                }
                else {
                    this.prepareLineCore(b.a.q, a.trendLineType, l, a.trendLinePeriod, (n) => b.b.j$c(n, g), (n) => b.c.j$c(n, h), m);
                }
            }
        }
    }
    CategoryTrendLineManagerBase.$t = /*@__PURE__*/ markType(CategoryTrendLineManagerBase, 'CategoryTrendLineManagerBase', /*@__PURE__*/ TrendLineManagerBase$1.$.specialize(Number_$type), [IPreparesCategoryTrendline_$type]);
    return CategoryTrendLineManagerBase;
})();
