/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, markType } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
/**
 * @hidden
 */
export let TreemapVisualData = /*@__PURE__*/ (() => {
    class TreemapVisualData extends Base {
        constructor() {
            super(...arguments);
            this._nodes = null;
            this._name = null;
            this._viewport = null;
        }
        get nodes() {
            return this._nodes;
        }
        set nodes(a) {
            this._nodes = a;
        }
        get name() {
            return this._name;
        }
        set name(a) {
            this._name = a;
        }
        scaleByViewport() {
            if (this.nodes != null) {
                for (let a of fromEnum(this.nodes)) {
                    a.f(this.viewport);
                }
            }
        }
        serialize() {
            let a = new StringBuilder(0);
            let b = true;
            a.u("{");
            if (this.nodes != null) {
                if (b) {
                    b = false;
                }
                else {
                    a.l(", ");
                }
                let c = true;
                a.l("Nodes: [");
                for (let d of fromEnum(this.nodes)) {
                    if (c) {
                        c = false;
                    }
                    else {
                        a.l(", ");
                    }
                    a.u(d.e());
                }
                a.u("]");
            }
            if (this.name != null) {
                if (b) {
                    b = false;
                }
                else {
                    a.l(", ");
                }
                a.l("name: '");
                a.l(this.name);
                a.u("'");
            }
            if (b) {
                b = false;
            }
            else {
                a.l(", ");
            }
            a.l("viewport: {");
            a.l("left: " + this.viewport.left + ", top: " + this.viewport.top + ", width: " + this.viewport.width + ", height: " + this.viewport.height);
            a.u("}");
            a.u("}");
            return a.toString();
        }
        get viewport() {
            return this._viewport;
        }
        set viewport(a) {
            this._viewport = a;
        }
    }
    TreemapVisualData.$t = /*@__PURE__*/ markType(TreemapVisualData, 'TreemapVisualData');
    return TreemapVisualData;
})();
