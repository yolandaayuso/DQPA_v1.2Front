/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType, TypeRegistrar } from "igniteui-react-core";
import { DVContainer } from "igniteui-react-core";
import { ISeriesInteractionManager_$type } from "./ISeriesInteractionManager";
import { SeriesInteractionManager } from "./SeriesInteractionManager";
import { ICategorySeriesInteractionManager_$type } from "./ICategorySeriesInteractionManager";
import { IAnchoredCategorySeriesInteractionManager_$type } from "./IAnchoredCategorySeriesInteractionManager";
import { IHorizontalAnchoredCategorySeriesInteractionManager_$type } from "./IHorizontalAnchoredCategorySeriesInteractionManager";
import { IVerticalAnchoredCategorySeriesInteractionManager_$type } from "./IVerticalAnchoredCategorySeriesInteractionManager";
import { ISeriesViewerInteractionManager_$type } from "./ISeriesViewerInteractionManager";
import { CategorySeriesInteractionManager } from "./CategorySeriesInteractionManager";
import { AnchoredCategorySeriesInteractionManager } from "./AnchoredCategorySeriesInteractionManager";
import { HorizontalAnchoredCategorySeriesInteractionManager } from "./HorizontalAnchoredCategorySeriesInteractionManager";
import { VerticalAnchoredCategorySeriesInteractionManager } from "./VerticalAnchoredCategorySeriesInteractionManager";
import { SeriesViewerInteractionManager } from "./SeriesViewerInteractionManager";
/**
 * @hidden
 */
export let InteractivityFactoryManager = /*@__PURE__*/ (() => {
    class InteractivityFactoryManager extends Base {
        static register() {
            if (!InteractivityFactoryManager.a) {
                TypeRegistrar.register("InteractivityFactoryManager", InteractivityFactoryManager.$);
                DVContainer.instance.registerFactory(ISeriesInteractionManager_$type, () => new SeriesInteractionManager());
                DVContainer.instance.registerFactory(ICategorySeriesInteractionManager_$type, () => new CategorySeriesInteractionManager());
                DVContainer.instance.registerFactory(IAnchoredCategorySeriesInteractionManager_$type, () => new AnchoredCategorySeriesInteractionManager());
                DVContainer.instance.registerFactory(IHorizontalAnchoredCategorySeriesInteractionManager_$type, () => new HorizontalAnchoredCategorySeriesInteractionManager());
                DVContainer.instance.registerFactory(IVerticalAnchoredCategorySeriesInteractionManager_$type, () => new VerticalAnchoredCategorySeriesInteractionManager());
                DVContainer.instance.registerFactory(ISeriesViewerInteractionManager_$type, () => new SeriesViewerInteractionManager());
                InteractivityFactoryManager.a = true;
            }
        }
    }
    InteractivityFactoryManager.$t = /*@__PURE__*/ markType(InteractivityFactoryManager, 'InteractivityFactoryManager');
    InteractivityFactoryManager.a = false;
    return InteractivityFactoryManager;
})();
