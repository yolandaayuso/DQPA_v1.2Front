import { IgrVerticalAnchoredCategorySeries } from "./igr-vertical-anchored-category-series";
import { BarSeries } from "./BarSeries";
import { toPoint, fromRect } from "igniteui-react-core";
/**
 * Represents a IgxDataChartComponent bar series.
*/
export class IgrBarSeries extends IgrVerticalAnchoredCategorySeries {
    createImplementation() {
        return new BarSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets whether the current series shows a bar shape.
    */
    get isBar() {
        return this.i.ex;
    }
    /**
     * Overridden by derived series classes to indicate when marker-less display is preferred or not.
    */
    get isMarkerlessDisplayPreferred() {
        return this.i.fl;
    }
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.
    */
    get radiusX() {
        return this.i.acp;
    }
    set radiusX(v) {
        this.i.acp = +v;
    }
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.
    */
    get radiusY() {
        return this.i.acq;
    }
    set radiusY(v) {
        this.i.acq = +v;
    }
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    */
    getSeriesValueBoundingBox(world) {
        let iv = this.i.wn(toPoint(world));
        return fromRect(iv);
    }
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    scrollIntoView(item) {
        let iv = this.i.gd(item);
        return (iv);
    }
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    getItemSpan() {
        let iv = this.i.iw();
        return (iv);
    }
}
