/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BrushScale } from "./BrushScale";
import { DependencyProperty } from "igniteui-react-core";
import { typeGetValue, markType, markDep } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase } from "igniteui-react-core";
/**
 * @hidden
 */
export let ValueBrushScale = /*@__PURE__*/ (() => {
    class ValueBrushScale extends BrushScale {
        constructor() {
            super();
            this.ac = false;
            this.ag = 10;
        }
        getBrushByIndex(a, b) {
            if (b == null || this.brushes == null || this.brushes.count == 0 || a < 0 || a >= b.count) {
                return null;
            }
            if (b.count == 0) {
                return this.brushes.item(0);
            }
            let c = isNaN_(this.minimumValue) || isInfinity(this.minimumValue) ? b.minimum : this.minimumValue;
            let d = isNaN_(this.maximumValue) || isInfinity(this.maximumValue) ? b.maximum : this.maximumValue;
            let e = b.item(a);
            if (c == d) {
                return e == c ? this.brushes.item(0) : null;
            }
            return this.au(c, d, e);
        }
        getBrushByValue(a, b) {
            if (b == null || this.brushes == null || this.brushes.count == 0) {
                return null;
            }
            if (b.count <= 1) {
                return this.brushes.item(0);
            }
            let c = isNaN_(this.minimumValue) || isInfinity(this.minimumValue) ? b.minimum : this.minimumValue;
            let d = isNaN_(this.maximumValue) || isInfinity(this.maximumValue) ? b.maximum : this.maximumValue;
            if (a < c) {
                return null;
            }
            if (a > d) {
                return null;
            }
            return this.au(c, d, a);
        }
        getBrushByRange(a, b, c) {
            if (this.brushes == null || this.brushes.count == 0 || isNaN_(a)) {
                return null;
            }
            if (this.brushes.count == 1) {
                return this.brushes.item(0);
            }
            let d = isNaN_(this.minimumValue) || isInfinity(this.minimumValue) ? b : this.minimumValue;
            let e = isNaN_(this.maximumValue) || isInfinity(this.maximumValue) ? c : this.maximumValue;
            if (isNaN_(d) || a < d) {
                return null;
            }
            if (isNaN_(e) || a > e) {
                return null;
            }
            return this.au(d, e, a);
        }
        au(a, b, c) {
            if (this.ac && this.ag > 0) {
                let d = logBase(a, this.ag);
                let e = logBase(b, this.ag);
                let f = logBase(c, this.ag);
                return this.at(d, e, f);
            }
            return this.at(a, b, c);
        }
        at(a, b, c) {
            if (c < a || c > b) {
                return null;
            }
            let d = (c - a) / (b - a);
            let e = d * (this.brushes.count - 1);
            return this.ab(e);
        }
        get_isReady() {
            return this.brushes != null && this.brushes.count > 0;
        }
        u(a, b, c, d) {
            switch (b) {
                case ValueBrushScale.$$p[1]:
                    this.ag = typeGetValue(d);
                    break;
                case ValueBrushScale.$$p[0]:
                    this.ac = d;
                    break;
            }
            super.u(a, b, c, d);
        }
    }
    ValueBrushScale.$t = /*@__PURE__*/ markType(ValueBrushScale, 'ValueBrushScale', BrushScale.$);
    ValueBrushScale.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ValueBrushScale, 'v', ['IsLogarithmic', [0, false], 'LogarithmBase', [1, 10], 'MaximumValue', [1, NaN], 'MinimumValue', [1, NaN]]);
    return ValueBrushScale;
})();
