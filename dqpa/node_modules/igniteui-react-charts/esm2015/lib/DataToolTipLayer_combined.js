/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { Axis } from "./Axis";
import { DependencyProperty } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Base, enumGetBox, EnumUtil, fromEnum, typeCast, String_$type, typeGetValue, Point_$type, Array_$type, markType, markDep, runOn, TypeRegistrar } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendLayoutMode_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { DataToolTipLayerFrame } from "./DataToolTipLayerFrame";
import { Dictionary$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { DataToolTipSeriesInfo } from "./DataToolTipSeriesInfo";
import { DataContext } from "igniteui-react-core";
import { DataTooltipCollisionInfo } from "./DataTooltipCollisionInfo";
import { DeviceUtils } from "igniteui-react-core";
import { HashSet$1 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
import { IOnDemandRender_$type } from "igniteui-react-core";
/**
 * @hidden
 */
export let DataToolTipLayer = /*@__PURE__*/ (() => {
    class DataToolTipLayer extends AnnotationLayer {
        bj() {
            return new DataToolTipLayer();
        }
        get_er() {
            return true;
        }
        constructor() {
            super();
            this.aan = 1;
            this.abs = new Dictionary$2(String_$type, Base.$, 0);
            this.abt = new List$1(String_$type, 0);
            this.aaf = 8;
            this.aaj = 11;
            this.aa3 = null;
            this.aav = null;
            this.aau = null;
            this.aay = null;
            this.aa0 = null;
            this.aax = null;
            this.aaz = null;
            this.aa2 = null;
            this.aa1 = null;
            this.aaw = null;
            let a = new DataToolTipLayerFrame();
            let b = new DataToolTipLayerFrame();
            let c = new DataToolTipLayerFrame();
            this.xc = a;
            this.xb = b;
            this.xd = c;
            this.ab = DataToolTipLayer.$;
        }
        cs() {
            return new DataToolTipLayerView(this);
        }
        q1(a) {
            super.q1(a);
            this.aar = a;
        }
        get_e2() {
            return true;
        }
        get aao() {
            return this.aan;
        }
        set aao(a) {
            let b = this.aan;
            this.aan = a;
            if (b != this.aan) {
                this.raisePropertyChanged("ActualGroupingMode", enumGetBox(DataToolTipLayerGroupingMode_$type, b), enumGetBox(DataToolTipLayerGroupingMode_$type, this.aan));
            }
        }
        aaq() {
            let a = true;
            let b = true;
            let c = true;
            let d = true;
            if (this.aap != 0) {
                return this.aap;
            }
            let e = this.z5();
            if (e != null) {
                for (let f of fromEnum(e.db())) {
                    if (!f.es && !f.fw) {
                        a = false;
                    }
                    if (!f.es && !f.fp) {
                        b = false;
                    }
                    if (!f.es && !f.fx) {
                        c = false;
                    }
                    if (!f.es && !f.ft) {
                        d = false;
                    }
                }
            }
            if (a || b || c || d) {
                return 2;
            }
            return 1;
        }
        q9(a, b, c, d) {
            super.q9(a, b, c, d);
            switch (b) {
                case DataToolTipLayer.$$p[42]:
                    this.rr(true);
                    break;
                case DataToolTipLayer.$$p[49]:
                    this.rr(true);
                    break;
                case DataToolTipLayer.$$p[12]:
                    this.aao = this.aaq();
                    break;
                case "ActualGroupingMode":
                    this.rr(true);
                    break;
                case DataToolTipLayer.$$p[10]:
                    this.aag = this.aai();
                    break;
                case DataToolTipLayer.$$p[11]:
                    this.aak = this.aam();
                    break;
                case "SeriesViewer":
                    this.aar.cl();
                    break;
                case DataToolTipLayer.$$p[31]:
                case DataToolTipLayer.$$p[24]:
                case DataToolTipLayer.$$p[5]:
                case DataToolTipLayer.$$p[23]:
                case DataToolTipLayer.$$p[4]:
                case DataToolTipLayer.$$p[28]:
                case DataToolTipLayer.$$p[50]:
                case DataToolTipLayer.$$p[52]:
                case DataToolTipLayer.$$p[53]:
                case DataToolTipLayer.$$p[54]:
                case DataToolTipLayer.$$p[51]:
                case DataToolTipLayer.$$p[57]:
                case DataToolTipLayer.$$p[56]:
                case DataToolTipLayer.$$p[55]:
                case DataToolTipLayer.$$p[58]:
                case DataToolTipLayer.$$p[59]:
                case DataToolTipLayer.$$p[63]:
                case DataToolTipLayer.$$p[62]:
                case DataToolTipLayer.$$p[61]:
                case DataToolTipLayer.$$p[60]:
                case "ValueTextStyle":
                case DataToolTipLayer.$$p[16]:
                case DataToolTipLayer.$$p[15]:
                case DataToolTipLayer.$$p[13]:
                case DataToolTipLayer.$$p[14]:
                case DataToolTipLayer.$$p[17]:
                case DataToolTipLayer.$$p[22]:
                case DataToolTipLayer.$$p[20]:
                case DataToolTipLayer.$$p[21]:
                case DataToolTipLayer.$$p[18]:
                case DataToolTipLayer.$$p[19]:
                case "HeaderTextStyle":
                case DataToolTipLayer.$$p[8]:
                case DataToolTipLayer.$$p[9]:
                case DataToolTipLayer.$$p[6]:
                case DataToolTipLayer.$$p[7]:
                case "GroupTextStyle":
                case DataToolTipLayer.$$p[35]:
                case "SummaryTitleTextStyle":
                case DataToolTipLayer.$$p[38]:
                case DataToolTipLayer.$$p[37]:
                case DataToolTipLayer.$$p[36]:
                case DataToolTipLayer.$$p[34]:
                case DataToolTipLayer.$$p[41]:
                case "SummaryValueTextStyle":
                case DataToolTipLayer.$$p[33]:
                case DataToolTipLayer.$$p[32]:
                case "SummaryLabelTextStyle":
                case DataToolTipLayer.$$p[40]:
                case DataToolTipLayer.$$p[39]:
                case "SummaryUnitsTextStyle":
                case DataToolTipLayer.$$p[0]:
                case DataToolTipLayer.$$p[1]:
                case DataToolTipLayer.$$p[45]:
                case DataToolTipLayer.$$p[48]:
                case DataToolTipLayer.$$p[46]:
                case DataToolTipLayer.$$p[47]:
                case "UnitsTextStyle":
                case DataToolTipLayer.$$p[44]:
                case DataToolTipLayer.$$p[43]:
                case "TitleTextStyle":
                case DataToolTipLayer.$$p[25]:
                case DataToolTipLayer.$$p[26]:
                case DataToolTipLayer.$$p[27]:
                case "LabelTextStyle":
                    this.afg(b, c, d);
                    break;
            }
        }
        afg(a, b, c) {
            if (!this.abs.containsKey(a)) {
                this.abt.add(a);
                this.abs.addItem(a, c);
            }
            else {
                this.abs.item(a, c);
            }
            this.rr(true);
        }
        afk(a, b) {
            switch (a) {
                case DataToolTipLayer.$$p[12]:
                    this.aap = EnumUtil.getEnumValue(DataToolTipLayerGroupingMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[29]:
                    this.abx = b;
                    break;
                case DataToolTipLayer.$$p[30]:
                    this.aby = b;
                    break;
                case DataToolTipLayer.$$p[2]:
                    this.abv = b;
                    break;
                case DataToolTipLayer.$$p[3]:
                    this.abw = b;
                    break;
                case DataToolTipLayer.$$p[10]:
                    this.aah = EnumUtil.getEnumValue(DataTooltipGroupedPositionX_$type, b);
                    break;
                case DataToolTipLayer.$$p[11]:
                    this.aal = EnumUtil.getEnumValue(DataTooltipGroupedPositionY_$type, b);
                    break;
                case DataToolTipLayer.$$p[31]:
                    this.abn = b;
                    break;
                case DataToolTipLayer.$$p[24]:
                    this.z3 = b;
                    break;
                case DataToolTipLayer.$$p[5]:
                    this.zy = b;
                    break;
                case DataToolTipLayer.$$p[23]:
                    this.z2 = b;
                    break;
                case DataToolTipLayer.$$p[4]:
                    this.zx = b;
                    break;
                case DataToolTipLayer.$$p[50]:
                    this.z7 = EnumUtil.getEnumValue(DataAbbreviationMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[52]:
                    this.acx = typeGetValue(b);
                    break;
                case DataToolTipLayer.$$p[53]:
                    this.acy = typeGetValue(b);
                    break;
                case DataToolTipLayer.$$p[54]:
                    this.aae = EnumUtil.getEnumValue(DataLegendValueMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[51]:
                    this.aey = b;
                    break;
                case DataToolTipLayer.$$p[57]:
                    this.abp = b;
                    break;
                case DataToolTipLayer.$$p[56]:
                    this.ae4 = b;
                    break;
                case DataToolTipLayer.$$p[55]:
                    this.z4 = b;
                    break;
                case DataToolTipLayer.$$p[58]:
                    this.ah3 = b;
                    break;
                case DataToolTipLayer.$$p[59]:
                    this.abq = b;
                    break;
                case DataToolTipLayer.$$p[63]:
                    this.afd = b;
                    break;
                case DataToolTipLayer.$$p[62]:
                    this.abr = b;
                    break;
                case DataToolTipLayer.$$p[61]:
                    this.ah4 = b;
                    break;
                case DataToolTipLayer.$$p[60]:
                    this.ahm = b;
                    break;
                case "ValueTextStyle":
                    this.abd = b;
                    break;
                case DataToolTipLayer.$$p[16]:
                    this.adl = b;
                    break;
                case DataToolTipLayer.$$p[15]:
                    this.z1 = b;
                    break;
                case DataToolTipLayer.$$p[13]:
                    this.adh = b;
                    break;
                case DataToolTipLayer.$$p[14]:
                    this.z8 = EnumUtil.getEnumValue(DataLegendHeaderDateMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[17]:
                    this.z9 = EnumUtil.getEnumValue(DataLegendHeaderTimeMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[22]:
                    this.adq = b;
                    break;
                case DataToolTipLayer.$$p[20]:
                    this.ahe = b;
                    break;
                case DataToolTipLayer.$$p[21]:
                    this.ahx = b;
                    break;
                case DataToolTipLayer.$$p[18]:
                    this.ahw = b;
                    break;
                case DataToolTipLayer.$$p[19]:
                    this.abg = b;
                    break;
                case "HeaderTextStyle":
                    this.aa5 = b;
                    break;
                case DataToolTipLayer.$$p[28]:
                    this.aab = EnumUtil.getEnumValue(DataLegendLayoutMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[8]:
                    this.ahd = b;
                    break;
                case DataToolTipLayer.$$p[9]:
                    this.ahv = b;
                    break;
                case DataToolTipLayer.$$p[6]:
                    this.ahu = b;
                    break;
                case DataToolTipLayer.$$p[7]:
                    this.abf = b;
                    break;
                case "GroupTextStyle":
                    this.aa4 = b;
                    break;
                case DataToolTipLayer.$$p[35]:
                    this.ahh = b;
                    break;
                case "SummaryTitleTextStyle":
                    this.aa8 = b;
                    break;
                case DataToolTipLayer.$$p[38]:
                    this.aac = EnumUtil.getEnumValue(DataLegendSummaryType_$type, b);
                    break;
                case DataToolTipLayer.$$p[37]:
                    this.aea = b;
                    break;
                case DataToolTipLayer.$$p[36]:
                    this.ah0 = b;
                    break;
                case DataToolTipLayer.$$p[34]:
                    this.ahz = b;
                    break;
                case DataToolTipLayer.$$p[41]:
                    this.ahj = b;
                    break;
                case "SummaryValueTextStyle":
                    this.aba = b;
                    break;
                case DataToolTipLayer.$$p[33]:
                    this.ad5 = b;
                    break;
                case DataToolTipLayer.$$p[32]:
                    this.ahg = b;
                    break;
                case "SummaryLabelTextStyle":
                    this.aa7 = b;
                    break;
                case DataToolTipLayer.$$p[40]:
                    this.aeg = b;
                    break;
                case DataToolTipLayer.$$p[39]:
                    this.ahi = b;
                    break;
                case "SummaryUnitsTextStyle":
                    this.aa9 = b;
                    break;
                case DataToolTipLayer.$$p[0]:
                    this.aht = b;
                    break;
                case DataToolTipLayer.$$p[1]:
                    this.aat = EnumUtil.getEnumValue(LegendItemBadgeShape_$type, b);
                    break;
                case DataToolTipLayer.$$p[45]:
                    this.aad = EnumUtil.getEnumValue(DataLegendUnitsMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[48]:
                    this.aer = b;
                    break;
                case DataToolTipLayer.$$p[46]:
                    this.ahl = b;
                    break;
                case DataToolTipLayer.$$p[47]:
                    this.ah2 = b;
                    break;
                case "UnitsTextStyle":
                    this.abc = b;
                    break;
                case DataToolTipLayer.$$p[44]:
                    this.ah1 = b;
                    break;
                case DataToolTipLayer.$$p[43]:
                    this.ahk = b;
                    break;
                case "TitleTextStyle":
                    this.abb = b;
                    break;
                case DataToolTipLayer.$$p[25]:
                    this.aaa = EnumUtil.getEnumValue(DataLegendLabelMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[26]:
                    this.ahf = b;
                    break;
                case DataToolTipLayer.$$p[27]:
                    this.ahy = b;
                    break;
                case "LabelTextStyle":
                    this.aa6 = b;
                    break;
            }
        }
        afh(a) {
            for (let b = 0; b < this.abt.count; b++) {
                let c = this.abt._inner[b];
                a.updatePropertyByName(c, this.abs.item(c));
            }
        }
        yo(a, b) {
            {
                if (!this.a1.c) {
                    this.rr(b);
                }
            }
        }
        yp(a, b) {
            if (!this.a1.c) {
                this.rr(b);
            }
        }
        yr(a, b) {
            super.yr(a, b);
            this.aan = this.aaq();
            let c = a;
            let d = this.aar.b9;
            let e = this.abo;
            let f = false;
            c.m.clear();
            c.i.clear();
            c.l.clear();
            c.g.clear();
            c.f.clear();
            c.k.clear();
            c.j.clear();
            c.h.clear();
            if (isNaN_(this.zu.x) && isNaN_(this.zu.y)) {
                d.count = 0;
                return;
            }
            {
                if (this.aao == 2) {
                    let g = 0;
                    {
                        for (let h of fromEnum(this.db.series)) {
                            if (this.xi(h)) {
                                this.afj(h, c, e, f, g);
                                g++;
                            }
                            if (h.isStacked) {
                                h.p3((i) => {
                                    if (this.xi(i)) {
                                        this.afj(i, c, e, f, g);
                                        g++;
                                    }
                                    if (i.eg) {
                                        i.p1((j) => {
                                            if (this.xi(j)) {
                                                this.afj(j, c, e, f, g);
                                                g++;
                                            }
                                            return true;
                                        });
                                    }
                                    return true;
                                });
                            }
                            if (h.eg) {
                                h.p1((i) => {
                                    if (this.xi(i)) {
                                        this.afj(i, c, e, f, g);
                                        g++;
                                    }
                                    return true;
                                });
                            }
                        }
                        this.aff(c);
                    }
                    d.count = g;
                }
                else {
                    let i = this.z5();
                    let j = this.abu(i);
                    let k = this.aas(i, j, e);
                    this.afi(k, c, e);
                }
            }
        }
        abu(a) {
            let b = new List$1(Series.$, 0);
            if (a == null) {
                return b;
            }
            for (let c of fromEnum(a.df)) {
                b.add(c);
            }
            return b;
        }
        z5() {
            if (this.z6 != null) {
                return this.z6;
            }
            if (this.db == null) {
                return null;
            }
            for (let a of fromEnum(this.db.series)) {
                if (a.ey) {
                    let b = a.a0();
                    if (b != null && b.co()) {
                        return b;
                    }
                }
            }
            for (let c of fromEnum(this.db.series)) {
                if (!c.ey) {
                    let d = c.ai();
                    let e = d != null && d.length > 0 ? d[0] : null;
                    if (e != null && e.co()) {
                        return e;
                    }
                }
            }
            return null;
        }
        aas(a, b, c) {
            let d = 1.7976931348623157E+308;
            let e = -1.7976931348623157E+308;
            let f = new List$1(DataContext.$, 0);
            let g = new List$1(Base.$, 0);
            let h = false;
            let i = true;
            let j = { $type: Point_$type, x: NaN, y: NaN };
            let k = 0;
            let l = 0;
            for (let m = 0; m < b.count; m++) {
                let n = b.item(m);
                k = n.db.l;
                l = n.db.m;
                if (n.ey) {
                    let o = n;
                    let p = new List$1(Series.$, 0);
                    if (o.isStacked) {
                        o.p3((q) => {
                            p.add(q);
                            if (q.eg) {
                                q.p1((r) => {
                                    p.add(r);
                                    return true;
                                });
                            }
                            return true;
                        });
                    }
                    else if (o.eg) {
                        p.add(o);
                        o.p1((q) => {
                            p.add(q);
                            return true;
                        });
                    }
                    else {
                        p.add(o);
                    }
                    for (let q = 0; q < p.count; q++) {
                        let r = p._inner[q];
                        let s = p._inner[q];
                        if (s.db == null) {
                            continue;
                        }
                        if (!r.categoryAxis.co()) {
                            continue;
                        }
                        if (i) {
                            h = s.isVertical;
                        }
                        else {
                            if (h != s.isVertical) {
                                continue;
                            }
                        }
                        let t = this.yk(s);
                        if (!t.c) {
                            continue;
                        }
                        j = s.v7(t.d);
                        let u = s.wc(t.d, c, false);
                        if (h) {
                            if (!isNaN_(u.y)) {
                                d = Math.min(d, u.y);
                                e = Math.max(e, u.y);
                            }
                        }
                        else {
                            if (!isNaN_(u.x)) {
                                d = Math.min(d, u.x);
                                e = Math.max(e, u.x);
                            }
                        }
                    }
                }
                else {
                    let v = n.ai();
                    for (let w = 0; w < v.length; w++) {
                        if (!v[w].co()) {
                            continue;
                        }
                    }
                    let x = n.wc(this.zu, c, false);
                    j = n.v7(this.zu);
                    if (h) {
                        if (!isNaN_(x.y)) {
                            d = Math.min(d, x.y);
                            e = Math.max(e, x.y);
                        }
                    }
                    else {
                        if (!isNaN_(x.x)) {
                            d = Math.min(d, x.x);
                            e = Math.max(e, x.x);
                        }
                    }
                }
                let y = null;
                let z = n.kn(this.zu);
                if (n.e3 && z != null) {
                    y = n.a3(z);
                }
                else {
                    y = new DataContext();
                    y.item = z;
                    y.series = n;
                }
                f.add(y);
            }
            let aa = 0;
            let ab = 0;
            if (h) {
                ab = (d + e) / 2;
                aa = this.ws.right;
                if (!isNaN_(j.x)) {
                    aa = j.x;
                }
                if (ab < 0 || ab > this.ws.bottom) {
                    ab = NaN;
                }
            }
            else {
                aa = (d + e) / 2;
                if (!isNaN_(j.y)) {
                    ab = j.y;
                }
                if (aa < 0 || aa > this.ws.right) {
                    aa = NaN;
                }
            }
            let ac = new DataToolTipSeriesInfo();
            ac.f = { $type: Point_$type, x: aa, y: ab };
            ac.e = { $type: Point_$type, x: j.x, y: j.y };
            ac.b = f;
            ac.a = h;
            return ac;
        }
        p7() {
            this.zu = { $type: Point_$type, x: NaN, y: NaN };
            this.rr(false);
            this.aar.cj(false);
        }
        p8() {
            this.zu = { $type: Point_$type, x: NaN, y: NaN };
            this.rr(false);
            this.aar.cj(true);
        }
        get ahq() {
            let a = RectUtil.n(this.cv.bx);
            let b = new Size(1, this.cv.bx.width, this.cv.bx.height);
            return new Rect(3, a, b);
        }
        get ahp() {
            let a = RectUtil.n(this.cv.bx);
            let b = new Size(1, this.cv.bx.width, this.cv.bx.height);
            return new Rect(3, this.aar.cm(a), b);
        }
        get aho() {
            let a = new Rect(0, 0, 0, this.db.m, this.db.l);
            let b = RectUtil.n(a);
            let c = new Size(1, a.width, a.height);
            return new Rect(3, this.aar.cm(b), c);
        }
        get ahs() {
            let a = { $type: Point_$type, x: 0, y: 0 };
            return new Rect(3, a, this.aar.cr());
        }
        ahr() {
            return this.ahq;
        }
        abk(a, b, c) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let d = a.top;
            return c < d;
        }
        abh(a, b, c, d) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let e = a.bottom;
            return c + d.height >= e;
        }
        abi(a, b, c) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let d = a.left;
            return c < d;
        }
        abj(a, b, c, d) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let e = a.right;
            return c + d.width > e;
        }
        acn(a, b) {
            return a.top + b;
        }
        acl(a, b, c) {
            return a.bottom - c.height - b;
        }
        acm(a, b) {
            return ((a.bottom + a.top) / 2) - (b.height / 2);
        }
        acw(a, b, c, d, e) {
            let f = c.y - d.height - b;
            return f;
        }
        acu(a, b, c, d, e) {
            let f = c.y + b;
            return f;
        }
        acv(a, b, c, d, e) {
            let f = c.y - (d.height / 2);
            return f;
        }
        acq(a, b, c, d, e) {
            let f = c.y - d.height;
            f = f - b;
            return f;
        }
        aco(a, b, c, d, e) {
            let f = c.y;
            f = f + b;
            return f;
        }
        acp(a, b, c, d, e) {
            let f = c.y - (d.height / 2);
            return f;
        }
        ab6(a, b) {
            return a.left + b;
        }
        ab8(a, b, c) {
            return (a.right - (c.width)) - b;
        }
        ab7(a, b, c) {
            return ((a.right + a.left) / 2) - (c.width / 2) + b;
        }
        acf(a, b, c, d, e) {
            let f = (c.x - d.width) - b;
            return f;
        }
        ach(a, b, c, d, e) {
            let f = c.x + b;
            return f;
        }
        acg(a, b, c, d, e) {
            let f = (c.x - (d.width / 2));
            f = f + b;
            return f;
        }
        acc(a, b, c, d, e) {
            let f = c.x - d.width;
            f = f - b;
            return f;
        }
        ace(a, b, c, d, e) {
            let f = c.x;
            f = f + b;
            return f;
        }
        acd(a, b, c, d, e) {
            let f = c.x - (d.width / 2);
            f = f + b;
            return f;
        }
        ab2(a, b, c, d, e, f, g, h) {
            switch (a) {
                case 1:
                    {
                        return this.acq(e, b, h, f, true);
                    }
                case 2:
                    {
                        return this.aco(e, b, h, f, true);
                    }
                case 3:
                    {
                        return this.acp(e, b, h, f, true);
                    }
                case 5: return this.acr(e, c, b, h, f);
                case 6: return this.acs(e, c, b, h, f);
                case 4: return this.act(e, c, b, h, f);
                case 8: return this.aci(e, c, b, h, f);
                case 9: return this.acj(e, c, b, h, f);
                case 7: return this.ack(e, c, b, h, f);
                case 13: return this.acn(d, b);
                case 14: return this.acl(d, b, f);
                case 15: return this.acm(d, f);
                case 10: return this.acw(e, b, g, f, true);
                case 12: return this.acv(e, b, g, f, true);
                case 11:
                default: return this.acu(e, b, g, f, true);
            }
        }
        ab9(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f - e.width;
            f = f - c;
            return f;
        }
        aca(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f - e.width / 2;
            f = f + c;
            return f;
        }
        acb(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f + c;
            return f;
        }
        ab3(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f - e.width;
            f = f - c;
            return f;
        }
        ab4(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f - e.width / 2;
            f = f + c;
            return f;
        }
        ab5(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f + c;
            return f;
        }
        ack(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f - e.height;
            f = f - c;
            return f;
        }
        acj(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f - e.height / 2;
            f = f + c;
            return f;
        }
        aci(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f + c;
            return f;
        }
        act(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f - e.height;
            f = f - c;
            return f;
        }
        acs(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f - e.height / 2;
            f = f + c;
            return f;
        }
        acr(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f + c;
            return f;
        }
        ab1(a, b, c, d, e, f, g, h) {
            switch (a) {
                case 10: return this.acf(e, b, g, f, true);
                case 11: return this.ach(e, b, g, f, true);
                case 12: return this.acg(e, b, g, f, true);
                case 13: return this.ab6(d, b);
                case 14: return this.ab8(e, b, f);
                case 15: return this.ab7(e, b, f);
                case 5: return this.ab5(e, c, b, h, f);
                case 6: return this.ab4(e, c, b, h, f);
                case 4: return this.ab3(e, c, b, h, f);
                case 8: return this.acb(e, c, b, h, f);
                case 9: return this.aca(e, c, b, h, f);
                case 7: return this.ab9(e, c, b, h, f);
                case 1:
                    {
                        return this.acc(e, b, h, f, true);
                    }
                case 3:
                    {
                        return this.acd(e, b, h, f, true);
                    }
                case 2:
                default:
                    {
                        return this.ace(e, b, h, f, true);
                    }
            }
        }
        ahn(a, b, c, d) {
            let e = this.aag;
            let f = this.aak;
            let g = this.z5();
            let h = 0;
            if (g != null && g.cb && this.db != null) {
                h = g.getCategorySize(this.db.v4, this.ws, this.getEffectiveViewport());
                if (g.categoryMode == 0) {
                    h = 0;
                }
            }
            let i = this.abz(e);
            let j = this.ab0(f);
            let k = this.ab1(e, i, h, this.ahq, a, b, c, d);
            let l = this.ab2(f, j, h, this.ahq, a, b, c, d);
            let m = this.abl(a, i, k, b);
            let n = this.abm(a, j, l, b);
            if (!m) {
                let o = this.zz(e);
                let p = 0;
                while (!m && p < o.length) {
                    e = o[p];
                    i = this.abz(e);
                    k = this.ab1(e, i, h, this.ahq, a, b, c, d);
                    m = this.abl(a, i, k, b);
                    p++;
                }
            }
            if (!n) {
                let q = this.z0(f);
                let r = 0;
                while (!n && r < q.length) {
                    f = q[r];
                    j = this.ab0(f);
                    l = this.ab2(f, j, h, this.ahq, a, b, c, d);
                    n = this.abm(a, j, l, b);
                    r++;
                }
            }
            return { $type: Point_$type, x: k, y: l };
        }
        ab0(a) {
            if (!isNaN_(this.aby)) {
                return this.aby;
            }
            switch (a) {
                case 1: return this.abw;
                case 2: return this.abw;
                case 3: return 0;
                case 4: return this.abw;
                case 5: return this.abw;
                case 6: return this.abw;
                case 7: return this.abw;
                case 8: return this.abw;
                case 9: return 0;
                case 10: return this.abw;
                case 11: return this.abw;
                case 12: return 0;
                case 13: return this.abw;
                case 14: return this.abw;
                case 15: return 0;
            }
            return this.abw;
        }
        abz(a) {
            if (!isNaN_(this.abx)) {
                return this.abx;
            }
            switch (a) {
                case 4: return this.abv;
                case 6: return 0;
                case 5: return this.abv;
                case 13: return this.abv;
                case 15: return 0;
                case 14: return this.abv;
                case 7: return this.abv;
                case 9: return 0;
                case 8: return this.abv;
                case 1: return this.abv;
                case 3: return 0;
                case 2: return this.abv;
                case 10: return this.abv;
                case 12: return 0;
                case 11: return this.abv;
            }
            return this.abv;
        }
        z0(a) {
            let b = [a];
            switch (a) {
                case 1:
                    b = [2, 3, 13, 14];
                    break;
                case 2:
                    b = [1, 3, 14, 13];
                    break;
                case 3:
                    b = [1, 2];
                    break;
                case 4:
                    b = [8, 7, 3, 13, 14];
                    break;
                case 5:
                    b = [7, 8, 3, 13, 14];
                    break;
                case 6:
                    b = [9, 8, 4, 3];
                    break;
                case 7:
                    b = [5, 4, 2, 14, 13];
                    break;
                case 8:
                    b = [4, 5, 3, 14, 13];
                    break;
                case 9:
                    b = [6, 4, 8, 3];
                    break;
                case 10:
                    b = [11, 12, 2, 1, 3, 13, 14];
                    break;
                case 11:
                    b = [10, 12, 1, 2, 3, 14, 13];
                    break;
                case 12:
                    b = [10, 11];
                    break;
                case 13: break;
                case 14: break;
                case 15: break;
            }
            return b;
        }
        zz(a) {
            let b = [a];
            switch (a) {
                case 1:
                    b = [2, 3, 13, 14];
                    break;
                case 2:
                    b = [1, 3, 14, 13];
                    break;
                case 3:
                    b = [1, 2];
                    break;
                case 4:
                    b = [8, 7, 3, 13, 14];
                    break;
                case 5:
                    b = [7, 8, 1, 14, 13];
                    break;
                case 6:
                    b = [9, 8, 4, 3];
                    break;
                case 7:
                    b = [5, 4, 2, 14, 13];
                    break;
                case 8:
                    b = [4, 5, 3, 13, 14];
                    break;
                case 9:
                    b = [6, 4, 8, 3];
                    break;
                case 10:
                    b = [11, 12, 2, 1, 3, 13, 14];
                    break;
                case 11:
                    b = [10, 12, 1, 2, 3, 14, 13];
                    break;
                case 12:
                    b = [10, 11];
                    break;
                case 13: break;
                case 14: break;
                case 15: break;
            }
            return b;
        }
        abl(a, b, c, d) {
            return !(this.abi(a, b, c) || this.abj(a, b, c, d));
        }
        abm(a, b, c, d) {
            return !(this.abk(a, b, c) || this.abh(a, b, c, d));
        }
        aff(a) {
            let b = new List$1(DataTooltipCollisionInfo.$, 0);
            for (let c = 0; c < a.f.count; c++) {
                let d = new DataTooltipCollisionInfo();
                d.d = c;
                d.e = { $type: Point_$type, x: a.f._inner[c], y: a.g._inner[c] };
                d.c = a.k._inner[c];
                d.a = a.j._inner[c];
                d.b = a.m._inner[c];
                if (isNaN_(d.e.x) || isNaN_(d.e.y)) {
                    continue;
                }
                b.add(d);
            }
            b.aa((e, f) => {
                if (e.e.y < f.e.y) {
                    return -1;
                }
                if (e.e.y > f.e.y) {
                    return 1;
                }
                if (e.b < f.b) {
                    return -1;
                }
                if (e.b > f.b) {
                    return 1;
                }
                return 0;
            });
            let e = this.abe(b);
            if (!e) {
                return;
            }
            for (let f = 0; f < b.count - 1; f++) {
                let g = b._inner[f];
                let h = b._inner[f + 1];
                let i = new Rect(0, g.e.x, g.e.y, g.c, g.a);
                let j = new Rect(0, h.e.x, h.e.y, h.c, h.a);
                if (i.intersectsWith(j) || i.top > j.bottom) {
                    h.e = { $type: Point_$type, x: h.e.x, y: i.bottom + 1 };
                }
            }
            if (b._inner[b.count - 1].e.y + b._inner[b.count - 1].a > this.cv.bx.height) {
                b._inner[b.count - 1].e = { $type: Point_$type, x: b._inner[b.count - 1].e.x, y: b._inner[b.count - 1].e.y - ((b._inner[b.count - 1].e.y + b._inner[b.count - 1].a) - this.cv.bx.height) };
            }
            for (let k = b.count - 1; k >= 1; k--) {
                let l = b._inner[k];
                let m = b._inner[k - 1];
                let n = new Rect(0, l.e.x, l.e.y, l.c, l.a);
                let o = new Rect(0, m.e.x, m.e.y, m.c, m.a);
                if (n.intersectsWith(o) || n.top < o.bottom) {
                    m.e = { $type: Point_$type, x: m.e.x, y: n.top - (o.height + 1) };
                }
            }
            for (let p = 0; p < b.count; p++) {
                let q = b._inner[p].d;
                let r = b._inner[p];
                a.f._inner[q] = r.e.x;
                a.g._inner[q] = r.e.y;
            }
        }
        abe(a) {
            if (a.count <= 1) {
                return false;
            }
            let b = this.cv.bx;
            for (let c = 0; c < a.count - 1; c++) {
                let d = a._inner[c];
                let e = a._inner[c + 1];
                let f = new Rect(0, d.e.x, d.e.y, d.c, d.a);
                let g = new Rect(0, e.e.x, e.e.y, e.c, e.a);
                if (f.intersectsWith(g)) {
                    return true;
                }
            }
            return false;
        }
        afj(a, b, c, d, e) {
            let f = this.yk(a);
            if (!f.c) {
                return;
            }
            let g = a.wc(f.d, c, d);
            let h = this.aar.b9;
            let i = this.zu;
            if (!c) {
                i = this.wh(g);
            }
            let j = a.kn(i);
            let k = h.item(e);
            let l = this.cv.bx;
            let m = this.aar.b8(k);
            if (!Base.equalsStatic(m.target, this.db)) {
                m.target = this.db;
            }
            let n = new List$1(String_$type, 0);
            if (a.eg && this.aao == 2) {
                a.p1((o) => {
                    if (this.xi(o)) {
                        n.add(o.dataLegendKey);
                    }
                    return true;
                });
            }
            m.includedSeries = [a.dataLegendKey];
            m.excludedSeries = n.toArray();
            this.afh(m);
            m.targetCursorPositionX = this.zu.x;
            m.targetCursorPositionY = this.zu.y;
            if (!this.aar.cb(k, a)) {
                return;
            }
            let o = this.aar.cq(k);
            b.i.add1(k);
            let p = g.x;
            let q = g.x;
            q = Math.max(q, l.left);
            q = Math.min(q, l.right);
            b.l.add(q);
            let r = g.y;
            r = Math.max(r, l.top);
            r = Math.min(r, l.bottom);
            b.m.add(r);
            let s = DeviceUtils.g(10);
            let t = g.x + s;
            if (t + o.width > l.right) {
                t = (l.right - o.width) - s;
            }
            if (t < l.left) {
                t = l.left;
            }
            b.f.add(t);
            let u = (g.y - o.height) - s;
            if (u + o.height > l.bottom) {
                u = (l.bottom - o.height) - s;
            }
            if (u < l.top) {
                u = l.top;
            }
            b.g.add(u);
            b.k.add(o.width);
            b.j.add(o.height);
            let v = this.u9;
            if (v == null) {
                v = this.vf;
            }
            if (v == null) {
                v = a.u9;
            }
            b.h.add(v);
        }
        afi(a, b, c) {
            this.aaf = this.aai();
            this.aaj = this.aam();
            let d = a.f;
            let e = a.e;
            let f = 0;
            let g = this.aar.b9.item(0);
            this.aar.cb(g, null);
            let h = this.aar.b8(g);
            if (!Base.equalsStatic(h.target, this.db)) {
                h.target = this.db;
            }
            let i = new List$1(String_$type, 0);
            let j = this.z5();
            if (j != null) {
                for (let k of fromEnum(j.db())) {
                    if (k.isStacked) {
                        k.p3((l) => {
                            i.add(l.dataLegendKey);
                            if (l.eg) {
                                l.p1((m) => {
                                    i.add(m.dataLegendKey);
                                    return true;
                                });
                            }
                            return true;
                        });
                    }
                    else if (k.eg) {
                        i.add(k.dataLegendKey);
                        k.p1((l) => {
                            i.add(l.dataLegendKey);
                            return true;
                        });
                    }
                    else {
                        i.add(k.dataLegendKey);
                    }
                }
                h.includedSeries = i.toArray();
                h.excludedSeries = null;
            }
            else {
                h.includedSeries = null;
                h.excludedSeries = null;
            }
            this.afh(h);
            h.targetCursorPositionX = this.zu.x;
            h.targetCursorPositionY = this.zu.y;
            let l = this.aar.cq(g);
            let m = 0;
            let n = 0;
            let o = 0;
            let p = 0;
            let q = false;
            let r = false;
            o = d.x;
            p = d.y;
            let s = this.cv.bx;
            let t = this.aar.cr();
            let u = this.ahr();
            let v = this.ahn(u, l, e, d);
            let w = v.x;
            let x = v.y;
            {
            }
            b.l.add(w);
            b.m.add(x);
            b.f.add(w);
            b.g.add(x);
            b.k.add(l.width);
            b.j.add(l.height);
            b.i.add1(g);
            let y = null;
            b.h.add(y);
            this.aar.b9.count = 1;
        }
        acz(a) {
            return a.toolTip;
        }
        yu(a, b) {
            super.yu(a, b);
            let c = a;
            let d = c.m.count;
            let e = b.bx.left;
            let f = b.bx.right;
            let g = b.bx.top;
            let h = b.bx.bottom;
            for (let i = 0; i < d; i++) {
                if (isNaN_(c.l._inner[i]) || isNaN_(c.m._inner[i]) || isNaN_(c.f._inner[i]) || isNaN_(c.g._inner[i])) {
                    this.aar.ci(c.i._inner[i]);
                    continue;
                }
                let j = c.f._inner[i];
                let k = c.g._inner[i];
                let l = c.k._inner[i];
                let m = c.j._inner[i];
                let n = false;
                if (n) {
                    this.aar.ci(c.i._inner[i]);
                    continue;
                }
                let o = c.i._inner[i];
                let p = Math.min(c.f._inner[i], c.l._inner[i]);
                let q = Math.min(c.g._inner[i], c.m._inner[i]);
                let r = c.l._inner[i] - c.f._inner[i];
                let s = c.m._inner[i] - c.g._inner[i];
                if (o != null) {
                    this.aar.ck(o, p, q, r, s);
                }
            }
        }
        ga() {
            return true;
        }
        get aag() {
            return this.aaf;
        }
        set aag(a) {
            let b = this.aaf;
            this.aaf = a;
            if (b != this.aaf) {
                this.raisePropertyChanged("ActualGroupedPositionModeX", enumGetBox(DataTooltipGroupedPositionX_$type, b), enumGetBox(DataTooltipGroupedPositionX_$type, this.aaf));
            }
        }
        aai() {
            if (this.db == null) {
                return 2;
            }
            let a = false;
            let b = false;
            let c = false;
            let d = false;
            let e = this.z5();
            if (e == null) {
                if (this.aah != 0) {
                    return this.aah;
                }
                else {
                    return 2;
                }
            }
            for (let f of fromEnum(e.df)) {
                if (f.ez) {
                    a = true;
                }
                if (f.isVertical) {
                    b = true;
                }
                if (f.fp) {
                    c = true;
                }
                if (f.fw) {
                    d = true;
                }
            }
            let g = ((() => {
                let $ret = new HashSet$1(DataTooltipGroupedPositionX_$type, 0);
                $ret.add_1(1);
                $ret.add_1(2);
                $ret.add_1(3);
                $ret.add_1(4);
                $ret.add_1(5);
                $ret.add_1(6);
                $ret.add_1(7);
                $ret.add_1(8);
                $ret.add_1(9);
                return $ret;
            })());
            let h = g.contains(this.aah);
            if (this.aah != 0) {
                return this.aah;
            }
            if (h && b) {
                return 11;
            }
            if (c || d) {
                return 11;
            }
            if (b) {
                return 11;
            }
            if (a) {
                return 8;
            }
            return 8;
        }
        get aak() {
            return this.aaj;
        }
        set aak(a) {
            let b = this.aaj;
            this.aaj = a;
            if (b != this.aaj) {
                this.raisePropertyChanged("ActualPositionModeY", enumGetBox(DataTooltipGroupedPositionY_$type, b), enumGetBox(DataTooltipGroupedPositionY_$type, this.aaj));
            }
        }
        aam() {
            if (this.db == null) {
                return 11;
            }
            let a = false;
            let b = false;
            let c = false;
            let d = this.z5();
            if (d == null) {
                if (this.aal != 0) {
                    return this.aal;
                }
                else {
                    return 11;
                }
            }
            for (let e of fromEnum(d.db())) {
                if (e.isVertical) {
                    a = true;
                }
                if (e.fp) {
                    b = true;
                }
                if (e.fw) {
                    c = true;
                }
            }
            let f = ((() => {
                let $ret = new HashSet$1(DataTooltipGroupedPositionY_$type, 0);
                $ret.add_1(1);
                $ret.add_1(2);
                $ret.add_1(3);
                $ret.add_1(4);
                $ret.add_1(5);
                $ret.add_1(6);
                $ret.add_1(7);
                $ret.add_1(8);
                $ret.add_1(9);
                return $ret;
            })());
            let g = f.contains(this.aal);
            if (this.aal != 0) {
                return this.aal;
            }
            if (g && !a) {
                return 11;
            }
            if (b || c) {
                return 11;
            }
            if (a) {
                return 8;
            }
            if (!a) {
                return 11;
            }
            return 11;
        }
        get abd() {
            return this.aa3;
        }
        set abd(a) {
            let b = this.aa3;
            this.aa3 = a;
            if (b != this.aa3) {
                this.raisePropertyChanged("ValueTextStyle", b, this.aa3);
            }
        }
        get aa5() {
            return this.aav;
        }
        set aa5(a) {
            let b = this.aav;
            this.aav = a;
            if (b != this.aav) {
                this.raisePropertyChanged("HeaderTextStyle", b, this.aav);
            }
        }
        get aa4() {
            return this.aau;
        }
        set aa4(a) {
            let b = this.aau;
            this.aau = a;
            if (b != this.aau) {
                this.raisePropertyChanged("GroupTextStyle", b, this.aau);
            }
        }
        get aa8() {
            return this.aay;
        }
        set aa8(a) {
            let b = this.aay;
            this.aay = a;
            if (b != this.aay) {
                this.raisePropertyChanged("SummaryTitleTextStyle", b, this.aay);
            }
        }
        get aba() {
            return this.aa0;
        }
        set aba(a) {
            let b = this.aa0;
            this.aa0 = a;
            if (b != this.aa0) {
                this.raisePropertyChanged("SummaryValueTextStyle", b, this.aa0);
            }
        }
        get aa7() {
            return this.aax;
        }
        set aa7(a) {
            let b = this.aax;
            this.aax = a;
            if (b != this.aax) {
                this.raisePropertyChanged("SummaryLabelTextStyle", b, this.aax);
            }
        }
        get aa9() {
            return this.aaz;
        }
        set aa9(a) {
            let b = this.aaz;
            this.aaz = a;
            if (b != this.aaz) {
                this.raisePropertyChanged("SummaryUnitsTextStyle", b, this.aaz);
            }
        }
        get abc() {
            return this.aa2;
        }
        set abc(a) {
            let b = this.aa2;
            this.aa2 = a;
            if (b != this.aa2) {
                this.raisePropertyChanged("UnitsTextStyle", b, this.aa2);
            }
        }
        get abb() {
            return this.aa1;
        }
        set abb(a) {
            let b = this.aa1;
            this.aa1 = a;
            if (b != this.aa1) {
                this.raisePropertyChanged("TitleTextStyle", b, this.aa1);
            }
        }
        get aa6() {
            return this.aaw;
        }
        set aa6(a) {
            let b = this.aaw;
            this.aaw = a;
            if (b != this.aaw) {
                this.raisePropertyChanged("LabelTextStyle", b, this.aaw);
            }
        }
    }
    DataToolTipLayer.$t = /*@__PURE__*/ markType(DataToolTipLayer, 'DataToolTipLayer', AnnotationLayer.$);
    DataToolTipLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, DataToolTipLayer, 'raisePropertyChanged', ['BadgeMargin:aht:afl', [Thickness.$, /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0)], 'BadgeShape:aat:afm', [LegendItemBadgeShape_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeShape_$type, 0)], 'DefaultPositionOffsetX:abv:afn', [1, /*@__PURE__*/ DeviceUtils.g(10)], 'DefaultPositionOffsetY:abw:afo', [1, /*@__PURE__*/ DeviceUtils.g(10)], 'ExcludedColumns:zx:afp', [Array_$type, null], 'ExcludedSeries:zy:afq', [Array_$type, null], 'GroupRowMargin:ahu:afu', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'GroupRowVisible:abf:afv', [0, false], 'GroupTextColor:ahd:afw', [Brush.$, null], 'GroupTextMargin:ahv:afx', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 0, 0)], 'GroupedPositionModeX:aah:afr', [DataTooltipGroupedPositionX_$type, /*@__PURE__*/ enumGetBox(DataTooltipGroupedPositionX_$type, 0)], 'GroupedPositionModeY:aal:afs', [DataTooltipGroupedPositionY_$type, /*@__PURE__*/ enumGetBox(DataTooltipGroupedPositionY_$type, 0)], 'GroupingMode:aap:aft', [DataToolTipLayerGroupingMode_$type, /*@__PURE__*/ enumGetBox(DataToolTipLayerGroupingMode_$type, 0)], 'HeaderFormatCulture:adh:afy', [2, /*@__PURE__*/ stringEmpty()], 'HeaderFormatDate:z8:afz', [DataLegendHeaderDateMode_$type, /*@__PURE__*/ enumGetBox(DataLegendHeaderDateMode_$type, 0)], 'HeaderFormatSpecifiers:z1:af0', [Array_$type, null], 'HeaderFormatString:adl:af1', [2, null], 'HeaderFormatTime:z9:af2', [DataLegendHeaderTimeMode_$type, /*@__PURE__*/ enumGetBox(DataLegendHeaderTimeMode_$type, 0)], 'HeaderRowMargin:ahw:af3', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'HeaderRowVisible:abg:af4', [0, true], 'HeaderTextColor:ahe:af5', [Brush.$, null], 'HeaderTextMargin:ahx:af6', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 0, 0)], 'HeaderText:adq:af7', [2, null], 'IncludedColumns:z2:af8', [Array_$type, null], 'IncludedSeries:z3:af9', [Array_$type, null], 'LabelDisplayMode:aaa:aga', [DataLegendLabelMode_$type, /*@__PURE__*/ enumGetBox(DataLegendLabelMode_$type, 0)], 'LabelTextColor:ahf:agb', [Brush.$, null], 'LabelTextMargin:ahy:agc', [Thickness.$, /*@__PURE__*/ new Thickness(1, 8, 0, 0, 0)], 'LayoutMode:aab:agd', [DataLegendLayoutMode_$type, /*@__PURE__*/ enumGetBox(DataLegendLayoutMode_$type, 0)], 'PositionOffsetX:abx:age', [1, NaN], 'PositionOffsetY:aby:agf', [1, NaN], 'ShouldUpdateWhenSeriesDataChanges:abn:agg', [0, true], 'SummaryLabelTextColor:ahg:agh', [Brush.$, null], 'SummaryLabelText:ad5:agi', [2, null], 'SummaryRowMargin:ahz:agj', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'SummaryTitleTextColor:ahh:agk', [Brush.$, null], 'SummaryTitleTextMargin:ah0:agl', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 0, 0)], 'SummaryTitleText:aea:agm', [2, null], 'SummaryType:aac:agn', [DataLegendSummaryType_$type, /*@__PURE__*/ enumGetBox(DataLegendSummaryType_$type, 0)], 'SummaryUnitsTextColor:ahi:ago', [Brush.$, null], 'SummaryUnitsText:aeg:agp', [2, null], 'SummaryValueTextColor:ahj:agq', [Brush.$, null], 'TargetAxis:z6:agr', [Axis.$, null], 'TitleTextColor:ahk:ags', [Brush.$, null], 'TitleTextMargin:ah1:agt', [Thickness.$, /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0)], 'UnitsDisplayMode:aad:agu', [DataLegendUnitsMode_$type, /*@__PURE__*/ enumGetBox(DataLegendUnitsMode_$type, 0)], 'UnitsTextColor:ahl:agv', [Brush.$, null], 'UnitsTextMargin:ah2:agw', [Thickness.$, /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0)], 'UnitsText:aer:agx', [2, null], 'UseInterpolation:abo:agy', [0, false], 'ValueFormatAbbreviation:z7:agz', [DataAbbreviationMode_$type, /*@__PURE__*/ enumGetBox(DataAbbreviationMode_$type, 0)], 'ValueFormatCulture:aey:ag0', [2, /*@__PURE__*/ stringEmpty()], 'ValueFormatMaxFractions:acx:ag1', [1, -1], 'ValueFormatMinFractions:acy:ag2', [1, -1], 'ValueFormatMode:aae:ag3', [DataLegendValueMode_$type, /*@__PURE__*/ enumGetBox(DataLegendValueMode_$type, 0)], 'ValueFormatSpecifiers:z4:ag4', [Array_$type, null], 'ValueFormatString:ae4:ag5', [2, null], 'ValueFormatUseGrouping:abp:ag6', [0, true], 'ValueRowMargin:ah3:ag7', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'ValueRowVisible:abq:ag8', [0, true], 'ValueTextColor:ahm:ag9', [Brush.$, null], 'ValueTextMargin:ah4:aha', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 2, 0)], 'ValueTextUseSeriesColors:abr:ahb', [0, false], 'ValueTextWhenMissingData:afd:ahc', [2, "N/A"]]);
    return DataToolTipLayer;
})();
/**
 * @hidden
 */
export let DataToolTipLayerView = /*@__PURE__*/ (() => {
    class DataToolTipLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b9 = null;
            this.cc = null;
            this.b7 = null;
            this.ca = false;
            this._htmlTest = null;
            this.b7 = a;
            this.htmlTest = /^[^<]*(<[\w\W]+>)[^>]*$/;
            this.cc = new List$1(PointerTooltip.$, 0);
        }
        ak() {
            super.ak();
            for (let a = 0; a < this.b9.a.count; a++) {
                this.b9.a._inner[a].br();
            }
            for (let b = 0; b < this.b9.b.count; b++) {
                this.b9.b._inner[b].br();
            }
            this.b9.clear();
        }
        cd() {
            let a = new PointerTooltip();
            a.bw(this.e.jz);
            a._visibility = 1;
            a.ap = this.e.db.c9.k;
            let b = null;
            if (TypeRegistrar.isRegistered("XamDataLegend")) {
                b = TypeRegistrar.create("XamDataLegend");
            }
            b.pixelScalingRatio = 1;
            if (this.e.db != null) {
                let c = this.e.db.c9.j.ae.createElement("div");
                let ren_ = this.e.db.c9.j.ae.getSubRenderer(c);
                let len_ = b;
                len_.provideContainer(ren_);
            }
            a.ai = typeCast(IOnDemandRender_$type, b);
            a.ai.shouldOnDemandRender = true;
            this.cc.add(a);
            return a;
        }
        cf(a) {
            let b = a;
        }
        ch(a) {
            let b = a;
            b._visibility = 1;
        }
        cg(a) {
            let b = a;
            b.bz();
            b.content = null;
            this.cc.remove1(a);
        }
        au() {
            super.au();
            this.b9 = ((() => {
                let $ret = new Pool$1(Base.$);
                $ret.create = runOn(this, this.cd);
                $ret.activate = runOn(this, this.cf);
                $ret.disactivate = runOn(this, this.ch);
                $ret.destroy = runOn(this, this.cg);
                return $ret;
            })());
        }
        get htmlTest() {
            return this._htmlTest;
        }
        set htmlTest(a) {
            this._htmlTest = a;
        }
        cb(a, b) {
            let c = a;
            let d = c.ai;
            return true;
        }
        cq(a) {
            let b = a;
            let c = new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
            b.cy = 1;
            let d = b.cx(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
            b.cy = 0;
            return d;
        }
        cp() {
            if (this.e.db != null) {
                let a = this.e.db.vx();
                let b = this.e.db.c9.a8;
                let c = this.e.db.c9.a7;
                return new Rect(0, 0, 0, b, c);
            }
            return Rect.empty;
        }
        co() {
            if (this.e.db != null) {
                let a = this.e.db.vx();
                let b = this.e.db.c9.a8;
                let c = this.e.db.c9.a7;
                return new Rect(0, 0, 0, b, c);
            }
            return Rect.empty;
        }
        cn() {
            let a = 0;
            let b = 0;
            if (this.e.db != null) {
                let c = this.e.db.vx();
                a += c.x;
                b += c.y;
                let d = this.e.db.c9.a8;
                let e = this.e.db.c9.a7;
                return new Rect(0, a, b, d, e);
            }
            return Rect.empty;
        }
        cm(a) {
            let b = 0;
            let c = 0;
            if (this.e.db != null) {
                let d = this.e.db.vx();
                b += d.x;
                c += d.y;
            }
            return { $type: Point_$type, x: b + a.x, y: c + a.y };
        }
        ck(a, b, c, d, e) {
            let f = null;
            if (this.e.db != null) {
                f = this.e.db.c9.j.i();
            }
            let g = a;
            if (g == null) {
                return;
            }
            if (d == 0 && e == 0) {
                g.cy = 1;
            }
            else {
                g.cy = 0;
            }
            g.aq = f;
            g.cs = { $type: Point_$type, x: d, y: e };
            g._visibility = 0;
            g.n = b;
            g.o = c;
        }
        cr() {
            let a = (window.innerWidth);
            let b = (window.innerHeight);
            return new Size(1, a, b);
        }
        ci(a) {
            if (a != null) {
                let b = a;
                b._visibility = 1;
            }
        }
        cl() {
            if (this.e.db == null) {
                this.cj(true);
            }
        }
        a8(a, b) {
            super.a8(a, b);
            if (b) {
                return;
            }
            let c = 0;
            let d = 0;
            let e = this.e.db;
            if (e != null) {
                let f = e.c9.j.b8();
                c += f.x;
                d += f.y;
            }
            for (let g = 0; g < this.cc.count; g++) {
                this.cc._inner[g].by(this.cc._inner[g].n + c, this.cc._inner[g].o + d);
            }
        }
        an(a) {
            super.an(a);
            for (let b = 0; b < this.cc.count; b++) {
                let c = this.cc._inner[b];
                let d = 0;
                let e = 0;
                if (this.e.db != null) {
                    let f = this.e.db.vx();
                    d += f.x;
                    e += f.y;
                }
                let g = c.a5();
                let h = c.n - d;
                let i = c.o - e;
                let j = c.ai;
                let k = null;
                if (j != null) {
                    k = j.exportVisualData();
                }
                this.e.bc.addPointerTooltipWithDataLegend(a, g, h, i, k);
            }
        }
        b8(a) {
            let b = a;
            return b.ai;
        }
        cj(a) {
            this.as();
            for (let b = 0; b < this.cc.count; b++) {
                this.ci(this.cc._inner[b]);
                if (a) {
                    this.cc._inner[b].bs();
                }
            }
        }
    }
    DataToolTipLayerView.$t = /*@__PURE__*/ markType(DataToolTipLayerView, 'DataToolTipLayerView', AnnotationLayerView.$);
    return DataToolTipLayerView;
})();
