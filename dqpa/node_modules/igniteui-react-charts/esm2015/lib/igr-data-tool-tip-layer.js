import { IgrAxis } from "./igr-axis";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendLayoutMode_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { DataToolTipLayer } from "./DataToolTipLayer";
import { ensureBool, ensureEnum, brushToString, stringToBrush, arrayFindByName } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays grouped tooltips with summaries for series.
*/
export class IgrDataToolTipLayer extends IgrAnnotationLayer {
    createImplementation() {
        return new DataToolTipLayer();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets whether the series is an annotation layer displayed only when hovering over the chart.
    */
    get isAnnotationHoverLayer() {
        return this.i.er;
    }
    /**
     * Gets whether the default tooltip behaviors for the chart are disabled if this layer is present.
    */
    get isDefaultTooltipBehaviorDisabled() {
        return this.i.e2;
    }
    /**
     * Gets or sets the Axis to target this annotation to. If null, this annotation layer will not render content.
    */
    get targetAxis() {
        const r = this.i.z6;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrAxis._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set targetAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.z6 = null : this.i.z6 = v.i;
    }
    /**
     * Gets or sets whether to use value interpolation when drawing the tooltips.
    */
    get useInterpolation() {
        return this.i.abo;
    }
    set useInterpolation(v) {
        this.i.abo = ensureBool(v);
    }
    /**
     * Gets or sets the grouping mode to apply to use for the tooltip layer.
    */
    get groupingMode() {
        return this.i.aap;
    }
    set groupingMode(v) {
        this.i.aap = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
    }
    /**
     * Gets the actual resolved tooltip layer grouping mode.
    */
    get actualGroupingMode() {
        return this.i.aao;
    }
    set actualGroupingMode(v) {
        this.i.aao = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
    }
    /**
     * Gets or sets the offset of the tooltip layer on the X axis.
    */
    get positionOffsetX() {
        return this.i.abx;
    }
    set positionOffsetX(v) {
        this.i.abx = +v;
    }
    /**
     * Gets or sets the offset of the tooltip layer on the Y axis.
    */
    get positionOffsetY() {
        return this.i.aby;
    }
    set positionOffsetY(v) {
        this.i.aby = +v;
    }
    /**
     * Gets or sets the default offset of the tooltip layer on the X axis.
    */
    get defaultPositionOffsetX() {
        return this.i.abv;
    }
    set defaultPositionOffsetX(v) {
        this.i.abv = +v;
    }
    /**
     * Gets or sets the default offset of the tooltip layer on the Y axis.
    */
    get defaultPositionOffsetY() {
        return this.i.abw;
    }
    set defaultPositionOffsetY(v) {
        this.i.abw = +v;
    }
    /**
     * Gets or sets the tooltip position mode on the X axis for grouped series.
    */
    get groupedPositionModeX() {
        return this.i.aah;
    }
    set groupedPositionModeX(v) {
        this.i.aah = ensureEnum(DataTooltipGroupedPositionX_$type, v);
    }
    /**
     * Gets the actual resolved tooltip position mode on the X axis for grouped series.
    */
    get actualGroupedPositionModeX() {
        return this.i.aag;
    }
    set actualGroupedPositionModeX(v) {
        this.i.aag = ensureEnum(DataTooltipGroupedPositionX_$type, v);
    }
    /**
     * Gets or sets the tooltip position mode on the Y axis for grouped series.
    */
    get groupedPositionModeY() {
        return this.i.aal;
    }
    set groupedPositionModeY(v) {
        this.i.aal = ensureEnum(DataTooltipGroupedPositionY_$type, v);
    }
    /**
     * Gets the actual resolved tooltip position mode on the Y axis for grouped series.
    */
    get actualGroupedPositionModeY() {
        return this.i.aak;
    }
    set actualGroupedPositionModeY(v) {
        this.i.aak = ensureEnum(DataTooltipGroupedPositionY_$type, v);
    }
    /**
     * Gets or sets whether the data legend should update when the series data is mutated.
    */
    get shouldUpdateWhenSeriesDataChanges() {
        return this.i.abn;
    }
    set shouldUpdateWhenSeriesDataChanges(v) {
        this.i.abn = ensureBool(v);
    }
    /**
     * Gets or sets indexes, titles, or names of series to include in displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The ExcludedSeries property takes precedence over values of IncludedSeries property
    */
    get includedSeries() {
        return this.i.z3;
    }
    set includedSeries(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.z3 = v;
    }
    /**
     * Gets or sets indexes, titles, or names of series to exclude from displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The ExcludedSeries property takes precedence over values of IncludedSeries property
    */
    get excludedSeries() {
        return this.i.zy;
    }
    set excludedSeries(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.zy = v;
    }
    /**
     * Gets or sets names of data columns or their labels to include in displaying in the data tooltip, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedence over values of IncludedColumns property
    */
    get includedColumns() {
        return this.i.z2;
    }
    set includedColumns(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.z2 = v;
    }
    /**
     * Gets or sets names of data columns or their labels to exclude from displaying in the data tooltip, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedence over values of IncludedColumns property
    */
    get excludedColumns() {
        return this.i.zx;
    }
    set excludedColumns(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.zx = v;
    }
    /**
     * Gets or sets mode for abbreviating large numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatAbbreviation() {
        return this.i.z7;
    }
    set valueFormatAbbreviation(v) {
        this.i.z7 = ensureEnum(DataAbbreviationMode_$type, v);
    }
    /**
     * Gets or sets maximum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatMaxFractions() {
        return this.i.acx;
    }
    set valueFormatMaxFractions(v) {
        this.i.acx = +v;
    }
    /**
     * Gets or sets minimum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatMinFractions() {
        return this.i.acy;
    }
    set valueFormatMinFractions(v) {
        this.i.acy = +v;
    }
    /**
     * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
    */
    get valueFormatMode() {
        return this.i.aae;
    }
    set valueFormatMode(v) {
        this.i.aae = ensureEnum(DataLegendValueMode_$type, v);
    }
    /**
     * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatCulture() {
        return this.i.aey;
    }
    set valueFormatCulture(v) {
        this.i.aey = v;
    }
    /**
     * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatUseGrouping() {
        return this.i.abp;
    }
    set valueFormatUseGrouping(v) {
        this.i.abp = ensureBool(v);
    }
    /**
     * Gets or sets the format string for values displayed in the data legend.
    */
    get valueFormatString() {
        return this.i.ae4;
    }
    set valueFormatString(v) {
        this.i.ae4 = v;
    }
    /**
     * Gets or sets the format specifiers to use with the ValueFormatString string.
    */
    get valueFormatSpecifiers() {
        return this.i.z4;
    }
    set valueFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.z4 = v;
    }
    get valueRowMarginBottom() {
        return this.i.ah3 ? this.i.ah3.bottom : NaN;
    }
    set valueRowMarginBottom(v) {
        this.ensureValueRowMargin();
        this.i.ah3.bottom = +v;
        this.i.ah3 = this.i.ah3;
    }
    get valueRowMarginLeft() {
        return this.i.ah3 ? this.i.ah3.left : NaN;
    }
    set valueRowMarginLeft(v) {
        this.ensureValueRowMargin();
        this.i.ah3.left = +v;
        this.i.ah3 = this.i.ah3;
    }
    get valueRowMarginRight() {
        return this.i.ah3 ? this.i.ah3.right : NaN;
    }
    set valueRowMarginRight(v) {
        this.ensureValueRowMargin();
        this.i.ah3.right = +v;
        this.i.ah3 = this.i.ah3;
    }
    get valueRowMarginTop() {
        return this.i.ah3 ? this.i.ah3.top : NaN;
    }
    set valueRowMarginTop(v) {
        this.ensureValueRowMargin();
        this.i.ah3.top = +v;
        this.i.ah3 = this.i.ah3;
    }
    ensureValueRowMargin() {
        if (this.i.ah3) {
            return;
        }
        this.i.ah3 = new Thickness(2);
    }
    /**
     * Gets or sets whether to show series rows.
    */
    get valueRowVisible() {
        return this.i.abq;
    }
    set valueRowVisible(v) {
        this.i.abq = ensureBool(v);
    }
    /**
     * Gets or sets text displayed when data column is missing a value, e.g. "no data"
    */
    get valueTextWhenMissingData() {
        return this.i.afd;
    }
    set valueTextWhenMissingData(v) {
        this.i.afd = v;
    }
    /**
     * Gets or sets whether to use series colors when displaying values in the legend
    */
    get valueTextUseSeriesColors() {
        return this.i.abr;
    }
    set valueTextUseSeriesColors(v) {
        this.i.abr = ensureBool(v);
    }
    get valueTextMarginBottom() {
        return this.i.ah4 ? this.i.ah4.bottom : NaN;
    }
    set valueTextMarginBottom(v) {
        this.ensureValueTextMargin();
        this.i.ah4.bottom = +v;
        this.i.ah4 = this.i.ah4;
    }
    get valueTextMarginLeft() {
        return this.i.ah4 ? this.i.ah4.left : NaN;
    }
    set valueTextMarginLeft(v) {
        this.ensureValueTextMargin();
        this.i.ah4.left = +v;
        this.i.ah4 = this.i.ah4;
    }
    get valueTextMarginRight() {
        return this.i.ah4 ? this.i.ah4.right : NaN;
    }
    set valueTextMarginRight(v) {
        this.ensureValueTextMargin();
        this.i.ah4.right = +v;
        this.i.ah4 = this.i.ah4;
    }
    get valueTextMarginTop() {
        return this.i.ah4 ? this.i.ah4.top : NaN;
    }
    set valueTextMarginTop(v) {
        this.ensureValueTextMargin();
        this.i.ah4.top = +v;
        this.i.ah4 = this.i.ah4;
    }
    ensureValueTextMargin() {
        if (this.i.ah4) {
            return;
        }
        this.i.ah4 = new Thickness(2);
    }
    /**
     * Gets or sets the units text color.
    */
    get valueTextColor() {
        return brushToString(this.i.ahm);
    }
    set valueTextColor(v) {
        this.i.ahm = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get valueTextStyle() {
        if (this.i.abd == null) {
            return null;
        }
        return this.i.abd.fontString;
    }
    set valueTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.abd = fi;
    }
    /**
     * Gets or sets the format string for header text displayed in the data legend.
    */
    get headerFormatString() {
        return this.i.adl;
    }
    set headerFormatString(v) {
        this.i.adl = v;
    }
    /**
     * Gets or sets the format specifiers to use with the HeaderFormatString string.
    */
    get headerFormatSpecifiers() {
        return this.i.z1;
    }
    set headerFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.z1 = v;
    }
    /**
     * Gets or sets globalization culture when displaying header as date time
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatCulture() {
        return this.i.adh;
    }
    set headerFormatCulture(v) {
        this.i.adh = v;
    }
    /**
     * Gets or sets date format for the header
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatDate() {
        return this.i.z8;
    }
    set headerFormatDate(v) {
        this.i.z8 = ensureEnum(DataLegendHeaderDateMode_$type, v);
    }
    /**
     * Gets or sets time format for the header
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatTime() {
        return this.i.z9;
    }
    set headerFormatTime(v) {
        this.i.z9 = ensureEnum(DataLegendHeaderTimeMode_$type, v);
    }
    /**
     * Gets or sets the HeaderText for the data legend.
    */
    get headerText() {
        return this.i.adq;
    }
    set headerText(v) {
        this.i.adq = v;
    }
    /**
     * Gets or sets the header text color.
    */
    get headerTextColor() {
        return brushToString(this.i.ahe);
    }
    set headerTextColor(v) {
        this.i.ahe = stringToBrush(v);
    }
    get headerTextMarginBottom() {
        return this.i.ahx ? this.i.ahx.bottom : NaN;
    }
    set headerTextMarginBottom(v) {
        this.ensureHeaderTextMargin();
        this.i.ahx.bottom = +v;
        this.i.ahx = this.i.ahx;
    }
    get headerTextMarginLeft() {
        return this.i.ahx ? this.i.ahx.left : NaN;
    }
    set headerTextMarginLeft(v) {
        this.ensureHeaderTextMargin();
        this.i.ahx.left = +v;
        this.i.ahx = this.i.ahx;
    }
    get headerTextMarginRight() {
        return this.i.ahx ? this.i.ahx.right : NaN;
    }
    set headerTextMarginRight(v) {
        this.ensureHeaderTextMargin();
        this.i.ahx.right = +v;
        this.i.ahx = this.i.ahx;
    }
    get headerTextMarginTop() {
        return this.i.ahx ? this.i.ahx.top : NaN;
    }
    set headerTextMarginTop(v) {
        this.ensureHeaderTextMargin();
        this.i.ahx.top = +v;
        this.i.ahx = this.i.ahx;
    }
    ensureHeaderTextMargin() {
        if (this.i.ahx) {
            return;
        }
        this.i.ahx = new Thickness(2);
    }
    get headerRowMarginBottom() {
        return this.i.ahw ? this.i.ahw.bottom : NaN;
    }
    set headerRowMarginBottom(v) {
        this.ensureHeaderRowMargin();
        this.i.ahw.bottom = +v;
        this.i.ahw = this.i.ahw;
    }
    get headerRowMarginLeft() {
        return this.i.ahw ? this.i.ahw.left : NaN;
    }
    set headerRowMarginLeft(v) {
        this.ensureHeaderRowMargin();
        this.i.ahw.left = +v;
        this.i.ahw = this.i.ahw;
    }
    get headerRowMarginRight() {
        return this.i.ahw ? this.i.ahw.right : NaN;
    }
    set headerRowMarginRight(v) {
        this.ensureHeaderRowMargin();
        this.i.ahw.right = +v;
        this.i.ahw = this.i.ahw;
    }
    get headerRowMarginTop() {
        return this.i.ahw ? this.i.ahw.top : NaN;
    }
    set headerRowMarginTop(v) {
        this.ensureHeaderRowMargin();
        this.i.ahw.top = +v;
        this.i.ahw = this.i.ahw;
    }
    ensureHeaderRowMargin() {
        if (this.i.ahw) {
            return;
        }
        this.i.ahw = new Thickness(2);
    }
    /**
     * Gets or sets whether to show Header row.
    */
    get headerRowVisible() {
        return this.i.abg;
    }
    set headerRowVisible(v) {
        this.i.abg = ensureBool(v);
    }
    /**
     * Gets or Sets the style to use for the header text.
    */
    get headerTextStyle() {
        if (this.i.aa5 == null) {
            return null;
        }
        return this.i.aa5.fontString;
    }
    set headerTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.aa5 = fi;
    }
    /**
     * Gets or sets whether to show Header row.
    */
    get groupRowVisible() {
        return this.i.abf;
    }
    set groupRowVisible(v) {
        this.i.abf = ensureBool(v);
    }
    /**
     * Gets or sets the Group text color.
    */
    get groupTextColor() {
        return brushToString(this.i.ahd);
    }
    set groupTextColor(v) {
        this.i.ahd = stringToBrush(v);
    }
    get groupTextMarginBottom() {
        return this.i.ahv ? this.i.ahv.bottom : NaN;
    }
    set groupTextMarginBottom(v) {
        this.ensureGroupTextMargin();
        this.i.ahv.bottom = +v;
        this.i.ahv = this.i.ahv;
    }
    get groupTextMarginLeft() {
        return this.i.ahv ? this.i.ahv.left : NaN;
    }
    set groupTextMarginLeft(v) {
        this.ensureGroupTextMargin();
        this.i.ahv.left = +v;
        this.i.ahv = this.i.ahv;
    }
    get groupTextMarginRight() {
        return this.i.ahv ? this.i.ahv.right : NaN;
    }
    set groupTextMarginRight(v) {
        this.ensureGroupTextMargin();
        this.i.ahv.right = +v;
        this.i.ahv = this.i.ahv;
    }
    get groupTextMarginTop() {
        return this.i.ahv ? this.i.ahv.top : NaN;
    }
    set groupTextMarginTop(v) {
        this.ensureGroupTextMargin();
        this.i.ahv.top = +v;
        this.i.ahv = this.i.ahv;
    }
    ensureGroupTextMargin() {
        if (this.i.ahv) {
            return;
        }
        this.i.ahv = new Thickness(2);
    }
    get groupRowMarginBottom() {
        return this.i.ahu ? this.i.ahu.bottom : NaN;
    }
    set groupRowMarginBottom(v) {
        this.ensureGroupRowMargin();
        this.i.ahu.bottom = +v;
        this.i.ahu = this.i.ahu;
    }
    get groupRowMarginLeft() {
        return this.i.ahu ? this.i.ahu.left : NaN;
    }
    set groupRowMarginLeft(v) {
        this.ensureGroupRowMargin();
        this.i.ahu.left = +v;
        this.i.ahu = this.i.ahu;
    }
    get groupRowMarginRight() {
        return this.i.ahu ? this.i.ahu.right : NaN;
    }
    set groupRowMarginRight(v) {
        this.ensureGroupRowMargin();
        this.i.ahu.right = +v;
        this.i.ahu = this.i.ahu;
    }
    get groupRowMarginTop() {
        return this.i.ahu ? this.i.ahu.top : NaN;
    }
    set groupRowMarginTop(v) {
        this.ensureGroupRowMargin();
        this.i.ahu.top = +v;
        this.i.ahu = this.i.ahu;
    }
    ensureGroupRowMargin() {
        if (this.i.ahu) {
            return;
        }
        this.i.ahu = new Thickness(2);
    }
    /**
     * Gets or Sets the style to use for the Group text.
    */
    get groupTextStyle() {
        if (this.i.aa4 == null) {
            return null;
        }
        return this.i.aa4.fontString;
    }
    set groupTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.aa4 = fi;
    }
    /**
     * Gets or sets the summary text color.
    */
    get summaryTitleTextColor() {
        return brushToString(this.i.ahh);
    }
    set summaryTitleTextColor(v) {
        this.i.ahh = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the summary text.
    */
    get summaryTitleTextStyle() {
        if (this.i.aa8 == null) {
            return null;
        }
        return this.i.aa8.fontString;
    }
    set summaryTitleTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.aa8 = fi;
    }
    /**
     * Gets or sets the SummaryType for the data legend.
    */
    get summaryType() {
        return this.i.aac;
    }
    set summaryType(v) {
        this.i.aac = ensureEnum(DataLegendSummaryType_$type, v);
    }
    /**
     * Gets or sets the SummaryTitleText for the data legend.
    */
    get summaryTitleText() {
        return this.i.aea;
    }
    set summaryTitleText(v) {
        this.i.aea = v;
    }
    get summaryTitleTextMarginBottom() {
        return this.i.ah0 ? this.i.ah0.bottom : NaN;
    }
    set summaryTitleTextMarginBottom(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.ah0.bottom = +v;
        this.i.ah0 = this.i.ah0;
    }
    get summaryTitleTextMarginLeft() {
        return this.i.ah0 ? this.i.ah0.left : NaN;
    }
    set summaryTitleTextMarginLeft(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.ah0.left = +v;
        this.i.ah0 = this.i.ah0;
    }
    get summaryTitleTextMarginRight() {
        return this.i.ah0 ? this.i.ah0.right : NaN;
    }
    set summaryTitleTextMarginRight(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.ah0.right = +v;
        this.i.ah0 = this.i.ah0;
    }
    get summaryTitleTextMarginTop() {
        return this.i.ah0 ? this.i.ah0.top : NaN;
    }
    set summaryTitleTextMarginTop(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.ah0.top = +v;
        this.i.ah0 = this.i.ah0;
    }
    ensureSummaryTitleTextMargin() {
        if (this.i.ah0) {
            return;
        }
        this.i.ah0 = new Thickness(2);
    }
    get summaryRowMarginBottom() {
        return this.i.ahz ? this.i.ahz.bottom : NaN;
    }
    set summaryRowMarginBottom(v) {
        this.ensureSummaryRowMargin();
        this.i.ahz.bottom = +v;
        this.i.ahz = this.i.ahz;
    }
    get summaryRowMarginLeft() {
        return this.i.ahz ? this.i.ahz.left : NaN;
    }
    set summaryRowMarginLeft(v) {
        this.ensureSummaryRowMargin();
        this.i.ahz.left = +v;
        this.i.ahz = this.i.ahz;
    }
    get summaryRowMarginRight() {
        return this.i.ahz ? this.i.ahz.right : NaN;
    }
    set summaryRowMarginRight(v) {
        this.ensureSummaryRowMargin();
        this.i.ahz.right = +v;
        this.i.ahz = this.i.ahz;
    }
    get summaryRowMarginTop() {
        return this.i.ahz ? this.i.ahz.top : NaN;
    }
    set summaryRowMarginTop(v) {
        this.ensureSummaryRowMargin();
        this.i.ahz.top = +v;
        this.i.ahz = this.i.ahz;
    }
    ensureSummaryRowMargin() {
        if (this.i.ahz) {
            return;
        }
        this.i.ahz = new Thickness(2);
    }
    /**
     * Gets or sets the units text color.
    */
    get summaryValueTextColor() {
        return brushToString(this.i.ahj);
    }
    set summaryValueTextColor(v) {
        this.i.ahj = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryValueTextStyle() {
        if (this.i.aba == null) {
            return null;
        }
        return this.i.aba.fontString;
    }
    set summaryValueTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.aba = fi;
    }
    /**
     * Gets or sets the units text for the data legend.
    */
    get summaryLabelText() {
        return this.i.ad5;
    }
    set summaryLabelText(v) {
        this.i.ad5 = v;
    }
    /**
     * Gets or sets the units text color.
    */
    get summaryLabelTextColor() {
        return brushToString(this.i.ahg);
    }
    set summaryLabelTextColor(v) {
        this.i.ahg = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryLabelTextStyle() {
        if (this.i.aa7 == null) {
            return null;
        }
        return this.i.aa7.fontString;
    }
    set summaryLabelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.aa7 = fi;
    }
    /**
     * Gets or sets the units text for the data legend.
    */
    get summaryUnitsText() {
        return this.i.aeg;
    }
    set summaryUnitsText(v) {
        this.i.aeg = v;
    }
    /**
     * Gets or sets the units text color.
    */
    get summaryUnitsTextColor() {
        return brushToString(this.i.ahi);
    }
    set summaryUnitsTextColor(v) {
        this.i.ahi = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryUnitsTextStyle() {
        if (this.i.aa9 == null) {
            return null;
        }
        return this.i.aa9.fontString;
    }
    set summaryUnitsTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.aa9 = fi;
    }
    get badgeMarginBottom() {
        return this.i.aht ? this.i.aht.bottom : NaN;
    }
    set badgeMarginBottom(v) {
        this.ensureBadgeMargin();
        this.i.aht.bottom = +v;
        this.i.aht = this.i.aht;
    }
    get badgeMarginLeft() {
        return this.i.aht ? this.i.aht.left : NaN;
    }
    set badgeMarginLeft(v) {
        this.ensureBadgeMargin();
        this.i.aht.left = +v;
        this.i.aht = this.i.aht;
    }
    get badgeMarginRight() {
        return this.i.aht ? this.i.aht.right : NaN;
    }
    set badgeMarginRight(v) {
        this.ensureBadgeMargin();
        this.i.aht.right = +v;
        this.i.aht = this.i.aht;
    }
    get badgeMarginTop() {
        return this.i.aht ? this.i.aht.top : NaN;
    }
    set badgeMarginTop(v) {
        this.ensureBadgeMargin();
        this.i.aht.top = +v;
        this.i.aht = this.i.aht;
    }
    ensureBadgeMargin() {
        if (this.i.aht) {
            return;
        }
        this.i.aht = new Thickness(2);
    }
    /**
     * Gets or sets the BadgeShape for the data legend.
    */
    get badgeShape() {
        return this.i.aat;
    }
    set badgeShape(v) {
        this.i.aat = ensureEnum(LegendItemBadgeShape_$type, v);
    }
    /**
     * Gets or sets the layout of content in the data legend
    */
    get layoutMode() {
        return this.i.aab;
    }
    set layoutMode(v) {
        this.i.aab = ensureEnum(DataLegendLayoutMode_$type, v);
    }
    /**
     * Gets or sets the UnitsMode for the data legend.
    */
    get unitsDisplayMode() {
        return this.i.aad;
    }
    set unitsDisplayMode(v) {
        this.i.aad = ensureEnum(DataLegendUnitsMode_$type, v);
    }
    /**
     * Gets or sets the units text for the data legend.
    */
    get unitsText() {
        return this.i.aer;
    }
    set unitsText(v) {
        this.i.aer = v;
    }
    /**
     * Gets or sets the units text color.
    */
    get unitsTextColor() {
        return brushToString(this.i.ahl);
    }
    set unitsTextColor(v) {
        this.i.ahl = stringToBrush(v);
    }
    get unitsTextMarginBottom() {
        return this.i.ah2 ? this.i.ah2.bottom : NaN;
    }
    set unitsTextMarginBottom(v) {
        this.ensureUnitsTextMargin();
        this.i.ah2.bottom = +v;
        this.i.ah2 = this.i.ah2;
    }
    get unitsTextMarginLeft() {
        return this.i.ah2 ? this.i.ah2.left : NaN;
    }
    set unitsTextMarginLeft(v) {
        this.ensureUnitsTextMargin();
        this.i.ah2.left = +v;
        this.i.ah2 = this.i.ah2;
    }
    get unitsTextMarginRight() {
        return this.i.ah2 ? this.i.ah2.right : NaN;
    }
    set unitsTextMarginRight(v) {
        this.ensureUnitsTextMargin();
        this.i.ah2.right = +v;
        this.i.ah2 = this.i.ah2;
    }
    get unitsTextMarginTop() {
        return this.i.ah2 ? this.i.ah2.top : NaN;
    }
    set unitsTextMarginTop(v) {
        this.ensureUnitsTextMargin();
        this.i.ah2.top = +v;
        this.i.ah2 = this.i.ah2;
    }
    ensureUnitsTextMargin() {
        if (this.i.ah2) {
            return;
        }
        this.i.ah2 = new Thickness(2);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get unitsTextStyle() {
        if (this.i.abc == null) {
            return null;
        }
        return this.i.abc.fontString;
    }
    set unitsTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.abc = fi;
    }
    get titleTextMarginBottom() {
        return this.i.ah1 ? this.i.ah1.bottom : NaN;
    }
    set titleTextMarginBottom(v) {
        this.ensureTitleTextMargin();
        this.i.ah1.bottom = +v;
        this.i.ah1 = this.i.ah1;
    }
    get titleTextMarginLeft() {
        return this.i.ah1 ? this.i.ah1.left : NaN;
    }
    set titleTextMarginLeft(v) {
        this.ensureTitleTextMargin();
        this.i.ah1.left = +v;
        this.i.ah1 = this.i.ah1;
    }
    get titleTextMarginRight() {
        return this.i.ah1 ? this.i.ah1.right : NaN;
    }
    set titleTextMarginRight(v) {
        this.ensureTitleTextMargin();
        this.i.ah1.right = +v;
        this.i.ah1 = this.i.ah1;
    }
    get titleTextMarginTop() {
        return this.i.ah1 ? this.i.ah1.top : NaN;
    }
    set titleTextMarginTop(v) {
        this.ensureTitleTextMargin();
        this.i.ah1.top = +v;
        this.i.ah1 = this.i.ah1;
    }
    ensureTitleTextMargin() {
        if (this.i.ah1) {
            return;
        }
        this.i.ah1 = new Thickness(2);
    }
    /**
     * Gets or sets the display text color.
    */
    get titleTextColor() {
        return brushToString(this.i.ahk);
    }
    set titleTextColor(v) {
        this.i.ahk = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the display text.
    */
    get titleTextStyle() {
        if (this.i.abb == null) {
            return null;
        }
        return this.i.abb.fontString;
    }
    set titleTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.abb = fi;
    }
    /**
     * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
    */
    get labelDisplayMode() {
        return this.i.aaa;
    }
    set labelDisplayMode(v) {
        this.i.aaa = ensureEnum(DataLegendLabelMode_$type, v);
    }
    /**
     * Gets or sets the units text color.
    */
    get labelTextColor() {
        return brushToString(this.i.ahf);
    }
    set labelTextColor(v) {
        this.i.ahf = stringToBrush(v);
    }
    get labelTextMarginBottom() {
        return this.i.ahy ? this.i.ahy.bottom : NaN;
    }
    set labelTextMarginBottom(v) {
        this.ensureLabelTextMargin();
        this.i.ahy.bottom = +v;
        this.i.ahy = this.i.ahy;
    }
    get labelTextMarginLeft() {
        return this.i.ahy ? this.i.ahy.left : NaN;
    }
    set labelTextMarginLeft(v) {
        this.ensureLabelTextMargin();
        this.i.ahy.left = +v;
        this.i.ahy = this.i.ahy;
    }
    get labelTextMarginRight() {
        return this.i.ahy ? this.i.ahy.right : NaN;
    }
    set labelTextMarginRight(v) {
        this.ensureLabelTextMargin();
        this.i.ahy.right = +v;
        this.i.ahy = this.i.ahy;
    }
    get labelTextMarginTop() {
        return this.i.ahy ? this.i.ahy.top : NaN;
    }
    set labelTextMarginTop(v) {
        this.ensureLabelTextMargin();
        this.i.ahy.top = +v;
        this.i.ahy = this.i.ahy;
    }
    ensureLabelTextMargin() {
        if (this.i.ahy) {
            return;
        }
        this.i.ahy = new Thickness(2);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get labelTextStyle() {
        if (this.i.aa6 == null) {
            return null;
        }
        return this.i.aa6.fontString;
    }
    set labelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.aa6 = fi;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetAxis && this.targetAxis.name && this.targetAxis.name == name) {
            return this.targetAxis;
        }
        if (this.valueFormatSpecifiers != null && arrayFindByName(this.valueFormatSpecifiers, name)) {
            return arrayFindByName(this.valueFormatSpecifiers, name);
        }
        if (this.headerFormatSpecifiers != null && arrayFindByName(this.headerFormatSpecifiers, name)) {
            return arrayFindByName(this.headerFormatSpecifiers, name);
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.targetAxis && this.targetAxis._styling) {
            this.targetAxis._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    hideToolTips() {
        this.i.p7();
    }
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    hideToolTipsImmediate() {
        this.i.p8();
    }
}
