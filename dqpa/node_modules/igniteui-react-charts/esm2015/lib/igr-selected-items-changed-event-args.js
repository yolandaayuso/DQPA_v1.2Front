import { IgrObjectCollection } from "igniteui-react-core";
import { ObjectCollection as ObjectCollection_internal } from "igniteui-react-core";
import { Base } from "igniteui-react-core";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
/**
 * Provides data for the SelectedItemsChanged event.
*/
export class IgrSelectedItemsChangedEventArgs {
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._oldItems = null;
        this._newItems = null;
        this._currentItems = null;
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    /**
     * A list of the previously selected items.
    */
    get oldItems() {
        if (this._oldItems === null) {
            let coll = new IgrObjectCollection();
            let innerColl = this.i.oldItems;
            if (!innerColl) {
                innerColl = new ObjectCollection_internal(0);
            }
            this._oldItems = coll._fromInner(innerColl);
            this.i.oldItems = innerColl;
        }
        return this._oldItems;
    }
    set oldItems(v) {
        if (this._oldItems !== null) {
            this._oldItems._setSyncTarget(null);
            this._oldItems = null;
        }
        let coll = new IgrObjectCollection();
        this._oldItems = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Base.$type);
        let innerColl = this.i.oldItems;
        if (!innerColl) {
            innerColl = new ObjectCollection_internal(0);
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._oldItems._setSyncTarget(syncColl);
        this.i.oldItems = innerColl;
    }
    /**
     * A list of the items being selected.
    */
    get newItems() {
        if (this._newItems === null) {
            let coll = new IgrObjectCollection();
            let innerColl = this.i.newItems;
            if (!innerColl) {
                innerColl = new ObjectCollection_internal(0);
            }
            this._newItems = coll._fromInner(innerColl);
            this.i.newItems = innerColl;
        }
        return this._newItems;
    }
    set newItems(v) {
        if (this._newItems !== null) {
            this._newItems._setSyncTarget(null);
            this._newItems = null;
        }
        let coll = new IgrObjectCollection();
        this._newItems = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Base.$type);
        let innerColl = this.i.newItems;
        if (!innerColl) {
            innerColl = new ObjectCollection_internal(0);
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._newItems._setSyncTarget(syncColl);
        this.i.newItems = innerColl;
    }
    /**
     * A list of the current items selected.
    */
    get currentItems() {
        if (this._currentItems === null) {
            let coll = new IgrObjectCollection();
            let innerColl = this.i.currentItems;
            if (!innerColl) {
                innerColl = new ObjectCollection_internal(0);
            }
            this._currentItems = coll._fromInner(innerColl);
            this.i.currentItems = innerColl;
        }
        return this._currentItems;
    }
    set currentItems(v) {
        if (this._currentItems !== null) {
            this._currentItems._setSyncTarget(null);
            this._currentItems = null;
        }
        let coll = new IgrObjectCollection();
        this._currentItems = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Base.$type);
        let innerColl = this.i.currentItems;
        if (!innerColl) {
            innerColl = new ObjectCollection_internal(0);
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._currentItems._setSyncTarget(syncColl);
        this.i.currentItems = innerColl;
    }
}
