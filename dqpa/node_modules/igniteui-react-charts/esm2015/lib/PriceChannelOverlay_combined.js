/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FinancialOverlay } from "./FinancialOverlay";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { List$1 } from "igniteui-react-core";
import { Number_$type, typeCast, runOn, markType, markDep, Point_$type, fromEnum } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { MathUtil } from "igniteui-react-core";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { ScalerParams } from "./ScalerParams";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { Polyline } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { RangeValueList } from "./RangeValueList";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { Flattener } from "igniteui-react-core";
/**
 * @hidden
 */
export let PriceChannelOverlay = /*@__PURE__*/ (() => {
    class PriceChannelOverlay extends FinancialOverlay {
        bj() {
            return new PriceChannelOverlay();
        }
        constructor() {
            super();
            this.aa7 = new List$1(Number_$type, 0);
            this.aa6 = new List$1(Number_$type, 0);
            this.ab = PriceChannelOverlay.$;
            this.xa = new CategoryFrame(3);
            this.xc = new CategoryFrame(3);
            this.w8 = new CategoryFrame(3);
        }
        q9(a, b, c, d) {
            switch (b) {
                case "HighColumn":
                case "LowColumn":
                    this.aa0 = false;
                    break;
            }
            super.q9(a, b, c, d);
            switch (b) {
                case PriceChannelOverlay.$$p[0]:
                    this.aa0 = false;
                    this.rr(false);
                    break;
            }
        }
        he(a, b, c) {
            let d = super.he(a, b, c);
            if (this.x0 == null || this.x1 == null) {
                d = false;
            }
            return d;
        }
        aa1() {
            this.aa7.clear();
            this.aa6.clear();
            let a = truncate(MathUtil.d(this.aa8, 0, this.dn.count));
            let b = Math.min(this.x0.count, this.x1.count);
            let c = this.yq(this.x0);
            let d = this.yq(this.x1);
            for (let e = 0; e < b; e++) {
                let f = Math.min(a, e);
                let g = -1.7976931348623157E+308;
                let h = 1.7976931348623157E+308;
                for (let i = 0; i < f; i++) {
                    if (!isNaN_(c.item(e - i))) {
                        g = Math.max(g, c.item(e - i));
                    }
                    if (!isNaN_(d.item(e - i))) {
                        h = Math.min(h, d.item(e - i));
                    }
                }
                if (e == 0) {
                    h = d.item(0);
                    g = c.item(0);
                }
                this.aa7.add(g);
                this.aa6.add(h);
            }
            return true;
        }
        aac(a, b) {
            super.aac(a, b);
            let c = b.by;
            let d = b.bx;
            let e = this.getEffectiveViewport1(b);
            let f = new ScalerParams(0, c, d, this.w6.ch, e);
            let g = new ScalerParams(0, c, d, this.xp.ch, e);
            g.b = this.iy();
            let h = this.w6;
            let i = this.xp;
            a.f.clear();
            a.n.clear();
            a.q.clear();
            let j = 0;
            let k = typeCast(ISortingAxis_$type, this.w6);
            if (k != null && k.i$b.count != this.dn.count) {
                return;
            }
            j = this.yx(c, d, e);
            if (!this.aa0) {
                this.aa0 = this.aa1();
            }
            g.b = this.iy();
            let l = this.w6.eo(2, f) - this.w6.eo(1, f);
            for (let m = b.b0.c; m <= b.b0.d; ++m) {
                let n;
                if (k == null) {
                    n = b.b0.getBucket(m);
                }
                else {
                    let o = k.i$b._inner[m];
                    let p = k.i$d(o);
                    let q = this.aa7._inner[m];
                    let r = this.aa6._inner[m];
                    let s = q;
                    let t = r;
                    let u = p;
                    while (m < b.b0.d) {
                        o = k.i$b._inner[m + 1];
                        u = k.i$d(o);
                        if (u - p > l) {
                            break;
                        }
                        m++;
                        s = Math.max(q, this.aa7._inner[m]);
                        t = Math.min(r, this.aa6._inner[m]);
                    }
                    if (!isInfinity(t) && !isInfinity(s)) {
                        let v = NaN;
                        if (!isNaN_(p)) {
                            v = this.w6.el(p, f);
                        }
                        n = [v, t, s];
                    }
                    else {
                        n = [NaN, NaN, NaN];
                    }
                }
                let w = Math.max(1, l);
                if (!isNaN_(n[0]) && m * w >= this.aa2) {
                    if (this.w6 != null && typeCast(ISortingAxis_$type, this.w6) !== null) {
                        n[0] = n[0] + j;
                    }
                    else {
                        n[0] = h.el(n[0], f) + j;
                    }
                    n[1] = i.el(n[1], g);
                    n[2] = i.el(n[2], g);
                    a.f.add(n);
                }
            }
        }
        o5(a, b) {
            super.o5(a, b);
            let c = b;
            if (c != null) {
                c.b7();
            }
        }
        aae(a, b) {
            super.aae(a, b);
            let c = typeCast(PriceChannelOverlayView.$, b);
            if (c == null) {
                return;
            }
            let d = this.getEffectiveViewport1(b);
            if (b.b3(a)) {
                c.b7();
                let e = a.f.count;
                let f = (g) => a.f._inner[g][0];
                let g = (h) => a.f._inner[e - 1 - h][0];
                let h = (i) => a.f._inner[i][1];
                let i = (j) => a.f._inner[e - 1 - j][2];
                c.b8(e, f, g, h, i);
                b.b5(a);
            }
            this.xf.a2(this, this.ye(), runOn(this, this.wy), this.y3(b), this.y5(b));
            let j = false;
            let k = this.xf.b;
            let l = a.f;
            let m = this.dn.count;
            if (k != null) {
                j = true;
            }
            if (j) {
                let n = new ScalerParams(0, b.by, b.bx, this.w6.ch, d);
                this.aab(l, -1, m, this.w6, n, b.q, -1);
            }
            let o = c.ce;
            let p = c.cf;
            let q = c.ca;
            this.xf.ad(o, true, false, true, true);
            this.xf.ad(p, true, false, true, true);
            this.xf.ad(q, false, true, false, false);
            q._opacity = this.xf.j * this.h9;
        }
        cs() {
            return new PriceChannelOverlayView(this);
        }
        q1(a) {
            super.q1(a);
            this.aa5 = typeCast(PriceChannelOverlayView.$, a);
        }
        i5(a, b, c) {
            if (this.db == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.cv);
            let e = new ScalerParams(0, this.db.v4, this.cv.bx, this.w6.ch, d);
            let f = this.yx(this.db.v4, this.cv.bx, d);
            return this.i7(new RangeValueList(this.aa7, this.aa6), a, this.w6, e, f, runOn(this, this.yw), b, c);
        }
        j8(a, b) {
            if (this.aa7 == null || this.aa6 == null) {
                return super.j8(a, b);
            }
            return this.j9(a, b, this.w6, runOn(this, this.yw), new RangeValueList(this.aa7, this.aa6));
        }
        ka(a, b) {
            if (this.aa7 == null || this.aa6 == null) {
                return super.ka(a, b);
            }
            return this.kb(a, b, this.w6, runOn(this, this.yw), new RangeValueList(this.aa7, this.aa6));
        }
        iy() {
            return Series.i0(this.aa6, null);
        }
    }
    PriceChannelOverlay.$t = /*@__PURE__*/ markType(PriceChannelOverlay, 'PriceChannelOverlay', FinancialOverlay.$);
    PriceChannelOverlay.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, PriceChannelOverlay, 'raisePropertyChanged', ['Period:aa8:aba', [1, 14]]);
    return PriceChannelOverlay;
})();
/**
 * @hidden
 */
export let PriceChannelBucketCalculator = /*@__PURE__*/ (() => {
    class PriceChannelBucketCalculator extends FinancialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = a * this.b;
            let c = Math.min(b + this.b - 1, this.a.b2.dn.count - 1);
            if (b <= c) {
                let d = -1.7976931348623157E+308;
                let e = 1.7976931348623157E+308;
                let f = 0;
                for (let g = b; g <= c; ++g) {
                    if (!isNaN_(this.f.b6.aa7._inner[g]) && !isNaN_(this.f.b6.aa6._inner[g])) {
                        d = Math.max(d, this.f.b6.aa7._inner[g]);
                        e = Math.min(e, this.f.b6.aa6._inner[g]);
                        ++f;
                    }
                }
                if (f > 0 && e != 1.7976931348623157E+308 && d != -1.7976931348623157E+308) {
                    return [0.5 * (b + c), e, d];
                }
            }
            return [NaN, NaN, NaN];
        }
    }
    PriceChannelBucketCalculator.$t = /*@__PURE__*/ markType(PriceChannelBucketCalculator, 'PriceChannelBucketCalculator', FinancialBucketCalculator.$);
    return PriceChannelBucketCalculator;
})();
/**
 * @hidden
 */
export let PriceChannelOverlayView = /*@__PURE__*/ (() => {
    class PriceChannelOverlayView extends FinancialSeriesView {
        get ca() {
            return this.cb;
        }
        get ce() {
            return this.cg;
        }
        get cf() {
            return this.ch;
        }
        constructor(a) {
            super(a);
            this.cb = new Polygon();
            this.cg = new Polyline();
            this.ch = new Polyline();
            this.b6 = null;
            this.b9 = new Polygon();
            this.cc = new Polyline();
            this.cd = new Polyline();
            this.b6 = a;
        }
        au() {
            super.au();
            if (!this.q) {
            }
        }
        b1() {
            return new PriceChannelBucketCalculator(this);
        }
        b7() {
            this.cb.an.clear();
            this.cg.an.clear();
            this.ch.an.clear();
            this.as();
        }
        b8(a, b, c, d, e) {
            for (let f of fromEnum(Flattener.d(a, b, d, this.e.id))) {
                this.cb.an.add({ $type: Point_$type, x: b(f), y: d(f) });
                this.cg.an.add({ $type: Point_$type, x: b(f), y: d(f) });
            }
            for (let g of fromEnum(Flattener.d(a, c, e, this.e.id))) {
                this.cb.an.add({ $type: Point_$type, x: c(g), y: e(g) });
                this.ch.an.add({ $type: Point_$type, x: c(g), y: e(g) });
            }
            this.as();
        }
        be() {
            super.be();
            this.b9.an = this.cb.an;
            this.cc.an = this.cg.an;
            this.cd.an = this.ch.an;
            let a = this.br();
            this.b9._fill = a;
            this.b9._opacity = 1;
            this.cc._stroke = a;
            this.cc.ad = this.e.ie + 3;
            this.cd._stroke = a;
            this.cd.ad = this.e.ie + 3;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                if (b) {
                    a.u(this.b9);
                    a.v(this.cc);
                    a.v(this.cd);
                }
                else {
                    a.u(this.cb);
                    a.v(this.cg);
                    a.v(this.ch);
                }
            }
        }
        an(a) {
            super.an(a);
            this.e.bc.exportPolygonData(a, this.cb, "fill", ["Fill"]);
            this.e.bc.exportPolylineData(a, this.cg, "bottom", ["Lower", "Main"]);
            this.e.bc.exportPolylineData(a, this.ch, "top", ["Upper"]);
        }
    }
    PriceChannelOverlayView.$t = /*@__PURE__*/ markType(PriceChannelOverlayView, 'PriceChannelOverlayView', FinancialSeriesView.$);
    return PriceChannelOverlayView;
})();
