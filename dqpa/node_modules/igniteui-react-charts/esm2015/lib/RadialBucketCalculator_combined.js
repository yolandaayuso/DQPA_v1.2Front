/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType, enumGetBox, EnumUtil, Array_$type, runOn, delegateCombine, typeCast, fromEnum, markDep } from "igniteui-react-core";
import { IBucketizer_$type } from "./IBucketizer";
import { NotImplementedException } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { truncate, intDivide, isNaN_ } from "igniteui-react-core";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { DependencyProperty } from "igniteui-react-core";
import { RadialLabelMode_$type } from "igniteui-react-core";
import { CategoryCollisionMode_$type } from "./CategoryCollisionMode";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { HighlightingInfo } from "igniteui-react-core";
import { BindingFormatter } from "igniteui-react-core";
import { OthersCategoryContext } from "./OthersCategoryContext";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { RadialFrame } from "./RadialFrame";
import { RadialSeriesRenderManager } from "./RadialSeriesRenderManager";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { ProportionalRadialLabelContext } from "./ProportionalRadialLabelContext";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { DoubleCollection } from "igniteui-react-core";
import { RadialAxes } from "./RadialAxes";
import { Visibility_$type } from "igniteui-react-core";
import { ChartSelection } from "./ChartSelection";
import { PropertyMetadata } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let RadialBucketCalculator = /*@__PURE__*/ (() => {
    class RadialBucketCalculator extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.c = 0;
            this.d = 0;
            this.b = 0;
            this.a = a;
        }
        getBucket(a) {
            throw new NotImplementedException(0);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getErrorBucket(a, b) {
            return NaN;
        }
        getBucketInfo(a, b, c, d) {
            a = this.c;
            b = this.d;
            c = this.b;
            d = this.a.cw.id;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d
            };
        }
        e(a) {
            let b = this.a.by;
            let c = this.a.bx;
            let d = this.a.getEffectiveViewport();
            let e = this.a.cw.yz;
            if (b.isEmpty || c.isEmpty || e == null || this.a.cw.dn == null || this.a.cw.dn.count == 0) {
                this.b = 0;
                return;
            }
            let f = Math.floor(e.m9(c, d, b));
            let g = Math.ceil(e.m8(c, d, b));
            if (e.ch) {
                g = Math.ceil(e.m9(c, d, b));
                f = Math.floor(e.m8(c, d, b));
            }
            if (g < f) {
                g = e.lj + g;
            }
            let h = this.a.cw.y5;
            let i = h != null ? h.n7 : 0.75;
            let j = Math.min(c.width, c.height) * 0.5 * (i) * 2 * Math.PI;
            let k = Math.floor((g - f + 1) * a / j);
            this.b = truncate(Math.max(1, k));
            this.c = truncate(Math.max(0, Math.floor(f / this.b) - 1));
            this.d = truncate(Math.ceil(g / this.b));
            if (e.cl) {
                this.b = 1;
                this.c = truncate(Math.max(0, Math.floor(f / this.b) - 1));
                this.d = truncate(Math.ceil(g / this.b));
            }
        }
        cacheValues() {
        }
        unCacheValues() {
        }
    }
    RadialBucketCalculator.$t = /*@__PURE__*/ markType(RadialBucketCalculator, 'RadialBucketCalculator', Base.$, [IBucketizer_$type]);
    return RadialBucketCalculator;
})();
/**
 * @hidden
 */
export let RadialBase = /*@__PURE__*/ (() => {
    class RadialBase extends MarkerSeries {
        q1(a) {
            super.q1(a);
            this.y9 = a;
        }
        constructor() {
            super();
            this.zg = null;
            this.zn = false;
            this.zm = false;
            this.zk = null;
            this.zl = null;
            this.assigningRadialStyle = null;
            this.assigningRadialMarkerStyle = null;
            this.ys = null;
            this.yw = null;
            this.yt = null;
            this.yv = null;
            this.yu = null;
            this.y6 = new OthersCategoryContext();
            this.zc = new RadialFrame(4);
            this.zd = new RadialFrame(4);
            this.za = new RadialFrame(4);
            this.y8 = null;
            this.y4 = null;
            this.y4 = new CategoryTransitionSourceFramePreparer();
            this.zg = new RadialSeriesRenderManager();
        }
        aa8() {
            if (this.dc.g) {
                this.dc.t();
            }
        }
        get categoryAxis() {
            return this.yz;
        }
        a0() {
            return this.yz;
        }
        yn(a, b) {
            return null;
        }
        ps(a) {
            if (a == this.y7) {
                if (this.fi) {
                    this.ba.a$x(this, a, this.yz.lk - 1);
                }
                return;
            }
            super.ps(a);
        }
        ee(a) {
            if (a == this.y7 && this.yz != null && this.yz.cl && this.yz.hasOthersCategory) {
                return true;
            }
            return super.ee(a);
        }
        pq(a) {
            if (a == this.y7) {
                if (this.fi) {
                    this.ba.a$an(this, a, this.dn.count - 1);
                }
                return;
            }
            super.pq(a);
        }
        eb(a, b, c, d, e) {
            if (!this.hasMarkers) {
                return false;
            }
            let f = this.yz;
            let g = new ScalerParams(1, this.db.v4, this.ws, f.ch);
            g.c = this.getEffectiveViewport1(this.cv);
            let h = this.y5;
            let i = new ScalerParams(1, this.db.v4, this.ws, h.ch);
            i.c = this.getEffectiveViewport1(this.cv);
            let j = this.z5;
            a.clear();
            this.w6.cj((k) => {
                if (k._visibility == 0) {
                    let l = new SeriesPointOfInterest();
                    let m = k.n;
                    let n = k.o;
                    if (m < this.ws.left || m > this.ws.right || n < this.ws.top || n > this.ws.bottom) {
                        return;
                    }
                    let o = null;
                    if (k.content != null) {
                        o = k.content.item;
                    }
                    let p;
                    let q;
                    let r = this.y8.h(m, n, this.cv.by, this.cv.bx, this.cv.getEffectiveViewport(), p, q);
                    p = r.p5;
                    q = r.p6;
                    l.d = p;
                    l.e = q;
                    let s = l.e;
                    let t = k.ak;
                    l.f = this.aa5(s, o, t, d, j, c, b, false);
                    l.b = k.content;
                    l.g = this.vg;
                    l.c = k.ak;
                    if (this.g9) {
                        l.g = this.vn(k.ak);
                    }
                    l.a = this.ar(k.ak, k.al);
                    a.add(l);
                }
            });
            return true;
        }
        ks(a, b) {
            let c = null;
            if (this.dn != null) {
                if (a >= 0 && a < this.dn.count) {
                    c = this.dn.item(a);
                }
                if (this.yz != null && this.yz.cl && a == this.yz.othersIndex) {
                    c = this.y7;
                }
            }
            let d = NaN;
            if (c != null) {
                d = this.jc(c);
            }
            let e = this.aa5(d, c, a, this.z4 >= 0 ? this.z4 : 5, this.z5, false, false, b);
            if (e != null) {
                return e;
            }
            return super.ks(a, b);
        }
        aa5(a, b, c, d, e, f, g, h) {
            let i = null;
            let j = (b == this.y7);
            let k = this.ze;
            if (h) {
                k = this.zf;
            }
            if (k == 0) {
                if (h) {
                    k = 5;
                }
                else {
                    k = 6;
                }
            }
            if ((h && ((this.yt != null) || (j && this.yu != null))) || (!h && ((this.yw != null) || (j && this.yv != null)))) {
                let l = this.z1(a, b, c, d, f);
                let m = this.z2(a, b, c, e, f);
                let n = this.aam(c);
                let o = ((() => {
                    let $ret = new ProportionalRadialLabelContext();
                    $ret.value = l;
                    $ret.percent = m;
                    $ret.label = n;
                    $ret.item = b;
                    return $ret;
                })());
                let p = null;
                if (j) {
                    if (h) {
                        p = this.yu;
                    }
                    else {
                        p = this.yv;
                    }
                    if (p == null) {
                        if (h) {
                            p = this.yt;
                        }
                        else {
                            p = this.yw;
                        }
                    }
                }
                else {
                    if (h) {
                        p = this.yt;
                    }
                    else {
                        p = this.yw;
                    }
                }
                i = p.i(o);
            }
            else if (k != 1) {
                switch (k) {
                    case 2:
                        i = this.aan(a, b, c, d, f);
                        break;
                    case 3:
                        i = this.aao(a, b, c, e, f);
                        break;
                    case 4:
                        {
                            let q = this.aan(a, b, c, d, f);
                            let r = this.aao(a, b, c, e, f);
                            i = q + this.aad + r;
                        }
                        break;
                    case 5:
                        i = this.aam(c);
                        break;
                    case 6:
                        {
                            let s = this.aan(a, b, c, d, f);
                            let t = this.aam(c);
                            i = t + this.aad + s;
                        }
                        break;
                    case 7:
                        {
                            let u = this.aao(a, b, c, e, f);
                            let v = this.aam(c);
                            i = v + this.aad + u;
                        }
                        break;
                    case 8:
                        {
                            let w = this.aan(a, b, c, d, f);
                            let x = this.aao(a, b, c, e, f);
                            let y = this.aam(c);
                            i = y + this.aad + w + this.aad + x;
                        }
                        break;
                }
            }
            else {
                if (g) {
                    i = this.aan(a, b, c, d, f);
                }
                else {
                    i = this.aam(c);
                }
            }
            return i;
        }
        aam(a) {
            let b = this.yz;
            let c = this.au(true);
            if (this.yz != null && this.yz.cl && this.yz.hasOthersCategory && a == this.yz.othersIndex) {
                if (this.ys != null) {
                    c = this.ys;
                }
            }
            if (c != null) {
                let d = super.ks(a, false);
                if (d != null) {
                    return c.i(d);
                }
                else {
                    return null;
                }
            }
            else {
                return b.gf(a);
            }
        }
        aan(a, b, c, d, e) {
            let f = a;
            f = this.z9(c, f);
            if (e) {
                return this.aab(f, d);
            }
            else {
                a = this.jc(b);
                if (!isNaN_(a)) {
                    return this.aab(a, d);
                }
                else {
                    return this.aab(f, d);
                }
            }
        }
        z1(a, b, c, d, e) {
            let f = a;
            f = this.z9(c, f);
            if (e) {
                return f;
            }
            else {
                a = this.jc(b);
                if (!isNaN_(a)) {
                    return a;
                }
                else {
                    return f;
                }
            }
        }
        aao(a, b, c, d, e) {
            if (this.yz == null || !this.yz.cl) {
                return this.aan(a, b, c, d, e);
            }
            let f = this.yz.oa(c);
            if (e) {
                return this.aab(f, d) + "%";
            }
            else {
                a = this.yz.oa(c);
                if (!isNaN_(a)) {
                    return this.aab(a, d) + "%";
                }
                else {
                    return this.aab(f, d) + "%";
                }
            }
        }
        z2(a, b, c, d, e) {
            if (this.yz == null || !this.yz.cl) {
                return this.z1(a, b, c, d, e);
            }
            let f = this.yz.oa(c);
            if (e) {
                return f;
            }
            else {
                a = this.yz.oa(c);
                if (!isNaN_(a)) {
                    return a;
                }
                else {
                    return f;
                }
            }
        }
        z9(a, b) {
            return b;
        }
        aab(a, b) {
            let c;
            if (b >= 0) {
                c = round10N(a, b);
            }
            else {
                c = a;
            }
            let d = this.au(false);
            if (d != null) {
                let e = d;
                return e.i(c);
            }
            else {
                return c.toString();
            }
        }
        get_ft() {
            return true;
        }
        get_fe() {
            return true;
        }
        zh(a, b, c) {
            let d = new HighlightingInfo();
            d.i = this;
            d.g = 0;
            d.f = this.dn.count - 1;
            d.c = true;
            if (c != null && c.g == d.g && c.f == d.f) {
                return c;
            }
            return d;
        }
        zy() {
            return false;
        }
        ht() {
            let a = super.ht();
            if (this.zy()) {
                let b = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "DashArray";
                    $ret.p = true;
                    $ret.x = ((() => {
                        let $ret = new DoubleCollection();
                        $ret.add(5);
                        $ret.add(5);
                        return $ret;
                    })());
                    $ret.q = true;
                    return $ret;
                })());
                a.add(b);
            }
            if (!this.zy()) {
                let c = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "Brush";
                    $ret.p = true;
                    $ret.y = "ActualBrush";
                    $ret.q = true;
                    return $ret;
                })());
                c.valueResolving = delegateCombine(c.valueResolving, runOn(this, this.r0));
                a.add(c);
            }
            if (!this.zy()) {
                let d = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "Outline";
                    $ret.p = true;
                    $ret.y = "ActualOutline";
                    $ret.q = true;
                    return $ret;
                })());
                d.valueResolving = delegateCombine(d.valueResolving, runOn(this, this.r0));
                a.add(d);
            }
            let e = ((() => {
                let $ret = new SeriesLayerPropertyOverlay();
                $ret.p = true;
                $ret.ad = "IsTransitionInEnabled";
                $ret.x = true;
                $ret.q = true;
                return $ret;
            })());
            a.add(e);
            let f = ((() => {
                let $ret = new SeriesLayerPropertyOverlay();
                $ret.p = true;
                $ret.ad = "TransitionInMode";
                $ret.x = enumGetBox(CategoryTransitionInMode_$type, 20);
                $ret.q = true;
                return $ret;
            })());
            a.add(f);
            return a;
        }
        kv() {
            if (this.d3()) {
                return this.bn.zd;
            }
            else {
                return this.bn.za;
            }
        }
        zi(a, b, c) {
            if (this.dn == null) {
                return null;
            }
            let d = this.y9.cx.c;
            let e = this.y9.cx.d;
            let f = this.y9.cx.b;
            let g = this.zb();
            let h = this.dn.count;
            let i = this.yz;
            let j = -1;
            let k = -1;
            let l = this.j3(b);
            if (isNaN_(b.x) || isNaN_(b.y)) {
                if (a != null && this.dn != null) {
                    if (a == this.y7) {
                        l = this.yz.othersIndex;
                    }
                    else {
                        l = this.dn.indexOf(a);
                    }
                }
            }
            j = truncate(Math.floor((intDivide(l, f)))) * f;
            k = j + (f - 1);
            if (c != null && c.g == j && c.f == k) {
                return c;
            }
            let m = new HighlightingInfo();
            m.i = this;
            m.g = j;
            m.f = k;
            return m;
        }
        zj(a, b, c) {
            if (this.dn == null) {
                return null;
            }
            let d = this.y9.cx.c;
            let e = this.y9.cx.d;
            let f = this.y9.cx.b;
            let g = this.zb();
            let h = this.dn.count;
            let i = this.yz;
            let j = -1;
            let k = -1;
            let l = this.j3(b);
            if (isNaN_(b.x) || isNaN_(b.y)) {
                if (a != null && this.dn != null) {
                    if (a == this.y7) {
                        l = this.yz.othersIndex;
                    }
                    else {
                        l = this.dn.indexOf(a);
                    }
                }
            }
            j = truncate(Math.floor((intDivide(l, f)))) * f;
            k = j + (f - 1);
            if (c != null && c.g == j && c.f == k) {
                return c;
            }
            let m = new HighlightingInfo();
            m.d = true;
            m.i = this;
            m.g = j;
            m.f = k;
            return m;
        }
        dg(a, b, c) {
            if (this.ed && this.fz(this.bx) && !c) {
                let d = this.zi(a, b, this.zk);
                this.zk = d;
                return d;
            }
            else {
                let e = this.zh(a, b, this.zk);
                this.zk = e;
                return e;
            }
        }
        dh(a, b, c) {
            if (this.fz(this.bx) && !c) {
                let d = this.zj(a, b, this.zl);
                this.zl = d;
                return d;
            }
            else {
                let e = this.zh(a, b, this.zl);
                e.d = true;
                this.zl = e;
                return e;
            }
        }
        zx() {
            return (this.assigningRadialStyle != null && this.zn) || this.d2 || (this.bx != 1) || (this.cp != 1) || (this.co != 1);
        }
        zw() {
            return (this.assigningRadialMarkerStyle != null && this.zm) || this.d2 || (this.bx != 1) || (this.cp != 1) || (this.co != 1);
        }
        abb(a) {
            if (this.assigningRadialStyle != null && this.zn) {
                this.assigningRadialStyle(this, a);
            }
        }
        aba(a) {
            if (this.assigningRadialMarkerStyle != null && this.zm) {
                this.assigningRadialMarkerStyle(this, a);
            }
        }
        z6(a) {
            return a.cx.b;
        }
        z7(a) {
            return a.cx.c;
        }
        ai() {
            return [this.yz, this.y5];
        }
        sr(a, b) {
            this.y9.cx.e(this.id);
            this.rr(false);
        }
        sq(a, b) {
            if (this.g1 && this.jq < 0.05 && (this.db == null || !this.db.fn())) {
                this.g2 = true;
                this.g5 = false;
                this.gk = false;
            }
            this.y9.cx.e(this.id);
            this.rr(false);
        }
        q9(a, b, c, d) {
            super.q9(a, b, c, d);
            switch (b) {
                case RadialBase.$$p[6]:
                    this.rr(false);
                    break;
                case RadialBase.$$p[14]:
                    this.pe();
                    this.rr(false);
                    break;
                case "SeriesViewer":
                    if (c != null && d == null) {
                        if (this.yz != null) {
                            this.yz.b0(this);
                        }
                        if (this.y5 != null) {
                            this.y5.b0(this);
                        }
                    }
                    if (c == null && d != null) {
                        if (this.yz != null) {
                            this.yz.ct(this);
                        }
                        if (this.y5 != null) {
                            this.y5.ct(this);
                        }
                    }
                    this.y9.cx.e(this.id);
                    this.rr(false);
                    break;
                case RadialBase.$$p[0]:
                    if (this.yz != null && this.y5 != null) {
                        this.y8 = new RadialAxes(this.y5, this.yz);
                    }
                    if (c != null) {
                        c.b0(this);
                    }
                    if (d != null) {
                        d.ct(this);
                    }
                    this.y9.cx.e(this.id);
                    this.rr(false);
                    break;
                case RadialBase.$$p[22]:
                    if (this.yz != null && this.y5 != null) {
                        this.y8 = new RadialAxes(this.y5, this.yz);
                    }
                    if (c != null) {
                        c.b0(this);
                    }
                    if (d != null) {
                        d.ct(this);
                    }
                    this.y9.cx.e(this.id);
                    if (this.y5 == null || !this.y5.c1()) {
                        this.rr(false);
                    }
                    break;
                case RadialBase.$$p[3]:
                case RadialBase.$$p[4]:
                    if (this.aaf != null) {
                        this.ys = new BindingFormatter();
                        this.ys.j = this.aaf;
                        this.ys.d = this.ym;
                    }
                    else {
                        this.ys = null;
                    }
                    break;
                case RadialBase.$$p[19]:
                case RadialBase.$$p[20]:
                    if (this.aa2 != null) {
                        this.yw = new BindingFormatter();
                        this.yw.j = this.aa2;
                        this.yw.d = this.yr;
                    }
                    else {
                        this.yw = null;
                    }
                    break;
                case RadialBase.$$p[12]:
                case RadialBase.$$p[13]:
                    if (this.aas != null) {
                        this.yt = new BindingFormatter();
                        this.yt.j = this.aas;
                        this.yt.d = this.yo;
                    }
                    else {
                        this.yt = null;
                    }
                    break;
                case RadialBase.$$p[17]:
                case RadialBase.$$p[18]:
                    if (this.aa2 != null) {
                        this.yv = new BindingFormatter();
                        this.yv.j = this.aaz;
                        this.yv.d = this.yq;
                    }
                    else {
                        this.yv = null;
                    }
                    break;
                case RadialBase.$$p[15]:
                case RadialBase.$$p[16]:
                    if (this.aas != null) {
                        this.yu = new BindingFormatter();
                        this.yu.j = this.aaw;
                        this.yu.d = this.yp;
                    }
                    else {
                        this.yu = null;
                    }
                    break;
                case "SyncLink":
                    if (this.c3 != null && this.db != null) {
                        this.y9.cx.e(this.id);
                        this.rr(false);
                    }
                    break;
                case "TransitionProgress":
                    this.zd.c(this.jq, this.zc, this.za);
                    if (this.d5(this.cv)) {
                        return;
                    }
                    if (this.jq == 1) {
                        this.za.w();
                        this.abc(this.za, this.y9);
                        if (this.g1) {
                            this.g1 = false;
                            this.o6();
                            this.dc.r = truncate(this.i9());
                            this.dc.b = this.dd;
                        }
                        if (this.g4) {
                            this.g4 = false;
                            this.o6();
                            this.dc.r = truncate(this.i9());
                            this.dc.b = this.dd;
                            this.q0();
                        }
                        this.qo();
                    }
                    else {
                        this.abc(this.zd, this.y9);
                    }
                    if (this.db != null) {
                        this.db.qo(this);
                    }
                    break;
                case RadialBase.$$p[8]:
                    this.rr(false);
                    this.ql();
                    break;
                case "VisibilityProxy":
                    if (EnumUtil.getEnumValue(Visibility_$type, c) != 0 && EnumUtil.getEnumValue(Visibility_$type, d) == 0) {
                        this.y9.cx.e(this.id);
                    }
                    break;
                case RadialBase.$$p[10]:
                    this.zn = this.zv();
                    this.rr(false);
                    break;
                case RadialBase.$$p[9]:
                    this.zm = this.zu();
                    this.rr(false);
                    break;
            }
        }
        zv() {
            return this.zs;
        }
        zu() {
            return this.zr;
        }
        zp(a) {
            if (typeCast(NumericRadiusAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        zo(a) {
            if (typeCast(CategoryAngleAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get_y7() {
            return this.y6;
        }
        get y7() {
            return this.get_y7();
        }
        kn(a) {
            let b = this.j3(a);
            let c = false;
            if (this.yz != null && this.yz.cl) {
                let d = this.yz;
                let e = d.hasOthersCategory && b == this.yz.lj - 1;
                c = e;
            }
            if (c) {
                let f = this.yz;
                return this.y7;
            }
            return b >= 0 && this.dn != null && b < this.dn.count ? this.dn.item(b) : null;
        }
        zz(a) {
            let b = this.cv.by;
            let c = this.cv.bx;
            let d = this.cv.getEffectiveViewport();
            if (this.yz != null && !b.isEmpty && !c.isEmpty && this.y8 != null) {
                let e = this.y8.c(a, b, c, d);
                if (e < 0) {
                    e += Math.PI * 2;
                }
                if (e > Math.PI * 2) {
                    e -= Math.PI * 2;
                }
                return e;
            }
            return NaN;
        }
        ir(a) {
            let b = this.cv.by;
            let c = this.cv.bx;
            let d = this.getEffectiveViewport1(this.cv);
            let e = -1;
            if (this.yz != null && !b.isEmpty && !c.isEmpty && this.y8 != null) {
                let f = this.y8.c(a, b, c, d);
                if (f < 0) {
                    f += Math.PI * 2;
                }
                if (f > Math.PI * 2) {
                    f -= Math.PI * 2;
                }
                let g = this.yz.getUnscaledAngle(f);
                if (this.yz.categoryMode != 0) {
                    g -= 0.5;
                }
                e = g;
            }
            return e;
        }
        z0(a, b, c, d) {
            return this.yz.m7(a, b, c, d);
        }
        j3(a) {
            let b = truncate(Math.round(this.ir(a)));
            let c = false;
            if (this.yz != null && this.yz.cl) {
                let d = this.yz;
                let e = d.hasOthersCategory && b == this.yz.lj - 1;
                c = e;
            }
            if (c) {
                let f = this.yz;
                return this.yz.lj - 1;
            }
            if (this.dn != null && b == this.dn.count) {
                b = 0;
            }
            return b;
        }
        gd(a) {
            return false;
        }
        zb() {
            let a = this.za;
            if (this.d3()) {
                if (this.dc.g) {
                    this.dc.t();
                }
                a = this.zd;
            }
            return a;
        }
        qb() {
            super.qb();
            if (this.yz != null) {
                this.yz.ib(false);
            }
            if (this.y5 != null) {
                this.y5.ib(false);
            }
        }
        he(a, b, c) {
            let d = true;
            let e = c;
            if (!super.he(a, b, c) || !c.o() || b.isEmpty || a.isEmpty || this.yz == null || this.yz.itemsSource == null || this.y5 == null || this.y8 == null || this.dn == null || this.yz.bi == null || this.y5.bi == null || this.y5.l4 == this.y5.l3) {
                e.cx.b = 0;
                d = false;
            }
            return d;
        }
        y2() {
            return 1;
        }
        z3() {
            return Math.max(0, 0.5 * this.y5.n6);
        }
        gn() {
            return this.zt;
        }
        go() {
            return true;
        }
        rs(a) {
            super.rs(a);
            this.y9.cx.e(this.id);
            if (this.d5(this.cv)) {
                this.za.z();
                this.zd.z();
                this.zc.z();
                return;
            }
            if (this.gr) {
                if (this.d3()) {
                    if (this.dc.g) {
                        this.dc.t();
                    }
                    this.abc(this.zd, this.y9);
                }
                else {
                    this.abc(this.za, this.y9);
                }
                return;
            }
            if (this.gf(a)) {
                let b = this.zc;
                if (this.d3()) {
                    if (this.dc.g) {
                        this.dc.t();
                    }
                    this.zc = this.zd;
                    this.zd = b;
                }
                else {
                    this.zc = this.za;
                    this.za = b;
                }
                let c = false;
                this.aa9(this.za, this.y9);
                if (this.g3) {
                    this.dc.w();
                    this.dc.r = truncate(this.ja());
                    this.dc.b = this.de != null ? this.de : this.dd;
                    if (this.g4) {
                        let d = this.zd;
                        this.zd = this.zc;
                        this.zc = d;
                        c = true;
                    }
                    this.y4.s(this, this.zc, this.za, this.isVertical, this.yz, this.y5, this.y3, this.y2(), this.c5, this.c4(), runOn(this, this.z3), this.y9.bx);
                    if (this.g4) {
                        let e = this.zd;
                        this.zd = this.zc;
                        this.zc = e;
                    }
                    this.g4 = false;
                }
                if (this.g6) {
                    this.dc.w();
                    this.dc.r = truncate(this.jb());
                    this.dc.b = this.df != null ? this.df : this.dd;
                    if (this.g1) {
                        let f = this.zd;
                        this.zd = this.zc;
                        this.zc = f;
                        c = true;
                    }
                    this.y4.s(this, this.zc, this.za, this.isVertical, this.yz, this.y5, this.y3, this.y2(), this.c5, this.c4(), runOn(this, this.z3), this.y9.bx);
                    let g = this.za;
                    this.za = this.zc;
                    this.zc = g;
                    if (this.g1) {
                        let h = this.zd;
                        this.zd = this.zc;
                        this.zc = h;
                    }
                    this.g1 = false;
                }
                this.d9 = false;
                if (!c) {
                    this.o1();
                }
                this.r7();
                if (this.g3) {
                    this.g2 = false;
                    this.g1 = true;
                }
                if (this.g6) {
                    this.g5 = false;
                    this.g4 = true;
                }
            }
            else {
                this.aa9(this.za, this.y9);
                this.abc(this.za, this.y9);
            }
        }
        z8() {
            if (this.bn != null) {
                let a = this.bn;
                return a.z8();
            }
            let b = 0;
            for (let c of fromEnum(this.db.series)) {
                if (c == this || this.bn == c) {
                    return b;
                }
                let d = typeCast(RadialBase.$, c);
                if (d != null && d.yz == this.yz && d.preferredCategoryMode(d.yz) == 2) {
                    b++;
                }
            }
            return -1;
        }
        ak(a, b) {
            let c = new List$1(ChartSelection.$, 0);
            this.p4(a, c, b);
            return c.toArray();
        }
        p4(a, b, c) {
            let d = this.cv.by;
            let e = this.cv.bx;
            let f = this.cv.getEffectiveViewport();
            let g, h;
            let i = this.y8.f(a, d, e, f, g, h);
            g = i.p4;
            h = i.p5;
            if (g == -1 || h == -1) {
                return;
            }
            let j = h - g + 1;
            if (g > h) {
                j = this.yz.lk - g + h + 1;
            }
            if (j > 0 && (c == 7 || c == 6)) {
                b.add(((() => {
                    let $ret = new ChartSelection();
                    $ret.series = this;
                    return $ret;
                })()));
                return;
            }
            for (let k = 0; k < j; k++) {
                let l = (k + g) % (this.yz.lk);
                if (c == 2 || c == 1) {
                    b.add(((() => {
                        let $ret = new ChartSelection();
                        $ret.item = this.yz.kv.item(l);
                        return $ret;
                    })()));
                }
                else {
                    b.add(((() => {
                        let $ret = new ChartSelection();
                        $ret.item = this.yz.kv.item(l);
                        $ret.series = this;
                        return $ret;
                    })()));
                }
            }
        }
    }
    RadialBase.$t = /*@__PURE__*/ markType(RadialBase, 'RadialBase', MarkerSeries.$, [IHasCategoryModePreference_$type]);
    RadialBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, RadialBase, 'raisePropertyChanged', ['AngleAxis:yz:abd', [CategoryAngleAxis.$, null], 'AutoCalloutLabelPrecision:z4:abe', [1, -1], 'AutoCalloutLabelValueSeparator:aad:abf', [2, " - "], 'AutoCalloutOthersLabelFormat:aaf:abg', [2, null], 'AutoCalloutOthersLabelFormatSpecifiers:ym:abh', [Array_$type, null], 'AutoCalloutPercentagePrecision:z5:abi', [1, 2], 'AutoCalloutRadialLabelMode:ze:abj', [RadialLabelMode_$type, /*@__PURE__*/ enumGetBox(RadialLabelMode_$type, 0)], 'CategoryCollisionMode:y0:abk', [CategoryCollisionMode_$type, /*@__PURE__*/ enumGetBox(CategoryCollisionMode_$type, 1)], 'ClipSeriesToBounds:zq:abl', [0, false], 'IsCustomRadialMarkerStyleAllowed:zr:abm', [0, false], 'IsCustomRadialStyleAllowed:zs:abn', [0, false], 'IsTransitionInEnabled:zt:abo', [0, false], 'LegendProportionalRadialLabelFormat:aas:abp', [2, null], 'LegendProportionalRadialLabelFormatSpecifiers:yo:abq', [Array_$type, null], 'LegendRadialLabelMode:zf:abr', [RadialLabelMode_$type, /*@__PURE__*/ enumGetBox(RadialLabelMode_$type, 0)], 'OthersLegendProportionalRadialLabelFormat:aaw:abs', [2, null], 'OthersLegendProportionalRadialLabelFormatSpecifiers:yp:abt', [Array_$type, null], 'OthersProportionalRadialLabelFormat:aaz:abu', [2, null], 'OthersProportionalRadialLabelFormatSpecifiers:yq:abv', [Array_$type, null], 'ProportionalRadialLabelFormat:aa2:abw', [2, null], 'ProportionalRadialLabelFormatSpecifiers:yr:abx', [Array_$type, null], 'TransitionInMode:y3:aby', [CategoryTransitionInMode_$type, /*@__PURE__*/ enumGetBox(CategoryTransitionInMode_$type, 0)], 'ValueAxis:y5:abz', [NumericRadiusAxis.$, null]]);
    return RadialBase;
})();
/**
 * @hidden
 */
export let RadialBaseView = /*@__PURE__*/ (() => {
    class RadialBaseView extends MarkerSeriesView {
        constructor(a) {
            super(a);
            this.cx = null;
            this.cw = null;
            this.cy = null;
            this.cz = 0;
            this.c0 = null;
            this.cw = a;
            this.cy = new Pool$1(Marker.$);
            this.cn(this.cy);
        }
        cj(a) {
            this.cy.c(a);
        }
    }
    RadialBaseView.$t = /*@__PURE__*/ markType(RadialBaseView, 'RadialBaseView', MarkerSeriesView.$);
    return RadialBaseView;
})();
