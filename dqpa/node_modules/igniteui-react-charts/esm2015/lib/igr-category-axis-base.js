/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { IgrAxis } from './igr-axis';
import { toPoint, fromRect, ensureBool } from "igniteui-react-core";
/**
 * Represents the base class for all IgxDataChartComponent category-based axes.
*
* ```ts
*  <IgrDataChart
*     dataSource={this.state.dataSource} >
*
*     <IgrCategoryXAxis name="xAxis" />
*     <IgrNumericYAxis name="yAxis" />
*
*     <IgrColumnSeries
*      name="series1"
*     xAxisName="xAxis"
* 	yAxisName="yAxis"
* 	valueMemberPath="Value" />
*  </IgrDataChart>
* ```
*
* ```ts
* 	this.columnSeries1 = new IgrColumnSeries({ name: "colSeries1" });
* 	this.columnSeries1.dataSource = this.categoryData;
* 	this.columnSeries1.xAxis = this.categoryXAxis;
* 	this.columnSeries1.yAxis = this.numericYAxis;
* 	this.columnSeries1.xAxisName = "categoryXAxis";
* 	this.columnSeries1.yAxisName = "numericYAxis";
* 	this.columnSeries1.valueMemberPath = "USA";
* ```
*/
export class IgrCategoryAxisBase extends IgrAxis {
    constructor(props) {
        super(props);
        this._chartLevelData = null;
        this._dataSource = null;
    }
    provideData(data) {
        this._chartLevelData = data;
        this.updateDataSource();
    }
    updateDataSource() {
        if (this._dataSource == null) {
            this.i.itemsSource = this._chartLevelData;
        }
        else {
            this.i.itemsSource = this._dataSource;
        }
    }
    set dataSource(value) {
        this._dataSource = value;
        this.updateDataSource();
        //console.log("setting axis data source: " + value)
    }
    get dataSource() {
        if (this._dataSource != null) {
            return this._dataSource;
        }
        return this.i.itemsSource;
    }
    /**
                             * @hidden
                             */
    get i() {
        return this._implementation;
    }
    /**
 * Gets if the current axis is a continuous rather than a discrete scale
*/
    get isContinuous() {
        return this.i.cd;
    }
    /**
     * Checks if the axis is of category axis type
    */
    get isCategory() {
        return this.i.cb;
    }
    /**
     * Gets the number of items in the current category axis items source.
    */
    get itemsCount() {
        return this.i.lk;
    }
    set itemsCount(v) {
        this.i.lk = +v;
    }
    /**
     * Gets or sets the amount of space between adjacent categories for the current axis object.
     * The gap is silently clamped to the range [0, 1] when used.
    *
    * Use the `Gap` property to configure the spacing between items on a category axis with item spacing.
    *
    * A `Gap` of 0 allocates no space between items.  A `Gap` of 1 allocates a space between items equal to the width of one item.
    *
    * To set the item spacing to 75% the width of one item, set the `Gap` to 0.75, as in this code:
    *
    * ```ts
    *  <IgrDataChart
    * 	ref={this.onChartRef}
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" gap={0.4} />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get gap() {
        return this.i.k5;
    }
    set gap(v) {
        this.i.k5 = +v;
    }
    /**
     * Gets or sets the maximum gap value to allow. This defaults to 1.0.
    */
    get maximumGap() {
        return this.i.lc;
    }
    set maximumGap(v) {
        this.i.lc = +v;
    }
    /**
     * Gets or sets the minimum amount of pixels to use for the gap between categories, if possible.
    */
    get minimumGapSize() {
        return this.i.ld;
    }
    set minimumGapSize(v) {
        this.i.ld = +v;
    }
    /**
     * Gets or sets the amount of overlap between adjacent categories for the current axis object.
     * The overlap is silently clamped to the range [-1, 1] when used.
    *
    * Use the `Overlap` property to configure the spacing between items on a category axis with item spacing and more than one series.
    *
    * An `Overlap` of 0 places grouped items adjacent to each other.  An `Overlap` of 1 places grouped items in the same axis space, completely overlapping.  An `Overlap` of -1 places a space between grouped items equal to the width of one item.
    *
    * To place grouped items with 75% overlap, set the `Overlap` to 0.75, as in this code:
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" overlap={1} />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    * />
    *  </IgrDataChart>
    * ```
    */
    get overlap() {
        return this.i.le;
    }
    set overlap(v) {
        this.i.le = +v;
    }
    /**
     * Gets or sets whether the category axis should use clustering display mode even if no series are present that would force clustering mode.
    *
    * `UseClusteringMode` applies grouping and spacing to a category axis equivalent to the grouping that occurs when grouping series, such as ColumnSeries, are used.
    *
    * Try setting it on an axis displaying financial series to adjust the spacing on the left and right sides of the axis:
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" useClusteringMode={2} />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    get useClusteringMode() {
        return this.i.kz;
    }
    set useClusteringMode(v) {
        this.i.kz = ensureBool(v);
    }
    getFullRange() {
        let iv = this.i.ag();
        return (iv);
    }
    getCategoryBoundingBox(point, useInterpolation, singularWidth) {
        let iv = this.i.mj(toPoint(point), useInterpolation, singularWidth);
        return fromRect(iv);
    }
    getCategoryBoundingBoxHelper(point, useInterpolation, singularWidth, isVertical) {
        let iv = this.i.mk(toPoint(point), useInterpolation, singularWidth, isVertical);
        return fromRect(iv);
    }
    /**
     * Unscales a value from screen space into axis space.
    
    * @param unscaledValue  * The scaled value in screen coordinates to unscale into axis space.
    */
    unscaleValue(unscaledValue) {
        let iv = this.i.lg(unscaledValue);
        return (iv);
    }
    notifySetItem(index, oldItem, newItem) {
        this.i.l4(index, oldItem, newItem);
    }
    /**
     * Used to manually notify the axis that the data source has reset or cleared its items.
    
    */
    notifyClearItems() {
        this.i.l1();
    }
    notifyInsertItem(index, newItem) {
        this.i.l2(index, newItem);
    }
    notifyRemoveItem(index, oldItem) {
        this.i.l3(index, oldItem);
    }
}
