/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, Boolean_$type, Number_$type, markType } from "igniteui-react-core";
import { SRProvider } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartRangeSelectorVisualData } from "./FinancialChartRangeSelectorVisualData";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let FinancialChartRangeSelectorView = /*@__PURE__*/ (() => {
    class FinancialChartRangeSelectorView extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.e = null;
        }
        f(a, b) {
            let c = new SRProvider(a);
            this.e = c;
            this.c.b = this.e;
        }
        h(a, b, c) {
            TemplatedHtmlControl.n(".rangeSelector" + b + " span", "FinancialChart_RangeSelector_" + b, a, c);
        }
        g(a) {
        }
        d(a) {
            let b = new List$1(String_$type, 0);
            let c = new List$1(Boolean_$type, 0);
            let d = new List$1(Number_$type, 0);
            let e = new List$1(Number_$type, 0);
            let f = new List$1(Boolean_$type, 0);
            let g = new List$1(Number_$type, 0);
            let h = new List$1(Number_$type, 0);
            let k = this.a(a);
            for (let j = 0; j < k.length; j++) {
                let i = k[j];
                let l = i.parent() != null ? i.parent().getText() : "not found";
                l = l != null ? l.trim() : null;
                b.add(l);
                c.add1(i.getProperty("checked"));
                d.add(i.getOffset().left);
                e.add(i.getOffset().top);
                let m = i.parent().getNativeElement();
                let n = m.offsetParent != null;
                g.add(m.offsetWidth);
                h.add(m.offsetHeight);
                f.add(n);
            }
            ;
            return ((() => {
                let $ret = new FinancialChartRangeSelectorVisualData();
                $ret.buttonLabels = b.toArray();
                $ret.buttonsChecked = c.toArray();
                $ret.buttonLefts = d.toArray();
                $ret.buttonTops = e.toArray();
                $ret.buttonVisibilities = f.toArray();
                $ret.buttonWidths = g.toArray();
                $ret.buttonHeights = h.toArray();
                $ret.visibility = a.getStyleProperty("visibility");
                $ret.left = parseFloat(a.getStyleProperty("offsetLeft"));
                $ret.top = parseFloat(a.getStyleProperty("offsetTop"));
                $ret.width = parseFloat(a.getStyleProperty("offsetWidth"));
                $ret.height = parseFloat(a.getStyleProperty("offsetHeight"));
                return $ret;
            })());
        }
        b(a) {
            return 5;
        }
        i(a) {
        }
        a(a) {
            return TemplatedHtmlControl.a(a, "input").toArray();
        }
    }
    FinancialChartRangeSelectorView.$t = /*@__PURE__*/ markType(FinancialChartRangeSelectorView, 'FinancialChartRangeSelectorView');
    return FinancialChartRangeSelectorView;
})();
