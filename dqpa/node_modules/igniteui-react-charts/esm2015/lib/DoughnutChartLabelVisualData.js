/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { SizeData } from "igniteui-react-core";
import { PointData } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let DoughnutChartLabelVisualData = /*@__PURE__*/ (() => {
    class DoughnutChartLabelVisualData extends Base {
        constructor() {
            super(...arguments);
            this._labelValue = null;
            this._labelSize = null;
            this._labelPosition = null;
        }
        get labelValue() {
            return this._labelValue;
        }
        set labelValue(a) {
            this._labelValue = a;
        }
        get labelSize() {
            return this._labelSize;
        }
        set labelSize(a) {
            this._labelSize = a;
        }
        get labelPosition() {
            return this._labelPosition;
        }
        set labelPosition(a) {
            this._labelPosition = a;
        }
        scaleByViewport(a) {
            this.labelPosition = new PointData((this.labelPosition.x - a.left) / a.width, (this.labelPosition.y - a.top) / a.height);
            this.labelSize = new SizeData((this.labelSize.width) / a.width, (this.labelSize.height) / a.height);
        }
        serialize() {
            let a = "{ labelValue: '";
            a += this.labelValue == null ? stringEmpty() : this.labelValue;
            a += "', labelSize: { width: " + this.labelSize.width + ", height: " + this.labelSize.height + "}, labelPosition: { x: " + this.labelPosition.x + ", y: " + this.labelPosition.y + "}}";
            return a;
        }
    }
    DoughnutChartLabelVisualData.$t = /*@__PURE__*/ markType(DoughnutChartLabelVisualData, 'DoughnutChartLabelVisualData');
    return DoughnutChartLabelVisualData;
})();
