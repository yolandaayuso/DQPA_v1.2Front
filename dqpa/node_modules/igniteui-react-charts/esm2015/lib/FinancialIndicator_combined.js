/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FinancialSeries } from "./FinancialSeries";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { CategoryFrame } from "./CategoryFrame";
import { Number_$type, typeCast, enumGetBox, EnumUtil, runOn, markType, markDep } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { ISortingAxis_$type } from "./ISortingAxis";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { CategorySeries } from "./CategorySeries";
import { NotImplementedException } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { GeometryGroup } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { LineGeometry } from "igniteui-react-core";
import { Defaults } from "./Defaults";
import { Extensions } from "igniteui-react-core";
import { IndicatorRenderer } from "./IndicatorRenderer";
/**
 * @hidden
 */
export let FinancialIndicator = /*@__PURE__*/ (() => {
    class FinancialIndicator extends FinancialSeries {
        get_e7() {
            return true;
        }
        cs() {
            return new FinancialIndicatorView(this);
        }
        q1(a) {
            super.q1(a);
            this.aa1 = a;
        }
        constructor() {
            super();
            this._indicatorColumn = null;
            this.aa0 = null;
            this.xa = new CategoryFrame(3);
            this.xc = new CategoryFrame(3);
            this.w8 = new CategoryFrame(3);
            this.indicatorColumn = new List$1(Number_$type, 0);
            this.aa0 = new AxisRange(-100, 100);
        }
        abe(a) {
            if (this.xp != null && !this.xp.c1()) {
                this.rr(true);
            }
        }
        aa6(a, b, c) {
            if (isNaN_(b.x) || isNaN_(b.y)) {
                return false;
            }
            let d = this.xp;
            let e = 0;
            if (d != null) {
                e = d.e6(d.me);
            }
            if ((a.y >= e && a.y <= b.y) || (a.y <= e && a.y >= b.y)) {
                return true;
            }
            return false;
        }
        b2() {
            if (this.b3 == 0) {
                return 1;
            }
            else {
                return super.b2();
            }
        }
        wn(a) {
            if (this.w6 == null || this.xp == null) {
                return Rect.empty;
            }
            let b = this.v7(a);
            let c = this.cv.by;
            let d = this.cv.bx;
            let e = this.getEffectiveViewport1(this.cv);
            let f = new ScalerParams(0, c, d, this.xp.ch, e);
            f.b = this.iy();
            let g = this.an(this.w6, this.w8.f, this.y3(this.cv), this.y5(this.cv), a, true);
            if (g == null) {
                return Rect.empty;
            }
            let h = g[0];
            let i = g[1];
            let j = Math.abs(b.x - h[0]);
            let k = Math.abs(b.x - i[0]);
            let l = this.xp.el(this.xp.me, f);
            let m = 1;
            if (j < k) {
                let n = h[0] - 0.5 * m;
                let o = h[1];
                let p = l;
                return new Rect(0, n, Math.min(o, p), m, Math.max(o, p) - Math.min(o, p));
            }
            else {
                let q = i[0] - 0.5 * m;
                let r = i[1];
                let s = l;
                return new Rect(0, q, Math.min(r, s), m, Math.max(r, s) - Math.min(r, s));
            }
        }
        gw(a, b) {
            let c = this.wc(this.wh(a), true, false);
            if (this.aa3 == 1) {
                if (this.aa6(a, c, b)) {
                    return true;
                }
            }
            if (this.aa3 == 1 || this.aa3 == 0) {
                if (this.gv(a, b)) {
                    return true;
                }
            }
            if (this.aa3 == 2) {
                if (this.gz(a, b)) {
                    return true;
                }
            }
            return false;
        }
        pb(a, b, c, d) {
            super.pb(a, b, c, d);
            if (this.w6 != null && typeCast(ISortingAxis_$type, this.w6) !== null) {
                this.w6.i$i();
            }
            if (this.aa1.ca) {
                this.aa1.b8.g$e(a, b, c, d);
            }
            if (d != null && this.yi.containsKey(d)) {
                let e = this.yi.tryGetValue(d, d);
                d = e.p1;
            }
            if (this.w6 != null && typeCast(ISortingAxis_$type, this.w6) !== null) {
                a = 4;
                b = 0;
                c = this.dn.count;
            }
            switch (a) {
                case 3:
                    if (this.aa5(b, c, d)) {
                        this.abg(b, c, d);
                        this.abe(true);
                    }
                    break;
                case 2:
                    if (this.aa5(b, this.dn.count - b, d)) {
                        this.abg(b, this.dn.count - b, d);
                        this.abe(true);
                    }
                    break;
                case 1:
                    if (this.aa5(b, this.dn.count - b, d)) {
                        let f = new Array(c);
                        for (let g = 0; g < c; g++) {
                            f[g] = 0;
                        }
                        this.indicatorColumn.s(b, f);
                        this.abg(b, this.dn.count - b, d);
                        this.abe(true);
                    }
                    break;
                case 0:
                    if (this.aa5(b, this.dn.count - b, d)) {
                        this.indicatorColumn.v(b, c);
                        this.abg(b, this.dn.count - b, d);
                        this.abe(true);
                    }
                    break;
                case 4:
                    if (this.aa5(b, this.dn.count - b, d)) {
                        this.indicatorColumn = new List$1(Number_$type, 2, this.dn.count);
                        let h = new Array(c);
                        for (let i = 0; i < c; i++) {
                            h[i] = 0;
                        }
                        this.indicatorColumn.s(0, h);
                        this.abg(b, this.dn.count - b, d);
                        this.abe(true);
                    }
                    break;
            }
        }
        get_aa2() {
            return 0;
        }
        get aa2() {
            return this.get_aa2();
        }
        get abr() {
            return this.c(FinancialIndicator.abh);
        }
        set abr(a) {
            this.h(FinancialIndicator.abh, a);
        }
        abb() {
            return -1;
        }
        get indicatorColumn() {
            return this._indicatorColumn;
        }
        set indicatorColumn(a) {
            this._indicatorColumn = a;
        }
        q9(a, b, c, d) {
            switch (b) {
                case "XAxis":
                    this.aa1.cg();
                    break;
                case "TrendLineType":
                    let e = EnumUtil.getEnumValue(TrendLineType_$type, d);
                    if (e != 0) {
                        this.aa1.b8 = CategoryTrendLineManagerFactory.a(this.aa1.b8, this.w6, this.sv, this, this.dr);
                    }
                    break;
            }
            super.q9(a, b, c, d);
            if (this.aa1.ca && this.aa1.b8.g$b(a, b, c, d)) {
                this.rr(false);
                let f = typeCast(FinancialIndicatorView.$, this.cu);
                if (f != null && f.ca) {
                    f.b8.g$b(a, b, c, d);
                }
                this.ql();
            }
            switch (b) {
                case "FastItemsSource":
                    if (this.dn != null) {
                        this.indicatorColumn = new List$1(Number_$type, 2, this.dn.count);
                        let g = new Array(this.dn.count);
                        for (let h = 0; h < this.dn.count; h++) {
                            g[h] = 0;
                        }
                        this.indicatorColumn.s(0, g);
                        this.abg(0, this.dn.count, null);
                        if (this.xp != null && !this.xp.c1()) {
                            this.xn.b0.e(this.id);
                            this.rr(this.gg && c != null);
                        }
                    }
                    break;
                case "TrendLineBrush":
                    this.rf(b);
                    break;
                case FinancialIndicator.$$p[0]:
                    this.o5(true, this.cv);
                    this.si();
                    this.rr(false);
                    this.ql();
                    break;
                case "OpenColumn":
                case "HighColumn":
                case "LowColumn":
                case "CloseColumn":
                case "VolumeColumn":
                    if (this.dn != null) {
                        if (this.indicatorColumn.count != this.dn.count) {
                            this.indicatorColumn = new List$1(Number_$type, 2, this.dn.count);
                            let i = new Array(this.dn.count);
                            for (let j = 0; j < this.dn.count; j++) {
                                i[j] = 0;
                            }
                            this.indicatorColumn.s(0, i);
                        }
                        if (this.aa5(0, this.dn.count - 1, b)) {
                            this.abf();
                        }
                    }
                    break;
                case "XAxis":
                    if (this.w6 != null && (typeCast(ISortingAxis_$type, this.w6) !== null || typeCast(ISortingAxis_$type, c) !== null)) {
                        this.abf();
                    }
                    break;
                case "YAxis":
                case FinancialIndicator.$$p[1]:
                    this.abf();
                    this.ql();
                    break;
                case "TrendLineType":
                    this.ql();
                    break;
            }
        }
        i5(a, b, c) {
            if (this.indicatorColumn == null) {
                return super.i5(a, b, c);
            }
            let d = this.getEffectiveViewport1(this.cv);
            let e = this.yx(this.cv.by, this.cv.bx, d);
            let f = new ScalerParams(0, this.cv.by, this.cv.bx, this.w6.ch, d);
            f.c = this.db.wk;
            return this.i7(this.indicatorColumn, a, this.w6, f, e, runOn(this, this.yw), b, c);
        }
        ka(a, b) {
            if (this.indicatorColumn == null) {
                return super.ka(a, b);
            }
            return this.kb(a, b, this.w6, runOn(this, this.yw), this.indicatorColumn);
        }
        j8(a, b) {
            if (this.indicatorColumn == null) {
                return super.j8(a, b);
            }
            return this.j9(a, b, this.w6, runOn(this, this.yw), this.indicatorColumn);
        }
        get_hd() {
            return true;
        }
        aa5(a, b, c) {
            if (c == null) {
                return true;
            }
            if (this.aa7(a, b).contains(c)) {
                return true;
            }
            return false;
        }
        abg(a, b, c) {
            this.aa4(a, b);
        }
        ay(a) {
            if (this.dn == null) {
                return null;
            }
            if (a != null && a == this.xp) {
                return this.aa0;
            }
            return null;
        }
        gd(a) {
            let b = this.dn != null ? this.dn.indexOf(a) : -1;
            let c = this.cv.by;
            c = c.copy();
            let d = this.cv.bx;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.wl(this.cv);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                if (this.w6 != null) {
                    let g = new ScalerParams(0, e, e, this.w6.ch, f);
                    let h = this.w6.el(b, g);
                    if (h < c.left + 0.1 * c.width) {
                        h = h + 0.4 * c.width;
                    }
                    if (h > c.right - 0.1 * c.width) {
                        h = h - 0.4 * c.width;
                    }
                    c.x = h - 0.5 * c.width;
                }
                if (this.xp != null && this.indicatorColumn != null && b < this.indicatorColumn.count) {
                    let i = new ScalerParams(0, e, e, this.xp.ch, f);
                    i.b = this.iy();
                    let j = this.xp.el(this.indicatorColumn._inner[b], i);
                    if (j < c.top + 0.1 * c.height) {
                        j = j + 0.4 * c.height;
                    }
                    if (j > c.bottom - 0.1 * c.height) {
                        j = j - 0.4 * c.height;
                    }
                    c.y = j - 0.5 * c.height;
                }
                this.c3.au(this.db, c, true);
            }
            return b >= 0;
        }
        he(a, b, c) {
            let d = super.he(a, b, c);
            if (this.indicatorColumn == null || this.indicatorColumn.count == 0) {
                d = false;
            }
            return d;
        }
        aac(a, b) {
            super.aac(a, b);
            let c = b.by;
            let d = b.bx;
            let e = this.getEffectiveViewport1(b);
            let f = this.w6;
            let g = this.xp;
            let h = new ScalerParams(0, c, d, f.ch, e);
            let i = new ScalerParams(0, c, d, g.ch, e);
            i.b = this.iy();
            let j = this.w6.ag();
            let k = j[0];
            let l = j[1];
            a.f.clear();
            a.n.clear();
            a.q.clear();
            let m = 0;
            let n = typeCast(ISortingAxis_$type, this.w6);
            if (n != null && n.i$b.count != this.dn.count) {
                return;
            }
            m = this.yx(c, d, e);
            let o = this.abb();
            if (o == -1) {
                o = this.trendLinePeriod;
            }
            let p = typeCast(FinancialIndicatorView.$, b);
            if (p.ca) {
                p.b8.prepareLineCore(a.q, this.trendLineType, this.indicatorColumn, o, (q) => this.w6.el(q, h), (q) => this.xp.el(q, i), ((() => {
                    let $ret = new TrendResolutionParams();
                    $ret.e = b.b0.b;
                    $ret.f = b.b0.c;
                    $ret.g = b.b0.d;
                    $ret.a = m;
                    $ret.d = this.id;
                    $ret.i = d;
                    $ret.j = c;
                    $ret.h = e;
                    $ret.b = l;
                    $ret.c = k;
                    return $ret;
                })()));
            }
            let q = this.w6.eo(2, h) - this.w6.eo(1, h);
            for (let r = b.b0.c; r <= b.b0.d; ++r) {
                let s;
                if (n == null) {
                    s = b.b0.getBucket(r);
                }
                else {
                    let t = n.i$b._inner[r];
                    let u = n.i$d(t);
                    let v = this.indicatorColumn._inner[r];
                    let w = v;
                    let x = u;
                    while (r < b.b0.d) {
                        t = n.i$b._inner[r + 1];
                        x = n.i$d(t);
                        if (x - u > q) {
                            break;
                        }
                        r++;
                        let y = this.indicatorColumn._inner[r];
                        v = Math.min(v, y);
                        w = Math.max(w, y);
                    }
                    let z = NaN;
                    if (!isNaN_(u)) {
                        z = this.w6.el(u, h);
                    }
                    s = [z, v, w];
                }
                if (!isNaN_(s[0])) {
                    if (this.w6 != null && typeCast(ISortingAxis_$type, this.w6) !== null) {
                        s[0] = s[0] + m;
                    }
                    else {
                        s[0] = f.el(s[0], h) + m;
                    }
                    s[1] = g.el(s[1], i);
                    if (b.b0.b > 1 || n != null) {
                        s[2] = g.el(s[2], i);
                    }
                    else {
                        s[2] = s[1];
                    }
                    a.f.add(s);
                }
            }
            return;
        }
        o5(a, b) {
            super.o5(a, b);
            let c = b;
            c.cb(a);
            if (c.ca) {
                c.b8.g$d();
            }
        }
        xg() {
            switch (this.aa3) {
                case 1: return 1;
                case 2: return 1;
                case 0: return 12;
            }
            return 1;
        }
        aae(a, b) {
            super.aae(a, b);
            let c = typeCast(FinancialIndicatorView.$, b);
            let d = (e) => a.f._inner[e][0];
            let e = (f) => a.f._inner[f][1];
            if (c.ca) {
                c.b8.g$d();
                c.b8.g$g(a.q);
            }
            let f = b.bx;
            let g = this.getEffectiveViewport1(b);
            let h = 0;
            let i = this.u9;
            let j = this.aaw;
            if (b.b3(a)) {
                c.cb(false);
                if (a.f.count > 0) {
                    switch (this.aa3) {
                        case 0:
                            let k = CategorySeries.yn(a.f, a.f.count - 1, f, b.by, false);
                            c.cf(a.f.count, d, e, true, k);
                            break;
                        case 1:
                            if (this.xp != null) {
                                h = this.y1(b);
                            }
                            else {
                                h = 0.5 * (f.top + f.bottom);
                            }
                            let l = CategorySeries.yn(a.f, a.f.count - 1, f, b.by, false);
                            c.cd(a.f.count, d, e, true, h, l);
                            break;
                        case 2:
                            h = this.y1(b);
                            c.ce(a.f.count, d, e, true, h);
                            break;
                        default: throw new NotImplementedException(0);
                    }
                }
                b.b5(a);
            }
            let m = a.f;
            let n = this.dn.count;
            this.xf.a2(this, this.ye(), runOn(this, this.wy), this.y3(b), this.y5(b));
            let o = false;
            let p = this.xf.b;
            if (p != null) {
                o = true;
            }
            this.xf.ak = i;
            this.xf.ag = i;
            if (o) {
                let q = new ScalerParams(0, b.by, b.bx, this.w6.ch, g);
                this.xf.f = false;
                this.aab(m, -1, n, this.w6, q, b.q, -1);
            }
            this.xf.ad(c.cx, true, false, true, false);
            this.xf.ad(c.cz, true, false, true, false);
            this.xf.ad(c.cy, false, true, false, false);
            c.cy._opacity = 0.8 * this.xf.j * this.h9;
            this.xf.ad(c.cw, true, false, false, false);
            this.xf.ak = j;
            this.xf.ag = j;
            if (o) {
                let r = new ScalerParams(0, b.by, b.bx, this.w6.ch, g);
                this.xf.f = true;
                this.aab(m, -1, n, this.w6, r, b.q, -1);
            }
            this.xf.ad(c.ct, true, false, true, false);
            this.xf.ad(c.cv, true, false, true, false);
            this.xf.ad(c.cu, false, true, false, false);
            c.cu._opacity = 0.8 * this.xf.j * this.h9;
            this.xf.ad(c.cs, true, false, false, false);
            c.ch();
        }
        sh() {
            super.sh();
            if (this.index < 0) {
                return;
            }
            if (this.aa1.ca) {
                this.aa1.ci();
            }
        }
        abf() {
            if (this.aa1.ca) {
                this.aa1.b8.g$i();
            }
            this.aa4(0, this.indicatorColumn.count);
            if (this.xp != null && !this.xp.c1()) {
                this.rr(this.gg && this.d7);
            }
        }
        pz(a) {
            super.pz(a);
            this.bc.exportTrendlineData(this, a, this.aa1.b8.g$j);
        }
        be(a) {
            if (this.aa3 == 1 || this.aa3 == 2) {
                return 3;
            }
            else if (this.aa3 == 0) {
                return 2;
            }
            return a;
        }
    }
    FinancialIndicator.$t = /*@__PURE__*/ markType(FinancialIndicator, 'FinancialIndicator', FinancialSeries.$, [ITrendLineSeries_$type]);
    FinancialIndicator.abh = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, FinancialIndicator.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    FinancialIndicator.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, FinancialIndicator, 'raisePropertyChanged', ['DisplayType:aa3:abi', [IndicatorDisplayType_$type, /*@__PURE__*/ enumGetBox(IndicatorDisplayType_$type, 0)], 'IgnoreFirst:aa9:abj', [1, 0], 'TrendLineType::abp', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::abo', [1, 1.5], 'TrendLinePeriod::abn', [1, 7], 'TrendLineBrush::abk', [Brush.$, null], 'TrendLineZIndex:aba:abq', [1, 1001], 'TrendLineDashArray:abs:abl', [DoubleCollection.$], 'TrendLineDashCap:abt:abm', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return FinancialIndicator;
})();
/**
 * @hidden
 */
export let FinancialIndicatorBucketCalculator = /*@__PURE__*/ (() => {
    class FinancialIndicatorBucketCalculator extends FinancialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = a * this.b;
            let c = Math.min(b + this.b - 1, this.f.b6.indicatorColumn.count - 1);
            let d = NaN;
            let e = NaN;
            for (let f = b; f <= c; ++f) {
                let g = this.f.b6.indicatorColumn._inner[f];
                if (!isNaN_(d)) {
                    if (!isNaN_(g)) {
                        d = Math.min(d, g);
                        e = Math.max(e, g);
                    }
                }
                else {
                    d = g;
                    e = g;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [NaN, NaN, NaN];
        }
    }
    FinancialIndicatorBucketCalculator.$t = /*@__PURE__*/ markType(FinancialIndicatorBucketCalculator, 'FinancialIndicatorBucketCalculator', FinancialBucketCalculator.$);
    return FinancialIndicatorBucketCalculator;
})();
/**
 * @hidden
 */
export let FinancialIndicatorView = /*@__PURE__*/ (() => {
    class FinancialIndicatorView extends FinancialSeriesView {
        constructor(a) {
            super(a);
            this.b6 = null;
            this.b9 = null;
            this.cx = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.ct = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.cy = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.cu = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.cz = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.cv = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.cw = ((() => {
                let $ret = new Path();
                $ret.an = new GeometryGroup();
                return $ret;
            })());
            this.cs = ((() => {
                let $ret = new Path();
                $ret.an = new GeometryGroup();
                return $ret;
            })());
            this.b7 = null;
            this.cp = new Path();
            this.cr = new Path();
            this.cq = new Path();
            this.co = new Path();
            this.cl = new Path();
            this.cn = new Path();
            this.cm = new Path();
            this.ck = new Path();
            this.b6 = a;
            this.b9 = ((() => {
                let $ret = new Pool$1(LineGeometry.$);
                $ret.create = runOn(this, this.cj);
                $ret.destroy = runOn(this, this.cc);
                return $ret;
            })());
        }
        b1() {
            return new FinancialIndicatorBucketCalculator(this);
        }
        au() {
            super.au();
            if (!this.q) {
                this.b6.aaw = Defaults.ah;
                this.b6.aa3 = this.b6.aa2;
            }
        }
        cj() {
            return new LineGeometry();
        }
        cc(a) {
        }
        get b8() {
            if (this.b7 == null) {
                this.b7 = CategoryTrendLineManagerFactory.a(this.b7, this.e.a0(), this.e.sv, this.e, this.e.dr);
            }
            return this.b7;
        }
        set b8(a) {
            this.b7 = a;
        }
        get ca() {
            return this.b7 != null;
        }
        cb(a) {
            Extensions.e(this.cx.an);
            Extensions.e(this.cy.an);
            Extensions.e(this.cz.an);
            Extensions.e(this.ct.an);
            Extensions.e(this.cu.an);
            Extensions.e(this.cv.an);
            Extensions.d(this.cw.an);
            Extensions.d(this.cs.an);
            if (a) {
                this.b9.count = 0;
            }
            this.as();
        }
        ch() {
        }
        cf(a, b, c, d, e) {
            IndicatorRenderer.g(a, b, c, d, this.by, this.bx, this.cx, this.ct, this.b0.b, this.e.id, e);
            this.as();
        }
        cd(a, b, c, d, e, f) {
            IndicatorRenderer.e(a, b, c, d, this.by, this.bx, this.cx, this.cy, this.ct, this.cu, e, this.b0.b, this.e.id, f);
            this.as();
        }
        ce(a, b, c, d, e) {
            IndicatorRenderer.f(a, b, c, d, this.bx, e, this.b9, this.cw, this.cs);
            this.as();
        }
        ci() {
            this.b6.abr = null;
            if (this.b6.trendLineBrush != null) {
                this.b6.abr = this.b6.trendLineBrush;
            }
            else {
                this.b6.abr = this.b6.u9;
            }
        }
        be() {
            super.be();
            let a = this.br();
            this.cp.an = this.cx.an;
            this.cr.an = this.cz.an;
            this.cq.an = this.cy.an;
            this.co.an = this.cw.an;
            this.cl.an = this.ct.an;
            this.cn.an = this.cv.an;
            this.cm.an = this.cu.an;
            this.ck.an = this.cs.an;
            this.cp._stroke = a;
            this.cr._stroke = a;
            this.cp.ad = this.e.ie + 3;
            this.cr.ad = this.e.ie + 3;
            this.cq._fill = a;
            this.cq._opacity = 1;
            this.co._stroke = a;
            this.co.ad = this.e.ie + 3;
            this.cl._stroke = a;
            this.cn._stroke = a;
            this.cl.ad = this.e.ie + 3;
            this.cn.ad = this.e.ie + 3;
            this.cm._fill = a;
            this.cm._opacity = 1;
            this.ck._stroke = a;
            this.ck.ad = this.e.ie + 3;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                if (b) {
                    if (this.b6.aa3 == 2) {
                        a.t(this.co);
                        a.t(this.ck);
                    }
                    else {
                        a.t(this.cq);
                        a.t(this.cp);
                        a.t(this.cr);
                        a.t(this.cm);
                        a.t(this.cl);
                        a.t(this.cn);
                    }
                }
                else {
                    if (this.b6.aa3 == 2) {
                        a.t(this.cw);
                        a.t(this.cs);
                    }
                    else {
                        a.t(this.cy);
                        a.t(this.cx);
                        a.t(this.cz);
                        a.t(this.cu);
                        a.t(this.ct);
                        a.t(this.cv);
                    }
                }
            }
        }
        a7(a, b) {
            if (a.d) {
                if (this.b6.trendLineType != 0 && !b) {
                    let c = this.b8.g$j;
                    c.ad = this.b6.trendLineThickness;
                    c._stroke = this.b6.abr;
                    c.aj = this.b6.abt;
                    c.ai = this.b6.abs;
                    a.v(c);
                }
            }
            super.a7(a, b);
        }
        an(a) {
            super.an(a);
            this.e.bc.exportPathData(a, this.cw, "positiveColumnsShape", ["Positive", "Main"]);
            this.e.bc.exportPathData(a, this.cs, "negativeColumnsShape", ["Negative"]);
            this.e.bc.exportPathData(a, this.cx, "positive0", ["Positive", "Main"]);
            this.e.bc.exportPathData(a, this.cz, "positive1", ["Positive"]);
            this.e.bc.exportPathData(a, this.cy, "positive01", ["PositiveFill"]);
            this.e.bc.exportPathData(a, this.ct, "negative0", ["Negative", "Main"]);
            this.e.bc.exportPathData(a, this.cv, "negative1", ["Negative"]);
            this.e.bc.exportPathData(a, this.cu, "negative01", ["NegativeFill"]);
        }
        cg() {
            if (this.ca) {
                this.b7 = CategoryTrendLineManagerFactory.a(this.b7, this.e.a0(), this.e.sv, this.e, this.e.dr);
            }
        }
    }
    FinancialIndicatorView.$t = /*@__PURE__*/ markType(FinancialIndicatorView, 'FinancialIndicatorView', FinancialSeriesView.$);
    return FinancialIndicatorView;
})();
