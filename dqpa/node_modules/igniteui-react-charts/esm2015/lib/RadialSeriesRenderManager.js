/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesRenderManager } from "./SeriesRenderManager";
import { AssigningRadialMarkerStyleEventArgs } from "./AssigningRadialMarkerStyleEventArgs";
import { AssigningRadialStyleEventArgs } from "./AssigningRadialStyleEventArgs";
import { markType } from "igniteui-react-core";
import { intDivide } from "igniteui-react-core";
/**
 * @hidden
 */
export let RadialSeriesRenderManager = /*@__PURE__*/ (() => {
    class RadialSeriesRenderManager extends SeriesRenderManager {
        constructor() {
            super(...arguments);
            this.az = 0;
            this.a0 = 0;
            this.ax = null;
            this.ay = null;
        }
        c() {
            this.ax = new AssigningRadialMarkerStyleEventArgs();
            return this.ax;
        }
        a() {
            this.ay = new AssigningRadialStyleEventArgs();
            return this.ay;
        }
        a1(a, b, c, d, e) {
            this.az = d;
            this.a0 = e;
            this.w(a, b, c);
        }
        a2(a, b, c, d, e) {
            this.az = d;
            this.a0 = e;
            this.x(a, b, c);
        }
        aw(a, b) {
            let c = this.az;
            let d = Math.min(b * c, a - 1);
            let e = Math.min(d + c - 1, a - 1);
            let f = this.a0;
            if (((d + this.a0) * c) > a - 1) {
                d = intDivide((((d + this.a0) * c) - a), c);
                e = Math.min(d + c - 1, a - 1);
                f = 0;
            }
            let g = new Array(2);
            g[0] = Math.min(d + f * c, a - 1);
            g[1] = Math.min(e + f * c, a - 1);
            return g;
        }
        a3(a, b, c, d, e, f, g, h, i) {
            if (d == -1) {
                {
                    a.e = false;
                    a.z = 0;
                    a.y = e - 1;
                }
            }
            else {
                {
                    if (i) {
                        a.z = d;
                        a.y = d;
                    }
                    else {
                        let j = this.aw(e, d);
                        a.e = false;
                        a.z = j[0];
                        a.y = j[1];
                    }
                }
            }
        }
    }
    RadialSeriesRenderManager.$t = /*@__PURE__*/ markType(RadialSeriesRenderManager, 'RadialSeriesRenderManager', SeriesRenderManager.$);
    return RadialSeriesRenderManager;
})();
