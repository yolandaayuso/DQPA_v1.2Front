/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategoryTrendLineManagerBase } from "./CategoryTrendLineManagerBase";
import { Point_$type, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { TrendFitCalculator } from "./TrendFitCalculator";
import { TrendAverageCalculator } from "./TrendAverageCalculator";
/**
 * @hidden
 */
export let SortingTrendLineManager = /*@__PURE__*/ (() => {
    class SortingTrendLineManager extends CategoryTrendLineManagerBase {
        get_g$a() {
            return 1;
        }
        constructor(a, b) {
            super();
            this.h = null;
            this.i = null;
            this.h = a;
            this.i = b;
        }
        prepareLineCore(a, b, c, d, e, f, g) {
            let h = g.c;
            let i = g.b;
            let j = new List$1(Point_$type, 0);
            if (b == 0) {
                this.a = null;
                this.d.clear();
                return;
            }
            if (this.c(b)) {
                this.d.clear();
                this.a = TrendFitCalculator.a(j, b, g, this.a, c.count, (k) => {
                    let l = this.h(k);
                    l = (l - h) / (i - h);
                    return l;
                }, (k) => c.item(k), (k) => {
                    let l = (k * (i - h)) + h;
                    return e(l);
                }, f, 0, 1);
            }
            if (this.b(b)) {
                this.a = null;
                TrendAverageCalculator.b(b, this.d, c, d);
                for (let k = g.f; k <= g.g; k += 1) {
                    let l = k * g.e;
                    let m = this.h(l);
                    if (l >= 0 && l < this.d.count) {
                        let n = e(m);
                        let o = f(this.d._inner[l]);
                        j.add({ $type: Point_$type, x: n + g.a, y: o });
                    }
                }
            }
            this.e(j, g, a);
        }
    }
    SortingTrendLineManager.$t = /*@__PURE__*/ markType(SortingTrendLineManager, 'SortingTrendLineManager', CategoryTrendLineManagerBase.$);
    return SortingTrendLineManager;
})();
