/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, INotifyPropertyChanged_$type, BaseError, PropertyChangedEventArgs, runOn, delegateCombine, delegateRemove, Delegate_$type, fromEnum, String_$type, EnumUtil, enumGetBox, typeCast, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { IDataLegendTarget_$type } from "igniteui-react-core";
import { IToolbarTarget_$type } from "igniteui-react-core";
import { IDomainChartLike_$type } from "./IDomainChartLike";
import { ArrayExtension } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesType_$type } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { Color } from "igniteui-react-core";
import { ColorUtil } from "igniteui-react-core";
import { IDomainChartToolbarProvider_$type } from "./IDomainChartToolbarProvider";
import { DVContainer } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { SeriesSelectionMode_$type } from "./SeriesSelectionMode";
import { SeriesSelectionBehavior_$type } from "./SeriesSelectionBehavior";
import { ChartSelectedItemCollection } from "./ChartSelectedItemCollection";
import { SortGroupParser } from "igniteui-react-core";
import { FilterExpressionParsingHelper } from "igniteui-react-core";
import { FilterStringErrorsParsingEventArgs } from "./FilterStringErrorsParsingEventArgs";
import { SummaryParser } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { SeriesHighlightedValuesDisplayMode_$type } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { MarkerAutomaticBehavior_$type } from "./MarkerAutomaticBehavior";
import { TrendLineType_$type } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode_$type } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode_$type } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode_$type } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode_$type } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior_$type } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode_$type } from "./LegendHighlightingMode";
import { LegendItemBadgeMode_$type } from "igniteui-react-core";
import { ToolTipType_$type } from "./ToolTipType";
import { CrosshairsDisplayMode_$type } from "./CrosshairsDisplayMode";
import { CalloutCollisionMode_$type } from "igniteui-react-core";
import { SeriesViewerScrollbarMode_$type } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition_$type } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition_$type } from "./SeriesViewerVerticalScrollbarPosition";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { CaptureImageSettings } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { DataSeries } from "igniteui-react-core";
import { ICommandStateChangedListener_$type } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { DataSeriesAdapter } from "igniteui-react-core";
import { ChartSortDescription } from "./ChartSortDescription";
import { ChartSummaryDescription } from "./ChartSummaryDescription";
import { Random } from "igniteui-react-core";
import { ValueLayerValueMode_$type } from "./ValueLayerValueMode";
import { ObservableColorCollection } from "igniteui-react-core";
import { BrushCollectionUtil } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { DomainChartPlotAreaPointerEventArgs } from "./DomainChartPlotAreaPointerEventArgs";
import { BrushUtil } from "igniteui-react-core";
import { IUnknownValuePlotting_$type } from "igniteui-react-core";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { isNaN_ } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringEmpty, stringStartsWith } from "igniteui-react-core";
/**
 * @hidden
 */
export let DomainChart = /*@__PURE__*/ (() => {
    class DomainChart extends Base {
        provideContainer(a) {
            if (a == null) {
                this.vk((b) => {
                    b.destroy();
                    b.provideContainer(null);
                });
                return;
            }
            let b = this.lt;
            this.lt = a;
            if (this.fg != null && this.lt != null && b == null) {
                this.lt.setTimeout(this.fg, 0);
                this.fg = null;
            }
            let c = ((() => {
                let $ret = new XamDataChart();
                $ret.e8 = true;
                return $ret;
            })());
            c.ja = this;
            c.c9.b4(a);
            this.dataChart = c;
            this.u4();
        }
        destroy() {
            this.f2 = true;
            this.provideContainer(null);
        }
        u4() {
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.c9.j.e();
            this.z = a.a;
            this.ad = a.f;
            this.ab = a.b;
            this.ac = a.c;
            this.af = a.g;
            this.jl = Defaults.j;
            this.u5();
        }
        u5() {
        }
        u1(a) {
            if (a == null) {
                return;
            }
            a.ig = this.kf;
            a.id = this.kd;
            a.ie = this.ke;
            a.ic = this.kc;
            a.vq = this.yz;
            a.h9 = this.j8;
            a.ib = this.ka;
            a.ia = this.j9;
            a.h8 = this.j7;
            a.vp = this.yy;
            if (!isNaN_(this.j0)) {
                a.h3 = this.j0;
            }
        }
        uy() {
        }
        u7(a, b) {
            a.kd = this.lj;
            a.dd = this.es;
        }
        vx(a, b, c) {
            switch (a) {
                case "TitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.ig = this.kf;
                    }
                    break;
                case "TitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.id = this.kd;
                    }
                    break;
                case "PixelScalingRatio":
                    if (this.dataChart != null) {
                        this.vk((d) => d.h3 = this.j0);
                    }
                    break;
                case "TitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.ie = this.ke;
                    }
                    break;
                case "TitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.ic = this.kc;
                    }
                    break;
                case "TitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.vq = this.yz;
                    }
                    break;
                case "SubtitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h9 = this.j8;
                    }
                    break;
                case "SubtitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.ib = this.ka;
                    }
                    break;
                case "SubtitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.ia = this.j9;
                    }
                    break;
                case "SubtitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h8 = this.j7;
                    }
                    break;
                case "SubtitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.vp = this.yy;
                    }
                    break;
                case "LeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h2 = this.jx;
                    }
                    break;
                case "TopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.ih = this.kg;
                    }
                    break;
                case "RightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h7 = this.j6;
                    }
                    break;
                case "BottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.hp = this.jj;
                    }
                    break;
                case "TransitionDuration":
                    this.uu((d) => d.kd = this.lj);
                    break;
                case "TransitionEasingFunction":
                    this.uu((d) => d.dd = this.es);
                    break;
            }
        }
        get tooltipTemplate() {
            return ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, 0);
        }
        set tooltipTemplate(a) {
            this.tooltipTemplates = a == null ? null : new List$1(Base.$, 1, [a]);
        }
        get tooltipTemplates() {
            return this.hr;
        }
        set tooltipTemplates(a) {
            let b = this.tooltipTemplates;
            if (a != b) {
                this.hr = a;
                this.vu("TooltipTemplates", b, this.tooltipTemplates);
            }
        }
        get j0() {
            return this.io;
        }
        set j0(a) {
            let b = this.io;
            if (a != b) {
                this.io = a;
                this.vu("PixelScalingRatio", b, this.j0);
            }
        }
        get toolTip() {
            return this.lp;
        }
        set toolTip(a) {
            let b = this.toolTip;
            if (b != a) {
                this.lp = a;
                this.vu("ToolTip", b, this.toolTip);
            }
        }
        get kd() {
            return this.i1;
        }
        set kd(a) {
            let b = this.kd;
            if (a != b) {
                this.i1 = a;
                this.vu("TitleLeftMargin", b, this.kd);
            }
        }
        get ke() {
            return this.i2;
        }
        set ke(a) {
            let b = this.ke;
            if (a != b) {
                this.i2 = a;
                this.vu("TitleRightMargin", b, this.ke);
            }
        }
        get kf() {
            return this.i3;
        }
        set kf(a) {
            let b = this.kf;
            if (a != b) {
                this.i3 = a;
                this.vu("TitleTopMargin", b, this.kf);
            }
        }
        get kc() {
            return this.i0;
        }
        set kc(a) {
            let b = this.kc;
            if (a != b) {
                this.i0 = a;
                this.vu("TitleBottomMargin", b, this.kc);
            }
        }
        get j8() {
            return this.iw;
        }
        set j8(a) {
            let b = this.j8;
            if (a != b) {
                this.iw = a;
                this.vu("SubtitleLeftMargin", b, this.j8);
            }
        }
        get ka() {
            return this.iy;
        }
        set ka(a) {
            let b = this.ka;
            if (a != b) {
                this.iy = a;
                this.vu("SubtitleTopMargin", b, this.ka);
            }
        }
        get j9() {
            return this.ix;
        }
        set j9(a) {
            let b = this.j9;
            if (a != b) {
                this.ix = a;
                this.vu("SubtitleRightMargin", b, this.j9);
            }
        }
        get j7() {
            return this.iv;
        }
        set j7(a) {
            let b = this.j7;
            if (a != b) {
                this.iv = a;
                this.vu("SubtitleBottomMargin", b, this.j7);
            }
        }
        get yy() {
            return this.xx;
        }
        set yy(a) {
            let b = this.yy;
            if (a != b) {
                this.xx = a;
                this.vu("SubtitleTextColor", b, this.yy);
            }
        }
        get yz() {
            return this.xy;
        }
        set yz(a) {
            let b = this.yz;
            if (a != b) {
                this.xy = a;
                this.vu("TitleTextColor", b, this.yz);
            }
        }
        get_jx() {
            return this.ik;
        }
        set_jx(a) {
            let b = this.jx;
            if (a != b) {
                this.ik = a;
                this.vu("LeftMargin", b, this.jx);
            }
        }
        get jx() {
            return this.get_jx();
        }
        set jx(a) {
            this.set_jx(a);
        }
        get kg() {
            return this.i4;
        }
        set kg(a) {
            let b = this.kg;
            if (a != b) {
                this.i4 = a;
                this.vu("TopMargin", b, this.kg);
            }
        }
        get j6() {
            return this.iu;
        }
        set j6(a) {
            let b = this.j6;
            if (a != b) {
                this.iu = a;
                this.vu("RightMargin", b, this.j6);
            }
        }
        get jj() {
            return this.h5;
        }
        set jj(a) {
            let b = this.jj;
            if (a != b) {
                this.h5 = a;
                this.vu("BottomMargin", b, this.jj);
            }
        }
        get lj() {
            return this.k7;
        }
        set lj(a) {
            let b = this.lj;
            if (a != b) {
                this.k7 = a;
                this.vu("TransitionDuration", b, this.lj);
            }
        }
        get es() {
            return this.er;
        }
        set es(a) {
            let b = this.es;
            if (a != b) {
                this.er = a;
                this.vu("TransitionEasingFunction", b, this.es);
            }
        }
        get lg() {
            return this.k3;
        }
        set lg(a) {
            let b = this.lg;
            if (a != b) {
                this.k3 = a;
                this.vu("HighlightingTransitionDuration", b, this.lg);
            }
        }
        get li() {
            return this.k5;
        }
        set li(a) {
            let b = this.li;
            if (a != b) {
                this.k5 = a;
                this.vu("SelectionTransitionDuration", b, this.li);
            }
        }
        get lf() {
            return this.k2;
        }
        set lf(a) {
            let b = this.lf;
            if (a != b) {
                this.k2 = a;
                this.vu("FocusTransitionDuration", b, this.lf);
            }
        }
        u2(a) {
            if (this.dataChart == null) {
                return;
            }
            a.ma = this.s6;
            a.ly = this.sv;
        }
        u8(a, b) {
            this.u9(a, b);
        }
        uz() {
        }
        u9(a, b) {
            if (a == null) {
                return;
            }
            if (this.d9 == 3) {
                return;
            }
            let toolTipTemplate_ = ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, b);
            if (toolTipTemplate_ == null) {
                a.gp = true;
            }
            else {
                let series_ = a;
                a.gp = false;
                series_.externalObject.tooltipTemplate = toolTipTemplate_;
            }
        }
        wy(a, b, c) {
        }
        lv(a) {
            return a;
            return null;
        }
        kv(a) {
            return null;
        }
        vy(a, b, c) {
            switch (a) {
                case "SubtitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.ly = this.sv;
                    }
                    break;
                case "TitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.ma = this.s6;
                    }
                    break;
                case "TooltipTemplate":
                    if (this.hc) {
                        return;
                    }
                    this.hc = true;
                    this.tooltipTemplate = this.lv(this.tooltipTemplate);
                    this.hc = false;
                    if (this.dataChart != null) {
                        this.dataChart.jc = this.tooltipTemplate;
                    }
                    this.toolTip = this.tooltipTemplate;
                    break;
                case "ToolTip":
                    this.uv((d, e) => this.u9(d, e));
                    break;
                case "TooltipTemplates":
                    if (this.tooltipTemplates == null) {
                        break;
                    }
                    this.hc = true;
                    this.uv((d, e) => {
                        let f = this.lv(ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, e));
                        let series_ = d;
                        let templ_ = f;
                        series_.externalObject.tooltipTemplate = templ_;
                    });
                    this.hc = false;
                    break;
            }
        }
        get cl() {
            return this.ck;
        }
        set cl(a) {
            let b = this.cl;
            if (a != b) {
                this.ck = a;
                this.vu("Widget", b, this.cl);
            }
        }
        get sv() {
            return this.mq;
        }
        set sv(a) {
            let b = this.sv;
            if (a != b) {
                this.mq = a;
                this.vu("SubtitleTextStyle", b, this.sv);
            }
        }
        get s6() {
            return this.ms;
        }
        set s6(a) {
            let b = this.s6;
            if (a != b) {
                this.ms = a;
                this.vu("TitleTextStyle", b, this.s6);
            }
        }
        get dataChart() {
            return this.ee;
        }
        set dataChart(a) {
            let b = this.dataChart;
            if (b != a) {
                this.ee = a;
                this.vu("DataChart", b, this.dataChart);
            }
        }
        get currentDataAdapter() {
            return this.bf;
        }
        sendCommandCompleted(a) {
            if (this.commandCompleted != null) {
                this.commandCompleted(a);
            }
        }
        captureTargetImageToClipboard(a) {
            if (this.fz) {
                return;
            }
            this.fz = true;
            this.fh = a;
            let b = new CaptureImageSettings();
            b.b = true;
            b.a = 0;
            let c = this.dataChart;
            c.imageCaptured = delegateCombine(c.imageCaptured, runOn(this, this.vr));
            this.dataChart.nb(b);
            this.dataChart.al.q();
        }
        vr(a, b) {
            this.fz = false;
            let c = this.dataChart;
            c.imageCaptured = delegateRemove(c.imageCaptured, runOn(this, this.vr));
            if (this.fh != null) {
                this.fh(this, b);
                this.fh = null;
            }
        }
        get isDetached() {
            return this.f3 || this.f2;
        }
        onDetachedFromUI() {
            this.f3 = true;
            this.vk((a) => a.onDetachedFromUI());
        }
        onAttachedToUI() {
            this.f3 = false;
            this.vk((a) => a.onAttachedToUI());
        }
        constructor() {
            super();
            this.lt = null;
            this.lq = null;
            this.hr = null;
            this.io = NaN;
            this.lp = null;
            this.i1 = 0;
            this.i2 = 0;
            this.i3 = 0;
            this.i0 = 0;
            this.iw = 0;
            this.iy = 0;
            this.ix = 0;
            this.iv = 0;
            this.xx = null;
            this.xy = null;
            this.ik = NaN;
            this.i4 = NaN;
            this.iu = NaN;
            this.h5 = NaN;
            this.k7 = 0;
            this.er = null;
            this.k3 = 300;
            this.k5 = 300;
            this.k2 = 300;
            this.ku = null;
            this.hc = false;
            this.ck = null;
            this.mq = null;
            this.ms = null;
            this.ee = null;
            this.fz = false;
            this.fh = null;
            this.f3 = false;
            this.f2 = false;
            this.hv = null;
            this.propertyChanged = null;
            this.k6 = 0;
            this.g5 = false;
            this.g4 = false;
            this.hn = new Dictionary$2(String_$type, DataSeries.$, 0);
            this.cd = null;
            this.hj = false;
            this.hq = null;
            this.ch = null;
            this.f5 = false;
            this.ci = null;
            this._commandCompleted = null;
            this._invalidateActions = null;
            this.eq = null;
            this.ho = new List$1(ICommandStateChangedListener_$type, 0);
            this.by = 0;
            this.ia = NaN;
            this.ib = NaN;
            this.h8 = DeviceUtils.g(10);
            this.h9 = DeviceUtils.g(10);
            this.bu = 0;
            this.bw = 0;
            this.fv = true;
            this.e = null;
            this.b = null;
            this.d = null;
            this.a = null;
            this.bc = 0;
            this.kz = -1;
            this.k0 = -1;
            this.bs = 0;
            this.mg = stringEmpty();
            this.fw = true;
            this.mh = null;
            this.f = null;
            this.zg = new Thickness(0, DeviceUtils.g(5));
            this.fx = true;
            this.mi = "N/A";
            this.fy = false;
            this.zh = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(2), DeviceUtils.g(0));
            this.xq = null;
            this.e3 = null;
            this.ma = null;
            this.c = null;
            this.l9 = stringEmpty();
            this.bi = 0;
            this.bk = 0;
            this.mb = null;
            this.xi = null;
            this.za = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.y9 = new Thickness(0, DeviceUtils.g(5));
            this.fu = true;
            this.ev = null;
            this.xh = null;
            this.y8 = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.y7 = new Thickness(0, DeviceUtils.g(5));
            this.ft = false;
            this.eu = null;
            this.xl = null;
            this.ey = null;
            this.bo = 0;
            this.md = null;
            this.zd = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.zc = new Thickness(0, DeviceUtils.g(5));
            this.xn = null;
            this.e0 = null;
            this.mc = null;
            this.xk = null;
            this.ex = null;
            this.me = null;
            this.xm = null;
            this.ez = null;
            this.y6 = new Thickness(0, DeviceUtils.g(0));
            this.cq = 0;
            this.bq = 0;
            this.mf = null;
            this.xp = null;
            this.zf = new Thickness(0, DeviceUtils.g(0));
            this.e2 = null;
            this.ze = new Thickness(0, DeviceUtils.g(0));
            this.xo = null;
            this.e1 = null;
            this.bm = 0;
            this.xj = null;
            this.zb = new Thickness(1, DeviceUtils.g(8), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.ew = null;
            this.seriesAdded = null;
            this.seriesRemoved = null;
            this.seriesPointerEnter = null;
            this.seriesPointerLeave = null;
            this.seriesPointerMove = null;
            this.seriesPointerDown = null;
            this.seriesPointerUp = null;
            this.seriesClick = null;
            this.plotAreaPointerEnter = null;
            this.plotAreaPointerLeave = null;
            this.plotAreaPointerMove = null;
            this.plotAreaPointerDown = null;
            this.plotAreaPointerUp = null;
            this.calloutStyleUpdating = null;
            this.calloutRenderStyleUpdating = null;
            this.selectedSeriesItemsChanged = null;
            this.focusedSeriesItemsChanged = null;
            this.hu = null;
            this.fg = null;
            this.fk = false;
            this.hm = new Dictionary$2(String_$type, Base.$, 0);
            this.hp = new List$1(String_$type, 0);
            this.ax = null;
            this.at = null;
            this.as = null;
            this.eg = null;
            this.eh = null;
            this.a5 = null;
            this.eo = null;
            this.ep = null;
            this.aw = null;
            this.av = null;
            this.au = null;
            this.ej = null;
            this.ei = null;
            this.a4 = null;
            this.dv = 0;
            this.du = 0;
            this.xw = null;
            this.xt = null;
            this.ds = 0;
            this.an = new ChartSelectedItemCollection();
            this.am = new ChartSelectedItemCollection();
            this.mn = null;
            this.mj = null;
            this.ml = null;
            this.mk = null;
            this.mm = null;
            this.filterStringErrorsParsing = null;
            this.mo = null;
            this.lo = null;
            this.lm = null;
            this.ln = null;
            this.ll = null;
            this.h = null;
            this.g = null;
            this.r = null;
            this.u = null;
            this.p = null;
            this.q = null;
            this.cf = null;
            this.f4 = true;
            this.f7 = true;
            this.ga = false;
            this.gc = false;
            this.df = 1;
            this.f6 = false;
            this.zu = 0;
            this.zv = 0;
            this.y3 = new Rect(0, 0, 0, 1, 1);
            this.mr = null;
            this.mp = null;
            this.w2 = 1;
            this.w1 = 1;
            this.eb = 0;
            this.it = NaN;
            this.iz = NaN;
            this.dl = 0;
            this.cy = 0;
            this.cw = 0;
            this.il = NaN;
            this.im = NaN;
            this.c4 = null;
            this.cu = 4;
            this.s = null;
            this.t = null;
            this.k4 = 400;
            this.h4 = NaN;
            this.fj = false;
            this.v = null;
            this.ea = 0;
            this.i5 = DeviceUtils.g(1.5);
            this.fi = true;
            this.iq = NaN;
            this.is = NaN;
            this.ir = NaN;
            this.ip = NaN;
            this.a8 = 0;
            this.dn = 0;
            this.dq = 0;
            this.dj = 0;
            this.dh = 0;
            this.cm = 0;
            this.cr = 0;
            this.co = 0;
            this.k8 = 7;
            this.d8 = 4;
            this.bb = 0;
            this.fs = false;
            this.xg = null;
            this.h7 = NaN;
            this.xf = null;
            this.fr = true;
            this.xb = null;
            this.xd = null;
            this.xc = null;
            this.xe = null;
            this.kx = -1;
            this.ky = -1;
            this.f9 = false;
            this.gb = true;
            this.f0 = false;
            this.xr = null;
            this.xs = null;
            this.k1 = -1;
            this.fl = false;
            this.fq = false;
            this.fm = false;
            this.gd = true;
            this.ag = 0;
            this.fo = false;
            this.fp = false;
            this.fn = false;
            this.h6 = NaN;
            this.w5 = null;
            this.w9 = null;
            this.xa = null;
            this.w8 = null;
            this.w6 = null;
            this.w7 = null;
            this.kw = -1;
            this.hz = null;
            this.ai = null;
            this.l7 = null;
            this.l8 = null;
            this.l6 = "CalloutLabel";
            this.l5 = "CalloutContent";
            this.et = null;
            this.ed = null;
            this.w = null;
            this.i6 = NaN;
            this.f8 = false;
            this.d0 = 0;
            this.d1 = 0;
            this.dy = 0;
            this.d6 = 0;
            this.xu = null;
            this.xv = null;
            this.ih = NaN;
            this.ig = NaN;
            this.ic = NaN;
            this.id = NaN;
            this.ie = NaN;
            this.ij = NaN;
            this.ii = NaN;
            this.f1 = true;
            this.xz = null;
            this.x0 = null;
            this.ja = NaN;
            this.i9 = NaN;
            this.i7 = NaN;
            this.jd = NaN;
            this.i8 = NaN;
            this.jc = NaN;
            this.jb = NaN;
            this.ge = true;
            this.jf = NaN;
            this.je = NaN;
            this.jh = NaN;
            this.jg = NaN;
            this.hu = new List$1(Delegate_$type, 0);
            this.u3();
            this.ug();
        }
        u3() {
            this.bf = this.bh(true);
            let a = this.bf.dataSeries;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.vn));
            this.bg = this.bh(false);
            let b = this.bg.dataSeries;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.vq));
        }
        ww(a, b, c) {
            if (a) {
                b.e = c;
            }
            else {
                b.n(c);
            }
        }
        wv(a, b, c) {
            if (a) {
                b.syncTarget = c;
            }
            else {
                b.o(c);
            }
        }
        wx(a, b, c) {
            if (a) {
                b.e = c;
            }
            else {
                b.n(c);
            }
        }
        bh(a) {
            this.hv = new List$1(MarkerType_$type, 0);
            let b = new DataSeriesAdapter().e;
            if (a) {
                this.ax = new ChartSortDescriptionCollection();
                this.at = new ChartSortDescriptionCollection();
                this.as = new ChartSortDescriptionCollection();
                this.a5 = new ChartSummaryDescriptionCollection();
                this.eg = new FilterExpressionCollection();
                this.eh = new FilterExpressionCollection();
            }
            this.ww(a, this.a3, b.sortDescriptions);
            this.ww(a, this.ay, b.groupDescriptions);
            this.wv(a, this.ek, b.filterExpressions);
            this.wv(a, this.el, b.highlightFilterExpressions);
            this.wx(a, this.a7, b.summaryDescriptions);
            this.ww(a, this.az, b.postSortDescriptions);
            if (a) {
                this.eo = new SortGroupParser();
                this.ep = new SummaryParser();
                this.aw = ((() => {
                    let $ret = new ChartSortDescriptionCollection();
                    $ret.i = true;
                    return $ret;
                })());
                this.av = ((() => {
                    let $ret = new ChartSortDescriptionCollection();
                    $ret.i = true;
                    return $ret;
                })());
                this.au = ((() => {
                    let $ret = new ChartSortDescriptionCollection();
                    $ret.i = true;
                    return $ret;
                })());
                this.a4 = ((() => {
                    let $ret = new ChartSummaryDescriptionCollection();
                    $ret.i = true;
                    return $ret;
                })());
                this.ei = ((() => {
                    let $ret = new FilterExpressionCollection();
                    $ret.shouldDetachOnTargetChange = true;
                    return $ret;
                })());
                this.ej = ((() => {
                    let $ret = new FilterExpressionCollection();
                    $ret.shouldDetachOnTargetChange = true;
                    return $ret;
                })());
            }
            {
                if (this.ek.k.count == 0) {
                    this.wv(a, this.ei, b.filterExpressions);
                }
            }
            {
                if (this.el.k.count == 0) {
                    this.wv(a, this.ej, b.highlightFilterExpressions);
                }
            }
            {
                if (this.a3.j.count == 0) {
                    this.ww(a, this.aw, b.sortDescriptions);
                }
                if (this.az.j.count == 0) {
                    this.ww(a, this.av, b.postSortDescriptions);
                }
            }
            {
                if (this.ay.j.count == 0) {
                    this.ww(a, this.au, b.groupDescriptions);
                }
            }
            {
                if (this.a7.j.count == 0) {
                    this.wx(a, this.a4, b.summaryDescriptions);
                }
            }
            if (this.includedProperties != null) {
                b.includedProperties = this.includedProperties;
            }
            if (this.excludedProperties != null) {
                b.excludedProperties = this.excludedProperties;
            }
            b.supportedSeriesTypes = this.hx.toArray();
            b.rules.clear();
            for (let c of fromEnum(this.hw)) {
                b.rules.add(c);
            }
            let d = new List$1(String_$type, 0);
            for (let e of fromEnum(b.rules)) {
                d.add(getInstanceType(e).typeName);
            }
            return b;
        }
        g7(a) {
            return a != 24 && this.hx.contains(a);
        }
        notifyResized() {
            this.vk((a) => a.notifyContainerResized());
        }
        vi() {
            this.vk((a) => {
                for (let b = 0; b < a.series.count; b++) {
                    a.series._inner[b].qn();
                }
            });
        }
        un() {
            if (this.dataChart == null) {
                return;
            }
            if (this.g5) {
                this.uk();
            }
            this.dataChart.flush();
        }
        uw() {
            if (this.dataChart == null) {
                return;
            }
            this.dataChart.nx();
        }
        wb(a) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        up(a) {
            this.uq((b, c) => a(b));
        }
        uq(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                a(this.dataChart.series._inner[b], b);
            }
        }
        uu(a) {
            this.uv((b, c) => a(b));
        }
        uv(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!c.er) {
                    a(c, b);
                }
            }
        }
        us(a) {
            this.ut((b, c) => a(b));
        }
        ut(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (c.es) {
                    a(c, b);
                }
            }
        }
        wm() {
            this.up((a) => a.rv());
        }
        vk(a) {
            this.vl(a, true);
        }
        vl(a, b) {
            this.vm(a, b, null);
        }
        vm(a, b, c) {
            if (this.dataChart == null) {
                return;
            }
            a(this.dataChart);
        }
        g9(a) {
            if (!this.g7(a.suggestedSeries)) {
                return false;
            }
            let b = a.data;
            if (b == null) {
                return false;
            }
            return true;
        }
        gz() {
            if (this.dataChart == null) {
                return false;
            }
            return true;
        }
        qo(a) {
            let b = EnumUtil.getName(DataSeriesType_$type, a.suggestedSeries);
            let c = "series_" + (a.index + 1) + "_" + b;
            return c;
        }
        qp(a, b) {
            if (this.g2 && this.hi) {
                let c = "";
                let d = 5 + Math.round(DomainChart.l3.nextDouble() * 4);
                for (let e = 0; e < d; e++) {
                    c = c + "\u2588";
                }
                return c;
            }
            if (stringIsNullOrEmpty(a.title)) {
                let f = EnumUtil.getName(DataSeriesType_$type, b);
                return f + (this.dataChart.series.count + 1);
            }
            else {
                return a.title;
            }
        }
        qn() {
            return stringEmpty();
        }
        v0() {
            let a = this.v2(runOn(this, this.uk), this.g5);
            this.g5 = a.p1;
        }
        ue() {
            if (this.dataChart == null) {
                return;
            }
            this.g4 = false;
            let a = false;
            if (this.gv()) {
                a = true;
                this.ud();
            }
            if (a) {
                this.um();
                this.wz();
            }
        }
        wz() {
            this.hn.clear();
        }
        ud() {
            let a = 0;
            for (let b of fromEnum(this.bg.dataSeries)) {
                if (b.index == -1) {
                    b.index = a;
                }
                if (!stringIsNullOrEmpty(this.qo(b))) {
                    this.hn.item(this.qo(b), b);
                }
                a++;
            }
        }
        h1(a) {
            return a.data;
        }
        h2(a) {
            return a.highlightedData;
        }
        um() {
            if (this.g5) {
                let a = 0;
                for (let b of fromEnum(this.bf.dataSeries)) {
                    if (b.index == -1) {
                        b.index = a;
                    }
                    if (!stringIsNullOrEmpty(this.qo(b))) {
                        if (this.hn.containsKey(this.qo(b))) {
                            let c = this.hn.item(this.qo(b));
                            b.highlightedData = c.data;
                        }
                    }
                    a++;
                }
            }
            if (!this.g5 && this.dataChart != null) {
                for (let d = 0; d < this.dataChart.series.count; d++) {
                    let e = this.dataChart.series._inner[d];
                    if (this.hn.containsKey(e.name)) {
                        e.highlightedItemsSource = this.h1(this.hn.item(e.name));
                    }
                }
            }
        }
        gv() {
            if (this.actualHighlightedItemsSource == null) {
                return false;
            }
            if (this.bg.dataSeries.count != this.bf.dataSeries.count) {
                return false;
            }
            if (this.bg.dataSeries.count == 0) {
                return false;
            }
            for (let a = 0; a < this.bg.dataSeries.count; a++) {
                if (!(this.bg.dataSeries._inner[a].isMatch(this.bf.dataSeries._inner[a]))) {
                    let b = false;
                    for (let c = 0; c < this.bf.dataSeries.count; c++) {
                        if (c == a) {
                            continue;
                        }
                        if (this.bg.dataSeries._inner[a].isMatch(this.bf.dataSeries._inner[c])) {
                            b = true;
                            break;
                        }
                    }
                    if (!b) {
                        return false;
                    }
                }
            }
            return true;
        }
        wp() {
            if (this.dataChart == null) {
                return;
            }
            this.g5 = false;
            this.wr();
            if (this.actualItemsSource == null) {
                return;
            }
            let a = new List$1(MarkerType_$type, 0);
            for (let b of fromEnum(this.bf.dataSeries)) {
                a.add(this.c0(b.suggestedMarker));
            }
            this.hv = a;
            let c = 0;
            for (let d of fromEnum(this.bf.dataSeries)) {
                if (!this.g9(d)) {
                    continue;
                }
                if (d.index < 0) {
                    d.index = c;
                }
                this.wn(d);
                this.wo(d);
                c++;
            }
            this.w0();
            this.uq(runOn(this, this.u6));
        }
        de(seriesType_) {
            return (this.externalObject.createSeries(seriesType_).i);
        }
        c6() {
            return this.de(28);
        }
        c8() {
            return this.de(27);
        }
        da() {
            return this.de(29);
        }
        db() {
            return this.de(25);
        }
        c7() {
            return this.de(26);
        }
        c9() {
            return this.de(32);
        }
        dd() {
            return this.de(33);
        }
        get ce() {
            if (TypeRegistrar.isRegistered("AnnotationLayerProxy")) {
                return TypeRegistrar.create("AnnotationLayerProxy");
            }
            else {
                throw new BaseError(1, "annotation layer module is not loaded, but is required.");
            }
        }
        get gu() {
            return (TypeRegistrar.isRegistered("AnnotationLayerProxy"));
        }
        gx(a) {
            if (!this.gu) {
                return false;
            }
            return this.ce.matchesType(a);
        }
        w0() {
            let a = this.ht("", true);
            if (a != null) {
                for (let b = 0; b < a.count; b++) {
                    this.dataChart.series.add(a._inner[b]);
                }
            }
        }
        g0() {
            return this.crosshairsDisplayMode == 0 || this.crosshairsDisplayMode == 4 || this.crosshairsDisplayMode == 2;
        }
        g1() {
            return this.crosshairsDisplayMode == 0 || this.crosshairsDisplayMode == 4 || this.crosshairsDisplayMode == 3;
        }
        get_gy() {
            return this.autoCalloutsVisible;
        }
        get gy() {
            return this.get_gy();
        }
        ht(a, b) {
            if (!this.gu) {
                return null;
            }
            let c = new List$1(Series.$, 0);
            if (b) {
                let d = 1;
                if (this.fq) {
                    if (this.hz == null) {
                        if (this.l7 != null || this.l8 != null || this.l6 != null || this.l5 != null) {
                            for (let e of fromEnum(this.dataChart.series)) {
                                let f = this.c6();
                                this.ce.setTargetSeries(f, e);
                                this.ce.setCollisionChannel(f, "MainChartCollisionChannel");
                                this.wu(f, e, this.bf.dataSeries._inner[d - 1]);
                                f.name = a + getInstanceType(f).typeName + d.toString();
                                c.add(f);
                                d++;
                            }
                            ;
                        }
                    }
                    else {
                        let g = this.c6();
                        this.wu(g, null, this.bf.dataSeries._inner[d - 1]);
                        g.name = a + getInstanceType(g).typeName + d.toString();
                        if (this.fq && this.fl) {
                            this.ce.setCollisionChannel(g, "MainChartCollisionChannel");
                        }
                        c.add(g);
                    }
                }
                if (this.fl) {
                    let h = this.c6();
                    this.uf(h, this.hh);
                    h.name = a + getInstanceType(h).typeName + d.toString();
                    if (this.fq && this.fl) {
                        this.ce.setCollisionChannel(h, "MainChartCollisionChannel");
                    }
                    c.add(h);
                }
            }
            switch (this.bb) {
                case 0:
                case 4:
                case 3:
                case 2:
                    {
                        let i = this.c8();
                        this.ce.setCrosshairThickness(i, this.h7);
                        this.ce.setCrosshairUseInterpolation(i, !this.fs);
                        this.ce.setCrosshairHorizontalLineVisibility(i, this.g0() ? 0 : 1);
                        this.ce.setCrosshairHorizontalLineStroke(i, this.xf);
                        this.ce.setCrosshairVerticalLineVisibility(i, this.g1() ? 0 : 1);
                        this.ce.setCrosshairVerticalLineStroke(i, this.xg);
                        this.ce.setCrosshairOnAxesEnabled(i, this.fr);
                        this.ce.setCrosshairXAxisBackground(i, this.xb);
                        this.ce.setCrosshairXAxisForeground(i, this.xc);
                        this.ce.setCrosshairYAxisBackground(i, this.xd);
                        this.ce.setCrosshairYAxisForeground(i, this.xe);
                        this.ce.setCrosshairXAxisPrecision(i, this.kx);
                        this.ce.setCrosshairYAxisPrecision(i, this.ky);
                        c.add(i);
                        break;
                    }
                case 1:
                    {
                        break;
                    }
            }
            if (this.f0) {
                let j = this.da();
                this.ce.setFinalValueBackground(j, this.xr);
                this.ce.setFinalValueForeground(j, this.xs);
                this.ce.setFinalValuePrecision(j, this.k1);
                c.add(j);
            }
            if (b) {
                switch (this.d8) {
                    case 1:
                        {
                            let k = this.db();
                            c.add(k);
                            break;
                        }
                    case 2:
                        {
                            let l = this.c7();
                            c.add(l);
                            break;
                        }
                    case 4:
                        {
                            let m = this.c9();
                            c.add(m);
                            break;
                        }
                    case 3:
                        {
                            this.up((n) => n.gp = false);
                            break;
                        }
                    case 0:
                        {
                            this.up((n) => n.gp = true);
                            break;
                        }
                }
            }
            if (this.valueLines != null && this.valueLines.count > 0) {
                for (let n = 0; n < this.valueLines.count; n++) {
                    let o = this.valueLines._inner[n];
                    if (o != 3 && o != 1 && o != 2) {
                        this.t7(c, n, o, null);
                    }
                    else {
                        for (let p of fromEnum(this.dataChart.series)) {
                            this.t7(c, n, o, p);
                        }
                    }
                }
            }
            for (let q of fromEnum(c)) {
                if (stringIsNullOrEmpty(q.name) == false) {
                    continue;
                }
                q.name = a + getInstanceType(q).typeName;
            }
            return c;
        }
        t7(a, b, c, d) {
            let e = this.dd();
            this.ce.setValueMode(e, c);
            this.ce.setValueAxisAnnotationEnabled(e, true);
            this.ce.setTargetSeries(e, d);
            if (d != null) {
                this.ce.setBrush(e, d.u9);
            }
            else if (this.valueLinesBrushes != null && b < this.valueLinesBrushes.count && c != 3 && c != 1 && c != 2) {
                this.ce.setBrush(e, this.valueLinesBrushes.item(b));
            }
            if (c == 1 || c == 2 || c == 3) {
                this.ce.setUseLegend(e, this.he);
            }
            else {
                this.ce.setUseLegend(e, true);
            }
            if (d != null && d.title != null && typeof d.title === 'string') {
                let f = d.title;
                let g = " Min";
                if (c == 2) {
                    g = " Max";
                }
                if (c == 3) {
                    g = " Avg";
                }
                this.ce.setTitle(e, f + g);
            }
            else {
                let h = "Minimum";
                if (c == 5) {
                    h = "Maximum";
                }
                if (c == 6) {
                    h = "Average";
                }
                this.ce.setTitle(e, h);
            }
            this.ce.setLegendItemBadgeShape(e, 2);
            a.add(e);
        }
        uf(a, b) {
            this.ce.setIsAutoCalloutBehaviorEnabled(a, true);
            if (this.ah == 0) {
                this.ce.setGreedyCollisionMode(a, true);
            }
            this.ce.setUseDedicatedLanes(a, b);
            this.ce.setShouldTruncateOnBoundaryCollisions(a, this.hd());
        }
        hd() {
            return false;
        }
        wu(a, b, c) {
            a.itemsSource = this.hz != null ? this.hz : b.itemsSource;
            this.ce.setXMemberPath(a, this.l7);
            this.ce.setYMemberPath(a, this.l8);
            this.ce.setLabelMemberPath(a, this.l6);
            this.ce.setContentMemberPath(a, this.l5);
            if (this.ai != null) {
                this.ce.setCalloutsAllowedPositions(a, this.ai);
            }
        }
        wr() {
            this.ws(this.dataChart);
        }
        ws(a) {
            if (a != null && a == this.dataChart) {
                this.wq();
            }
            if (a == null || a.series.count == 0) {
                return;
            }
            this.up((b) => {
                if (this.gx(b) && this.ce.isCalloutLayer(b)) {
                    this.ce.removeCalloutStyleUpdating(b, runOn(this, this.v4));
                }
                if (this.gx(b) && this.ce.isCalloutLayer(b)) {
                    this.ce.removeCalloutRenderStyleUpdating(b, runOn(this, this.v3));
                }
                this.wk(b);
            });
            for (let b of fromEnum(a.series)) {
                this.wt(b);
            }
            a.series.clear();
        }
        wt(a) {
            a.itemsSource = null;
            a.legend = null;
            a.o2();
        }
        vn(a, b) {
            if (this.dataChart == null) {
                return;
            }
            let c = b.oldItems == null ? "null" : b.oldItems.count.toString();
            let d = b.newItems == null ? "null" : b.newItems.count.toString();
            if (this.g5) {
                return;
            }
            let e = this.v2(runOn(this, this.uk), this.g5);
            this.g5 = e.p1;
        }
        vq(a, b) {
            if (this.dataChart == null) {
                return;
            }
            let c = b.oldItems == null ? "null" : b.oldItems.count.toString();
            let d = b.newItems == null ? "null" : b.newItems.count.toString();
            if (this.g4) {
                return;
            }
            let e = this.v2(runOn(this, this.uj), this.g4);
            this.g4 = e.p1;
        }
        uj() {
            this.ue();
        }
        uk() {
            if (!this.g5 && this.hj) {
                return;
            }
            let a = false;
            if (this.gv()) {
                a = true;
                this.ud();
                this.um();
            }
            this.wp();
            if (a) {
                this.wz();
            }
        }
        yq(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.x, a);
        }
        yt(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.y, a);
        }
        yr(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ab, a);
        }
        ys(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ac, a);
        }
        y2(a) {
            let b = new Color();
            if (this.x == null || this.x.count == 0) {
                b = ArrayExtension.getModulus$1(Color.$, this.hs, a);
            }
            else {
                let c = ArrayExtension.getModulus$1(Brush.$, this.x, a);
                if (c == null) {
                    b = ArrayExtension.getModulus$1(Color.$, this.hs, a);
                }
                else {
                    b = ColorUtil.t(c);
                }
            }
            return b;
        }
        ff(a) {
            let b = new ObservableColorCollection();
            b.add(ColorUtil.y(a, 0.5));
            b.add(a);
            return b;
        }
        aa(a) {
            let b = this.ff(a);
            let c = BrushCollectionUtil.b(b);
            return c;
        }
        get hs() {
            if (this.hq != null) {
                return this.hq;
            }
            this.hq = new List$1(Color.$, 0);
            this.hq.add(ColorUtil.u("#8BDC5C"));
            this.hq.add(ColorUtil.u("#8961A9"));
            this.hq.add(ColorUtil.u("#6DB1FF"));
            this.hq.add(ColorUtil.u("#82E9D9"));
            this.hq.add(ColorUtil.u("#EA3C63"));
            this.hq.add(ColorUtil.u("#735656"));
            this.hq.add(ColorUtil.u("#F8CE4F"));
            this.hq.add(ColorUtil.u("#A8A8B7"));
            this.hq.add(ColorUtil.u("#E051A9"));
            this.hq.add(ColorUtil.u("#FF903B"));
            return this.hq;
        }
        get_hh() {
            return false;
        }
        get hh() {
            return this.get_hh();
        }
        lu() {
            if (this.dataChart == null) {
                return null;
            }
            return this.dataChart.ys();
        }
        vb(a, b) {
        }
        vc(a, b, c) {
        }
        c0(a) {
            if (a == 2) {
                return 3;
            }
            else if (a == 12) {
                return 13;
            }
            else if (a == 6) {
                return 7;
            }
            else if (a == 8) {
                return 9;
            }
            else if (a == 11) {
                return 12;
            }
            else if (a == 1) {
                return 1;
            }
            else if (a == 7) {
                return 8;
            }
            else if (a == 10) {
                return 11;
            }
            else if (a == 4) {
                return 5;
            }
            else if (a == 5) {
                return 6;
            }
            else if (a == 9) {
                return 10;
            }
            else if (a == 3) {
                return 4;
            }
            else if (a == 13) {
                return 0;
            }
            return 2;
        }
        attachDataLegend(a) {
            this.uc(a);
        }
        uc(a) {
            this.ch = a;
            if (this.dataChart != null) {
                if (!this.f5) {
                    this.f5 = true;
                    this.dataChart.attachDataLegend(a);
                }
            }
        }
        detachDataLegend(a) {
            this.ui(a);
        }
        ui(a) {
            if (this.dataChart != null) {
                this.f5 = false;
                this.dataChart.detachDataLegend(a);
            }
            this.ch = null;
        }
        getDataLegendSeries() {
            return this.o();
        }
        o() {
            if (this.dataChart != null) {
                return this.dataChart.getDataLegendSeries();
            }
            else {
                return new Array(0);
            }
        }
        zoomIn(a) {
            if (this.dataChart != null) {
                this.dataChart.rz(a);
            }
        }
        zoomOut(a) {
            if (this.dataChart != null) {
                this.dataChart.r0(a);
            }
        }
        resetZoom() {
            if (this.dataChart != null) {
                this.dataChart.q8();
            }
        }
        get_g8() {
            return false;
        }
        get g8() {
            return this.get_g8();
        }
        get cj() {
            if (this.ci == null) {
                this.ci = DVContainer.instance.createInstance(IDomainChartToolbarProvider_$type, () => "Domain chart toolbar module is not loaded.");
                this.ci.container = this.lt;
                this.ci.commandChanged = runOn(this, this.vv);
            }
            return this.ci;
        }
        vv(a) {
            for (let b of fromEnum(this.ho)) {
                b.onCommandStateChanged(a.c, a.a, a.b);
            }
        }
        getDesiredToolbarActions() {
            if (!this.g8) {
                return null;
            }
            if (this.dataChart != null) {
                let a = this.dataChart.getDesiredToolbarActions();
                a = this.cj.getDesiredToolbarActions(this, a, this.eq);
                return a;
            }
            return null;
        }
        onToolCommandExecuting(a) {
            if (!this.g8) {
                return 1;
            }
            return this.cj.onToolCommandExecuting(this, a);
        }
        get commandCompleted() {
            return this._commandCompleted;
        }
        set commandCompleted(a) {
            this._commandCompleted = a;
        }
        get invalidateActions() {
            return this._invalidateActions;
        }
        set invalidateActions(a) {
            this._invalidateActions = a;
        }
        provideContextAccessor(a) {
            this.eq = a;
        }
        va() {
            if (this.invalidateActions != null) {
                this.invalidateActions();
            }
        }
        addCommandAvailabilityListener(a) {
        }
        removeCommandAvailabilityListener(a) {
        }
        addCommandStateChangedListener(a) {
            if (!this.ho.contains(a)) {
                this.ho.add(a);
            }
        }
        removeCommandStateChangedListener(a) {
            if (this.ho.contains(a)) {
                this.ho.remove(a);
            }
        }
        vh(source_, a, b, c) {
            if (this.bf != null) {
                this.bf.notifySetItem(source_, a, b, c);
            }
            if (this.dataChart != null) {
                this.dataChart.og(source_, a, b, c);
            }
        }
        vd(source_) {
            if (this.bf != null) {
                this.bf.notifyClearItems(source_);
            }
            if (this.dataChart != null) {
                this.dataChart.n7(source_);
            }
        }
        ve(source_, a, b) {
            if (this.bf != null) {
                this.bf.notifyInsertItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.oe(source_, a, b);
            }
        }
        vf(source_, a, b) {
            if (this.bf != null) {
                this.bf.notifyRemoveItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.of(source_, a, b);
            }
        }
        get bz() {
            return this.by;
        }
        set bz(a) {
            let b = this.by;
            this.by = a;
            if (b != this.by) {
                this.vu("DataToolTipGroupingMode", enumGetBox(DataToolTipLayerGroupingMode_$type, b), enumGetBox(DataToolTipLayerGroupingMode_$type, this.by));
            }
        }
        get jo() {
            return this.ia;
        }
        set jo(a) {
            let b = this.ia;
            this.ia = a;
            if (b != this.ia) {
                this.vu("DataToolTipPositionOffsetX", b, this.ia);
            }
        }
        get jp() {
            return this.ib;
        }
        set jp(a) {
            let b = this.ib;
            this.ib = a;
            if (b != this.ib) {
                this.vu("DataToolTipPositionOffsetY", b, this.ib);
            }
        }
        get jm() {
            return this.h8;
        }
        set jm(a) {
            let b = this.h8;
            this.h8 = a;
            if (b != this.h8) {
                this.vu("DataToolTipDefaultPositionOffsetX", b, this.h8);
            }
        }
        get jn() {
            return this.h9;
        }
        set jn(a) {
            let b = this.h9;
            this.h9 = a;
            if (b != this.h9) {
                this.vu("DataToolTipDefaultPositionOffsetY", b, this.h9);
            }
        }
        get bv() {
            return this.bu;
        }
        set bv(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.vu("DataToolTipGroupedPositionModeX", enumGetBox(DataTooltipGroupedPositionX_$type, b), enumGetBox(DataTooltipGroupedPositionX_$type, this.bu));
            }
        }
        get bx() {
            return this.bw;
        }
        set bx(a) {
            let b = this.bw;
            this.bw = a;
            if (b != this.bw) {
                this.vu("DataToolTipGroupedPositionModeY", enumGetBox(DataTooltipGroupedPositionY_$type, b), enumGetBox(DataTooltipGroupedPositionY_$type, this.bw));
            }
        }
        get gq() {
            return this.fv;
        }
        set gq(a) {
            let b = this.fv;
            this.fv = a;
            if (b != this.fv) {
                this.vu(DomainChart.o6, b, this.fv);
            }
        }
        get m() {
            return this.e;
        }
        set m(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.vu("DataToolTipIncludedSeries", b, this.e);
            }
        }
        get j() {
            return this.b;
        }
        set j(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.vu("DataToolTipExcludedSeries", b, this.b);
            }
        }
        get l() {
            return this.d;
        }
        set l(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.vu("DataToolTipIncludedColumns", b, this.d);
            }
        }
        get i() {
            return this.a;
        }
        set i(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.vu("DataToolTipExcludedColumns", b, this.a);
            }
        }
        get bd() {
            return this.bc;
        }
        set bd(a) {
            let b = this.bc;
            this.bc = a;
            if (b != this.bc) {
                this.vu("DataToolTipValueFormatAbbreviation", enumGetBox(DataAbbreviationMode_$type, b), enumGetBox(DataAbbreviationMode_$type, this.bc));
            }
        }
        get lc() {
            return this.kz;
        }
        set lc(a) {
            let b = this.kz;
            this.kz = a;
            if (b != this.kz) {
                this.vu("DataToolTipValueFormatMaxFractions", b, this.kz);
            }
        }
        get ld() {
            return this.k0;
        }
        set ld(a) {
            let b = this.k0;
            this.k0 = a;
            if (b != this.k0) {
                this.vu("DataToolTipValueFormatMinFractions", b, this.k0);
            }
        }
        get bt() {
            return this.bs;
        }
        set bt(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.vu("DataToolTipValueFormatMode", enumGetBox(DataLegendValueMode_$type, b), enumGetBox(DataLegendValueMode_$type, this.bs));
            }
        }
        get py() {
            return this.mg;
        }
        set py(a) {
            let b = this.mg;
            this.mg = a;
            if (b != this.mg) {
                this.vu("DataToolTipValueFormatCulture", b, this.mg);
            }
        }
        get gr() {
            return this.fw;
        }
        set gr(a) {
            let b = this.fw;
            this.fw = a;
            if (b != this.fw) {
                this.vu("DataToolTipValueFormatUseGrouping", b, this.fw);
            }
        }
        get p4() {
            return this.mh;
        }
        set p4(a) {
            let b = this.mh;
            this.mh = a;
            if (b != this.mh) {
                this.vu("DataToolTipValueFormatString", b, this.mh);
            }
        }
        get n() {
            return this.f;
        }
        set n(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.vu("DataToolTipValueFormatSpecifiers", b, this.f);
            }
        }
        get zs() {
            return this.zg;
        }
        set zs(a) {
            let b = this.zg;
            this.zg = a;
            if (b != this.zg) {
                this.vu("DataToolTipValueRowMargin", b, this.zg);
            }
        }
        get gs() {
            return this.fx;
        }
        set gs(a) {
            let b = this.fx;
            this.fx = a;
            if (b != this.fx) {
                this.vu("DataToolTipValueRowVisible", b, this.fx);
            }
        }
        get qd() {
            return this.mi;
        }
        set qd(a) {
            let b = this.mi;
            this.mi = a;
            if (b != this.mi) {
                this.vu("DataToolTipValueTextWhenMissingData", b, this.mi);
            }
        }
        get gt() {
            return this.fy;
        }
        set gt(a) {
            let b = this.fy;
            this.fy = a;
            if (b != this.fy) {
                this.vu("DataToolTipValueTextUseSeriesColors", b, this.fy);
            }
        }
        get zt() {
            return this.zh;
        }
        set zt(a) {
            let b = this.zh;
            this.zh = a;
            if (b != this.zh) {
                this.vu("DataToolTipValueTextMargin", b, this.zh);
            }
        }
        get ym() {
            return this.xq;
        }
        set ym(a) {
            let b = this.xq;
            this.xq = a;
            if (b != this.xq) {
                this.vu("DataToolTipValueTextColor", b, this.xq);
            }
        }
        get fe() {
            return this.e3;
        }
        set fe(a) {
            let b = this.e3;
            this.e3 = a;
            if (b != this.e3) {
                this.vu("DataToolTipValueTextStyle", b, this.e3);
            }
        }
        get oo() {
            return this.ma;
        }
        set oo(a) {
            let b = this.ma;
            this.ma = a;
            if (b != this.ma) {
                this.vu("DataToolTipHeaderFormatString", b, this.ma);
            }
        }
        get k() {
            return this.c;
        }
        set k(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.vu("DataToolTipHeaderFormatSpecifiers", b, this.c);
            }
        }
        get ok() {
            return this.l9;
        }
        set ok(a) {
            let b = this.l9;
            this.l9 = a;
            if (b != this.l9) {
                this.vu("DataToolTipHeaderFormatCulture", b, this.l9);
            }
        }
        get bj() {
            return this.bi;
        }
        set bj(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.vu("DataToolTipHeaderFormatDate", enumGetBox(DataLegendHeaderDateMode_$type, b), enumGetBox(DataLegendHeaderDateMode_$type, this.bi));
            }
        }
        get bl() {
            return this.bk;
        }
        set bl(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.vu("DataToolTipHeaderFormatTime", enumGetBox(DataLegendHeaderTimeMode_$type, b), enumGetBox(DataLegendHeaderTimeMode_$type, this.bk));
            }
        }
        get ot() {
            return this.mb;
        }
        set ot(a) {
            let b = this.mb;
            this.mb = a;
            if (b != this.mb) {
                this.vu("DataToolTipHeaderText", b, this.mb);
            }
        }
        get ye() {
            return this.xi;
        }
        set ye(a) {
            let b = this.xi;
            this.xi = a;
            if (b != this.xi) {
                this.vu("DataToolTipHeaderTextColor", b, this.xi);
            }
        }
        get zm() {
            return this.za;
        }
        set zm(a) {
            let b = this.za;
            this.za = a;
            if (b != this.za) {
                this.vu("DataToolTipHeaderTextMargin", b, this.za);
            }
        }
        get zl() {
            return this.y9;
        }
        set zl(a) {
            let b = this.y9;
            this.y9 = a;
            if (b != this.y9) {
                this.vu("DataToolTipHeaderRowMargin", b, this.y9);
            }
        }
        get gp() {
            return this.fu;
        }
        set gp(a) {
            let b = this.fu;
            this.fu = a;
            if (b != this.fu) {
                this.vu("DataToolTipHeaderRowVisible", b, this.fu);
            }
        }
        get e6() {
            return this.ev;
        }
        set e6(a) {
            let b = this.ev;
            this.ev = a;
            if (b != this.ev) {
                this.vu("DataToolTipHeaderTextStyle", b, this.ev);
            }
        }
        get yd() {
            return this.xh;
        }
        set yd(a) {
            let b = this.xh;
            this.xh = a;
            if (b != this.xh) {
                this.vu("DataToolTipGroupTextColor", b, this.xh);
            }
        }
        get zk() {
            return this.y8;
        }
        set zk(a) {
            let b = this.y8;
            this.y8 = a;
            if (b != this.y8) {
                this.vu("DataToolTipGroupTextMargin", b, this.y8);
            }
        }
        get zj() {
            return this.y7;
        }
        set zj(a) {
            let b = this.y7;
            this.y7 = a;
            if (b != this.y7) {
                this.vu("DataToolTipGroupRowMargin", b, this.y7);
            }
        }
        get go() {
            return this.ft;
        }
        set go(a) {
            let b = this.ft;
            this.ft = a;
            if (b != this.ft) {
                this.vu("DataToolTipGroupRowVisible", b, this.ft);
            }
        }
        get e5() {
            return this.eu;
        }
        set e5(a) {
            let b = this.eu;
            this.eu = a;
            if (b != this.eu) {
                this.vu("DataToolTipGroupTextStyle", b, this.eu);
            }
        }
        get yh() {
            return this.xl;
        }
        set yh(a) {
            let b = this.xl;
            this.xl = a;
            if (b != this.xl) {
                this.vu("DataToolTipSummaryTitleTextColor", b, this.xl);
            }
        }
        get e9() {
            return this.ey;
        }
        set e9(a) {
            let b = this.ey;
            this.ey = a;
            if (b != this.ey) {
                this.vu("DataToolTipSummaryTitleTextStyle", b, this.ey);
            }
        }
        get bp() {
            return this.bo;
        }
        set bp(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.vu("DataToolTipSummaryType", enumGetBox(DataLegendSummaryType_$type, b), enumGetBox(DataLegendSummaryType_$type, this.bo));
            }
        }
        get pc() {
            return this.md;
        }
        set pc(a) {
            let b = this.md;
            this.md = a;
            if (b != this.md) {
                this.vu("DataToolTipSummaryTitleText", b, this.md);
            }
        }
        get zp() {
            return this.zd;
        }
        set zp(a) {
            let b = this.zd;
            this.zd = a;
            if (b != this.zd) {
                this.vu("DataToolTipSummaryTitleTextMargin", b, this.zd);
            }
        }
        get zo() {
            return this.zc;
        }
        set zo(a) {
            let b = this.zc;
            this.zc = a;
            if (b != this.zc) {
                this.vu("DataToolTipSummaryRowMargin", b, this.zc);
            }
        }
        get yj() {
            return this.xn;
        }
        set yj(a) {
            let b = this.xn;
            this.xn = a;
            if (b != this.xn) {
                this.vu("DataToolTipSummaryValueTextColor", b, this.xn);
            }
        }
        get fb() {
            return this.e0;
        }
        set fb(a) {
            let b = this.e0;
            this.e0 = a;
            if (b != this.e0) {
                this.vu("DataToolTipSummaryValueTextStyle", b, this.e0);
            }
        }
        get o7() {
            return this.mc;
        }
        set o7(a) {
            let b = this.mc;
            this.mc = a;
            if (b != this.mc) {
                this.vu("DataToolTipSummaryLabelText", b, this.mc);
            }
        }
        get yg() {
            return this.xk;
        }
        set yg(a) {
            let b = this.xk;
            this.xk = a;
            if (b != this.xk) {
                this.vu("DataToolTipSummaryLabelTextColor", b, this.xk);
            }
        }
        get e8() {
            return this.ex;
        }
        set e8(a) {
            let b = this.ex;
            this.ex = a;
            if (b != this.ex) {
                this.vu("DataToolTipSummaryLabelTextStyle", b, this.ex);
            }
        }
        get pi() {
            return this.me;
        }
        set pi(a) {
            let b = this.me;
            this.me = a;
            if (b != this.me) {
                this.vu("DataToolTipSummaryUnitsText", b, this.me);
            }
        }
        get yi() {
            return this.xm;
        }
        set yi(a) {
            let b = this.xm;
            this.xm = a;
            if (b != this.xm) {
                this.vu("DataToolTipSummaryUnitsTextColor", b, this.xm);
            }
        }
        get fa() {
            return this.ez;
        }
        set fa(a) {
            let b = this.ez;
            this.ez = a;
            if (b != this.ez) {
                this.vu("DataToolTipSummaryUnitsTextStyle", b, this.ez);
            }
        }
        get zi() {
            return this.y6;
        }
        set zi(a) {
            let b = this.y6;
            this.y6 = a;
            if (b != this.y6) {
                this.vu("DataToolTipBadgeMargin", b, this.y6);
            }
        }
        get cs() {
            return this.cq;
        }
        set cs(a) {
            let b = this.cq;
            this.cq = a;
            if (b != this.cq) {
                this.vu("DataToolTipBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.cq));
            }
        }
        get br() {
            return this.bq;
        }
        set br(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.vu("DataToolTipUnitsDisplayMode", enumGetBox(DataLegendUnitsMode_$type, b), enumGetBox(DataLegendUnitsMode_$type, this.bq));
            }
        }
        get ps() {
            return this.mf;
        }
        set ps(a) {
            let b = this.mf;
            this.mf = a;
            if (b != this.mf) {
                this.vu("DataToolTipUnitsText", b, this.mf);
            }
        }
        get yl() {
            return this.xp;
        }
        set yl(a) {
            let b = this.xp;
            this.xp = a;
            if (b != this.xp) {
                this.vu("DataToolTipUnitsTextColor", b, this.xp);
            }
        }
        get zr() {
            return this.zf;
        }
        set zr(a) {
            let b = this.zf;
            this.zf = a;
            if (b != this.zf) {
                this.vu("DataToolTipUnitsTextMargin", b, this.zf);
            }
        }
        get fd() {
            return this.e2;
        }
        set fd(a) {
            let b = this.e2;
            this.e2 = a;
            if (b != this.e2) {
                this.vu("DataToolTipUnitsTextStyle", b, this.e2);
            }
        }
        get zq() {
            return this.ze;
        }
        set zq(a) {
            let b = this.ze;
            this.ze = a;
            if (b != this.ze) {
                this.vu("DataToolTipTitleTextMargin", b, this.ze);
            }
        }
        get yk() {
            return this.xo;
        }
        set yk(a) {
            let b = this.xo;
            this.xo = a;
            if (b != this.xo) {
                this.vu("DataToolTipTitleTextColor", b, this.xo);
            }
        }
        get fc() {
            return this.e1;
        }
        set fc(a) {
            let b = this.e1;
            this.e1 = a;
            if (b != this.e1) {
                this.vu("DataToolTipTitleTextStyle", b, this.e1);
            }
        }
        get bn() {
            return this.bm;
        }
        set bn(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.vu("DataToolTipLabelDisplayMode", enumGetBox(DataLegendLabelMode_$type, b), enumGetBox(DataLegendLabelMode_$type, this.bm));
            }
        }
        get yf() {
            return this.xj;
        }
        set yf(a) {
            let b = this.xj;
            this.xj = a;
            if (b != this.xj) {
                this.vu("DataToolTipLabelTextColor", b, this.xj);
            }
        }
        get zn() {
            return this.zb;
        }
        set zn(a) {
            let b = this.zb;
            this.zb = a;
            if (b != this.zb) {
                this.vu("DataToolTipLabelTextMargin", b, this.zb);
            }
        }
        get e7() {
            return this.ew;
        }
        set e7(a) {
            let b = this.ew;
            this.ew = a;
            if (b != this.ew) {
                this.vu("DataToolTipLabelTextStyle", b, this.ew);
            }
        }
        wd(a) {
            if (this.seriesAdded != null && a != null) {
                this.seriesAdded(this, new ChartSeriesEventArgs(a));
            }
        }
        wk(a) {
            if (this.seriesRemoved != null && a != null) {
                this.seriesRemoved(this, new ChartSeriesEventArgs(a));
            }
        }
        wg(a, b, c) {
            if (this.seriesPointerEnter != null && a != null) {
                this.seriesPointerEnter(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        wh(a, b, c) {
            if (this.seriesPointerLeave != null && a != null) {
                this.seriesPointerLeave(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        wi(a, b, c) {
            if (this.seriesPointerMove != null && a != null) {
                this.seriesPointerMove(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        wf(a, b, c) {
            if (this.seriesPointerDown != null && a != null) {
                this.seriesPointerDown(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        wj(a, b, c) {
            if (this.seriesPointerUp != null && a != null) {
                this.seriesPointerUp(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        we(a, b) {
            if (this.seriesClick != null && a != null) {
                this.seriesClick(this, b);
            }
        }
        v7(a) {
            if (this.plotAreaPointerEnter != null && this.dataChart != null) {
                this.plotAreaPointerEnter(this, new DomainChartPlotAreaPointerEventArgs(this.dataChart, a));
            }
        }
        v8(a) {
            if (this.plotAreaPointerLeave != null && this.dataChart != null) {
                this.plotAreaPointerLeave(this, new DomainChartPlotAreaPointerEventArgs(this.dataChart, a));
            }
        }
        v9(a) {
            if (this.plotAreaPointerMove != null && this.dataChart != null) {
                this.plotAreaPointerMove(this, new DomainChartPlotAreaPointerEventArgs(this.dataChart, a));
            }
        }
        v6(a) {
            if (this.plotAreaPointerDown != null && this.dataChart != null) {
                this.plotAreaPointerDown(this, new DomainChartPlotAreaPointerEventArgs(this.dataChart, a));
            }
        }
        wa(a) {
            if (this.plotAreaPointerUp != null && this.dataChart != null) {
                this.plotAreaPointerUp(this, new DomainChartPlotAreaPointerEventArgs(this.dataChart, a));
            }
        }
        v4(a, b) {
            if (this.calloutStyleUpdating != null && a != null) {
                this.calloutStyleUpdating(this, b);
            }
        }
        v3(a, b) {
            if (this.calloutRenderStyleUpdating != null && a != null) {
                this.calloutRenderStyleUpdating(this, b);
            }
        }
        wc(a, b) {
            if (this.selectedSeriesItemsChanged != null && a != null) {
                this.selectedSeriesItemsChanged(this, b);
            }
        }
        v5(a, b) {
            if (this.focusedSeriesItemsChanged != null && a != null) {
                this.focusedSeriesItemsChanged(this, b);
            }
        }
        v1(a) {
            if (!this.hu.contains(a)) {
                this.hu.add(a);
                let b = false;
                let c = this.v2(() => {
                    a();
                    this.hu.remove(a);
                }, b);
                b = c.p1;
            }
        }
        v2(a, b) {
            if (!b) {
                b = true;
                if (this.lt != null) {
                    this.lt.setTimeout(a, 0);
                }
                else {
                    this.fg = a;
                }
            }
            return {
                p1: b
            };
        }
        get_ha() {
            return true;
        }
        get ha() {
            return this.get_ha();
        }
        u0(a, b) {
            let c = a == this.dataChart;
            if (c) {
                a.ag = this.x;
            }
            if (c) {
                a.aj = this.y;
            }
            a.c9.b4(b);
            a.ah = this.ab;
            a.ai = this.ac;
            a.bg = this.cv;
            a.legend = this.legend;
            a.xg = this.g3;
            a.xj = this.hb && this.ha;
            a.f6 = this.hg;
            if (c) {
                if (this.am != null && this.am.count > 0) {
                    for (let d of fromEnum(this.am)) {
                        a.focusedSeriesItems.add(d);
                    }
                }
                if (this.an != null && this.an.count > 0) {
                    for (let e of fromEnum(this.an)) {
                        a.selectedSeriesItems.add(e);
                    }
                }
                a.ch = this.d2;
                a.ci = this.d3;
                a.hu = this.jq;
                a.vi = this.yu;
                a.hv = this.jr;
                a.hw = this.js;
                a.hx = this.jt;
                a.vj = this.yv;
                a.ce = this.dz;
                a.ey = this.gw;
                a.hy = this.ju;
                a.hz = this.jv;
                a.h0 = this.jw;
                a.ii = this.kj;
                a.vs = this.y0;
                a.ip = this.kp;
                a.ij = this.kk;
                a.ik = this.kl;
                a.vt = this.y1;
                a.cl = this.d7;
                a.gj = this.hl;
                a.il = this.km;
                a.im = this.kn;
                a.io = this.ko;
                a.is = this.kq;
                a.it = this.kr;
                a.iv = this.kt;
                a.iu = this.ks;
                if (a.cb != this.dx || a.b6 != this.dt) {
                    a.c9.b4(b);
                    a.cb = this.dx;
                    a.b6 = this.dt;
                }
                if (a.b9 != this.dw) {
                    a.c9.b4(b);
                    a.b9 = this.dw;
                }
                if (this.yx != null) {
                    a.vo = this.yx;
                }
                if (this.yp != null) {
                    a.u7 = this.yp;
                }
                a.selectedSeriesItemsChanged = delegateCombine(a.selectedSeriesItemsChanged, runOn(this, this.wc));
                a.focusedSeriesItemsChanged = delegateCombine(a.focusedSeriesItemsChanged, runOn(this, this.v5));
                a.i7 = this.li;
                a.i3 = this.lf;
            }
            a.w1 = this.dp;
            a.w4 = this.dr;
            if (this.ch != null) {
                if (!this.f5) {
                    this.uc(this.ch);
                }
            }
            if (a.i5 != this.lg) {
                a.i5 = this.lg;
            }
            if (a.by != this.dk || a.bw != this.di) {
                a.c9.b4(b);
                a.by = this.dk;
                a.bw = this.di;
            }
            a.wu = this.ba();
            if (!isNaN_(this.j2)) {
                a.yl = this.j2;
            }
            if (!isNaN_(this.j4)) {
                a.yn = this.j4;
            }
            if (!isNaN_(this.j3)) {
                a.ym = this.j3;
            }
            if (!isNaN_(this.j1)) {
                a.yk = this.j1;
            }
            a.bd = this.cn;
            a.seriesMouseEnter = delegateCombine(a.seriesMouseEnter, (f, g) => this.wg(g.series, g.item, g.plotAreaPosition));
            a.seriesMouseLeave = delegateCombine(a.seriesMouseLeave, (f, g) => this.wh(g.series, g.item, g.plotAreaPosition));
            a.seriesMouseMove = delegateCombine(a.seriesMouseMove, (f, g) => this.wi(g.series, g.item, g.plotAreaPosition));
            a.seriesMouseLeftButtonDown = delegateCombine(a.seriesMouseLeftButtonDown, (f, g) => this.wf(g.series, g.item, g.plotAreaPosition));
            a.seriesMouseLeftButtonUp = delegateCombine(a.seriesMouseLeftButtonUp, (f, g) => this.wj(g.series, g.item, g.plotAreaPosition));
            a.seriesClick = delegateCombine(a.seriesClick, (f, g) => {
                let h = new DomainChartSeriesPointerEventArgs(g.series, g.item, g.plotAreaPosition);
                this.we(g.series, h);
                g.cancelSelection = h.cancelSelection;
            });
            a.plotAreaMouseEnter = delegateCombine(a.plotAreaMouseEnter, (f, g) => this.v7(g.plotAreaPosition));
            a.plotAreaMouseLeave = delegateCombine(a.plotAreaMouseLeave, (f, g) => this.v8(g.plotAreaPosition));
            a.plotAreaMouseOver = delegateCombine(a.plotAreaMouseOver, (f, g) => this.v9(g.plotAreaPosition));
            a.plotAreaMouseLeftButtonDown = delegateCombine(a.plotAreaMouseLeftButtonDown, (f, g) => this.v6(g.plotAreaPosition));
            a.plotAreaMouseLeftButtonUp = delegateCombine(a.plotAreaMouseLeftButtonUp, (f, g) => this.wa(g.plotAreaPosition));
            if (c) {
                a.wl = this.y5;
            }
            if (c) {
                a.l3 = this.sz;
            }
            a.u0 = this.w4;
            if (c) {
                a.lr = this.so;
            }
            a.uz = this.w3;
            a.xc = this.gf;
            a.ek = this.gg;
            a.h2 = this.jx;
            a.h7 = this.j6;
            a.ih = this.kg;
            a.hp = this.jj;
            if (a == this.dataChart) {
                this.ur();
            }
            if (this.highlightedItemsSource != null) {
                if (a == this.dataChart) {
                    this.uj();
                }
            }
            this.u1(a);
            this.u2(a);
            this.va();
        }
        ur() {
            this.g5 = true;
            this.uk();
        }
        ae(a) {
            if (!this.hf || !this.hi || this.itemsSource != null) {
                return a;
            }
            if (a == null) {
                return null;
            }
            let b = new BrushCollection();
            for (let c of fromEnum(a)) {
                let d = BrushUtil.t(c);
                b.add(d);
            }
            return b;
        }
        yw(a) {
            if (!this.hf || !this.hi || this.itemsSource != null) {
                return a;
            }
            let b = BrushUtil.h(0, 0, 0, 0);
            return b;
        }
        u6(a, b) {
            if (!isNaN_(this.j5)) {
                a.jj = this.j5;
            }
            if (!isNaN_(this.kb) && !a.es) {
                a.jp = this.kb;
            }
            if (!isNaN_(this.jl) && a.ep) {
                a.jp = this.jl;
            }
            if (!isNaN_(this.ki) && a.et) {
                a.jp = this.ki;
            }
            if (a.legendItemBadgeShape == 0) {
                a.legendItemBadgeShape = this.ct;
            }
            a.bd = this.cp;
            a.ci = this.dm;
            a.sl(this.cz);
            a.sk(this.cx);
            a.jg = this.jy;
            if (!isNaN_(this.jz)) {
                a.sm(this.jz);
            }
            if (!isNaN_(this.ji)) {
                a.ik = this.ji;
            }
            if (a.isUsableInLegend) {
                a.legend = this.legend;
            }
            if (typeCast(IUnknownValuePlotting_$type, a) !== null) {
                let c = a;
                c.unknownValuePlotting = this.ec;
            }
            a.fd = this.g6;
            a.bv = this.dg;
            a.wx = this.zw;
            a.legendItemVisibility = this.zx;
            if (this.gx(a) && this.ce.isCalloutLayer(a)) {
                this.ce.setCalloutStyleUpdatingEventEnabled(a, this.gi);
                this.ce.addCalloutStyleUpdating(a, runOn(this, this.v4));
                this.ce.setUseValueForAutoCalloutLabels(a, this.hk);
                this.ce.setCollisionMode(a, this.ah);
                this.ce.setUseItemColorForFill(a, this.gk);
                this.ce.setUseItemColorForOutline(a, this.gl);
                this.ce.setCalloutStrokeThickness(a, this.jk);
                this.ce.setUseAutoContrastingLabelColors(a, this.gj);
                this.ce.setCalloutBackground(a, this.x1);
                this.ce.setCalloutTextStyle(a, this.e4);
                this.ce.setCalloutDarkColor(a, this.x2);
                this.ce.setCalloutLightColor(a, this.x4);
                this.ce.setCalloutTextColor(a, this.x6);
                this.ce.setCalloutOutline(a, this.x5);
                this.ce.setCalloutLeaderBrush(a, this.x3);
                if (this.k9 >= 0) {
                    this.ce.setAutoCalloutLabelPrecision(a, this.k9);
                }
            }
            if (this.gx(a) && this.ce.isCalloutLayer(a)) {
                this.ce.setCalloutRenderStyleUpdatingEventEnabled(a, this.gi);
                this.ce.addCalloutRenderStyleUpdating(a, runOn(this, this.v3));
            }
            if (this.gx(a) && this.ce.isDataToolTipLayer(a)) {
                this.t8(a);
            }
            this.ua(a, b);
            this.ub(a, b);
            this.u7(a, b);
            this.u8(a, b);
            this.wd(a);
        }
        get gh() {
            return this.fk;
        }
        ul() {
            if (!this.fk) {
                this.fk = true;
                this.ux();
            }
        }
        ux() {
            this.uy();
            this.uz();
        }
        wl(a) {
            if (this.f5 && this.ch != null) {
                this.f5 = false;
                if (a != null) {
                    a.detachDataLegend(this.ch);
                }
            }
            this.ws(a);
        }
        ub(a, b) {
            let c = typeCast(ITrendLineSeries_$type, a);
            if (c != null) {
                c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.af, b);
                c.trendLineThickness = this.kh;
                c.trendLineType = this.trendLineType;
                c.trendLinePeriod = this.lk;
            }
        }
        c2(a, b) {
            if (this.c5 == null || this.c5.count == 0) {
                let c = this.c3(a);
                if (this.hv == null || this.hv.count == 0) {
                    return a != null && a.fl ? c : 2;
                }
                let d = ArrayExtension.getModulus$1(MarkerType_$type, this.hv, b);
                if (d == 0 && a != null) {
                    d = a.fl ? c : 2;
                    if (d == 2) {
                        d = this.c1(a);
                    }
                }
                if (d == 2) {
                    if (a == null) {
                        return 1;
                    }
                    else {
                        return 2;
                    }
                }
                return d;
            }
            return ArrayExtension.getModulus$1(MarkerType_$type, this.c5, b);
        }
        c1(a) {
            return 2;
        }
        c3(a) {
            return 1;
        }
        lz() {
            if (this.itemsSource != null) {
                return this.itemsSource;
            }
            if (this.hf) {
                return this.h3();
            }
            return null;
        }
        ly() {
            if (this.highlightedItemsSource != null) {
                return this.highlightedItemsSource;
            }
            return null;
        }
        get_g2() {
            if (this.itemsSource == null && this.hf) {
                if (this.h3() != null) {
                    return true;
                }
            }
            return false;
        }
        get g2() {
            return this.get_g2();
        }
        h3() {
            return null;
        }
        vu(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            switch (a) {
                case "DataChart":
                    this.wl(typeCast(XamDataChart.$, b));
                    this.u0(typeCast(XamDataChart.$, c), this.lt);
                    break;
                case "ShouldUseSkeletonStyleForMockData":
                case "ShouldDisplayMockData":
                    this.actualItemsSource = this.lz();
                    this.x = this.ae(this.z);
                    this.y = this.ae(this.ad);
                    break;
                case "ActualBrushes":
                    this.vm((d) => d.ag = this.x, true, a);
                    break;
                case "ActualOutlines":
                    this.vm((d) => d.aj = this.y, true, a);
                    break;
                case "ActualItemsSource":
                    if (this.hf) {
                        this.x = this.ae(this.z);
                        this.y = this.ae(this.ad);
                    }
                    this.bf.itemsSource = this.actualItemsSource;
                    this.va();
                    break;
                case "ActualHighlightedItemsSource":
                    this.bg.itemsSource = this.actualHighlightedItemsSource;
                    break;
                case "ItemsSource":
                    this.actualItemsSource = this.lz();
                    break;
                case "HighlightedItemsSource":
                    this.actualHighlightedItemsSource = this.ly();
                    break;
                case "IncludedProperties":
                    this.bf.includedProperties = this.includedProperties;
                    break;
                case "ExcludedProperties":
                    this.bf.excludedProperties = this.excludedProperties;
                    break;
                case "Brushes":
                    this.x = this.ae(this.z);
                    break;
                case "Outlines":
                    this.y = this.ae(this.ad);
                    break;
                case "Legend":
                    this.vk((d) => d.legend = this.legend);
                    break;
                case "HighlightingMode":
                    this.vk((d) => d.by = this.dk);
                    break;
                case "HighlightingBehavior":
                    this.vk((d) => d.bw = this.di);
                    break;
                case "LegendHighlightingMode":
                    this.vk((d) => d.bd = this.cn);
                    break;
                case "LegendItemBadgeShape":
                    this.vk((d) => d.bf = this.ct);
                    break;
                case "LegendItemBadgeMode":
                    this.vk((d) => d.be = this.cp);
                    break;
                case "PlotAreaMarginLeft":
                    this.vk((d) => d.yl = this.j2);
                    break;
                case "PlotAreaMarginTop":
                    this.vk((d) => d.yn = this.j4);
                    break;
                case "PlotAreaMarginRight":
                    this.vk((d) => d.ym = this.j3);
                    break;
                case "PlotAreaMarginBottom":
                    this.vk((d) => d.yk = this.j1);
                    break;
                case "ComputedPlotAreaMarginMode":
                    this.vk((d) => d.wu = this.ba());
                    break;
                case "IsHorizontalZoomEnabled":
                    this.vk((d) => d.xg = this.g3);
                    break;
                case "IsVerticalZoomEnabled":
                    this.vk((d) => d.xj = this.hb);
                    break;
                case "WindowRect":
                    this.vl((d) => d.wl = this.y5, false);
                    break;
                case "WindowRectMinWidth":
                    this.vl((d) => d.it = this.kr, false);
                    break;
                case "WindowRectMinHeight":
                    this.vl((d) => d.is = this.kq, false);
                    break;
                case "WindowSizeMinWidth":
                    this.vl((d) => d.iv = this.kt, false);
                    break;
                case "WindowSizeMinHeight":
                    this.vl((d) => d.iu = this.ks, false);
                    break;
                case "Title":
                    this.vl((d) => d.l3 = this.sz, false);
                    break;
                case "Subtitle":
                    this.vl((d) => d.lr = this.so, false);
                    break;
                case "TitleAlignment":
                    this.vk((d) => d.u0 = this.w4);
                    break;
                case "SubtitleAlignment":
                    this.vk((d) => d.uz = this.w3);
                    break;
                case "UnknownValuePlotting":
                    this.up((d) => {
                        if (typeCast(IUnknownValuePlotting_$type, d) !== null) {
                            let e = d;
                            e.unknownValuePlotting = this.ec;
                        }
                    });
                    break;
                case "IsSeriesHighlightingEnabled":
                    this.up((d) => d.fd = this.g6);
                    break;
                case "HighlightedLegendItemVisibility":
                    this.up((d) => d.wx = this.zw);
                    break;
                case "LegendItemVisibility":
                    this.up((d) => d.legendItemVisibility = this.zx);
                    break;
                case "HighlightedValuesDisplayMode":
                    this.uu((d) => d.bv = this.dg);
                    break;
                case "Thickness":
                    if (!isNaN_(this.kb)) {
                        this.uu((d) => d.jp = this.kb);
                    }
                    break;
                case "OutlineMode":
                    this.uu((d) => d.ci = this.dm);
                    break;
                case "MarkerFillOpacity":
                    this.uu((d) => d.jg = this.jy);
                    break;
                case "MarkerThickness":
                    if (!isNaN_(this.jz)) {
                        this.uu((d) => d.sm(this.jz));
                    }
                    break;
                case "MarkerOutlineMode":
                    this.uu((d) => d.sl(this.cz));
                    break;
                case "MarkerFillMode":
                    this.uu((d) => d.sk(this.cx));
                    break;
                case "Resolution":
                    if (!isNaN_(this.j5)) {
                        this.up((d) => d.jj = this.j5);
                    }
                    break;
                case "AreaFillOpacity":
                    if (!isNaN_(this.ji)) {
                        this.up((d) => d.ik = this.ji);
                    }
                    break;
                case "ShouldAvoidAxisAnnotationCollisions":
                    this.uo((d) => {
                        d.cu = this.shouldAvoidAxisAnnotationCollisions;
                        d.cw = this.shouldAvoidAxisAnnotationCollisions;
                    }, true);
                    break;
                case "ShouldPanOnMaximumZoom":
                    this.vk((d) => d.f6 = this.hg);
                    break;
                case "TrendLineBrushes":
                case "TrendLineType":
                case "TrendLineThickness":
                case "TrendLinePeriod":
                    this.uq((d, e) => this.ub(d, e));
                    break;
                case "MarkerMaxCount":
                    this.uv((d, e) => this.ua(d, e));
                    break;
                case "MarkerTypes":
                    let d = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), b);
                    if (d != null) {
                        d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.vs));
                    }
                    let e = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), c);
                    if (e != null) {
                        e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.vs));
                    }
                    this.uv((f, g) => this.ua(f, g));
                    break;
                case "MarkerAutomaticBehavior":
                    this.vk((f) => f.bg = this.cv);
                    this.uv((f, g) => this.ua(f, g));
                    break;
                case "MarkerBrushes":
                    this.vk((f) => f.ah = this.ab);
                    break;
                case "MarkerOutlines":
                    this.vk((f) => f.ai = this.ac);
                    break;
                case "AlignsGridLinesToPixels":
                    this.vk((f) => f.xc = this.gf);
                    break;
                case "AnimateSeriesWhenAxisRangeChanges":
                    this.vk((f) => f.ek = this.gg);
                    break;
                case "ToolTipType":
                case "CrosshairsDisplayMode":
                case "CrosshairsSnapToData":
                case "CrosshairsLineVerticalStroke":
                case "CrosshairsLineHorizontalStroke":
                case "CrosshairsLineThickness":
                case "CrosshairsAnnotationXAxisBackground":
                case "CrosshairsAnnotationXAxisTextColor":
                case "CrosshairsAnnotationYAxisBackground":
                case "CrosshairsAnnotationYAxisTextColor":
                case "CrosshairsAnnotationEnabled":
                case "CrosshairsAnnotationXAxisPrecision":
                case "CrosshairsAnnotationYAxisPrecision":
                case "FinalValueAnnotationsVisible":
                case "FinalValueAnnotationsPrecision":
                case "FinalValueAnnotationsTextColor":
                case "FinalValueAnnotationsBackground":
                case "CalloutsVisible":
                case "AutoCalloutsVisible":
                case "CalloutsAllowedPositions":
                case "CalloutsItemsSource":
                case "CalloutsXMemberPath":
                case "CalloutsYMemberPath":
                case "CalloutsLabelMemberPath":
                case "CalloutsContentMemberPath":
                case "CalloutsUseItemColorForFill":
                case "CalloutsBackground":
                case "CalloutsTextStyle":
                case "CalloutsDarkTextColor":
                case "CalloutsLightTextColor":
                case "CalloutsTextColor":
                case "CalloutsOutline":
                case "CalloutsLeaderBrush":
                case "CalloutsStrokeThickness":
                case "CalloutsUseItemColorForOutline":
                case "CalloutsUseAutoContrastingLabelColors":
                case "CalloutCollisionMode":
                    let f = this.v2(runOn(this, this.uk), this.g5);
                    this.g5 = f.p1;
                    break;
                case "DataToolTipGroupingMode":
                case "DataToolTipPositionOffsetX":
                case "DataToolTipPositionOffsetY":
                case "DataToolTipDefaultPositionOffsetX":
                case "DataToolTipDefaultPositionOffsetY":
                case "DataToolTipGroupedPositionModeX":
                case "DataToolTipGroupedPositionModeY":
                case DomainChart.o6:
                case "DataToolTipIncludedSeries":
                case "DataToolTipExcludedSeries":
                case "DataToolTipIncludedColumns":
                case "DataToolTipExcludedColumns":
                case "DataToolTipValueFormatAbbreviation":
                case "DataToolTipValueFormatMaxFractions":
                case "DataToolTipValueFormatMinFractions":
                case "DataToolTipValueFormatMode":
                case "DataToolTipValueFormatCulture":
                case "DataToolTipValueFormatUseGrouping":
                case "DataToolTipValueFormatString":
                case "DataToolTipValueFormatSpecifiers":
                case "DataToolTipValueRowMargin":
                case "DataToolTipValueRowVisible":
                case "DataToolTipValueTextWhenMissingData":
                case "DataToolTipValueTextUseSeriesColors":
                case "DataToolTipValueTextMargin":
                case "DataToolTipValueTextColor":
                case "DataToolTipValueTextStyle":
                case "DataToolTipHeaderFormatString":
                case "DataToolTipHeaderFormatSpecifiers":
                case "DataToolTipHeaderFormatCulture":
                case "DataToolTipHeaderFormatDate":
                case "DataToolTipHeaderFormatTime":
                case "DataToolTipHeaderText":
                case "DataToolTipHeaderTextColor":
                case "DataToolTipHeaderTextMargin":
                case "DataToolTipHeaderRowMargin":
                case "DataToolTipHeaderRowVisible":
                case "DataToolTipHeaderTextStyle":
                case "DataToolTipGroupTextColor":
                case "DataToolTipGroupTextMargin":
                case "DataToolTipGroupRowMargin":
                case "DataToolTipGroupRowVisible":
                case "DataToolTipGroupTextStyle":
                case "DataToolTipSummaryTitleTextColor":
                case "DataToolTipSummaryTitleTextStyle":
                case "DataToolTipSummaryType":
                case "DataToolTipSummaryTitleText":
                case "DataToolTipSummaryTitleTextMargin":
                case "DataToolTipSummaryRowMargin":
                case "DataToolTipSummaryValueTextColor":
                case "DataToolTipSummaryValueTextStyle":
                case "DataToolTipSummaryLabelText":
                case "DataToolTipSummaryLabelTextColor":
                case "DataToolTipSummaryLabelTextStyle":
                case "DataToolTipSummaryUnitsText":
                case "DataToolTipSummaryUnitsTextColor":
                case "DataToolTipSummaryUnitsTextStyle":
                case "DataToolTipBadgeMargin":
                case "DataToolTipBadgeShape":
                case "DataToolTipUnitsDisplayMode":
                case "DataToolTipUnitsText":
                case "DataToolTipUnitsTextColor":
                case "DataToolTipUnitsTextMargin":
                case "DataToolTipUnitsTextStyle":
                case "DataToolTipTitleTextMargin":
                case "DataToolTipTitleTextColor":
                case "DataToolTipTitleTextStyle":
                case "DataToolTipLabelDisplayMode":
                case "DataToolTipLabelTextColor":
                case "DataToolTipLabelTextMargin":
                case "DataToolTipLabelTextStyle":
                    this.vo(a, b, c);
                    break;
                case "SelectionMode":
                    this.vl((g) => g.cb = this.dx, false);
                    break;
                case "FocusMode":
                    this.vl((g) => g.b9 = this.dw, false);
                    break;
                case "SelectionBehavior":
                    this.vl((g) => g.b6 = this.dt, false);
                    break;
                case "SelectionBrush":
                    this.vl((g) => g.vo = this.yx, false);
                    break;
                case "FocusBrush":
                    this.vl((g) => g.u7 = this.yp, false);
                    break;
                case "HorizontalViewScrollbarMode":
                    this.vk((g) => g.ch = this.d2);
                    break;
                case "VerticalViewScrollbarMode":
                    this.vk((g) => g.ci = this.d3);
                    break;
                case "HorizontalViewScrollbarCornerRadius":
                    this.vk((g) => g.hu = this.jq);
                    break;
                case "HorizontalViewScrollbarFill":
                    this.vk((g) => g.vi = this.yu);
                    break;
                case "HorizontalViewScrollbarMaxOpacity":
                    this.vk((g) => g.hx = this.jt);
                    break;
                case "HorizontalViewScrollbarOutline":
                    this.vk((g) => g.vj = this.yv);
                    break;
                case "HorizontalViewScrollbarStrokeThickness":
                    this.vk((g) => g.hy = this.ju);
                    break;
                case "VerticalViewScrollbarCornerRadius":
                    this.vk((g) => g.ii = this.kj);
                    break;
                case "VerticalViewScrollbarFill":
                    this.vk((g) => g.vs = this.y0);
                    break;
                case "VerticalViewScrollbarMaxOpacity":
                    this.vk((g) => g.ik = this.kl);
                    break;
                case "VerticalViewScrollbarOutline":
                    this.vk((g) => g.vt = this.y1);
                    break;
                case "VerticalViewScrollbarStrokeThickness":
                    this.vk((g) => g.il = this.km);
                    break;
                case "HorizontalViewScrollbarHeight":
                    this.vk((g) => g.hv = this.jr);
                    break;
                case "HorizontalViewScrollbarInset":
                    this.vk((g) => g.hw = this.js);
                    break;
                case DomainChart.q6:
                    this.vk((g) => g.ey = this.gw);
                    break;
                case "HorizontalViewScrollbarTrackStartInset":
                    this.vk((g) => g.h0 = this.jw);
                    break;
                case "HorizontalViewScrollbarTrackEndInset":
                    this.vk((g) => g.hz = this.jv);
                    break;
                case "VerticalViewScrollbarPosition":
                    this.vk((g) => g.cl = this.d7);
                    break;
                case "HorizontalViewScrollbarPosition":
                    this.vk((g) => g.ce = this.dz);
                    break;
                case "ValueLines":
                    let g = typeCast(ObservableCollection$1.$.specialize(ValueLayerValueMode_$type), b);
                    if (g != null) {
                        g.collectionChanged = delegateRemove(g.collectionChanged, runOn(this, this.vw));
                    }
                    let h = typeCast(ObservableCollection$1.$.specialize(ValueLayerValueMode_$type), c);
                    if (h != null) {
                        h.collectionChanged = delegateCombine(h.collectionChanged, runOn(this, this.vw));
                    }
                    let i = this.v2(runOn(this, this.uk), this.g5);
                    this.g5 = i.p1;
                    break;
            }
            this.vx(a, b, c);
            this.vy(a, b, c);
            if (this.g8) {
                this.cj.onTargetPropertyChanged(this, a, b, c);
            }
        }
        vo(a, b, c) {
            this.t9(a, c);
        }
        t9(a, b) {
            if (!this.hm.containsKey(a)) {
                this.hp.add(a);
                this.hm.addItem(a, b);
            }
            else {
                this.hm.item(a, b);
            }
            this.us((c) => {
                if (this.ce.isDataToolTipLayer(c)) {
                    this.t8(c);
                }
            });
        }
        t8(a) {
            for (let b = 0; b < this.hp.count; b++) {
                let c = this.hp._inner[b];
                let d = this.hm.item(c);
                if (stringStartsWith(c, "DataToolTip")) {
                    c = c.substr(("DataToolTip").length);
                }
                this.ce.updateDataToolTipPropertyByName(a, c, d);
            }
        }
        vs(a, b) {
            this.uv((c, d) => this.ua(c, d));
        }
        vw(a, b) {
            let c = this.v2(runOn(this, this.uk), this.g5);
            this.g5 = c.p1;
        }
        get a3() {
            return this.ax;
        }
        get az() {
            return this.at;
        }
        get ay() {
            return this.as;
        }
        get ek() {
            return this.eg;
        }
        get el() {
            return this.eh;
        }
        get a7() {
            return this.a5;
        }
        get dx() {
            return this.dv;
        }
        set dx(a) {
            let b = this.dv;
            this.dv = a;
            if (b != this.dv) {
                this.vu("SelectionMode", enumGetBox(SeriesSelectionMode_$type, b), enumGetBox(SeriesSelectionMode_$type, this.dv));
            }
        }
        get dw() {
            return this.du;
        }
        set dw(a) {
            let b = this.du;
            this.du = a;
            if (b != this.du) {
                this.vu("FocusMode", enumGetBox(SeriesSelectionMode_$type, b), enumGetBox(SeriesSelectionMode_$type, this.du));
            }
        }
        get yx() {
            return this.xw;
        }
        set yx(a) {
            let b = this.xw;
            this.xw = a;
            if (b != this.xw) {
                this.vu("SelectionBrush", b, this.xw);
            }
        }
        get yp() {
            return this.xt;
        }
        set yp(a) {
            let b = this.xt;
            this.xt = a;
            if (b != this.xt) {
                this.vu("FocusBrush", b, this.xt);
            }
        }
        get dt() {
            return this.ds;
        }
        set dt(a) {
            let b = this.ds;
            this.ds = a;
            if (b != this.ds) {
                this.vu("SelectionBehavior", enumGetBox(SeriesSelectionBehavior_$type, b), enumGetBox(SeriesSelectionBehavior_$type, this.ds));
            }
        }
        get selectedSeriesItems() {
            if (this.dataChart != null) {
                return this.dataChart.selectedSeriesItems;
            }
            return this.an;
        }
        get focusedSeriesItems() {
            if (this.dataChart != null) {
                return this.dataChart.focusedSeriesItems;
            }
            return this.am;
        }
        get a2() {
            return this.aw;
        }
        get a1() {
            return this.av;
        }
        get a0() {
            return this.au;
        }
        get em() {
            return this.ei;
        }
        get en() {
            return this.ej;
        }
        get a6() {
            return this.a4;
        }
        get rh() {
            return this.mn;
        }
        set rh(a) {
            let b = this.mn;
            this.mn = a;
            if (b != a) {
                this.aw.o();
                if (this.mn != null) {
                    this.eo.b(this.mn, (c, d, e) => this.aw.j.add(new ChartSortDescription(2, c, d)));
                }
            }
        }
        get qq() {
            return this.mj;
        }
        set qq(a) {
            let b = this.mj;
            this.mj = a;
            if (b != a) {
                this.av.o();
                this.eo.b(this.mj, (c, d, e) => this.av.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get rd() {
            return this.ml;
        }
        set rd(a) {
            let b = this.ml;
            this.ml = a;
            if (b != a) {
                this.au.o();
                if (this.ml != null) {
                    this.eo.b(this.ml, (c, d, e) => this.au.j.add(new ChartSortDescription(2, c, d)));
                }
            }
        }
        get rb() {
            return this.mk;
        }
        set rb(a) {
            let b = this.mk;
            this.mk = a;
            if (b != a) {
                this.ei.clear();
                if (a != null) {
                    let c = FilterExpressionParsingHelper.getFilterExpression(a);
                    if (!stringIsNullOrEmpty(c.errors)) {
                        if (this.filterStringErrorsParsing != null) {
                            this.filterStringErrorsParsing(this, ((() => {
                                let $ret = new FilterStringErrorsParsingEventArgs();
                                $ret.propertyName = "InitialFilter";
                                $ret.errors = c.errors;
                                return $ret;
                            })()));
                        }
                        return;
                    }
                    this.ei.k.add(c.result);
                }
            }
        }
        get rf() {
            return this.mm;
        }
        set rf(a) {
            let b = this.mm;
            this.mm = a;
            if (b != a) {
                this.ej.clear();
                if (a != null) {
                    let c = FilterExpressionParsingHelper.getFilterExpression(a);
                    if (!stringIsNullOrEmpty(c.errors)) {
                        if (this.filterStringErrorsParsing != null) {
                            this.filterStringErrorsParsing(this, ((() => {
                                let $ret = new FilterStringErrorsParsingEventArgs();
                                $ret.propertyName = "InitialFilter";
                                $ret.errors = c.errors;
                                return $ret;
                            })()));
                        }
                        return;
                    }
                    this.ej.k.add(c.result);
                }
            }
        }
        get rj() {
            return this.mo;
        }
        set rj(a) {
            let b = this.mo;
            this.mo = a;
            if (b != a) {
                this.a4.o();
                if (this.mo != null) {
                    this.ep.a(this.mo, (c, d, e) => this.a4.j.add(((() => {
                        let $ret = new ChartSummaryDescription(2, c, d);
                        $ret.n = e;
                        return $ret;
                    })())));
                }
            }
        }
        get itemsSource() {
            return this.lo;
        }
        set itemsSource(a) {
            let b = this.itemsSource;
            if (b != a) {
                this.lo = a;
                this.vu("ItemsSource", b, this.itemsSource);
            }
        }
        get actualItemsSource() {
            return this.lm;
        }
        set actualItemsSource(a) {
            let b = this.actualItemsSource;
            if (b != a) {
                this.lm = a;
                this.vu("ActualItemsSource", b, this.actualItemsSource);
            }
        }
        get highlightedItemsSource() {
            return this.ln;
        }
        set highlightedItemsSource(a) {
            let b = this.highlightedItemsSource;
            if (b != a) {
                this.ln = a;
                this.vu("HighlightedItemsSource", b, this.highlightedItemsSource);
            }
        }
        get actualHighlightedItemsSource() {
            return this.ll;
        }
        set actualHighlightedItemsSource(a) {
            let b = this.actualHighlightedItemsSource;
            if (b != a) {
                this.ll = a;
                this.vu("ActualHighlightedItemsSource", b, this.actualHighlightedItemsSource);
            }
        }
        get includedProperties() {
            return this.h;
        }
        set includedProperties(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.vu("IncludedProperties", b, this.h);
            }
        }
        get excludedProperties() {
            return this.g;
        }
        set excludedProperties(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.vu("ExcludedProperties", b, this.g);
            }
        }
        get z() {
            return this.r;
        }
        set z(a) {
            let b = this.z;
            if (a != b) {
                this.r = a;
                this.vu("Brushes", b, this.z);
            }
        }
        get ad() {
            return this.u;
        }
        set ad(a) {
            let b = this.ad;
            if (a != b) {
                this.u = a;
                this.vu("Outlines", b, this.ad);
            }
        }
        get x() {
            return this.p;
        }
        set x(a) {
            let b = this.p;
            if (a != b) {
                this.p = a;
                this.vu("ActualBrushes", b, this.x);
            }
        }
        get y() {
            return this.q;
        }
        set y(a) {
            let b = this.q;
            if (a != b) {
                this.q = a;
                this.vu("ActualOutlines", b, this.y);
            }
        }
        get legend() {
            return this.cf;
        }
        set legend(a) {
            let b = this.legend;
            if (a != b) {
                this.cf = a;
                this.vu("Legend", b, this.legend);
            }
        }
        get_g3() {
            return this.f4;
        }
        set_g3(a) {
            let b = this.g3;
            if (a != b) {
                this.f4 = a;
                this.vu("IsHorizontalZoomEnabled", b, this.g3);
            }
        }
        get g3() {
            return this.get_g3();
        }
        set g3(a) {
            this.set_g3(a);
        }
        get_hb() {
            return this.f7;
        }
        set_hb(a) {
            let b = this.hb;
            if (a != b) {
                this.f7 = a;
                this.vu("IsVerticalZoomEnabled", b, this.hb);
            }
        }
        get hb() {
            return this.get_hb();
        }
        set hb(a) {
            this.set_hb(a);
        }
        get_hf() {
            return this.ga;
        }
        set_hf(a) {
            let b = this.hf;
            if (a != b) {
                this.ga = a;
                this.vu("ShouldDisplayMockData", b, this.hf);
            }
        }
        get hf() {
            return this.get_hf();
        }
        set hf(a) {
            this.set_hf(a);
        }
        get_hi() {
            return this.gc;
        }
        set_hi(a) {
            let b = this.hi;
            if (a != b) {
                this.gc = a;
                this.vu("ShouldUseSkeletonStyleForMockData", b, this.hi);
            }
        }
        get hi() {
            return this.get_hi();
        }
        set hi(a) {
            this.set_hi(a);
        }
        get_dg() {
            return this.df;
        }
        set_dg(a) {
            let b = this.dg;
            if (a != b) {
                this.df = a;
                this.vu("HighlightedValuesDisplayMode", enumGetBox(SeriesHighlightedValuesDisplayMode_$type, b), enumGetBox(SeriesHighlightedValuesDisplayMode_$type, this.dg));
            }
        }
        get dg() {
            return this.get_dg();
        }
        set dg(a) {
            this.set_dg(a);
        }
        get_g6() {
            return this.f6;
        }
        set_g6(a) {
            let b = this.g6;
            if (a != b) {
                this.f6 = a;
                this.vu("IsSeriesHighlightingEnabled", b, this.g6);
            }
        }
        get g6() {
            return this.get_g6();
        }
        set g6(a) {
            this.set_g6(a);
        }
        get_zw() {
            return this.zu;
        }
        set_zw(a) {
            let b = this.zw;
            if (a != b) {
                this.zu = a;
                this.vu("HighlightedLegendItemVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.zw));
            }
        }
        get zw() {
            return this.get_zw();
        }
        set zw(a) {
            this.set_zw(a);
        }
        get_zx() {
            return this.zv;
        }
        set_zx(a) {
            let b = this.zx;
            if (a != b) {
                this.zv = a;
                this.vu("LegendItemVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.zx));
            }
        }
        get zx() {
            return this.get_zx();
        }
        set zx(a) {
            this.set_zx(a);
        }
        get y5() {
            return this.y3;
        }
        set y5(a) {
            let b = this.y5;
            if (Rect.l_op_Inequality(a, b)) {
                this.y3 = a;
                this.vu("WindowRect", b, this.y5);
            }
        }
        get y4() {
            return this.dataChart != null ? this.dataChart.wk : Rect.empty;
        }
        get sz() {
            return this.mr;
        }
        set sz(a) {
            let b = this.sz;
            if (a != b) {
                this.mr = a;
                this.vu("Title", b, this.sz);
            }
        }
        get so() {
            return this.mp;
        }
        set so(a) {
            let b = this.so;
            if (a != b) {
                this.mp = a;
                this.vu("Subtitle", b, this.so);
            }
        }
        get w4() {
            return this.w2;
        }
        set w4(a) {
            let b = this.w4;
            if (b != a) {
                this.w2 = a;
                this.vu("TitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.w4));
            }
        }
        get w3() {
            return this.w1;
        }
        set w3(a) {
            let b = this.w3;
            if (b != a) {
                this.w1 = a;
                this.vu("SubtitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.w3));
            }
        }
        get ec() {
            return this.eb;
        }
        set ec(a) {
            let b = this.ec;
            if (a != b) {
                this.eb = a;
                this.vu("UnknownValuePlotting", enumGetBox(UnknownValuePlotting_$type, b), enumGetBox(UnknownValuePlotting_$type, this.ec));
            }
        }
        get_j5() {
            return this.it;
        }
        set_j5(a) {
            let b = this.j5;
            if (a != b) {
                this.it = a;
                this.vu("Resolution", b, this.j5);
            }
        }
        get j5() {
            return this.get_j5();
        }
        set j5(a) {
            this.set_j5(a);
        }
        get kb() {
            return this.iz;
        }
        set kb(a) {
            let b = this.kb;
            if (a != b) {
                this.iz = a;
                this.vu("Thickness", b, this.kb);
            }
        }
        get dm() {
            return this.dl;
        }
        set dm(a) {
            let b = this.dm;
            if (a != b) {
                this.dl = a;
                this.vu("OutlineMode", enumGetBox(SeriesOutlineMode_$type, b), enumGetBox(SeriesOutlineMode_$type, this.dm));
            }
        }
        get cz() {
            return this.cy;
        }
        set cz(a) {
            let b = this.cz;
            if (a != b) {
                this.cy = a;
                this.vu("MarkerOutlineMode", enumGetBox(MarkerOutlineMode_$type, b), enumGetBox(MarkerOutlineMode_$type, this.cz));
            }
        }
        get cx() {
            return this.cw;
        }
        set cx(a) {
            let b = this.cx;
            if (a != b) {
                this.cw = a;
                this.vu("MarkerFillMode", enumGetBox(MarkerFillMode_$type, b), enumGetBox(MarkerFillMode_$type, this.cx));
            }
        }
        get jy() {
            return this.il;
        }
        set jy(a) {
            let b = this.jy;
            if (a != b) {
                this.il = a;
                this.vu("MarkerFillOpacity", b, this.jy);
            }
        }
        get jz() {
            return this.im;
        }
        set jz(a) {
            let b = this.jz;
            if (a != b) {
                this.im = a;
                this.vu("MarkerThickness", b, this.jz);
            }
        }
        get c5() {
            return this.c4;
        }
        set c5(a) {
            let b = this.c5;
            if (a != b) {
                this.c4 = a;
                this.vu("MarkerTypes", b, this.c5);
            }
        }
        get cv() {
            return this.cu;
        }
        set cv(a) {
            let b = this.cv;
            if (a != b) {
                this.cu = a;
                this.vu("MarkerAutomaticBehavior", enumGetBox(MarkerAutomaticBehavior_$type, b), enumGetBox(MarkerAutomaticBehavior_$type, this.cv));
            }
        }
        get ab() {
            return this.s;
        }
        set ab(a) {
            let b = this.ab;
            if (a != b) {
                this.s = a;
                this.vu("MarkerBrushes", b, this.ab);
            }
        }
        get ac() {
            return this.t;
        }
        set ac(a) {
            let b = this.ac;
            if (!Base.equalsStatic(a, b)) {
                this.t = a;
                this.vu("MarkerOutlines", b, this.ac);
            }
        }
        get lh() {
            return this.k4;
        }
        set lh(a) {
            let b = this.k4;
            if (a != b) {
                this.k4 = a;
                this.vu("MarkerMaxCount", b, this.k4);
            }
        }
        get ji() {
            return this.h4;
        }
        set ji(a) {
            let b = this.ji;
            if (a != b) {
                this.h4 = a;
                this.vu("AreaFillOpacity", b, this.ji);
            }
        }
        get gg() {
            return this.fj;
        }
        set gg(a) {
            let b = this.fj;
            if (a != b) {
                this.fj = a;
                this.vu("AnimateSeriesWhenAxisRangeChanges", b, this.fj);
            }
        }
        get af() {
            return this.v;
        }
        set af(a) {
            let b = this.af;
            if (a != b) {
                this.v = a;
                this.vu("TrendLineBrushes", b, this.af);
            }
        }
        get trendLineType() {
            return this.ea;
        }
        set trendLineType(a) {
            let b = this.trendLineType;
            if (a != b) {
                this.ea = a;
                this.vu("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.trendLineType));
            }
        }
        get kh() {
            return this.i5;
        }
        set kh(a) {
            let b = this.kh;
            if (a != b) {
                this.i5 = a;
                this.vu("TrendLineThickness", b, this.kh);
            }
        }
        get gf() {
            return this.fi;
        }
        set gf(a) {
            let b = this.gf;
            if (a != b) {
                this.fi = a;
                this.vu("AlignsGridLinesToPixels", b, this.gf);
            }
        }
        get j2() {
            return this.iq;
        }
        set j2(a) {
            let b = this.iq;
            this.iq = a;
            if (a != b) {
                this.vu("PlotAreaMarginLeft", b, a);
            }
        }
        get j4() {
            return this.is;
        }
        set j4(a) {
            let b = this.is;
            this.is = a;
            if (a != b) {
                this.vu("PlotAreaMarginTop", b, a);
            }
        }
        get j3() {
            return this.ir;
        }
        set j3(a) {
            let b = this.ir;
            this.ir = a;
            if (a != b) {
                this.vu("PlotAreaMarginRight", b, a);
            }
        }
        get j1() {
            return this.ip;
        }
        set j1(a) {
            let b = this.ip;
            this.ip = a;
            if (a != b) {
                this.vu("PlotAreaMarginBottom", b, a);
            }
        }
        vt() {
        }
        get a9() {
            return this.a8;
        }
        set a9(a) {
            let b = this.a9;
            if (a != b) {
                this.a8 = a;
                this.vu("ComputedPlotAreaMarginMode", enumGetBox(ComputedPlotAreaMarginMode_$type, b), enumGetBox(ComputedPlotAreaMarginMode_$type, this.a9));
            }
        }
        ba() {
            return this.a9;
        }
        get dp() {
            return this.dn;
        }
        set dp(a) {
            let b = this.dp;
            if (a != b) {
                this.dn = a;
                this.vu("SeriesPlotAreaMarginHorizontalMode", enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, b), enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, this.dp));
            }
        }
        get dr() {
            return this.dq;
        }
        set dr(a) {
            let b = this.dr;
            if (a != b) {
                this.dq = a;
                this.vu("SeriesPlotAreaMarginVerticalMode", enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, b), enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, this.dr));
            }
        }
        get dk() {
            return this.dj;
        }
        set dk(a) {
            let b = this.dk;
            if (a != b) {
                this.dj = a;
                this.vu("HighlightingMode", enumGetBox(SeriesHighlightingMode_$type, b), enumGetBox(SeriesHighlightingMode_$type, this.dk));
            }
        }
        get di() {
            return this.dh;
        }
        set di(a) {
            let b = this.di;
            if (a != b) {
                this.dh = a;
                this.vu("HighlightingBehavior", enumGetBox(SeriesHighlightingBehavior_$type, b), enumGetBox(SeriesHighlightingBehavior_$type, this.di));
            }
        }
        get cn() {
            return this.cm;
        }
        set cn(a) {
            let b = this.cn;
            if (a != b) {
                this.cm = a;
                this.vu("LegendHighlightingMode", enumGetBox(LegendHighlightingMode_$type, b), enumGetBox(LegendHighlightingMode_$type, this.cn));
            }
        }
        get ct() {
            return this.cr;
        }
        set ct(a) {
            let b = this.ct;
            if (a != b) {
                this.cr = a;
                this.vu("LegendItemBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.ct));
            }
        }
        get cp() {
            return this.co;
        }
        set cp(a) {
            let b = this.cp;
            if (a != b) {
                this.co = a;
                this.vu("LegendItemBadgeMode", enumGetBox(LegendItemBadgeMode_$type, b), enumGetBox(LegendItemBadgeMode_$type, this.cp));
            }
        }
        get lk() {
            return this.k8;
        }
        set lk(a) {
            let b = this.lk;
            if (a != b) {
                this.k8 = a;
                this.vu("TrendLinePeriod", b, this.lk);
            }
        }
        get d9() {
            return this.d8;
        }
        set d9(a) {
            let b = this.d9;
            if (a != b) {
                this.d8 = a;
                this.vu("ToolTipType", enumGetBox(ToolTipType_$type, b), enumGetBox(ToolTipType_$type, this.d9));
            }
        }
        get crosshairsDisplayMode() {
            return this.bb;
        }
        set crosshairsDisplayMode(a) {
            let b = this.crosshairsDisplayMode;
            if (a != b) {
                this.bb = a;
                this.vu("CrosshairsDisplayMode", enumGetBox(CrosshairsDisplayMode_$type, b), enumGetBox(CrosshairsDisplayMode_$type, this.crosshairsDisplayMode));
            }
        }
        get gn() {
            return this.fs;
        }
        set gn(a) {
            let b = this.gn;
            if (a != b) {
                this.fs = a;
                this.vu("CrosshairsSnapToData", b, this.gn);
            }
        }
        get yc() {
            return this.xg;
        }
        set yc(a) {
            let b = this.yc;
            if (a != b) {
                this.xg = a;
                this.vu("CrosshairsLineVerticalStroke", b, this.yc);
            }
        }
        get jl() {
            return this.h7;
        }
        set jl(a) {
            let b = this.jl;
            if (a != b) {
                this.h7 = a;
                this.vu("CrosshairsLineThickness", b, this.jl);
            }
        }
        get yb() {
            return this.xf;
        }
        set yb(a) {
            let b = this.yb;
            if (a != b) {
                this.xf = a;
                this.vu("CrosshairsLineHorizontalStroke", b, this.yb);
            }
        }
        get crosshairsAnnotationEnabled() {
            return this.fr;
        }
        set crosshairsAnnotationEnabled(a) {
            let b = this.crosshairsAnnotationEnabled;
            if (a != b) {
                this.fr = a;
                this.vu("CrosshairsAnnotationEnabled", b, this.crosshairsAnnotationEnabled);
            }
        }
        get x7() {
            return this.xb;
        }
        set x7(a) {
            let b = this.x7;
            if (a != b) {
                this.xb = a;
                this.vu("CrosshairsAnnotationXAxisBackground", b, this.x7);
            }
        }
        get x9() {
            return this.xd;
        }
        set x9(a) {
            let b = this.x9;
            if (a != b) {
                this.xd = a;
                this.vu("CrosshairsAnnotationYAxisBackground", b, this.x9);
            }
        }
        get x8() {
            return this.xc;
        }
        set x8(a) {
            let b = this.x8;
            if (a != b) {
                this.xc = a;
                this.vu("CrosshairsAnnotationXAxisTextColor", b, this.x8);
            }
        }
        get ya() {
            return this.xe;
        }
        set ya(a) {
            let b = this.ya;
            if (a != b) {
                this.xe = a;
                this.vu("CrosshairsAnnotationYAxisTextColor", b, this.ya);
            }
        }
        get la() {
            return this.kx;
        }
        set la(a) {
            let b = this.la;
            if (a != b) {
                this.kx = a;
                this.vu("CrosshairsAnnotationXAxisPrecision", b, this.la);
            }
        }
        get lb() {
            return this.ky;
        }
        set lb(a) {
            let b = this.lb;
            if (a != b) {
                this.ky = a;
                this.vu("CrosshairsAnnotationYAxisPrecision", b, this.lb);
            }
        }
        get shouldAvoidAxisAnnotationCollisions() {
            return this.f9;
        }
        set shouldAvoidAxisAnnotationCollisions(a) {
            let b = this.shouldAvoidAxisAnnotationCollisions;
            if (a != b) {
                this.f9 = a;
                this.vu("ShouldAvoidAxisAnnotationCollisions", b, this.shouldAvoidAxisAnnotationCollisions);
            }
        }
        get hg() {
            return this.gb;
        }
        set hg(a) {
            let b = this.gb;
            if (a != b) {
                this.gb = a;
                this.vu("ShouldPanOnMaximumZoom", b, this.gb);
            }
        }
        get finalValueAnnotationsVisible() {
            return this.f0;
        }
        set finalValueAnnotationsVisible(a) {
            let b = this.finalValueAnnotationsVisible;
            if (a != b) {
                this.f0 = a;
                this.vu("FinalValueAnnotationsVisible", b, this.finalValueAnnotationsVisible);
            }
        }
        get yn() {
            return this.xr;
        }
        set yn(a) {
            let b = this.yn;
            if (a != b) {
                this.xr = a;
                this.vu("FinalValueAnnotationsBackground", b, this.yn);
            }
        }
        get yo() {
            return this.xs;
        }
        set yo(a) {
            let b = this.yo;
            if (a != b) {
                this.xs = a;
                this.vu("FinalValueAnnotationsTextColor", b, this.yo);
            }
        }
        get le() {
            return this.k1;
        }
        set le(a) {
            let b = this.le;
            if (a != b) {
                this.k1 = a;
                this.vu("FinalValueAnnotationsPrecision", b, this.le);
            }
        }
        get autoCalloutsVisible() {
            return this.fl;
        }
        set autoCalloutsVisible(a) {
            let b = this.autoCalloutsVisible;
            if (a != b) {
                this.fl = a;
                this.vu("AutoCalloutsVisible", b, this.autoCalloutsVisible);
            }
        }
        get gm() {
            return this.fq;
        }
        set gm(a) {
            let b = this.gm;
            if (a != b) {
                this.fq = a;
                this.vu("CalloutsVisible", b, this.gm);
            }
        }
        get gi() {
            return this.fm;
        }
        set gi(a) {
            let b = this.gi;
            if (a != b) {
                this.fm = a;
                this.vu("CalloutStyleUpdatingEventEnabled", b, this.gi);
            }
        }
        get hk() {
            return this.gd;
        }
        set hk(a) {
            let b = this.hk;
            if (a != b) {
                this.gd = a;
                this.vu("UseValueForAutoCalloutLabels", b, this.hk);
            }
        }
        get ah() {
            return this.ag;
        }
        set ah(a) {
            let b = this.ah;
            if (a != b) {
                this.ag = a;
                this.vu("CalloutCollisionMode", enumGetBox(CalloutCollisionMode_$type, b), enumGetBox(CalloutCollisionMode_$type, this.ah));
            }
        }
        get gk() {
            return this.fo;
        }
        set gk(a) {
            let b = this.gk;
            if (a != b) {
                this.fo = a;
                this.vu("CalloutsUseItemColorForFill", b, this.gk);
            }
        }
        get gl() {
            return this.fp;
        }
        set gl(a) {
            let b = this.gl;
            if (a != b) {
                this.fp = a;
                this.vu("CalloutsUseItemColorForOutline", b, this.gl);
            }
        }
        get gj() {
            return this.fn;
        }
        set gj(a) {
            let b = this.gj;
            if (a != b) {
                this.fn = a;
                this.vu("CalloutsUseAutoContrastingLabelColors", b, this.gj);
            }
        }
        get jk() {
            return this.h6;
        }
        set jk(a) {
            let b = this.jk;
            if (a != b) {
                this.h6 = a;
                this.vu("CalloutsStrokeThickness", b, this.jk);
            }
        }
        get x1() {
            return this.w5;
        }
        set x1(a) {
            let b = this.x1;
            if (a != b) {
                this.w5 = a;
                this.vu("CalloutsBackground", b, this.x1);
            }
        }
        get x5() {
            return this.w9;
        }
        set x5(a) {
            let b = this.x5;
            if (a != b) {
                this.w9 = a;
                this.vu("CalloutsOutline", b, this.x5);
            }
        }
        get x6() {
            return this.xa;
        }
        set x6(a) {
            let b = this.x6;
            if (a != b) {
                this.xa = a;
                this.vu("CalloutsTextColor", b, this.x6);
            }
        }
        get x4() {
            return this.w8;
        }
        set x4(a) {
            let b = this.x4;
            if (a != b) {
                this.w8 = a;
                this.vu("CalloutsLightTextColor", b, this.x4);
            }
        }
        get x2() {
            return this.w6;
        }
        set x2(a) {
            let b = this.x2;
            if (a != b) {
                this.w6 = a;
                this.vu("CalloutsDarkTextColor", b, this.x2);
            }
        }
        get x3() {
            return this.w7;
        }
        set x3(a) {
            let b = this.x3;
            if (a != b) {
                this.w7 = a;
                this.vu("CalloutsLeaderBrush", b, this.x3);
            }
        }
        get k9() {
            return this.kw;
        }
        set k9(a) {
            let b = this.k9;
            if (a != b) {
                this.kw = a;
                this.vu("CalloutsAutoLabelPrecision", b, this.k9);
            }
        }
        get calloutsItemsSource() {
            return this.hz;
        }
        set calloutsItemsSource(a) {
            let b = this.calloutsItemsSource;
            if (a != b) {
                this.hz = a;
                this.vu("CalloutsItemsSource", b, this.calloutsItemsSource);
            }
        }
        get aj() {
            return this.ai;
        }
        set aj(a) {
            let b = this.aj;
            if (a != b) {
                this.ai = a;
                this.vu("CalloutsAllowedPositions", b, this.aj);
            }
        }
        get no() {
            return this.l7;
        }
        set no(a) {
            let b = this.no;
            if (a != b) {
                this.l7 = a;
                this.vu("CalloutsXMemberPath", b, this.no);
            }
        }
        get nq() {
            return this.l8;
        }
        set nq(a) {
            let b = this.nq;
            if (a != b) {
                this.l8 = a;
                this.vu("CalloutsYMemberPath", b, this.nq);
            }
        }
        get nb() {
            return this.l6;
        }
        set nb(a) {
            let b = this.nb;
            if (a != b) {
                this.l6 = a;
                this.vu("CalloutsLabelMemberPath", b, this.nb);
            }
        }
        get m7() {
            return this.l5;
        }
        set m7(a) {
            let b = this.m7;
            if (a != b) {
                this.l5 = a;
                this.vu("CalloutsContentMemberPath", b, this.m7);
            }
        }
        get e4() {
            return this.et;
        }
        set e4(a) {
            let b = this.e4;
            if (a != b) {
                this.et = a;
                this.vu("CalloutsTextStyle", b, this.e4);
            }
        }
        get valueLines() {
            return this.ed;
        }
        set valueLines(a) {
            let b = this.ed;
            if (a != b) {
                this.ed = a;
                this.vu("ValueLines", b, this.ed);
            }
        }
        get valueLinesBrushes() {
            return this.w;
        }
        set valueLinesBrushes(a) {
            let b = this.w;
            if (a != b) {
                this.w = a;
                this.vu("ValueLinesBrushes", b, this.w);
            }
        }
        get ki() {
            return this.i6;
        }
        set ki(a) {
            let b = this.i6;
            if (a != b) {
                this.i6 = a;
                this.vu("ValueLinesThickness", b, this.i6);
            }
        }
        get_he() {
            return this.f8;
        }
        set_he(a) {
            let b = this.f8;
            if (a != b) {
                this.f8 = a;
                this.vu("SeriesValueLayerUseLegend", b, this.f8);
            }
        }
        get he() {
            return this.get_he();
        }
        set he(a) {
            this.set_he(a);
        }
        get d2() {
            return this.d0;
        }
        set d2(a) {
            let b = this.d0;
            this.d0 = a;
            if (b != this.d0) {
                this.vu("HorizontalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.d0));
            }
        }
        get d3() {
            return this.d1;
        }
        set d3(a) {
            let b = this.d1;
            this.d1 = a;
            if (b != this.d1) {
                this.vu("VerticalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.d1));
            }
        }
        get dz() {
            return this.dy;
        }
        set dz(a) {
            let b = this.dy;
            this.dy = a;
            if (b != this.dy) {
                this.vu("HorizontalViewScrollbarPosition", enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, b), enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, this.dy));
            }
        }
        get d7() {
            return this.d6;
        }
        set d7(a) {
            let b = this.d6;
            this.d6 = a;
            if (b != this.d6) {
                this.vu("VerticalViewScrollbarPosition", enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, b), enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, this.d6));
            }
        }
        get yu() {
            return this.xu;
        }
        set yu(a) {
            let b = this.xu;
            this.xu = a;
            if (b != this.xu) {
                this.vu("HorizontalViewScrollbarFill", b, this.xu);
            }
        }
        get yv() {
            return this.xv;
        }
        set yv(a) {
            let b = this.xv;
            this.xv = a;
            if (b != this.xv) {
                this.vu("HorizontalViewScrollbarOutline", b, this.xv);
            }
        }
        get ju() {
            return this.ih;
        }
        set ju(a) {
            let b = this.ih;
            this.ih = a;
            if (b != this.ih) {
                this.vu("HorizontalViewScrollbarStrokeThickness", b, this.ih);
            }
        }
        get jt() {
            return this.ig;
        }
        set jt(a) {
            let b = this.ig;
            this.ig = a;
            if (b != this.ig) {
                this.vu("HorizontalViewScrollbarMaxOpacity", b, this.ig);
            }
        }
        get jq() {
            return this.ic;
        }
        set jq(a) {
            let b = this.ic;
            this.ic = a;
            if (b != this.ic) {
                this.vu("HorizontalViewScrollbarCornerRadius", b, this.ic);
            }
        }
        get jr() {
            return this.id;
        }
        set jr(a) {
            let b = this.id;
            this.id = a;
            if (b != this.id) {
                this.vu("HorizontalViewScrollbarHeight", b, this.id);
            }
        }
        get js() {
            return this.ie;
        }
        set js(a) {
            let b = this.ie;
            this.ie = a;
            if (b != this.ie) {
                this.vu("HorizontalViewScrollbarInset", b, this.ie);
            }
        }
        get jw() {
            return this.ij;
        }
        set jw(a) {
            let b = this.ij;
            this.ij = a;
            if (b != this.ij) {
                this.vu("HorizontalViewScrollbarTrackStartInset", b, this.ij);
            }
        }
        get jv() {
            return this.ii;
        }
        set jv(a) {
            let b = this.ii;
            this.ii = a;
            if (b != this.ii) {
                this.vu("HorizontalViewScrollbarTrackEndInset", b, this.ii);
            }
        }
        get gw() {
            return this.f1;
        }
        set gw(a) {
            let b = this.f1;
            this.f1 = a;
            if (b != this.f1) {
                this.vu(DomainChart.q6, b, this.f1);
            }
        }
        get y0() {
            return this.xz;
        }
        set y0(a) {
            let b = this.xz;
            this.xz = a;
            if (b != this.xz) {
                this.vu("VerticalViewScrollbarFill", b, this.xz);
            }
        }
        get y1() {
            return this.x0;
        }
        set y1(a) {
            let b = this.x0;
            this.x0 = a;
            if (b != this.x0) {
                this.vu("VerticalViewScrollbarOutline", b, this.x0);
            }
        }
        get km() {
            return this.ja;
        }
        set km(a) {
            let b = this.ja;
            this.ja = a;
            if (b != this.ja) {
                this.vu("VerticalViewScrollbarStrokeThickness", b, this.ja);
            }
        }
        get kl() {
            return this.i9;
        }
        set kl(a) {
            let b = this.i9;
            this.i9 = a;
            if (b != this.i9) {
                this.vu("VerticalViewScrollbarMaxOpacity", b, this.i9);
            }
        }
        get kj() {
            return this.i7;
        }
        set kj(a) {
            let b = this.i7;
            this.i7 = a;
            if (b != this.i7) {
                this.vu("VerticalViewScrollbarCornerRadius", b, this.i7);
            }
        }
        get kp() {
            return this.jd;
        }
        set kp(a) {
            let b = this.jd;
            this.jd = a;
            if (b != this.jd) {
                this.vu("VerticalViewScrollbarWidth", b, this.jd);
            }
        }
        get kk() {
            return this.i8;
        }
        set kk(a) {
            let b = this.i8;
            this.i8 = a;
            if (b != this.i8) {
                this.vu("VerticalViewScrollbarInset", b, this.i8);
            }
        }
        get ko() {
            return this.jc;
        }
        set ko(a) {
            let b = this.jc;
            this.jc = a;
            if (b != this.jc) {
                this.vu("VerticalViewScrollbarTrackStartInset", b, this.jc);
            }
        }
        get kn() {
            return this.jb;
        }
        set kn(a) {
            let b = this.jb;
            this.jb = a;
            if (b != this.jb) {
                this.vu("VerticalViewScrollbarTrackEndInset", b, this.jb);
            }
        }
        get hl() {
            return this.ge;
        }
        set hl(a) {
            let b = this.ge;
            this.ge = a;
            if (b != this.ge) {
                this.vu(DomainChart.tw, b, this.ge);
            }
        }
        get kr() {
            return this.jf;
        }
        set kr(a) {
            let b = this.jf;
            this.jf = a;
            if (b != this.jf) {
                this.vu("WindowRectMinWidth", b, this.jf);
            }
        }
        get kq() {
            return this.je;
        }
        set kq(a) {
            let b = this.je;
            this.je = a;
            if (b != this.je) {
                this.vu("WindowRectMinHeight", b, this.je);
            }
        }
        get kt() {
            return this.jh;
        }
        set kt(a) {
            let b = this.jh;
            this.jh = a;
            if (b != this.jh) {
                this.vu("WindowSizeMinWidth", b, this.jh);
            }
        }
        get ks() {
            return this.jg;
        }
        set ks(a) {
            let b = this.jg;
            this.jg = a;
            if (b != this.jg) {
                this.vu("WindowSizeMinHeight", b, this.jg);
            }
        }
    }
    DomainChart.$t = /*@__PURE__*/ markType(DomainChart, 'DomainChart', Base.$, [INotifyPropertyChanged_$type, IDataLegendTarget_$type, IToolbarTarget_$type, IDomainChartLike_$type]);
    DomainChart.l4 = /*@__PURE__*/ new Random(0);
    DomainChart.l3 = /*@__PURE__*/ new Random(0);
    DomainChart.o6 = "DataToolTipShouldUpdateWhenSeriesDataChanges";
    DomainChart.q6 = "HorizontalViewScrollbarShouldAddAutoTrackInsets";
    DomainChart.tw = "VerticalViewScrollbarShouldAddAutoTrackInsets";
    return DomainChart;
})();
