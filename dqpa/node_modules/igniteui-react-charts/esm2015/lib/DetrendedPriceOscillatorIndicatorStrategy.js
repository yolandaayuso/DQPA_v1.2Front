/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { String_$type, markType, getEnumerator } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { intDivide } from "igniteui-react-core";
/**
 * @hidden
 */
export let DetrendedPriceOscillatorIndicatorStrategy = /*@__PURE__*/ (() => {
    class DetrendedPriceOscillatorIndicatorStrategy extends IndicatorCalculationStrategy {
        b(a, b) {
            let c = new List$1(String_$type, 0);
            c.add("CloseColumn");
            c.o(b.c.c);
            return c;
        }
        a(a, b) {
            let c = a.period;
            let d = a.closeColumn;
            let e = a.indicatorColumn;
            let f = getEnumerator(b.c.b(d, c));
            let g = (intDivide(c, 2)) + 1;
            let h = new Array(g);
            for (let i = 0; i < g; i++) {
                h[i] = 0;
            }
            for (let j = 1; j < Math.min(g + 1, e.count); ++j) {
                let k = j % g;
                e.item(j, 0);
                f.moveNext();
                h[k] = f.current;
            }
            for (let l = g + 1; l < e.count; l++) {
                let m = l % g;
                e.item(l, d.item(l) - h[m]);
                f.moveNext();
                h[m] = f.current;
            }
            return true;
        }
    }
    DetrendedPriceOscillatorIndicatorStrategy.$t = /*@__PURE__*/ markType(DetrendedPriceOscillatorIndicatorStrategy, 'DetrendedPriceOscillatorIndicatorStrategy', IndicatorCalculationStrategy.$);
    return DetrendedPriceOscillatorIndicatorStrategy;
})();
