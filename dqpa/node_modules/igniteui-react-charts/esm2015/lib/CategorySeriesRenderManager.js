/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesRenderManager } from "./SeriesRenderManager";
import { AssigningCategoryMarkerStyleEventArgs } from "./AssigningCategoryMarkerStyleEventArgs";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { markType } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
/**
 * @hidden
 */
export let CategorySeriesRenderManager = /*@__PURE__*/ (() => {
    class CategorySeriesRenderManager extends SeriesRenderManager {
        constructor() {
            super(...arguments);
            this.az = 0;
            this.a0 = 0;
            this.ax = null;
            this.ay = null;
        }
        c() {
            this.ax = new AssigningCategoryMarkerStyleEventArgs();
            return this.ax;
        }
        a() {
            this.ay = new AssigningCategoryStyleEventArgs();
            return this.ay;
        }
        a1(a, b, c, d, e) {
            this.az = d;
            this.a0 = e;
            this.w(a, b, c);
        }
        a2(a, b, c, d, e) {
            this.az = d;
            this.a0 = e;
            this.x(a, b, c);
        }
        aw(a, b) {
            let c = this.az;
            let d = Math.min(b * c, a - 1);
            let e = Math.min(d + c - 1, a - 1);
            let f = new Array(2);
            f[0] = Math.min(d + this.a0 * c, a - 1);
            f[1] = Math.min(e + this.a0 * c, a - 1);
            return f;
        }
        a3(a, b, c, d, e, f, g, h, i, j) {
            if (d == -1) {
                if (b) {
                    a.e = true;
                    a.j = f.f4();
                    a.i = f.f3();
                }
                else {
                    a.e = false;
                    a.z = 0;
                    a.y = e - 1;
                }
            }
            else {
                if (b) {
                    let longStart_ = truncate(f.eo(c._inner[d][0], g));
                    let longEnd_ = longStart_;
                    if (d + 1 < c.count) {
                        longEnd_ = truncate(f.eo(c._inner[d + 1][0], g));
                    }
                    a.e = true;
                    a.j = (new Date(longStart_));
                    a.i = (new Date(longEnd_));
                    if (f.ch) {
                        let k = a.i;
                        a.i = a.j;
                        a.j = k;
                    }
                    if (i) {
                        a.z = j;
                        a.y = j;
                    }
                    else {
                        a.z = j;
                        a.y = j;
                    }
                }
                else {
                    if (i) {
                        let l = this.aw(e, d);
                        a.z = j;
                        a.y = j;
                    }
                    else {
                        let m = this.aw(e, d);
                        a.e = false;
                        a.z = m[0];
                        a.y = m[1];
                    }
                }
            }
        }
    }
    CategorySeriesRenderManager.$t = /*@__PURE__*/ markType(CategorySeriesRenderManager, 'CategorySeriesRenderManager', SeriesRenderManager.$);
    return CategorySeriesRenderManager;
})();
