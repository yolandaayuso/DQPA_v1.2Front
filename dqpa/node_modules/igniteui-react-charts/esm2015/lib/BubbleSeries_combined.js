/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries_$type } from "igniteui-react-core";
import { ISupportsSizeScale_$type } from "./ISupportsSizeScale";
import { ISupportsFillScale_$type } from "./ISupportsFillScale";
import { Base, typeCast, Point_$type, fromEnum, markType, markDep, enumGetBox, runOn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { ActualRange } from "./ActualRange";
import { DependencyProperty } from "igniteui-react-core";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend_$type } from "igniteui-react-core";
import { ValueBrushScale } from "./ValueBrushScale";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { ScalerParams } from "./ScalerParams";
import { Dictionary$2 } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { BubbleMarkerManager } from "./BubbleMarkerManager";
import { IChartItemLegend_$type } from "igniteui-react-core";
import { IChartScaleLegend_$type } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { ChartSelection } from "./ChartSelection";
import { FastItemsSource } from "igniteui-react-core";
import { FastItemColumn } from "igniteui-react-core";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { BrushSelectionMode_$type } from "./BrushSelectionMode";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Defaults } from "./Defaults";
/**
 * @hidden
 */
export let BubbleSeries = /*@__PURE__*/ (() => {
    class BubbleSeries extends ScatterBase {
        bj() {
            return new BubbleSeries();
        }
        get_ei() {
            return true;
        }
        cs() {
            return new BubbleSeriesView(this);
        }
        q1(a) {
            super.q1(a);
            this.acq = a;
        }
        jl() {
            return 0.7;
        }
        w1() {
            if (this.w0 == 0) {
                return 2;
            }
            return super.w1();
        }
        constructor() {
            super();
            this.aeh = null;
            this.aeg = null;
            this.ac4 = null;
            this.acv = null;
            this.acu = null;
            this.act = null;
            this.acr = null;
            this.ab = BubbleSeries.$;
            this.y2 = new ScatterFrame();
            this.y4 = new ScatterFrame();
            this.y0 = new ScatterFrame();
        }
        isAttachedTo(a) {
            return this.a5 == a;
        }
        eh() {
            return true;
        }
        p2(a) {
            super.p2(a);
            if (this.acz != null && this.ac4 != null && this.ac4.count > 0) {
                for (let b = 0; b < this.ac4.count; b++) {
                    a(this.ac4._inner[b]);
                }
            }
        }
        get acy() {
            return this.ac0;
        }
        get_isColoredItemwise() {
            return this.acw != null && this.acw.count > 0;
        }
        aef(a) {
            let b = typeCast(CustomPaletteBrushScale.$, this.acp);
            let c = typeCast(ValueBrushScale.$, this.acp);
            let d = this.acp;
            if (b != null && this.dn != null) {
                return b.getBrush1(a, this.dn.count);
            }
            else if (c != null) {
                return c.getBrushByIndex(a, this.acw);
            }
            else if (d != null) {
                return d.getBrush(a);
            }
            return null;
        }
        get legendReady() {
            return this.ac0 != null && this.ac0.count != 0;
        }
        get minScaleText() {
            let a = this.aco(this.acs).b;
            return (Math.round(a * 1000) / 1000).toString();
        }
        get maxScaleText() {
            let a = this.aco(this.acs).a;
            return (Math.round(a * 1000) / 1000).toString();
        }
        forScaleColors(a) {
            for (let b = 0; b < this.ac0.count; b++) {
                if (this.acp == null || !this.acp.isReady) {
                    return false;
                }
                let c = NaN;
                if (this.acw != null) {
                    c = (this.acw.item(b) - this.acw.minimum) / (this.acw.maximum - this.acw.minimum);
                }
                let d = (this.ac0.item(b) - this.ac0.minimum) / (this.ac0.maximum - this.ac0.minimum);
                if (isNaN_(c)) {
                    c = 0;
                }
                if (isNaN_(d)) {
                    d = c;
                }
                let e = this.yh;
                let f = this.aef(b);
                let g = f != null ? f : e;
                a(g, d);
            }
            return true;
        }
        kq(a, b) {
            let c = this.nd(b);
            if (c == BubbleSeries.$$p[5]) {
                return this.kr(a, b, this.adj);
            }
            if (c == BubbleSeries.$$p[11]) {
                return this.kr(a, b, this.adt);
            }
            if (c == ScatterBase.$$p[12]) {
                return this.kr(a, b, this.aat);
            }
            if (c == ScatterBase.$$p[16]) {
                return this.kr(a, b, this.aa1);
            }
            if (c == BubbleSeries.$$p[2]) {
                return this.kr(a, b, this.ade);
            }
            return super.kq(a, b);
        }
        md(a) {
            let b = this.nd(a);
            if (b == BubbleSeries.$$p[5]) {
                return this.adj;
            }
            if (b == BubbleSeries.$$p[11]) {
                return this.adt;
            }
            if (b == ScatterBase.$$p[12]) {
                return this.aat;
            }
            if (b == ScatterBase.$$p[16]) {
                return this.aa1;
            }
            if (b == BubbleSeries.$$p[2]) {
                return this.ade;
            }
            return super.md(a);
        }
        get ac0() {
            return this.acv;
        }
        set ac0(a) {
            if (this.acv != a) {
                let b = this.ac0;
                this.acv = a;
                this.raisePropertyChanged("RadiusColumn", b, this.ac0);
            }
        }
        get acz() {
            return this.acu;
        }
        set acz(a) {
            if (this.acu != a) {
                let b = this.acz;
                this.acu = a;
                this.raisePropertyChanged("LabelColumn", b, this.acz);
            }
        }
        get acw() {
            return this.act;
        }
        set acw(a) {
            if (this.act != a) {
                let b = this.acw;
                this.act = a;
                this.raisePropertyChanged("FillColumn", b, this.acw);
            }
        }
        aa4(a, b, c, d, e) {
            if (c <= this.z9) {
                b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
            }
            let f = this.z9;
            let g = this.dn;
            let h;
            let i;
            let j = this.getEffectiveViewport1(a);
            let k = new ScalerParams(0, d, e, this.yw.d, j);
            let l = new ScalerParams(0, d, e, this.yw.e, j);
            let m = false;
            let n = 0;
            if (this.db != null) {
                if (this.db.f4()) {
                    let o = this.db.m4(d, k);
                    m = o.c;
                    n = o.d;
                }
            }
            for (let p = 0; p < c; p++) {
                h = this.zh.item(p);
                i = this.zi.item(p);
                let q = { $type: Point_$type, x: this.yw.a.el(h, k), y: this.yw.b.el(i, l) };
                if (m) {
                    if (q.x < e.left || q.x > e.right) {
                        if (q.x + n >= e.left && q.x + n <= e.right) {
                            q = { $type: Point_$type, x: q.x + n, y: i };
                        }
                    }
                }
                if (!isInfinity(q.x) && !isInfinity(q.y)) {
                    let r = g.item(p);
                    if (c <= f) {
                        if (!b.g.containsKey(r)) {
                            let s = { $type: Point_$type, x: h, y: i };
                            b.g.addItem(r, ((() => {
                                let $ret = new OwnedPoint();
                                $ret.a = r;
                                $ret.b = s;
                                $ret.c = q;
                                return $ret;
                            })()));
                        }
                    }
                }
            }
        }
        abf(a, b) {
            let c = typeCast(BubbleSeriesView.$, b);
            let d = c.c0;
            d.m = this.ac0;
            super.abf(a, b);
            let e = Math.min(this.zh != null ? this.zh.count : 0, this.zi != null ? this.zi.count : 0);
            if (e < 1) {
                return;
            }
            c.dm();
            c.dn();
        }
        ady() {
            if (this.db == null) {
                return;
            }
            if (this.a5 == null) {
                return;
            }
            if (this.a5.isItemwise) {
                let a = this.a5;
                this.a5.clearLegendItemsForSeries(this);
                this.adx();
                a.renderItemwiseContent(this);
            }
            if (this.a5.isScale) {
                let b = this.a5;
                b.restoreOriginalState();
                b.initializeLegend(this);
            }
        }
        static ac5(a, b, c, d, e) {
            if (e <= a || isNaN_(e) || isInfinity(e)) {
                return c;
            }
            if (e >= b) {
                return d;
            }
            let f = c + ((d - c) / (b - a)) * (e - a);
            return f;
        }
        static ac6(a, b, c, d, logBase_, e) {
            let f = logBase(e, logBase_);
            let g = logBase(a, logBase_);
            let h = logBase(b, logBase_);
            return BubbleSeries.ac5(g, h, c, d, f);
        }
        he(a, b, c) {
            let d = super.he(a, b, c);
            if (this.ac0 == null || this.dn == null || this.ac0.count == 0 || this.dn.count != this.ac0.count) {
                d = false;
            }
            return d;
        }
        zr(a, b) {
            if (b != 3) {
                return true;
            }
            if (a == null) {
                return true;
            }
            if (this.aat == a || this.aa1 == a || this.adt == a) {
                return true;
            }
            return false;
        }
        adx() {
            let a = typeCast(IChartLegend_$type, this.a5);
            if (a == null || this.dn == null) {
                return;
            }
            this.ac4 = new List$1(UIElement.$, 0);
            let b = typeCast(CustomPaletteBrushScale.$, this.acp);
            let c = typeCast(ValueBrushScale.$, this.acp);
            let d = this.acp;
            let e = this.acn();
            let f = e.b;
            let g = e.a;
            let h = this.dn;
            for (let i = 0; i < h.count; i++) {
                let j = null;
                if (c != null && this.acw != null) {
                    let k = this.acw.item(i);
                    j = c.getBrushByRange(k, f, g);
                }
                else if (b != null) {
                    j = b.getBrush1(i, h.count);
                }
                else if (d != null) {
                    j = d.getBrush(i);
                }
                let l = new ContentControl();
                let m = this.acz != null && this.acz.item(i) != null ? this.acz.item(i).toString() : "";
                l.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = h.item(i);
                    $ret.itemBrush = j;
                    $ret.itemLabel = m;
                    $ret.legendLabel = m;
                    return $ret;
                })());
                let n = this.sx;
                if (n == null) {
                    n = this.cv.bn(this.c0);
                }
                l.ah = n;
                this.ac4.add(l);
            }
        }
        pb(a, b, c, d) {
            super.pb(a, b, c, d);
            if (this.acs != null) {
                this.acs.aa();
            }
            if (this.acp != null) {
                this.acp.x();
            }
            this.ady();
        }
        qd() {
            super.qd();
            this.ady();
        }
        qk() {
            super.qk();
            this.ady();
        }
        q9(a, b, c, d) {
            super.q9(a, b, c, d);
            switch (b) {
                case ScatterBase.$$p[10]:
                case ScatterBase.$$p[14]:
                case ScatterBase.$$p[11]:
                case ScatterBase.$$p[15]:
                case BubbleSeries.$$p[9]:
                case BubbleSeries.$$p[10]:
                    this.qf();
                    break;
                case "FastItemsSource":
                    if (this.acs != null) {
                        this.acs.aa();
                    }
                    if (this.acp != null) {
                        this.acp.x();
                    }
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.ac0);
                        c.deregisterColumn(this.acw);
                        c.deregisterColumn(this.acz);
                        this.ac0 = null;
                        this.acw = null;
                        this.acz = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.ac0 = this.dk(this.adt);
                        if (!stringIsNullOrEmpty(this.ade)) {
                            this.acw = this.dk(this.ade);
                        }
                        this.acz = this.dm(this.adj);
                    }
                    this.rr(false);
                    this.ady();
                    break;
                case BubbleSeries.$$p[11]:
                    if (this.acs != null) {
                        this.acs.aa();
                    }
                    if (this.dn != null) {
                        this.dn.deregisterColumn(this.ac0);
                        this.ac0 = this.dk(this.adt);
                        this.ady();
                    }
                    break;
                case "RadiusColumn":
                    if (this.acs != null) {
                        this.acs.aa();
                    }
                    this.yx.c2.g$i();
                    this.rr(this.gg && this.d7);
                    this.qm();
                    break;
                case BubbleSeries.$$p[12]:
                    if (c != null) {
                        c.l.remove(this);
                        c.aa();
                    }
                    if (d != null) {
                        d.l.add(this);
                        d.aa();
                    }
                    this.rr(false);
                    this.ql();
                    break;
                case BubbleSeries.$$p[13]:
                    this.rr(false);
                    this.ql();
                    break;
                case "DiscreteLegendItemTemplate":
                    this.ady();
                    break;
                case BubbleSeries.$$p[3]:
                    if (c != null) {
                        c.o.remove(this);
                        c.x();
                    }
                    if (d != null) {
                        d.o.add(this);
                        d.x();
                    }
                    this.rr(false);
                    this.ady();
                    this.ql();
                    break;
                case BubbleSeries.$$p[4]:
                case BubbleSeries.$$p[8]:
                case BubbleSeries.$$p[7]:
                case BubbleSeries.$$p[6]:
                    this.rr(false);
                    this.ady();
                    this.ql();
                    break;
                case "FillColumn":
                    this.rr(this.gg && this.d7);
                    this.ql();
                    break;
                case BubbleSeries.$$p[2]:
                    if (this.acp != null) {
                        this.acp.x();
                    }
                    if (this.dn != null) {
                        this.dn.deregisterColumn(this.acw);
                        this.acw = this.dk(this.ade);
                        this.ady();
                    }
                    break;
                case BubbleSeries.$$p[5]:
                    if (this.dn != null) {
                        this.dn.deregisterColumn(this.acz);
                        this.acz = this.dm(this.adj);
                        this.ady();
                    }
                    break;
                case "ActualLegend":
                    let e = typeCast(IChartLegend_$type, c);
                    if (e != null && e.isItemwise) {
                        let f = typeCast(IChartItemLegend_$type, e);
                        f.clearLegendItemsForSeries(this);
                    }
                    if (e != null && e.isScale) {
                        let g = typeCast(IChartScaleLegend_$type, e);
                        let h = true;
                        let i = null;
                        if (this.db != null) {
                            for (let j of fromEnum(this.db.series)) {
                                if (j.legend == g) {
                                    i = j;
                                    h = false;
                                }
                            }
                        }
                        if (h) {
                            g.restoreOriginalState();
                        }
                        else {
                            g.initializeLegend(typeCast(IScaleLegendSeries_$type, i));
                        }
                    }
                    this.ady();
                    break;
                case "SeriesViewer":
                    this.ady();
                    break;
            }
        }
        updateSizeScaleGlobals() {
            let a = new ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.ac0 != null) {
                a.b = this.ac0.minimum;
                a.a = this.ac0.maximum;
            }
            if (this.acs != null) {
                this.acs.ab(a.b, a.a);
            }
        }
        updateFillScaleGlobals() {
            let a = new ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.acw != null) {
                a.b = this.acw.minimum;
                a.a = this.acw.maximum;
            }
            if (this.acp != null) {
                this.acp.z(a.b, a.a);
            }
        }
        aco(a) {
            let b = new ActualRange();
            b.b = NaN;
            b.a = NaN;
            if (this.ac0 != null) {
                b.b = this.ac0.minimum;
                b.a = this.ac0.maximum;
            }
            if (a != null) {
                a.x();
                if (this.ac3) {
                    b.b = a.globalMinimum;
                    b.a = a.globalMaximum;
                }
            }
            return b;
        }
        acn() {
            let a = new ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.acw != null) {
                a.b = this.acw.minimum;
                a.a = this.acw.maximum;
            }
            let b = typeCast(ValueBrushScale.$, this.acp);
            if (b != null) {
                b.s();
                if (this.ac1 && this.acp.o.count > 1) {
                    a.b = b.q;
                    a.a = b.p;
                }
            }
            return a;
        }
        ad0(a, b, c, d) {
            let e = c.width;
            if (!this.cv.bx.isEmpty) {
                e = this.cv.bx.width;
            }
            else if (this.db != null && !this.db.wk.isEmpty) {
                e = this.db.wk.width;
            }
            let f = DeviceUtils.c(e);
            this.acr = this.acs || ((() => {
                let $ret = new SizeScale();
                $ret.minimumValue = f / 10;
                $ret.maximumValue = f / 5;
                return $ret;
            })());
            if (this.acr != null) {
                let g = this.acr.minimumValue;
                let h = this.acr.maximumValue;
                let i = this.acr.logarithmBase;
                let j = this.aco(this.acr);
                let k = j.b;
                let l = j.a;
                if (this.acr.isLogarithmic) {
                    for (let m = 0; m < b.count; m++) {
                        b._inner[m] = BubbleSeries.ac6(k, l, g, h, i, b._inner[m]);
                    }
                }
                else {
                    for (let n = 0; n < b.count; n++) {
                        b._inner[n] = BubbleSeries.ac5(k, l, g, h, b._inner[n]);
                    }
                }
            }
            let o = 1;
            o = DeviceUtils.d();
            let p = this.acs == null;
            if (d) {
                let q = c.width / e;
                for (let r = 0; r < b.count; r++) {
                    if (p) {
                        b._inner[r] = b._inner[r] / o;
                    }
                    b._inner[r] = b._inner[r] * q;
                }
            }
            for (let s = 0; s < a.count; s++) {
                let t = a._inner[s];
                if (p && !d) {
                    t.width = Math.max(0, b._inner[s] / o);
                    t.height = Math.max(0, b._inner[s] / o);
                }
                else {
                    t.width = Math.max(0, b._inner[s]);
                    t.height = Math.max(0, b._inner[s]);
                }
            }
        }
        adz(a) {
            let b = typeCast(BubbleSeriesView.$, this.cu);
            this.acq.b7 = false;
            if (b != null) {
                b.b7 = false;
            }
            let c = typeCast(CustomPaletteBrushScale.$, this.acp);
            let d = typeCast(ValueBrushScale.$, this.acp);
            let e = this.acp;
            let f = this.acn();
            let g = f.b;
            let h = f.a;
            let i = this.acp == null || !this.acp.isReady || (d != null && this.ade == null);
            if (i) {
                this.acq.dl();
                if (b != null) {
                    b.dl();
                }
                return;
            }
            this.acq.b7 = true;
            if (b != null) {
                b.b7 = true;
            }
            let j = a.count;
            let k = this.dn;
            for (let l = 0; l < j; l++) {
                let m = a._inner[l];
                let n = typeCast(DataContext.$, m.content);
                if (n != null) {
                    let o = null;
                    let p = k.indexOf(n.item);
                    if (c != null) {
                        o = c.getBrush1(p, k.count);
                    }
                    else if (d != null && this.acw != null) {
                        let q = this.acw.item(p);
                        o = d.getBrushByRange(q, g, h);
                    }
                    else if (e != null) {
                        o = e.getBrush(p);
                    }
                    else {
                        if (this.yj == null) {
                            o = this.yh;
                        }
                        else {
                            o = this.yj;
                        }
                    }
                    let r = null;
                    if (this.yk == null) {
                        r = this.yi;
                    }
                    else {
                        r = this.yk;
                    }
                    if (this.ac2 && o != null) {
                        r = o;
                    }
                    if (r != null && !isNaN_(this.ac8)) {
                        r = BrushUtil.m(r, this.ac8);
                    }
                    if (o != null && !isNaN_(this.ac7)) {
                        o = BrushUtil.m(o, this.ac7);
                    }
                    n.itemBrush = o;
                    n.actualItemBrush = o;
                    n.outline = r;
                }
            }
        }
        ak(a, b) {
            let c = new List$1(ChartSelection.$, 0);
            this.p4(a, c, b);
            return c.toArray();
        }
        p4(a, b, c) {
            let d = 1;
            if (d == 1) {
                let e = this.acx();
                this.aa7(a, b, c, d, e);
            }
            else {
                super.p4(a, b, c);
            }
        }
        acx() {
            let a = new FastItemColumn(typeCast(FastItemsSource.$, this.dn), "RadiusColumn", null, false);
            let b = this.cv.bx;
            let c = b.width;
            if (!this.cv.bx.isEmpty) {
                c = this.cv.bx.width;
            }
            else if (this.db != null && !this.db.wk.isEmpty) {
                c = this.db.wk.width;
            }
            let d = DeviceUtils.c(c);
            this.acr = this.acs || ((() => {
                let $ret = new SizeScale();
                $ret.minimumValue = d / 10;
                $ret.maximumValue = d / 5;
                return $ret;
            })());
            if (this.acr != null) {
                let e = this.acr.minimumValue;
                let f = this.acr.maximumValue;
                let g = this.acr.logarithmBase;
                let h = this.aco(this.acr);
                let i = h.b;
                let j = h.a;
                if (this.acr.isLogarithmic) {
                    for (let k = 0; k < a.count; k++) {
                        a.item(k, BubbleSeries.ac6(i, j, e, f, g, a.item(k)));
                    }
                }
                else {
                    for (let l = 0; l < a.count; l++) {
                        a.item(l, BubbleSeries.ac5(i, j, e, f, a.item(l)));
                    }
                }
            }
            let m = DeviceUtils.d();
            let n = this.acs == null;
            let o = this.cv == this.cu;
            if (o) {
                let p = b.width / c;
                for (let q = 0; q < a.count; q++) {
                    if (n) {
                        a.item(q, a.item(q) / m);
                    }
                    a.item(q, a.item(q) * p);
                }
            }
            for (let r = 0; r < a.count; r++) {
                let s;
                if (n && !o) {
                    a.item(r, Math.max(0, a.item(r) / m));
                }
                else {
                    a.item(r, Math.max(0, a.item(r)));
                }
            }
            return a;
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = { $type: Point_$type, x: a, y: b };
            let d = this.kn(c);
            let e = d == null ? NaN : this.ix(d, "XMemberPath");
            let f = d == null ? NaN : this.ix(d, "YMemberPath");
            let g = new DataLegendSeriesValueInfo();
            g.a = 13;
            g.l = e;
            g.q = "X";
            g.r = this.aat != null ? this.aat : "X";
            g.s = this.aap != null ? this.aap : "X:";
            g.t = this.aar != null ? this.aar : "";
            let h = new DataLegendSeriesValueInfo();
            h.l = f;
            h.a = 14;
            h.q = "Y";
            h.r = this.aa1 != null ? this.aa1 : "Y";
            h.s = this.aax != null ? this.aax : "Y:";
            h.t = this.aaz != null ? this.aaz : "";
            let i = new DataLegendSeriesContext();
            i.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(g);
                $ret.add(h);
                return $ret;
            })());
            i.h = this.mc();
            if (!stringIsNullOrEmpty(this.adt)) {
                let j = d == null ? NaN : this.ix(d, "RadiusMemberPath");
                let k = new DataLegendSeriesValueInfo();
                k.l = j;
                k.a = 11;
                k.q = "Radius";
                k.r = this.adt != null ? this.adt : "Radius";
                k.s = this.adp != null ? this.adp : "R:";
                k.t = this.adr != null ? this.adr : "";
                i.e.add(k);
            }
            else if (this.acr != null) {
                let l = new DataLegendSeriesValueInfo();
                l.l = this.acr.maximumValue;
                l.a = 11;
                l.q = "Radius";
                l.r = this.adt != null ? this.adt : "Radius";
                l.s = this.adp != null ? this.adp : "R:";
                l.t = this.adr != null ? this.adr : "";
                i.e.add(l);
            }
            if (!stringIsNullOrEmpty(this.ade)) {
                let m = d == null ? NaN : this.ix(d, "FillMemberPath");
                let n = new DataLegendSeriesValueInfo();
                n.l = m;
                n.a = 12;
                n.q = "Fill";
                n.r = this.ade != null ? this.ade : "Fill";
                n.s = this.ada != null ? this.ada : "F:";
                n.t = this.adc != null ? this.adc : "";
                i.e.add(n);
            }
            return i;
        }
        get actualMarkerBrush() {
            return this.yh;
        }
    }
    BubbleSeries.$t = /*@__PURE__*/ markType(BubbleSeries, 'BubbleSeries', ScatterBase.$, [IScaleLegendSeries_$type, ISupportsSizeScale_$type, ISupportsFillScale_$type]);
    BubbleSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, BubbleSeries, 'raisePropertyChanged', ['FillMemberAsLegendLabel:ada:ad1', [2, null], 'FillMemberAsLegendUnit:adc:ad2', [2, null], 'FillMemberPath:ade:ad3', [2], 'FillScale:acp:ad4', [BrushScale.$], 'FillScaleUseGlobalValues:ac1:ad5', [0, false], 'LabelMemberPath:adj:ad6', [2], 'MarkerBrushBrightness:ac7:ad7', [1, NaN], 'MarkerOutlineBrightness:ac8:ad8', [1, NaN], 'MarkerOutlineUsesFillScale:ac2:ad9', [0, false], 'RadiusMemberAsLegendLabel:adp:aea', [2, null], 'RadiusMemberAsLegendUnit:adr:aeb', [2, null], 'RadiusMemberPath:adt:aec', [2, null], 'RadiusScale:acs:aed', [SizeScale.$], 'RadiusScaleUseGlobalValues:ac3:aee', [0, false]]);
    return BubbleSeries;
})();
/**
 * @hidden
 */
export let CustomPaletteBrushScale = /*@__PURE__*/ (() => {
    class CustomPaletteBrushScale extends BrushScale {
        constructor() {
            super();
        }
        getBrush1(a, b) {
            if (this.brushes == null || this.brushes.count == 0) {
                return null;
            }
            if (this.brushSelectionMode == 0) {
                return super.getBrush(a % this.brushes.count);
            }
            let c = BubbleSeries.ac5(0, b - 1, 0, this.brushes.count - 1, a);
            return this.ab(c);
        }
        get_isReady() {
            return this.brushes != null && this.brushes.count > 0;
        }
    }
    CustomPaletteBrushScale.$t = /*@__PURE__*/ markType(CustomPaletteBrushScale, 'CustomPaletteBrushScale', BrushScale.$);
    CustomPaletteBrushScale.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CustomPaletteBrushScale, 'v', ['BrushSelectionMode', [BrushSelectionMode_$type, /*@__PURE__*/ enumGetBox(BrushSelectionMode_$type, 0)]]);
    return CustomPaletteBrushScale;
})();
/**
 * @hidden
 */
export let BubbleSeriesView = /*@__PURE__*/ (() => {
    class BubbleSeriesView extends ScatterBaseView {
        constructor(a) {
            super(a);
            this.dk = null;
            this.dk = a;
            this.c2 = new ScatterTrendLineManager();
        }
        au() {
            super.au();
            if (!this.q) {
                this.b4.xa = Defaults.e;
            }
        }
        cz() {
            return new BubbleMarkerManager((a) => this.c3.item(a), (a) => this.c1.yw.c.item(a), runOn(this, this.de), runOn(this, this.cw), runOn(this, this.c4));
        }
        dm() {
            let a = this.c0;
            this.dk.ad0(a.n, a.o, this.bx, this == this.e.cu);
            this.as();
        }
        dn() {
            let a = this.c0;
            this.dk.adz(a.n);
        }
        dl() {
            let a = this.c0;
            for (let b of fromEnum(a.n)) {
                let c = typeCast(DataContext.$, b.content);
                if (c != null) {
                    c.itemBrush = null;
                    c.outline = null;
                }
            }
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.ba.a$u(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.dk.title + "</span><br/><span>" + "(${item." + this.dk.aat + "}, ${item." + this.dk.aa1 + "})</span>";
            if (!stringIsNullOrEmpty(this.dk.adt)) {
                a += "<span>, Radius: ${item." + this.dk.adt + "}</span>";
            }
            a += "</div>";
            return a;
        }
    }
    BubbleSeriesView.$t = /*@__PURE__*/ markType(BubbleSeriesView, 'BubbleSeriesView', ScatterBaseView.$);
    return BubbleSeriesView;
})();
