/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { IIndicatorProxy_$type } from "./IIndicatorProxy";
import { IShortPeriodLongPeriod_$type } from "./IShortPeriodLongPeriod";
import { StrategyBasedIndicator } from "./StrategyBasedIndicator";
/**
 * @hidden
 */
export let IndicatorProxy = /*@__PURE__*/ (() => {
    class IndicatorProxy extends Base {
        matchesType(a) {
            if (a.e7) {
                return true;
            }
            return false;
        }
        setCloseMemberPath(a, b) {
            a.za = b;
        }
        setDisplayType(a, b) {
            a.aa3 = b;
        }
        setHighMemberPath(a, b) {
            a.zn = b;
        }
        setLongPeriod(a, b) {
            if (typeCast(IShortPeriodLongPeriod_$type, a) !== null) {
                a.longPeriod = b;
            }
        }
        setLowMemberPath(a, b) {
            a.zs = b;
        }
        setNegativeBrush(a, b) {
            a.aaw = b;
        }
        setOpenMemberPath(a, b) {
            a.zw = b;
        }
        setPeriodOverride(a, b) {
            if (typeCast(StrategyBasedIndicator.$, a) !== null) {
                a.aca(b);
            }
        }
        setShortPeriod(a, b) {
            if (typeCast(IShortPeriodLongPeriod_$type, a) !== null) {
                a.shortPeriod = b;
            }
        }
        setSignalPeriod(a, b) {
            if (getInstanceType(a).typeName == "MovingAverageConvergenceDivergenceIndicator") {
                let s_ = a;
                let p_ = b;
                s_['signalPeriod'] = p_;
            }
        }
        setSmoothingPeriod(a, b) {
            if (getInstanceType(a).typeName == "FullStochasticOscillatorIndicator") {
                let s_ = a;
                let p_ = b;
                s_['smoothingPeriod'] = p_;
            }
        }
        setVolumeMemberPath(a, b) {
            a.z0 = b;
        }
        setXAxis(a, b) {
            a.w6 = b;
        }
        setYAxis(a, b) {
            a.xp = b;
        }
        handleCustomIndicatorEvent(a, b) {
            if (getInstanceType(a).typeName == "CustomIndicator") {
                let s_ = a;
                let p_ = b;
                s_['indicator'] = p_;
            }
        }
        setMultiplier(a, b) {
            if (getInstanceType(a).typeName == "BollingerBandWidthIndicator") {
                let s_ = a;
                let p_ = b;
                s_['multiplier'] = p_;
            }
        }
    }
    IndicatorProxy.$t = /*@__PURE__*/ markType(IndicatorProxy, 'IndicatorProxy', Base.$, [IIndicatorProxy_$type]);
    return IndicatorProxy;
})();
