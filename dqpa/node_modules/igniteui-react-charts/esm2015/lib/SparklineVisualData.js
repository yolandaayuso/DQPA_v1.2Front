/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
/**
 * @hidden
 */
export let SparklineVisualData = /*@__PURE__*/ (() => {
    class SparklineVisualData extends Base {
        constructor() {
            super();
            this._name = null;
            this._horizontalAxis = null;
            this._verticalAxis = null;
            this._sparkPath = null;
            this._negativeSparkPath = null;
            this._trendLinePath = null;
            this._rangePath = null;
            this._markersPath = null;
            this._negativeMarkersPath = null;
            this._lowMarkersPath = null;
            this._highMarkersPath = null;
            this._firstMarkerPath = null;
            this._lastMarkerPath = null;
            this._viewport = null;
            this._marginViewport = null;
        }
        get name() {
            return this._name;
        }
        set name(a) {
            this._name = a;
        }
        get horizontalAxis() {
            return this._horizontalAxis;
        }
        set horizontalAxis(a) {
            this._horizontalAxis = a;
        }
        get verticalAxis() {
            return this._verticalAxis;
        }
        set verticalAxis(a) {
            this._verticalAxis = a;
        }
        get sparkPath() {
            return this._sparkPath;
        }
        set sparkPath(a) {
            this._sparkPath = a;
        }
        get negativeSparkPath() {
            return this._negativeSparkPath;
        }
        set negativeSparkPath(a) {
            this._negativeSparkPath = a;
        }
        get trendLinePath() {
            return this._trendLinePath;
        }
        set trendLinePath(a) {
            this._trendLinePath = a;
        }
        get rangePath() {
            return this._rangePath;
        }
        set rangePath(a) {
            this._rangePath = a;
        }
        get markersPath() {
            return this._markersPath;
        }
        set markersPath(a) {
            this._markersPath = a;
        }
        get negativeMarkersPath() {
            return this._negativeMarkersPath;
        }
        set negativeMarkersPath(a) {
            this._negativeMarkersPath = a;
        }
        get lowMarkersPath() {
            return this._lowMarkersPath;
        }
        set lowMarkersPath(a) {
            this._lowMarkersPath = a;
        }
        get highMarkersPath() {
            return this._highMarkersPath;
        }
        set highMarkersPath(a) {
            this._highMarkersPath = a;
        }
        get firstMarkerPath() {
            return this._firstMarkerPath;
        }
        set firstMarkerPath(a) {
            this._firstMarkerPath = a;
        }
        get lastMarkerPath() {
            return this._lastMarkerPath;
        }
        set lastMarkerPath(a) {
            this._lastMarkerPath = a;
        }
        get viewport() {
            return this._viewport;
        }
        set viewport(a) {
            this._viewport = a;
        }
        get marginViewport() {
            return this._marginViewport;
        }
        set marginViewport(a) {
            this._marginViewport = a;
        }
        scaleByViewport() {
            this.horizontalAxis.scaleByViewport(this.viewport);
            this.verticalAxis.scaleByViewport(this.viewport);
            if (this.sparkPath != null) {
                this.sparkPath.scaleByViewport(this.marginViewport);
            }
            if (this.negativeSparkPath != null) {
                this.negativeSparkPath.scaleByViewport(this.marginViewport);
            }
            if (this.trendLinePath != null) {
                this.trendLinePath.scaleByViewport(this.marginViewport);
            }
            if (this.rangePath != null) {
                this.rangePath.scaleByViewport(this.marginViewport);
            }
            if (this.markersPath != null) {
                this.markersPath.scaleByViewport(this.marginViewport);
            }
            if (this.negativeMarkersPath != null) {
                this.negativeMarkersPath.scaleByViewport(this.marginViewport);
            }
            if (this.lowMarkersPath != null) {
                this.lowMarkersPath.scaleByViewport(this.marginViewport);
            }
            if (this.highMarkersPath != null) {
                this.highMarkersPath.scaleByViewport(this.marginViewport);
            }
            if (this.firstMarkerPath != null) {
                this.firstMarkerPath.scaleByViewport(this.marginViewport);
            }
            if (this.lastMarkerPath != null) {
                this.lastMarkerPath.scaleByViewport(this.marginViewport);
            }
        }
        serialize() {
            let a = new StringBuilder(0);
            a.u("{");
            a.u("name: \"" + this.name + "\"");
            if (this.horizontalAxis != null) {
                a.u(",");
                a.l("horizontalAxis: " + this.horizontalAxis.serialize());
            }
            if (this.horizontalAxis != null) {
                a.u(",");
                a.l("verticalAxis: " + this.verticalAxis.serialize());
            }
            if (this.sparkPath != null) {
                a.u(",");
                a.l("sparkPath: " + this.sparkPath.serialize());
            }
            if (this.negativeSparkPath != null) {
                a.u(",");
                a.l("negativeSparkPath: " + this.negativeSparkPath.serialize());
            }
            if (this.trendLinePath != null) {
                a.u(",");
                a.l("trendLinePath: " + this.trendLinePath.serialize());
            }
            if (this.rangePath != null) {
                a.u(",");
                a.l("rangePath: " + this.rangePath.serialize());
            }
            if (this.markersPath != null) {
                a.u(",");
                a.l("markersPath: " + this.markersPath.serialize());
            }
            if (this.negativeMarkersPath != null) {
                a.u(",");
                a.l("negativeMarkersPath: " + this.negativeMarkersPath.serialize());
            }
            if (this.lowMarkersPath != null) {
                a.u(",");
                a.l("lowMarkersPath: " + this.lowMarkersPath.serialize());
            }
            if (this.highMarkersPath != null) {
                a.u(",");
                a.l("highMarkersPath: " + this.highMarkersPath.serialize());
            }
            if (this.firstMarkerPath != null) {
                a.u(",");
                a.l("firstMarkerPath: " + this.firstMarkerPath.serialize());
            }
            if (this.lastMarkerPath != null) {
                a.u(",");
                a.l("lastMarkerPath: " + this.lastMarkerPath.serialize());
            }
            if (this.viewport != null) {
                a.l(",");
                a.l("viewPort:" + this.viewport.serialize());
            }
            if (this.marginViewport != null) {
                a.l(",");
                a.l("marginViewPort:" + this.marginViewport.serialize());
            }
            a.u("");
            a.u("}");
            return a.toString();
        }
    }
    SparklineVisualData.$t = /*@__PURE__*/ markType(SparklineVisualData, 'SparklineVisualData');
    return SparklineVisualData;
})();
