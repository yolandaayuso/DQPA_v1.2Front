/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IZoomableCategoryAxis_$type } from "./IZoomableCategoryAxis";
import { DependencyProperty } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Base, typeCast, Array_$type, Number_$type, markType, markDep } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { NumericScaler } from "./NumericScaler";
import { VerticalAxisLabelPanel } from "./VerticalAxisLabelPanel";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { MathUtil } from "igniteui-react-core";
import { LinearCategorySnapper } from "./LinearCategorySnapper";
import { NumericXAxis } from "./NumericXAxis";
import { LabelPosition } from "./LabelPosition";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { AxisDefaults } from "./AxisDefaults";
/**
 * @hidden
 */
export let CategoryYAxis = /*@__PURE__*/ (() => {
    class CategoryYAxis extends CategoryAxisBase {
        a4() {
            return new CategoryYAxisView(this);
        }
        hv(a) {
            super.hv(a);
            this.mm = a;
        }
        get_cp() {
            return true;
        }
        ek() {
            return this.kb().height;
        }
        mj(a, b, c) {
            return this.mk(a, b, c, true);
        }
        ml(a) {
            if (typeCast(List$1.$.specialize(Array_$type), a) !== null) {
                return a.asArray();
            }
            return null;
        }
        hp(a, b, c, d, e) {
            let f;
            let g = e.e;
            let h = e.d;
            let i = e.c;
            let j = e.a;
            let k = !i.isEmpty;
            let l = this.categoryMode == 0 ? this.lj - 1 : this.lj;
            if (l < 0) {
                l = 0;
            }
            let m = i.top;
            let n = i.height;
            let o = g.top;
            let p = g.height;
            let q = h.top;
            let r = h.height;
            let s = 0;
            let t = 1;
            let u = this.ml(a);
            let v = false;
            if (u != null) {
                v = true;
            }
            let w;
            for (let x = 0; x < b.count; x++) {
                w = b.item(x);
                for (let y = c; y < d; y++) {
                    if (v) {
                        f = u[y];
                    }
                    else {
                        f = a.item(y);
                    }
                    if (k) {
                        let z = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                        if (!j) {
                            z = 1 - z;
                        }
                        z = m + n * (z - s) / t;
                        let aa = (z - e.d.top) / e.d.height;
                        aa = e.d.top + e.d.height * (aa - e.e.top) / e.e.height;
                        f[w] = aa;
                    }
                    else {
                        let ab = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                        if (!j) {
                            ab = 1 - ab;
                        }
                        ab = q + r * (ab - o) / p;
                        f[w] = ab;
                    }
                }
            }
        }
        constructor() {
            super();
            this.mo = 0;
            this.mp = 0;
            this.mw = 1;
            this.mv = 1;
            this.k2 = new List$1(Number_$type, 0);
            this.ab = CategoryYAxis.$;
        }
        get mt() {
            return this.c(CategoryYAxis.nc);
        }
        set mt(a) {
            this.h(CategoryYAxis.nc, a);
        }
        mn() {
            return !isNaN_(this.mt);
        }
        get mq() {
            return this.mo;
        }
        set mq(a) {
            if (this.mq != a) {
                let b = this.mo;
                this.mo = a;
                this.h5("ActualInterval", b, this.mq);
            }
        }
        ex() {
            return this.mq;
        }
        get mu() {
            return this.c(CategoryYAxis.nd);
        }
        set mu(a) {
            this.h(CategoryYAxis.nd, a);
        }
        get mr() {
            return this.mp;
        }
        set mr(a) {
            if (this.mr != a) {
                let b = this.mp;
                this.mp = a;
                this.h5("ActualMinorInterval", b, this.mr);
            }
        }
        get my() {
            return this.mw;
        }
        set my(a) {
            this.mw = a;
        }
        get mx() {
            return this.mv;
        }
        set mx(a) {
            this.mv = a;
        }
        el(a, b) {
            if (!b.c.isEmpty) {
                let c = this.ms(a, NumericScaler.ac, b.c);
                c = (c - b.d.top) / b.d.height;
                c = b.d.top + b.d.height * (c - b.e.top) / b.e.height;
                return c;
            }
            return this.ms(a, b.e, b.d);
        }
        ms(a, b, c) {
            let d = this.categoryMode == 0 ? this.lj - 1 : this.lj;
            if (d < 0) {
                d = 0;
            }
            let e = d >= 1 ? (a) / (d) : d == 0 ? 0.5 : NaN;
            if (!this.ci) {
                e = 1 - e;
            }
            return c.top + c.height * (e - b.top) / b.height;
        }
        eo(a, b) {
            if (!b.c.isEmpty) {
                let c = b.e.top + b.e.height * (a - b.d.top) / b.d.height;
                c = (c * b.d.height) + b.d.top;
                c = this.getUnscaledValue3(c, NumericScaler.ac, b.c, this.categoryMode);
                return c;
            }
            return this.getUnscaledValue3(a, b.e, b.d, this.categoryMode);
        }
        ep(a, b, c) {
            if (!b.c.isEmpty) {
                let d = b.e.top + b.e.height * (a - b.d.top) / b.d.height;
                d = (d * b.d.height) + b.d.top;
                d = this.getUnscaledValue3(d, NumericScaler.ac, b.c, c);
                return d;
            }
            return this.getUnscaledValue3(a, b.e, b.d, c);
        }
        getUnscaledValue3(a, b, c, d) {
            let e = b.top + (a - c.top) * b.height / c.height;
            if (!this.ci) {
                e = 1 - e;
            }
            let f = d == 0 ? this.lj - 1 : this.lj;
            if (f < 0) {
                f = 0;
            }
            return e * f;
        }
        m9(a, b) {
            if (isNaN_(a) || isNaN_(b) || this.kv == null || this.kv.count == 0) {
                return;
            }
            let c = a / this.kv.count;
            let d = b / this.kv.count;
            this.bi.wl = new Rect(0, this.bi.wl.x, 1 - d, this.bi.wl.width, d - c);
        }
        av() {
            return new VerticalAxisLabelPanel();
        }
        d6() {
            return this.mt;
        }
        getCategorySize(a, b, c) {
            let d = this.kf(b, c);
            return d.height / (this.lj * a.height);
        }
        k8(a, b, c) {
            let d = this.lf(a, b, c);
            let e = 0;
            if (!isNaN_(this.le)) {
                e = Math.min(this.le, 1);
            }
            let f = 1 - 0.5 * d;
            let g = this.getCategorySize(a, b, c) * f / (this.ll - (this.ll - 1) * e);
            return g;
        }
        getGroupCenter(a, b, c, d) {
            let e = 0.5;
            if (this.ll > 1) {
                let f = this.lf(b, c, d);
                let g = 0;
                if (!isNaN_(this.le)) {
                    g = Math.min(this.le, 1);
                }
                let h = 1 - 0.5 * f;
                let i = h / (this.ll - (this.ll - 1) * g);
                let j = (h - i) / (this.ll - 1);
                e = 0.25 * f + 0.5 * i + a * j;
            }
            return this.getCategorySize(b, c, d) * e;
        }
        m8(a) {
            let b = this.bi != null ? this.bi.v4 : Rect.empty;
            b = b.copy();
            let c = this.kh;
            let d = new Rect(0, 0, 0, 1, 1);
            let e = this.ke();
            let f = new ScalerParams(0, d, d, this.ch, e);
            let g = !b.isEmpty && !c.isEmpty && this.kv != null ? this.kv.indexOf(a) : -1;
            let h = g > -1 ? this.el(g, f) : NaN;
            if (!isNaN_(h) && this.bi.fg) {
                if (!isNaN_(h)) {
                    if (h < b.top + 0.1 * b.height) {
                        h = h + 0.4 * b.height;
                        b.y = h - 0.5 * b.height;
                    }
                    if (h > b.bottom - 0.1 * b.height) {
                        h = h - 0.4 * b.height;
                        b.y = h - 0.5 * b.height;
                    }
                }
                this.bi.ry(b, false, true);
            }
        }
        c3() {
            if (this.cq && this.c4) {
                this.bc = this.bb();
            }
            if (this.kv == null) {
                return false;
            }
            let a = false;
            let b = this.kv.count;
            if (b != this.mx) {
                let c = new AxisRangeChangedEventArgs(0, 1, 1, this.mx, b);
                this.mx = b;
                this.h6(c);
                a = true;
            }
            this.nb();
            this.na();
            return a;
        }
        getWindowZoomFromCategories(a) {
            let b = MathUtil.a(a) && a > 0;
            let c = this.kv.count;
            if (c > 0 && b) {
                let d = this.bi.wk.height;
                let e = isNaN_(d) || isInfinity(d);
                if (e) {
                    return NaN;
                }
                let f = new Rect(0, 0, 0, 1, 1);
                let g = this.bi.wk;
                let h = this.getCategorySize(f, g, g);
                let i = isNaN_(h) || isInfinity(h);
                if (i) {
                    return NaN;
                }
                let j = h * a / d;
                if (j >= 0 && j <= 1) {
                    return j;
                }
            }
            return NaN;
        }
        getWindowZoomFromItemSpan(a) {
            let b = MathUtil.a(a) && a > 0;
            let c = this.kv.count;
            if (c > 0 && b) {
                let d = this.bi.wk.height;
                let e = isNaN_(d) || isInfinity(d);
                if (e) {
                    return NaN;
                }
                let f = new Rect(0, 0, 0, 1, 1);
                let g = this.bi.wk;
                let h = this.k8(f, g, g);
                let i = a / h;
                let j = Math.min(1, 1 / i);
                if (j > 0 && j <= 1) {
                    return j;
                }
            }
            return NaN;
        }
        nb() {
            if (this.kv == null || this.bi == null) {
                return;
            }
            let a = !isNaN_(this.bi.is) && !isNaN_(this.bi.iu);
            if (a) {
                return;
            }
            if (!isNaN_(this.zoomMaximumItemSpan) && !isInfinity(this.zoomMaximumItemSpan)) {
                let b = this.getWindowZoomFromItemSpan(this.zoomMaximumItemSpan);
                if (!isNaN_(b) && !isInfinity(b)) {
                    this.bi.hl = b;
                }
            }
            else if (!isNaN_(this.zoomMaximumCategoryRange) && !isInfinity(this.zoomMaximumCategoryRange)) {
                let c = this.getWindowZoomFromCategories(this.zoomMaximumCategoryRange);
                if (!isNaN_(c) && !isInfinity(c)) {
                    this.bi.hl = c;
                }
            }
        }
        na() {
            if (this.kv == null || this.bi == null) {
                return;
            }
            let a = NaN;
            let b = NaN;
            let c = this.bi.hs();
            let d = this.bi.ht();
            let e = false;
            if (MathUtil.a(this.zoomToItemSpan)) {
                e = true;
                d = this.getWindowZoomFromItemSpan(this.zoomToItemSpan);
                d = Math.max(d, this.bi.hl);
            }
            else if (MathUtil.a(this.zoomToCategoryRange)) {
                e = true;
                d = this.getWindowZoomFromCategories(this.zoomToCategoryRange);
                d = Math.max(d, this.bi.hl);
            }
            if (MathUtil.a(this.zoomToCategoryStart) && this.zoomToCategoryStart >= 0 && this.zoomToCategoryStart < this.lk) {
                e = true;
                b = this.getWindowZoomFromCategories(this.zoomToCategoryStart);
                let f = d + a - 1;
                let g = d - f;
                if (f > 0 && g > this.bi.hl) {
                    d = g;
                    d = Math.max(d, this.bi.hl);
                }
            }
            if (e) {
                this.bi.rw(a, b, c, d);
            }
        }
        hz(a, b, c, d) {
            super.hz(a, b, c, d);
            switch (b) {
                case CategoryYAxis.$$p[0]:
                case CategoryYAxis.$$p[1]:
                    this.nb();
                    break;
                case CategoryYAxis.$$p[2]:
                case CategoryYAxis.$$p[3]:
                case CategoryYAxis.$$p[4]:
                    this.na();
                    break;
            }
        }
        ky(a) {
            if (a == null) {
                return false;
            }
            let b = this.be();
            if (b == null) {
                return false;
            }
            return b.synchronizeVertically;
        }
        ic(a) {
            super.ic(a);
            let b = this.bi != null ? this.bi.v4 : Rect.empty;
            let c = this.kh;
            let d = this.kc();
            let e = this.kb();
            let f = new ScalerParams(0, b, c, this.ch, d);
            let g = this.a5.a4();
            let h = this.a5.a7();
            let i = this.a5.a5();
            let j = this.a5.a6();
            let k = this.a5.e();
            let l = this.a5.f();
            let m = this.a5.g();
            this.ip();
            this.hk(g);
            this.hk(h);
            this.hk(i);
            this.hk(j);
            this.dd.clear();
            this.de.clear();
            this.k2.clear();
            this.a5.az(this, b, c);
            if (b.isEmpty || c.isEmpty) {
                this.br.count = 0;
                this.bq.count = 0;
                this.bp.count = 0;
            }
            if (this.br.count == 0 && this.bq.count == 0 && this.a5.l()) {
                this.a5.ad();
            }
            if (this.az != null) {
                this.az.registerAxis(this);
            }
            if (this.itemsSource == null || this.kv == null || this.kv.count == 0) {
                this.br.count = 0;
                this.bq.count = 0;
                this.bp.count = 0;
                this.a5.ad();
                return;
            }
            if (!b.isEmpty && !c.isEmpty) {
                let n = this.eo(e.top, f);
                let o = this.eo(e.bottom, f);
                if (!this.ch) {
                    n = Math.ceil(n);
                    o = Math.floor(o);
                }
                else {
                    n = Math.floor(n);
                    o = Math.ceil(o);
                }
                let p = c.left;
                let q = 0;
                if (this.aj != null) {
                    let r = typeCast(NumericXAxis.$, this.aj);
                    if (r != null) {
                        let s = this.ii(p, q, b, c, d, c.left, c.right);
                        p = s.p0;
                        q = s.p1;
                    }
                }
                this.iq(g, p, c, k, true);
                this.a5.au(q);
                let t = Math.min(n, o);
                let u = Math.max(n, o);
                let v = new LinearCategorySnapper(1, t, u, e.height, this.mt, this.categoryMode, this.e0());
                let w = v.g;
                w = this.d3(w, this.mn(), b, c, d);
                if (v.g != w) {
                    v = new LinearCategorySnapper(1, t, u, e.height, w, this.categoryMode, this.e0());
                }
                let x = Math.floor((t - 0) / v.g);
                let y = Math.ceil((u - 0) / v.g);
                if (!isNaN_(x) && !isNaN_(y)) {
                    let z = truncate(x);
                    let aa = truncate(y);
                    let ab = this.el(0 + z * v.g, f);
                    let ac = Math.abs(this.el(v.g, f) - this.el(0, f));
                    this.aw.bw = this.el(v.g, f);
                    for (let ad = z; ad <= aa; ++ad) {
                        let ae = this.el(0 + (ad + 1) * v.g, f);
                        if (ab <= e.bottom) {
                            if (ad % 2 == 0) {
                                this.hu(h, ab, ae, c);
                            }
                            this.ht(i, ab, c, l, false);
                            this.k2.add(ab);
                        }
                        if (this.categoryMode != 0 && this.ll != 0 && this.cy) {
                            if (this.mu > 0 && this.mu < v.g) {
                                let af = ac * this.mu;
                                if (!this.ch) {
                                    let ag = ab;
                                    while (ag - af > ae) {
                                        ag -= af;
                                        if (Math.abs(ag - ae) < 0.0001) {
                                            break;
                                        }
                                        this.ht(j, ag, c, m, false);
                                    }
                                }
                                else {
                                    let ah = ab;
                                    while (ah + af < ae) {
                                        ah += af;
                                        if (Math.abs(ah - ae) < 0.0001) {
                                            break;
                                        }
                                        this.ht(j, ah, c, m, false);
                                    }
                                }
                                this.mr = this.mu;
                            }
                            else {
                                for (let ai = 0; ai < truncate(v.g); ai++) {
                                    for (let aj = 0; aj < this.ll; aj++) {
                                        let ak = this.getGroupCenter(aj, b, c, d);
                                        if (!this.ch) {
                                            ak = -ak;
                                        }
                                        let al = this.el(ai + ad * v.g, f) + ak;
                                        this.ht(j, al, c, m, false);
                                    }
                                }
                                this.mr = 0.5;
                            }
                        }
                        let am = ab;
                        if (this.categoryMode != 0) {
                            let an = this.el(ad * v.g + 1, f);
                            am = (ab + an) / 2;
                        }
                        if (am <= e.bottom && am >= e.top) {
                            let ao = 0;
                            if (v.g >= 1) {
                                ao = ad * truncate(Math.floor(v.g));
                            }
                            else {
                                if ((ad * v.g) * 2 % 2 == 0) {
                                    ao = truncate(Math.floor(ad * v.g));
                                }
                                else {
                                    ao = -1;
                                }
                            }
                            if (this.kv != null && ao < this.kv.count && ao >= 0) {
                                let ap = this.kv.item(ao);
                                let aq = this.f1(ap);
                                if (!isNaN_(am) && !isInfinity(am) && aq != null) {
                                    if ((typeof aq === 'string') && Base.equalsStatic(aq, "")) {
                                    }
                                    else {
                                        this.dd.add1(aq);
                                        this.de.add(new LabelPosition(am));
                                    }
                                }
                            }
                        }
                        ab = ae;
                    }
                }
                this.mq = v.g;
                if ((this.az == null || this.az.visibility == 0) && this.aj != null) {
                    if (this.az != null && (this.az.location == 6 || this.az.location == 7)) {
                        this.bi.n3();
                    }
                }
                this.a5.a0(this.dd, this.de);
                this.l9();
            }
        }
        get_a2() {
            return 1;
        }
        get a2() {
            return this.get_a2();
        }
        get isVertical() {
            return this.cp;
        }
        j$d(a, b) {
            return this.eo.apply(this, arguments);
        }
        j$c(a, b) {
            return this.el.apply(this, arguments);
        }
        j$e(a, b, c, d, e) {
            this.hp.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.hq.apply(this, arguments);
        }
        j$g(a, b, c, d) {
            this.hr.apply(this, arguments);
        }
        get j$b() {
            return this.ch;
        }
        j$a() {
            return this.ag.apply(this, arguments);
        }
    }
    CategoryYAxis.$t = /*@__PURE__*/ markType(CategoryYAxis, 'CategoryYAxis', CategoryAxisBase.$, [IZoomableCategoryAxis_$type]);
    CategoryYAxis.nc = /*@__PURE__*/ DependencyProperty.i("Interval", Number_$type, CategoryYAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        a.h5("Interval", b.oldValue, b.newValue);
        a.ib(false);
    }));
    CategoryYAxis.nd = /*@__PURE__*/ DependencyProperty.i("MinorInterval", Number_$type, CategoryYAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        (typeCast(CategoryYAxis.$, a)).h5("MinorInterval", b.oldValue, b.newValue);
        (typeCast(CategoryYAxis.$, a)).ib(false);
    }));
    CategoryYAxis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CategoryYAxis, 'h5', ['ZoomMaximumCategoryRange::ne', [1, NaN], 'ZoomMaximumItemSpan::nf', [1, NaN], 'ZoomToCategoryRange::ng', [1, NaN], 'ZoomToCategoryStart::nh', [1, NaN], 'ZoomToItemSpan::ni', [1, NaN]]);
    return CategoryYAxis;
})();
/**
 * @hidden
 */
export let CategoryYAxisView = /*@__PURE__*/ (() => {
    class CategoryYAxisView extends CategoryAxisBaseView {
        constructor(a) {
            super(a);
            this.bm = null;
            this.bm = a;
        }
        al() {
            super.al();
            this.a.fj = AxisDefaults.f;
        }
    }
    CategoryYAxisView.$t = /*@__PURE__*/ markType(CategoryYAxisView, 'CategoryYAxisView', CategoryAxisBaseView.$);
    return CategoryYAxisView;
})();
