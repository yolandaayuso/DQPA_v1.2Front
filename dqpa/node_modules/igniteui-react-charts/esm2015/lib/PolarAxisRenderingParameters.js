/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { IPolarRadialRenderingParameters_$type } from "./IPolarRadialRenderingParameters";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let PolarAxisRenderingParameters = /*@__PURE__*/ (() => {
    class PolarAxisRenderingParameters extends NumericAxisRenderingParameters {
        constructor() {
            super(...arguments);
            this._minLength = 0;
            this._maxLength = 0;
            this._center = null;
            this._minAngle = 0;
            this._maxAngle = 0;
            this._crossingAngleRadians = 0;
            this._effectiveMaximum = 0;
        }
        get minLength() {
            return this._minLength;
        }
        set minLength(a) {
            this._minLength = a;
        }
        get maxLength() {
            return this._maxLength;
        }
        set maxLength(a) {
            this._maxLength = a;
        }
        get center() {
            return this._center;
        }
        set center(a) {
            this._center = a;
        }
        get minAngle() {
            return this._minAngle;
        }
        set minAngle(a) {
            this._minAngle = a;
        }
        get maxAngle() {
            return this._maxAngle;
        }
        set maxAngle(a) {
            this._maxAngle = a;
        }
        get crossingAngleRadians() {
            return this._crossingAngleRadians;
        }
        set crossingAngleRadians(a) {
            this._crossingAngleRadians = a;
        }
        get effectiveMaximum() {
            return this._effectiveMaximum;
        }
        set effectiveMaximum(a) {
            this._effectiveMaximum = a;
        }
    }
    PolarAxisRenderingParameters.$t = /*@__PURE__*/ markType(PolarAxisRenderingParameters, 'PolarAxisRenderingParameters', NumericAxisRenderingParameters.$, [IPolarRadialRenderingParameters_$type]);
    return PolarAxisRenderingParameters;
})();
