/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Point_$type, fromEnum, toEnum, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let DelegateClipper = /*@__PURE__*/ (() => {
    class DelegateClipper extends Base {
        constructor(a, b, c, d) {
            super();
            this.b = null;
            this.c = null;
            this.d = null;
            let e = new List$1(Point_$type, 0);
            for (let f of fromEnum(DelegateClipper.a(0, c))) {
                e.add({ $type: Point_$type, x: a(f), y: b(f) });
            }
            this.b = new List$1(Point_$type, 0);
            this.c = (g) => this.b.count > g ? this.b._inner[g].x : NaN;
            this.d = (g) => this.b.count > g ? this.b._inner[g].y : NaN;
            d.i = this.b;
            for (let g of fromEnum(e)) {
                d.j(g);
            }
            d.i = null;
        }
        get e() {
            return this.b.count;
        }
        static *_a(a, b) {
            for (let c = a; c < a + b; c++) {
                yield c;
            }
        }
        static a(a, b) {
            return toEnum(() => DelegateClipper._a(a, b));
        }
    }
    DelegateClipper.$t = /*@__PURE__*/ markType(DelegateClipper, 'DelegateClipper');
    return DelegateClipper;
})();
