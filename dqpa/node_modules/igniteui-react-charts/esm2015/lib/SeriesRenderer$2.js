/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let SeriesRenderer$2 = /*@__PURE__*/ (() => {
    class SeriesRenderer$2 extends Base {
        constructor($tFrame, $tView, a, ..._rest) {
            super();
            this.$tFrame = null;
            this.$tView = null;
            this.c = null;
            this.d = null;
            this.a = null;
            this.e = null;
            this.f = null;
            this.b = null;
            this.$tFrame = $tFrame;
            this.$tView = $tView;
            this.$type = this.$type.specialize(this.$tFrame, this.$tView);
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = _rest[4];
                        this.c = c;
                        this.d = d;
                        this.a = (h) => {
                        };
                        this.f = e;
                        this.e = f;
                        this.b = g;
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = _rest[4];
                        let h = _rest[5];
                        this.c = c;
                        this.d = d;
                        this.a = h;
                        this.f = e;
                        this.e = f;
                        this.b = g;
                    }
                    break;
            }
        }
        g(a, b, c, d, e) {
            let f = 0;
            f = a.c;
            if (a.a && f > 0 && !a.b) {
                let g = b;
                if (this.f()) {
                    this.b();
                    b = d;
                    d = g;
                }
                else {
                    b = c;
                    c = g;
                }
                this.a(c);
                this.c(c, e);
                this.e();
            }
            else {
                if (!a.b) {
                    this.a(c);
                    this.c(c, e);
                }
                this.d(c, e);
            }
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
    }
    SeriesRenderer$2.$t = /*@__PURE__*/ markType(SeriesRenderer$2, 'SeriesRenderer$2');
    return SeriesRenderer$2;
})();
