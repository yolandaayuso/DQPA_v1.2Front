/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { markType, typeCast, Point_$type, runOn, delegateCombine, enumGetBox, markDep } from "igniteui-react-core";
import { isNaN_, intDivide, isInfinity } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { RadialFrame } from "./RadialFrame";
import { ProportionalCategoryAngleAxis } from "./ProportionalCategoryAngleAxis";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { FastItemCoalescingColumn } from "./FastItemCoalescingColumn";
import { List$1 } from "igniteui-react-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { RadialBaseView } from "./RadialBaseView";
import { ChartSelection } from "./ChartSelection";
import { CollisionRect } from "igniteui-react-core";
import { CollisionAvoider } from "./CollisionAvoider";
import { Clipper } from "igniteui-react-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let AnchoredRadialBucketCalculator = /*@__PURE__*/ (() => {
    class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = this.f.c1.ab8;
            let c = Math.min(a * this.b, b.count - 1);
            let d = Math.min(c + this.b - 1, b.count - 1);
            let e = NaN;
            let f = NaN;
            for (let g = c; g <= d; ++g) {
                let h = b.item(g);
                if (!isNaN_(e)) {
                    if (!isNaN_(h)) {
                        e = Math.min(e, h);
                        f = Math.max(f, h);
                    }
                }
                else {
                    e = h;
                    f = h;
                }
            }
            if (!isNaN_(e)) {
                return [0.5 * (c + d), e, f, 0];
            }
            return [0.5 * (c + d), NaN, NaN, 0];
        }
    }
    AnchoredRadialBucketCalculator.$t = /*@__PURE__*/ markType(AnchoredRadialBucketCalculator, 'AnchoredRadialBucketCalculator', RadialBucketCalculator.$);
    return AnchoredRadialBucketCalculator;
})();
/**
 * @hidden
 */
export let AnchoredRadialSeries = /*@__PURE__*/ (() => {
    class AnchoredRadialSeries extends RadialBase {
        cs() {
            return new AnchoredRadialSeriesView(this);
        }
        o2() {
            super.o2();
            this.yz = null;
            this.y5 = null;
        }
        me() {
            return AnchoredRadialSeries.$$p[4];
        }
        kq(a, b) {
            let c = this.nd(b);
            if (c == AnchoredRadialSeries.$$p[4]) {
                return this.kr(a, b, this.acx);
            }
            if (c == AnchoredRadialSeries.$$p[0]) {
                return this.kr(a, b, this.acp);
            }
            return super.kq(a, b);
        }
        md(a) {
            let b = this.nd(a);
            if (b == AnchoredRadialSeries.$$p[4]) {
                return this.acx;
            }
            if (b == AnchoredRadialSeries.$$p[0]) {
                return this.acp;
            }
            return super.md(a);
        }
        jc(a) {
            if (a == this.y7) {
                return this.z9(this.ab8.count - 1, this.ab8.item(this.ab8.count - 1));
            }
            return super.jc(a);
        }
        kt(a) {
            if (this.yz != null && this.yz.cl) {
                if (a == this.yz.othersIndex) {
                    return this.y7;
                }
            }
            return super.kt(a);
        }
        q1(a) {
            super.q1(a);
            this.ab2 = a;
        }
        constructor() {
            super();
            this.ab3 = null;
            this.acd = false;
            this.ab7 = null;
            this.ado = { $type: Point_$type, x: 0, y: 0 };
            this.ab5 = null;
            this.ab4 = null;
            this.ab9 = false;
            this.ab5 = new RadialFrame(3);
            this.ab3 = new CategoryLineRasterizer();
        }
        ka(a, b) {
            return this.kb(a, b, this.yz, null, this.ab8);
        }
        j8(a, b) {
            return this.j9(a, b, this.yz, null, this.ab8);
        }
        ip(a, b, c, d, e) {
            if (this.ab8 == null) {
                return Number.POSITIVE_INFINITY;
            }
            return this.iq(a, b, this.yz, d, e, this.ab8.count, null);
        }
        i5(a, b, c) {
            let d = this.getEffectiveViewport1(this.cv);
            let e = this.acj(this.yz, this.cv.by, this.cv.bx, d);
            let f = new ScalerParams(0, this.cv.by, this.cv.bx, this.yz.ch, d);
            f.c = this.db.wk;
            let g = this.ab8;
            if (this.acd && typeCast(FastItemCoalescingColumn.$, g) !== null) {
                g = new FastItemCoalescingColumn(this.yz, g.c, false);
            }
            return this.i7(g, a, this.yz, f, e, null, b, c);
        }
        wc(a, b, c) {
            if (this.y5 == null || this.yz == null || this.cv == null || this.cv.by.isEmpty || this.cv.bx.isEmpty) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let d = this.getEffectiveViewport1(this.cv);
            let e = new ScalerParams(0, this.cv.by, this.cv.bx, this.y5.ch, d);
            e.c = this.getEffectiveViewport1(this.cv);
            let f = this.i5(a, b, c);
            f = this.y5.el(f, e);
            let g = this.y8.c(a, this.cv.by, this.cv.bx, d);
            if (!b && this.yz != null) {
                let h = this.ka(a, c);
                let i = this.j8(a, c);
                let j = this.acj(this.yz, this.cv.by, this.cv.bx, d);
                let k = new ScalerParams(0, this.cv.by, this.cv.bx, this.yz.ch, d);
                k.c = this.db.wk;
                let l = this.ip(a, h, this.yz, k, j);
                let m = this.ip(a, i, this.yz, k, j);
                if (this.yz.cl) {
                    if (m <= l) {
                        j = this.aci(i, this.yz, this.cv.by, this.cv.bx, d);
                        if (isNaN_(j)) {
                            j = 0;
                        }
                        g = this.yz.el(i, k) + j;
                    }
                    else {
                        j = this.aci(h, this.yz, this.cv.by, this.cv.bx, d);
                        if (isNaN_(j)) {
                            j = 0;
                        }
                        g = this.yz.el(h, k) + j;
                    }
                }
                else {
                    if (m <= l) {
                        g = this.yz.el(i, k) + j;
                    }
                    else {
                        g = this.yz.el(h, k) + j;
                    }
                }
            }
            let n = this.y8.d(g, f, this.cv.by, this.cv.bx, this.cv.getEffectiveViewport());
            let o = this.y8.e(g, f, this.cv.by, this.cv.bx, this.cv.getEffectiveViewport());
            return { $type: Point_$type, x: n, y: o };
        }
        gb() {
            return this.highlightedItemsSource != null || this.acp != null;
        }
        ht() {
            let a = super.ht();
            {
                let b = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.ad = "ValueMemberPath";
                    $ret.p = true;
                    $ret.y = "HighlightedValueMemberPath";
                    $ret.q = true;
                    return $ret;
                })());
                b.valueResolving = delegateCombine(b.valueResolving, runOn(this, this.ac3));
                a.add(b);
            }
            return a;
        }
        ac3(a, b) {
            if (this.acp != null) {
                b.value = this.acp;
                return;
            }
            b.value = this.acx;
        }
        get ab8() {
            return this.ab7;
        }
        set ab8(a) {
            if (this.ab7 != a) {
                let b = this.ab7;
                this.ab7 = a;
                this.raisePropertyChanged("ValueColumn", b, this.ab7);
            }
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = new DataLegendSeriesValueInfo();
            c.a = 0;
            this.acd = true;
            c.l = this.i5({ $type: Point_$type, x: a, y: b }, false, false);
            this.acd = false;
            c.q = "Value";
            c.r = this.acx != null ? this.acx : "Value";
            c.s = this.act != null ? this.act : "V:";
            c.t = this.acv != null ? this.acv : "";
            let d = new DataLegendSeriesContext();
            d.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(c);
                return $ret;
            })());
            d.h = this.mc();
            return d;
        }
        get adk() {
            return this.c(AnchoredRadialSeries.ac7);
        }
        set adk(a) {
            this.h(AnchoredRadialSeries.ac7, a);
        }
        ay(a) {
            if (a != null && a == this.yz && this.ab8 != null && this.ab8.count > 0) {
                return new AxisRange(0, this.ab8.count - 1);
            }
            if (a != null && a == this.y5 && this.ab8 != null && this.ab8.count > 0) {
                return new AxisRange(this.ab8.minimum, this.ab8.maximum);
            }
            return null;
        }
        z9(a, b) {
            if (this.ach) {
                let c = this.ab8.c;
                if (a < 0) {
                    return super.z9(a, b);
                }
                if (a > c.count - 1) {
                    if (typeCast(ProportionalCategoryAngleAxis.$, this.yz) !== null) {
                        let d = this.ab8;
                        return d.f;
                    }
                    return super.z9(a, b);
                }
                return c.item(a);
            }
            else {
                return super.z9(a, b);
            }
        }
        dk(a) {
            let b = super.dk(a);
            this.ab9 = false;
            if (this.yz != null && this.yz.cl) {
                this.ab9 = true;
                b = new FastItemCoalescingColumn(this.yz, b, this.ach);
            }
            return b;
        }
        ac1(a, b) {
            if (this.ab9) {
                let c = b;
                let d = c.c;
                a.deregisterColumn(d);
            }
            else {
                a.deregisterColumn(b);
            }
        }
        q9(a, b, c, d) {
            super.q9(a, b, c, d);
            if (this.ab2.c2.g$b(a, b, c, d)) {
                this.rr(false);
                this.ql();
            }
            let e = typeCast(NumericAxisBase.$, this.y5);
            switch (b) {
                case AnchoredRadialSeries.$$p[2]:
                case AnchoredRadialSeries.$$p[3]:
                    this.qf();
                    break;
                case AnchoredRadialSeries.$$p[1]:
                case RadialBase.$$p[0]:
                    if (this.ab8 != null) {
                        this.ac1(this.dn, this.ab8);
                        this.ab8 = this.dk(this.acx);
                    }
                    break;
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) !== null) {
                        this.ac1(c, this.ab8);
                        this.ab8 = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) !== null) {
                        this.ab8 = this.dk(this.acx);
                        this.ab2.cx.e(this.id);
                    }
                    if (e != null && !e.c1()) {
                        this.ab2.cx.e(this.id);
                        this.rr(this.gg && c != null);
                    }
                    break;
                case AnchoredRadialSeries.$$p[4]:
                    if (this.dn != null) {
                        this.ac1(this.dn, this.ab8);
                        this.ab8 = this.dk(this.acx);
                    }
                    break;
                case "ValueColumn":
                    if (e != null && !e.c1()) {
                        this.ab2.cx.e(this.id);
                        this.rr(this.gg && this.d7);
                    }
                    break;
                case "TrendLineBrush":
                    this.rf(b);
                    break;
                case "TrendLineType":
                    this.ql();
                    break;
            }
        }
        pb(a, b, c, d) {
            super.pb(a, b, c, d);
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.ab2.cx.e(this.id);
                    break;
            }
            this.ab2.c2.g$e(a, b, c, d);
            switch (a) {
                case 4:
                    if (this.y5 != null && !this.y5.c1()) {
                        this.rr(true);
                    }
                    break;
                case 1:
                    if (this.y5 != null && !this.y5.c1()) {
                        this.rr(true);
                    }
                    break;
                case 0:
                    if (this.y5 != null && !this.y5.c1()) {
                        this.rr(true);
                    }
                    break;
                case 2:
                    if (this.acx != null && this.ab2.cx.b > 0 && this.y5 != null && !this.y5.c1()) {
                        this.rr(true);
                    }
                    break;
                case 3:
                    if (d == this.acx) {
                        if (this.y5 != null && !this.y5.c1()) {
                            this.rr(true);
                        }
                    }
                    break;
            }
        }
        he(a, b, c) {
            let d = super.he(a, b, c);
            let e = c;
            if (this.dn == null || this.dn.count == 0 || this.yz == null || this.ab8 == null || this.yz.lj == 0 || this.y5 == null || isInfinity(this.y5.l4) || isInfinity(this.y5.l3) || e.cx.b < 1) {
                d = false;
            }
            return d;
        }
        getOffsetValue() {
            return this.acj(this.yz, this.cv.by, this.cv.bx, this.getEffectiveViewport1(this.cv));
        }
        getCategoryWidth() {
            return this.yz.getCategorySize(this.cv.by, this.cv.bx, this.getEffectiveViewport1(this.cv));
        }
        get_ace() {
            return false;
        }
        get ace() {
            return this.get_ace();
        }
        get_ek() {
            return true;
        }
        get_f5() {
            return this.y5 != null && this.y5.ch;
        }
        acj(a, b, c, d) {
            let e = 0;
            let f = this.preferredCategoryMode(a);
            if (f == 0 && a.categoryMode != 0) {
                f = 1;
            }
            switch (f) {
                case 0:
                    e = 0;
                    break;
                case 1:
                    e = 0.5 * a.getCategorySize(b, c, d);
                    break;
                case 2:
                    e = a.getGroupCenter(this.z8(), b, c, d);
                    break;
            }
            if (a.ch) {
                e = -e;
            }
            return e;
        }
        aci(a, b, c, d, e) {
            let f = 0;
            let g = this.preferredCategoryMode(b);
            if (g == 0 && b.categoryMode != 0) {
                g = 1;
            }
            switch (g) {
                case 0:
                    f = 0;
                    break;
                case 1:
                    f = 0.5 * b.m7(a, c, d, e);
                    break;
                case 2:
                    f = b.m6(a, this.z8(), c, d, e);
                    break;
            }
            if (b.ch) {
                f = -f;
            }
            return f;
        }
        ac2(a, b, c, d) {
            if (d == 0) {
                this.p4(a, b, c);
                return;
            }
            let e = this.cv.by;
            let f = this.cv.bx;
            let g = this.getEffectiveViewport1(this.cv);
            let h = this.wj(this.cv);
            let i = this.y5.k5(f, e, g, h);
            let j = this.yz != null && this.yz.cl;
            let k = new CollisionRect(0, a);
            for (let l = 0; l < this.dn.count; l++) {
                let m = typeCast(RadialBaseView.$, this.cv);
                let n = m.cx.getBucket(l);
                let o = this.acj(this.yz, e, f, g);
                if (j) {
                    o = this.aci(l, this.yz, e, f, g);
                    if (isNaN_(o)) {
                        o = 0;
                    }
                }
                n[0] = this.yz.getScaledAngle(n[0]) + o;
                let p = Math.min(this.y8.b.od(n[2]), i.maxLength);
                let q = this.y8.d(n[0], p, e, f, g);
                let r = this.y8.e(n[0], p, e, f, g);
                if (k.containsLocation(q, r)) {
                    if (c == 7 || c == 6) {
                        b.add(((() => {
                            let $ret = new ChartSelection();
                            $ret.series = this;
                            return $ret;
                        })()));
                        return;
                    }
                    else if (c == 2 || c == 1) {
                        b.add(((() => {
                            let $ret = new ChartSelection();
                            $ret.item = this.dn.item(l);
                            return $ret;
                        })()));
                    }
                    else {
                        b.add(((() => {
                            let $ret = new ChartSelection();
                            $ret.item = this.dn.item(l);
                            $ret.series = this;
                            return $ret;
                        })()));
                    }
                }
            }
        }
        get_acg() {
            return false;
        }
        get acg() {
            return this.get_acg();
        }
        get_aca() {
            return false;
        }
        get aca() {
            return this.get_aca();
        }
        aa9(a, b) {
            let c = b.by;
            let d = b.bx;
            let e = this.getEffectiveViewport1(b);
            let f = this.yz;
            let g = this.y5;
            let h = g.l4;
            let i = g.l3;
            a.f.clear();
            a.n.clear();
            a.q.clear();
            let j = this.xg();
            let k = 0;
            let l = b;
            let m = f.cl;
            let n = new CollisionAvoider();
            let o = 0;
            let p = 0;
            let q = b.cx.d;
            o = this.acj(f, c, d, e);
            l.c2.i = this.y5.n7;
            l.c2.h = this.y5.n6;
            l.c2.j = (r, s) => this.ack(r, s, c, d, e);
            l.c2.k = (r, s) => this.acl(r, s, c, d, e);
            let r = ((() => {
                let $ret = new Clipper(0, d, false);
                $ret.i = a.q;
                return $ret;
            })());
            let s = ((() => {
                let $ret = new TrendResolutionParams();
                $ret.e = b.cx.b;
                $ret.f = b.cx.c;
                $ret.g = q;
                $ret.a = o;
                $ret.d = this.id;
                $ret.i = d;
                $ret.h = e;
                $ret.j = c;
                return $ret;
            })());
            l.c2.l(a.q, this.ab6, this.ab8, this.acn, (t) => this.yz.getScaledAngle(t), (t) => this.y5.od(t), s, r);
            let t = true;
            if (this.acf(b)) {
                q--;
            }
            for (let u = b.cx.c; u <= q; ++u) {
                let v = u;
                if (v * b.cx.b >= this.yz.lj) {
                    v -= intDivide((this.yz.lj), b.cx.b);
                }
                let w = b.cx.getBucket(v);
                p = 0;
                if (m) {
                    p = this.z0(v, c, d, e);
                }
                w[3] = p;
                if (!isNaN_(w[0])) {
                    let x = false;
                    if (m) {
                        o = this.aci(v, f, c, d, e);
                        if (isNaN_(o)) {
                            o = 0;
                            x = true;
                        }
                    }
                    w[0] = f.getScaledAngle(w[0]) + o;
                    if (w[1] < h || w[1] > i) {
                        if (this.acg) {
                            if (w[1] > i && this.aca) {
                            }
                            else {
                                x = true;
                            }
                        }
                        else {
                            if (w[1] > i && this.aca) {
                            }
                            else {
                                continue;
                            }
                        }
                    }
                    if (x) {
                        w[1] = NaN;
                        w[2] = NaN;
                    }
                    w[1] = g.od(w[1]);
                    if (b.cx.b > 1) {
                        if (w[2] < h || w[2] > i) {
                            continue;
                        }
                        w[2] = g.od(w[2]);
                    }
                    else {
                        w[2] = w[1];
                    }
                    if ((isNaN_(w[1]) || isNaN_(w[2])) && t && this.ace && this.acc()) {
                        q++;
                    }
                    else {
                        t = false;
                    }
                    a.f.add(w);
                    if (j) {
                        let y = Math.min(v * b.cx.b, this.dn.count - 1);
                        let z = false;
                        if (this.yz.cl) {
                            let aa = this.yz;
                            let ab = aa.hasOthersCategory && (v * b.cx.b) == this.yz.lj - 1;
                            z = ab;
                        }
                        let ac = this.y8.d(w[0], w[1], c, d, e);
                        let ad = this.y8.e(w[0], w[1], c, d, e);
                        let ae = new Rect(0, ac - 5, ad - 5, 11, 11);
                        if (!isNaN_(ac) && !isNaN_(ad) && !isInfinity(ac) && !isInfinity(ad) && n.tryAdd(ae)) {
                            a.n.add({ $type: Point_$type, x: w[0], y: w[1] });
                            let af = b.cy.item(k);
                            af.al = v;
                            af.ak = y;
                            af.content.item = this.dn.item(y);
                            if (z) {
                                af.ak = this.dn.count;
                                let ag = this.yz;
                                af.content.item = this.y7;
                            }
                            ++k;
                        }
                    }
                }
                else {
                    if (t && this.ace && this.acc()) {
                        q++;
                    }
                }
            }
            b.cy.count = k;
            return;
        }
        ack(a, b, c, d, e) {
            return this.y8.d(a, b, c, d, e);
        }
        acl(a, b, c, d, e) {
            return this.y8.e(a, b, c, d, e);
        }
        acf(a) {
            let b = a;
            return !this.ace && b.cx.c == 0 && b.cx.d == this.yz.lj;
        }
        ab1(a, b, c) {
            let d = null;
            let e = c.by;
            let f = c.bx;
            if (b > -1 && !e.isEmpty && !f.isEmpty) {
                let g = a._inner[0][0] < f.left - 2000 ? f.left - 10 : NaN;
                let h = f.bottom + 10;
                let i = a._inner[b][0] > f.right + 2000 ? f.right + 10 : NaN;
                let j = f.top - 10;
                d = new Clipper(1, g, h, i, j, false);
            }
            return d;
        }
        ac6(a, b, c, d, e) {
            if (a.count > 0 && d.count > 0) {
                if (!e || this.acb()) {
                    a.add(this.ado);
                    a.add(a._inner[0]);
                    d.add(this.ado);
                    d.add(d._inner[0]);
                }
            }
        }
        acc() {
            return !this.acb();
        }
        acb() {
            let a = this.cv.by;
            return !a.containsPoint({ $type: Point_$type, x: 0.5, y: 0.5 });
        }
        o5(a, b) {
            super.o5(a, b);
            let c = b;
            if (a) {
                c.cy.clear();
            }
            c.c2.g$d();
        }
        abc(a, b) {
            this.qx();
            let c = b.by;
            let d = b.bx;
            let e = this.getEffectiveViewport1(b);
            let f = this.wj(b);
            let g = b;
            g.c2.g$g(a.q);
            let h = new List$1(Point_$type, 0);
            for (let i = 0; i < a.n.count; i++) {
                let j = a.n._inner[i];
                let k = this.y8.d(j.x, j.y, c, d, e);
                let l = this.y8.e(j.x, j.y, c, d, e);
                let m = { $type: Point_$type, x: k, y: l };
                h.add(m);
            }
            CategoryMarkerManager.e(this, h, g.cy, this.xi);
            this.ac0(b, a);
            g.cr();
            this.acz(d, c, e, f, g);
        }
        ab0(a, b, c) {
            if (b < a || a < 0 || a > this.ab8.count || b < 0 || b > this.ab8.count || c == null) {
                return null;
            }
            let d = new Array((b - a) + 1);
            let e = c.cn;
            let f = null;
            if (e) {
                f = c.i$b;
            }
            for (let g = a; g <= b; g++) {
                let h = g;
                if (e) {
                    h = f._inner[h];
                }
                d[g - a] = this.dn.item(g);
            }
            return d;
        }
        ac4(a, b, c, d, e, f) {
            let g = this.bx != 1;
            let h = this.cp != 1;
            let i = this.co != 1;
            let j = this.d2;
            this.zg.a3(this.zg.d, d.cn, a, b, c, d, e, f, true);
            this.zg.aa(this.ib);
            let k = this.zg.ax;
            let l = null;
            let m = null;
            let n = null;
            let o = this.dn;
            let p = null;
            let q = null;
            let r = null;
            if (j && this.db != null && !k.e) {
                let s = this.vo(k.z);
                let t = this.vp(k.z);
                this.zg.ag = s;
                this.zg.ah = t;
                k.aa = s;
                k.ab = t;
            }
            if (g && this.db != null) {
                l = this.db.dl.getHighlightingInfo(this, o, k.z, k.y, true);
                if (this.db.dl.isCrossContextHighlight(this)) {
                    p = this.db.dl.getHighlightingInfo(this, o, k.z, k.y, true);
                }
                k.c = l;
            }
            if (h && this.db != null) {
                m = this.db.dm.getHighlightingInfo(this, o, k.z, k.y, true);
                if (m == null && this.bn != null) {
                    m = this.db.dm.getHighlightingInfo(this.bn, this.bn.dn, k.z, k.y, true);
                }
                if (this.db.dm.isCrossContextHighlight(this)) {
                    q = this.db.dm.getHighlightingInfo(this, o, k.z, k.y, true);
                }
                k.d = m;
            }
            if (i && this.db != null) {
                n = this.db.dk.getHighlightingInfo(this, o, k.z, k.y, true);
                if (this.db.dk.isCrossContextHighlight(this)) {
                    r = this.db.dk.getHighlightingInfo(this, o, k.z, k.y, true);
                }
                k.b = n;
            }
            k.h = f;
            this.aba(k);
            this.zg.y(this, l, m, n, f, g, h, i, k.v, this.db.dl.totalHighWaterMark, k.x, this.db.dm.totalHighWaterMark, k.t, this.db.dk.totalHighWaterMark);
        }
        ac5(a, b, c, d, e, f) {
            let g = this.bx != 1;
            let h = this.cp != 1;
            let i = this.cp != 1;
            let j = this.d2;
            this.zg.a3(this.zg.b, d.cn, a, b, c, d, e, f, false);
            this.zg.ab(this.ib);
            let k = this.zg.ay;
            let l = null;
            let m = null;
            let n = null;
            let o = this.dn;
            if (j && this.db != null && !k.e) {
                let p = this.vn(k.z);
                let q = this.vq(k.z);
                this.zg.ag = p;
                this.zg.ah = q;
                k.aa = p;
                k.ab = q;
            }
            if (g && this.db != null) {
                l = this.db.dl.getHighlightingInfo(this, o, k.z, k.y, false);
                k.c = l;
            }
            if (h && this.db != null) {
                m = this.db.dm.getHighlightingInfo(this, o, k.z, k.y, false);
                if (m == null && this.bn != null) {
                    m = this.db.dm.getHighlightingInfo(this.bn, this.bn.dn, k.z, k.y, false);
                }
                k.d = m;
            }
            k.h = f;
            this.abb(k);
            this.zg.z(this, l, m, n, f, g, h, i, b < 0);
        }
        ac0(a, b) {
            a.b7 = true;
            this.zg.a1(this, this.zw(), runOn(this, this.yn), this.z6(a), this.z7(a));
            let c = this.zg.d;
            let d = c != null;
            let e = this.yz;
            if (e == null) {
                return;
            }
            let f = this.getEffectiveViewport1(a);
            let g = new ScalerParams(0, a.by, a.bx, e.ch, f);
            let h = this.dn == null ? 0 : this.dn.count;
            let i = a;
            let j = b.f;
            let k = i.cx.c;
            let l = i.cx.d;
            let m = i.cx.b;
            let n = k * m;
            for (let o = 0; o < a.cy.count; o++) {
                let p = a.cy.item(o);
                let q = p.content;
                if (d) {
                    let r = p.al;
                    this.ac4(j, r, h, e, g, a.q);
                }
                this.zg.ac(p, q);
            }
        }
        acz(a, b, c, d, e) {
            e.c3(a, b, c, d);
        }
        sh() {
            super.sh();
            if (this.index < 0) {
                return;
            }
            this.ab2.c4();
        }
        kx(a, b) {
            if (a == this.ab2.c2.g$j) {
                return null;
            }
            return super.kx(a, b);
        }
        gd(a) {
            let b = this.cv.by;
            b = b.copy();
            let c = this.cv.bx;
            let d = !b.isEmpty && !c.isEmpty && this.dn != null ? this.dn.indexOf(a) : -1;
            if (this.yz == null || this.ab8 == null || this.y5 == null) {
                return false;
            }
            if (d < 0 || d > this.ab8.count - 1) {
                return false;
            }
            let e = this.yz.getScaledAngle(d);
            let f = this.y5.od(this.ab8.item(d));
            if (isNaN_(f)) {
                f = (this.y5.n6 + this.y5.n7) / 2;
            }
            let g = 0.5 + (Math.cos(e) * f);
            let h = 0.5 + (Math.sin(e) * f);
            if (!isNaN_(g)) {
                if (g < b.left + 0.1 * b.width) {
                    g = g + 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
                if (g > b.right - 0.1 * b.width) {
                    g = g - 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
            }
            if (!isNaN_(h)) {
                if (h < b.top + 0.1 * b.height) {
                    h = h + 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
                if (h > b.bottom - 0.1 * b.height) {
                    h = h - 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
            }
            if (this.c3 != null) {
                this.c3.au(this.db, b, true);
            }
            return d >= 0;
        }
        rt(a, b) {
            super.rt(a, b);
            if (!this.g0) {
                this.cv.a4(b);
                return;
            }
            this.cv.a4(b);
            let c = typeCast(AnchoredRadialSeriesView.$, this.cu);
            c.cx.e(this.id);
            if (this.d5(this.cu)) {
                return;
            }
            if (!this.gs) {
                this.ab5 = new RadialFrame(3);
                this.aa9(this.ab5, c);
            }
            this.gs = false;
            this.abc(this.ab5, c);
            this.g0 = false;
        }
        rq(a, b, c, d, e) {
            super.rq(a, b, c, d, e);
            let f = this.ba.a$j.item(d);
            let g = f;
            g.cx.e(this.id);
            f.a3(c);
            if (this.d5(g)) {
                return;
            }
            if (this.ab4 == null) {
                this.ab4 = new RadialFrame(3);
            }
            this.ab4.v();
            this.aa9(this.ab4, g);
            this.abc(this.ab4, g);
        }
        pz(a) {
            super.pz(a);
            this.bc.exportTrendlineData(this, a, this.ab2.c2.g$j);
        }
    }
    AnchoredRadialSeries.$t = /*@__PURE__*/ markType(AnchoredRadialSeries, 'AnchoredRadialSeries', RadialBase.$);
    AnchoredRadialSeries.ac7 = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, AnchoredRadialSeries.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    AnchoredRadialSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, AnchoredRadialSeries, 'raisePropertyChanged', ['HighlightedValueMemberPath:acp:ac8', [2, null], 'UseCategoryNormalizedValues:ach:adg', [0, false], 'ValueMemberAsLegendLabel:act:adh', [2, null], 'ValueMemberAsLegendUnit:acv:adi', [2, null], 'ValueMemberPath:acx:adj', [2, null], 'TrendLineType:ab6:ade', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness:acm:add', [1, 1.5], 'TrendLinePeriod:acn:adc', [1, 7], 'TrendLineZIndex:aco:adf', [1, 1], 'TrendLineBrush:adl:ac9', [Brush.$, null], 'TrendLineDashArray:adm:ada', [DoubleCollection.$], 'TrendLineDashCap:adn:adb', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return AnchoredRadialSeries;
})();
/**
 * @hidden
 */
export let AnchoredRadialSeriesView = /*@__PURE__*/ (() => {
    class AnchoredRadialSeriesView extends RadialBaseView {
        constructor(a) {
            super(a);
            this.c1 = null;
            this.c2 = null;
            this.cx = new AnchoredRadialBucketCalculator(this);
            this.c1 = a;
            this.c2 = new RadialTrendLineManager();
        }
        c3(a, b, c, d) {
        }
        c4() {
            this.c1.adk = null;
            if (this.c1.adl != null) {
                this.c1.adk = this.c1.adl;
            }
            else {
                this.c1.adk = this.c1.u9;
            }
        }
        a7(a, b) {
            if (a.d) {
                if (!b) {
                }
                if (this.c1.ab6 != 0 && !b) {
                    let c = this.c2.g$j;
                    c.ad = this.c1.acm;
                    c._stroke = this.c1.adk;
                    c.ai = this.c1.adm;
                    c.aj = this.c1.adn;
                    a.v(c);
                }
            }
            super.a7(a, b);
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'>";
            if (this.c1.yz.f2 != null) {
                a += "<span>${item." + this.c1.yz.f2 + "}</span><br/>";
            }
            a += "<span";
            let b = this.e.ba.a$u(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.c1.title + ": </span><span class='ui-priority-primary'>" + "${item." + this.c1.acx + "}</span></div>";
            return a;
        }
    }
    AnchoredRadialSeriesView.$t = /*@__PURE__*/ markType(AnchoredRadialSeriesView, 'AnchoredRadialSeriesView', RadialBaseView.$);
    return AnchoredRadialSeriesView;
})();
