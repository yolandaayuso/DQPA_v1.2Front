/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, IList$1_$type, toEnum, markType } from "igniteui-react-core";
import { NotImplementedException } from "igniteui-react-core";
/**
 * @hidden
 */
export let SortedListView$1 = /*@__PURE__*/ (() => {
    class SortedListView$1 extends Base {
        constructor($t, a, b) {
            super();
            this.$t = null;
            this.c = null;
            this.d = null;
            this.$t = $t;
            this.$type = this.$type.specialize(this.$t);
            this.c = b;
            this.d = a;
        }
        add(a) {
            throw new NotImplementedException(0);
        }
        clear() {
            throw new NotImplementedException(0);
        }
        contains(a) {
            return this.d.contains(a);
        }
        indexOf(a) {
            return this.c.indexOf(this.d.indexOf(a));
        }
        insert(a, b) {
            throw new NotImplementedException(0);
        }
        get a() {
            return true;
        }
        get isReadOnly() {
            return true;
        }
        remove(a) {
            throw new NotImplementedException(0);
        }
        removeAt(a) {
            throw new NotImplementedException(0);
        }
        item(a, b) {
            if (arguments.length === 2) {
                throw new NotImplementedException(0);
                return b;
            }
            else {
                return this.d.item(this.c.item(a));
            }
        }
        get count() {
            return this.d.count;
        }
        get b() {
            throw new NotImplementedException(0);
        }
        get e() {
            throw new NotImplementedException(0);
        }
        getEnumeratorObject() {
            return this.getEnumerator();
        }
        *_getEnumerator() {
            for (let a = 0; a < this.count; a++) {
                yield this.item(a);
            }
        }
        getEnumerator() {
            return toEnum(() => this._getEnumerator()).getEnumerator();
        }
        copyTo(a, b) {
            throw new NotImplementedException(0);
        }
    }
    SortedListView$1.$t = /*@__PURE__*/ markType(SortedListView$1, 'SortedListView$1', Base.$, [/*@__PURE__*/ IList$1_$type.specialize(0)]);
    return SortedListView$1;
})();
