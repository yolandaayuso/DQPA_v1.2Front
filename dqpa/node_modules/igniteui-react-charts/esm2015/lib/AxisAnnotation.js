/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DependencyObject } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, PropertyChangedEventArgs, Array_$type, markType, markDep } from "igniteui-react-core";
import { IAxisAnnotation_$type } from "./IAxisAnnotation";
import { DependencyProperty } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { BindingFormatter } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let AxisAnnotation = /*@__PURE__*/ (() => {
    class AxisAnnotation extends DependencyObject {
        constructor() {
            super(...arguments);
            this.propertyChanged = null;
            this.l = false;
            this._formatLabel = null;
            this.k = false;
            this.j = null;
        }
        resetCachedExtent() {
            this.l = true;
        }
        checkForExtentReset(a) {
            if (this.l) {
                this.l = false;
                a();
            }
        }
        ae(a, b, c) {
            this.ad(a, b, c);
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        ad(a, b, c) {
            this.k = true;
            switch (a) {
                case AxisAnnotation.$$p[6]:
                case AxisAnnotation.$$p[7]:
                    if (this.labelFormat != null) {
                        this.j = new BindingFormatter();
                        this.j.j = this.labelFormat;
                        this.j.d = this.labelFormatSpecifiers;
                    }
                    else {
                        this.j = null;
                    }
                    break;
            }
        }
        resolveLabelValue() {
            if (this.text != null) {
                return this.text;
            }
            if (this.formatLabel != null) {
                return this.formatLabel(this.value);
            }
            if (this.j != null) {
                return this.j.i(this.value);
            }
            if (this.value == null) {
                return null;
            }
            return this.value.toString();
        }
        get formatLabel() {
            return this._formatLabel;
        }
        set formatLabel(a) {
            this._formatLabel = a;
        }
        get backgroundPadding() {
            return new Thickness(1, this.backgroundPaddingLeft, this.backgroundPaddingTop, this.backgroundPaddingRight, this.backgroundPaddingBottom);
        }
        set backgroundPadding(a) {
            this.backgroundPaddingLeft = a.left;
            this.backgroundPaddingTop = a.top;
            this.backgroundPaddingRight = a.right;
            this.backgroundPaddingBottom = a.bottom;
        }
    }
    AxisAnnotation.$t = /*@__PURE__*/ markType(AxisAnnotation, 'AxisAnnotation', DependencyObject.$, [INotifyPropertyChanged_$type, IAxisAnnotation_$type]);
    AxisAnnotation.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, AxisAnnotation, 'ae', ['BackgroundCornerRadius', [1, NaN], 'BackgroundPaddingBottom', [1, NaN], 'BackgroundPaddingLeft', [1, NaN], 'BackgroundPaddingRight', [1, NaN], 'BackgroundPaddingTop', [1, NaN], 'Background', [Brush.$, null], 'LabelFormat', [2, null], 'LabelFormatSpecifiers', [Array_$type, null], 'Outline', [Brush.$, null], 'StrokeThickness', [1, 0], 'TextColor', [Brush.$, null], 'Text', [2, null], 'Value', [4, null]]);
    return AxisAnnotation;
})();
