/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { PolarBase } from "./PolarBase";
import { PathRenderer } from "./PathRenderer";
import { DefaultFlattener } from "./DefaultFlattener";
import { PolarBaseView } from "./PolarBaseView";
import { Number_$type, Point_$type, markType } from "igniteui-react-core";
import { PolarLinePlanner } from "./PolarLinePlanner";
import { List$1 } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let PolarLineSeriesBase = /*@__PURE__*/ (() => {
    class PolarLineSeriesBase extends PolarBase {
        get_zt() {
            return true;
        }
        zy() {
            return true;
        }
        cs() {
            return new PolarLineSeriesBaseView(this);
        }
        q1(a) {
            super.q1(a);
            this.acj = a;
        }
        constructor() {
            super();
            this.acg = null;
            this.aci = null;
            this.ach = null;
            this.acg = new PathRenderer(1, new DefaultFlattener());
            this.aci = new PathRenderer(0);
        }
        ack() {
            return 1;
        }
        get_acn() {
            return false;
        }
        get acn() {
            return this.get_acn();
        }
        get_acp() {
            return false;
        }
        get acp() {
            return this.get_acp();
        }
        abd(a, b) {
            super.abd(a, b);
            a.m.clear();
            let c = b.by;
            let d = b.bx;
            let e = b.getEffectiveViewport();
            let f = this.zj != null ? this.zj.count : 0;
            let g = this.zk != null ? this.zk.count : 0;
            let h = Math.min(f, g);
            let i = ((() => {
                let $ret = new PolarLinePlanner();
                $ret.m = (j) => this.yw.a.getScaledAngle1(this.zj.item(j), this.yw.e, this.yw.d);
                $ret.q = h;
                $ret.n = (j) => this.yu.oe(this.zk.item(j), this.yw.g, this.yw.f, this.yw.i, this.yw.h);
                $ret.l = this.id;
                $ret.f = this.zz;
                $ret.b = this.ack();
                $ret.o = (j) => this.acq(a, j);
                $ret.p = (j) => this.acr(a, j);
                $ret.ad = d;
                $ret.ac = e;
                $ret.ae = c;
                $ret.d = this.acp;
                $ret.c = this.acn;
                return $ret;
            })());
            let j = new List$1(Number_$type, 0);
            for (let k = 0; k < h; k++) {
                if (this.aco(k)) {
                    j.add(k);
                }
            }
            if (this.acp && j.count > 0) {
                j.add(j._inner[0]);
            }
            i.x(a.m, j);
        }
        acq(a, b) {
            return a.w._inner[b].x;
        }
        acr(a, b) {
            return a.w._inner[b].y;
        }
        acm() {
            return !this.acl();
        }
        acl() {
            let a = this.db.v4;
            return !a.containsPoint({ $type: Point_$type, x: 0.5, y: 0.5 });
        }
        aco(a) {
            return (this.zj.item(a) >= this.yw.a.l4 && this.zj.item(a) <= this.yw.a.l3 && this.zk.item(a) >= this.yw.b.l4 && this.zk.item(a) <= this.yw.b.l3) || (isNaN_(this.zj.item(a)) || isNaN_(this.zk.item(a)));
        }
        o5(a, b) {
            super.o5(a, b);
            this.acs(b);
        }
        abh(a, b) {
            super.abh(a, b);
            if (this.zz) {
                this.ach = this.acg;
            }
            else {
                this.ach = this.aci;
            }
            this.ach.b = this.ack();
            this.acs(b);
            this.act(a, b);
        }
    }
    PolarLineSeriesBase.$t = /*@__PURE__*/ markType(PolarLineSeriesBase, 'PolarLineSeriesBase', PolarBase.$);
    return PolarLineSeriesBase;
})();
/**
 * @hidden
 */
export let PolarLineSeriesBaseView = /*@__PURE__*/ (() => {
    class PolarLineSeriesBaseView extends PolarBaseView {
        constructor(a) {
            super(a);
            this.c8 = null;
            this.c8 = a;
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.v1 = a;
            this.e.jm = 3;
            this.e.jn = 1;
            this.e.jo = 4;
            this.e.hc = false;
        }
    }
    PolarLineSeriesBaseView.$t = /*@__PURE__*/ markType(PolarLineSeriesBaseView, 'PolarLineSeriesBaseView', PolarBaseView.$);
    return PolarLineSeriesBaseView;
})();
