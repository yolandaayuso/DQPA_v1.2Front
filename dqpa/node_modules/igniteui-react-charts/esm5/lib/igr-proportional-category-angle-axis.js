import { __extends } from "tslib";
import { OthersCategoryType_$type } from "igniteui-react-core";
import { IgrCategoryAngleAxis } from "./igr-category-angle-axis";
import { ProportionalCategoryAngleAxis } from "./ProportionalCategoryAngleAxis";
import { ensureEnum } from "igniteui-react-core";
/**
 * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.
*/
var IgrProportionalCategoryAngleAxis = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrProportionalCategoryAngleAxis, _super);
    function IgrProportionalCategoryAngleAxis(props) {
        return _super.call(this, props) || this;
    }
    IgrProportionalCategoryAngleAxis.prototype.createImplementation = function () {
        return new ProportionalCategoryAngleAxis();
    };
    Object.defineProperty(IgrProportionalCategoryAngleAxis.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrProportionalCategoryAngleAxis.prototype, "valueMemberPath", {
        /**
         * Gets or sets the Value mapping property for the axis.
        */
        get: function () {
            return this.i.ok;
        },
        set: function (v) {
            this.i.ok = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrProportionalCategoryAngleAxis.prototype, "normalizationMayContainUnknowns", {
        get: function () {
            return this.i.normalizationMayContainUnknowns;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrProportionalCategoryAngleAxis.prototype, "othersCategoryThreshold", {
        /**
         * Gets or sets the threshold value that determines if categories are grouped into the Others category.
        */
        get: function () {
            return this.i.ob;
        },
        set: function (v) {
            this.i.ob = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrProportionalCategoryAngleAxis.prototype, "othersCategoryType", {
        /**
         * Gets or sets whether to use numeric or percent-based threshold value.
        */
        get: function () {
            return this.i.ny;
        },
        set: function (v) {
            this.i.ny = ensureEnum(OthersCategoryType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrProportionalCategoryAngleAxis.prototype, "othersCategoryText", {
        /**
         * Gets or sets the label of the Others slice.
        */
        get: function () {
            return this.i.oe;
        },
        set: function (v) {
            this.i.oe = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrProportionalCategoryAngleAxis.prototype, "isPiecewise", {
        get: function () {
            return this.i.cl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrProportionalCategoryAngleAxis.prototype, "othersValue", {
        get: function () {
            return this.i.othersValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrProportionalCategoryAngleAxis.prototype, "othersIndex", {
        get: function () {
            return this.i.othersIndex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrProportionalCategoryAngleAxis.prototype, "hasOthersCategory", {
        get: function () {
            return this.i.hasOthersCategory;
        },
        enumerable: false,
        configurable: true
    });
    IgrProportionalCategoryAngleAxis.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.fz(item, memberPathName);
        return (iv);
    };
    /**
     * Gets a scaled value inside the viewport.
    
    * @param unscaledValue  * Value to scale.
    * @param p  * Scaler parameters
    */
    IgrProportionalCategoryAngleAxis.prototype.getScaledAngle = function (unscaledAngle) {
        var iv = this.i.getScaledAngle(unscaledAngle);
        return (iv);
    };
    /**
     * Returns an unscaled value from a scaled value based on the amount of data.
    
    * @param scaledValue  * Scaled value.
    * @param p  * Scaler parameters
    */
    IgrProportionalCategoryAngleAxis.prototype.getUnscaledAngle = function (scaledAngle) {
        var iv = this.i.getUnscaledAngle(scaledAngle);
        return (iv);
    };
    IgrProportionalCategoryAngleAxis.prototype.isOthersValue = function (index) {
        var iv = this.i.isOthersValue(index);
        return (iv);
    };
    IgrProportionalCategoryAngleAxis.prototype.getValueLabel = function (value) {
        var iv = this.i.gf(value);
        return (iv);
    };
    IgrProportionalCategoryAngleAxis.prototype.getNormalizingValueAtIndex = function (index, fallbackValue) {
        var iv = this.i.getNormalizingValueAtIndex(index, fallbackValue);
        return (iv);
    };
    IgrProportionalCategoryAngleAxis.prototype.getPercentageValue = function (labelIndex) {
        var iv = this.i.oa(labelIndex);
        return (iv);
    };
    return IgrProportionalCategoryAngleAxis;
}(IgrCategoryAngleAxis));
export { IgrProportionalCategoryAngleAxis };
