/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { String_$type, Number_$type, markType, getEnumerator } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var MassIndexIndicatorStrategy = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(MassIndexIndicatorStrategy, _super);
    function MassIndexIndicatorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MassIndexIndicatorStrategy.prototype.b = function (a, b) {
        var c = new List$1(String_$type, 0);
        c.add("HighColumn");
        c.add("LowColumn");
        c.o(b.a.c);
        return c;
    };
    MassIndexIndicatorStrategy.prototype.c = function (a, b) {
        var c = new List$1(Number_$type, 0);
        for (var d = 0; d < (Math.min(a.count, b.count)); d++) {
            c.add(a.item(d) - b.item(d));
        }
        return c;
    };
    MassIndexIndicatorStrategy.prototype.a = function (a, b) {
        var c = 9;
        var d = a.highColumn;
        var e = a.lowColumn;
        var f = a.indicatorColumn;
        var g = getEnumerator(b.a.b(this.c(d, e), c));
        var h = getEnumerator(b.a.b(b.a.b(this.c(d, e), c), c));
        var i = new Array(c);
        for (var j = 0; j < c; j++) {
            i[j] = 0;
        }
        var k = 0;
        for (var l = 0; l < f.count; l++) {
            var m = l % c;
            k -= i[m];
            g.moveNext();
            h.moveNext();
            var n = b.i(g.current / h.current);
            k += n;
            f.item(l, k);
            i[m] = n;
        }
        return true;
    };
    MassIndexIndicatorStrategy.$t = markType(MassIndexIndicatorStrategy, 'MassIndexIndicatorStrategy', IndicatorCalculationStrategy.$);
    return MassIndexIndicatorStrategy;
}(IndicatorCalculationStrategy));
export { MassIndexIndicatorStrategy };
