import { __extends, __values } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrPropertyUpdatedEventArgs } from "igniteui-react-core";
import { SizeScale } from "./SizeScale";
import { TypeRegistrar } from "igniteui-react-core";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * Represents a scale that is used determine an object's size.
*/
var IgrSizeScale = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrSizeScale, _super);
    function IgrSizeScale(props) {
        var _this = _super.call(this, props) || this;
        _this.mounted = false;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._propertyUpdated = null;
        _this._propertyUpdated_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        if (_this._initializeAdapters) {
            _this._initializeAdapters();
        }
        return _this;
    }
    IgrSizeScale.prototype.createImplementation = function () {
        return new SizeScale();
    };
    Object.defineProperty(IgrSizeScale.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrSizeScale.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: false,
        configurable: true
    });
    IgrSizeScale._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgrSizeScale.prototype.onImplementationCreated = function () {
    };
    IgrSizeScale.prototype.componentDidMount = function () {
        var e_1, _a;
        this.mounted = true;
        try {
            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IgrSizeScale.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrSizeScale.prototype.render = function () {
        return null;
    };
    Object.defineProperty(IgrSizeScale.prototype, "globalMinimum", {
        /**
         * Gets or sets global minimum value that will be mapped to MinumumValue of this scale
        */
        get: function () {
            return this.i.globalMinimum;
        },
        set: function (v) {
            this.i.globalMinimum = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrSizeScale.prototype, "globalMaximum", {
        /**
         * Gets or sets global maximum value that will be mapped to MaxumumValue of this scale
        */
        get: function () {
            return this.i.globalMaximum;
        },
        set: function (v) {
            this.i.globalMaximum = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrSizeScale.prototype, "minimumValue", {
        /**
         * Gets or sets the minimum size (in pixels) for this scale.
        */
        get: function () {
            return this.i.minimumValue;
        },
        set: function (v) {
            this.i.minimumValue = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrSizeScale.prototype, "maximumValue", {
        /**
         * Gets or sets the maximum size (in pixels) for this scale.
        */
        get: function () {
            return this.i.maximumValue;
        },
        set: function (v) {
            this.i.maximumValue = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrSizeScale.prototype, "isLogarithmic", {
        /**
         * Gets or sets whether the scale is logarithmic.
        */
        get: function () {
            return this.i.isLogarithmic;
        },
        set: function (v) {
            this.i.isLogarithmic = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrSizeScale.prototype, "logarithmBase", {
        /**
         * Gets or sets the logarithm base for this scale.
        */
        get: function () {
            return this.i.logarithmBase;
        },
        set: function (v) {
            this.i.logarithmBase = +v;
        },
        enumerable: false,
        configurable: true
    });
    IgrSizeScale.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    Object.defineProperty(IgrSizeScale.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgrSizeScale.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrSizeScale.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("SizeScale");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgrSizeScale.prototype.getCurrentGlobalMinimum = function () {
        var iv = this.i.getCurrentGlobalMinimum();
        return (iv);
    };
    IgrSizeScale.prototype.getCurrentGlobalMaximum = function () {
        var iv = this.i.getCurrentGlobalMaximum();
        return (iv);
    };
    Object.defineProperty(IgrSizeScale.prototype, "propertyUpdated", {
        /**
         * Event raised when a property (including "effective" and non-dependency property) value changes.
        */
        get: function () {
            return this._propertyUpdated;
        },
        set: function (ev) {
            var _this = this;
            if (this._propertyUpdated_wrapped !== null) {
                this.i.propertyUpdated = delegateRemove(this.i.propertyUpdated, this._propertyUpdated_wrapped);
                this._propertyUpdated_wrapped = null;
                this._propertyUpdated = null;
            }
            this._propertyUpdated = ev;
            this._propertyUpdated_wrapped = function (o, e) {
                var outerArgs = new IgrPropertyUpdatedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforePropertyUpdated) {
                    _this.beforePropertyUpdated(_this, outerArgs);
                }
                if (_this._propertyUpdated) {
                    _this._propertyUpdated(_this, outerArgs);
                }
            };
            this.i.propertyUpdated = delegateCombine(this.i.propertyUpdated, this._propertyUpdated_wrapped);
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrSizeScale;
}(React.Component));
export { IgrSizeScale };
