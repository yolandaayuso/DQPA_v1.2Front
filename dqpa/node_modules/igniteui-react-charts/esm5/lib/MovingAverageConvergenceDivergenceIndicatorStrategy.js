/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { String_$type, markType, getEnumerator } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var MovingAverageConvergenceDivergenceIndicatorStrategy = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(MovingAverageConvergenceDivergenceIndicatorStrategy, _super);
    function MovingAverageConvergenceDivergenceIndicatorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MovingAverageConvergenceDivergenceIndicatorStrategy.prototype.b = function (a, b) {
        var c = new List$1(String_$type, 0);
        c.o(a.typicalColumn.basedOn);
        c.o(b.a.c);
        return c;
    };
    MovingAverageConvergenceDivergenceIndicatorStrategy.prototype.a = function (a, b) {
        var c = a.typicalColumn;
        var d = a.indicatorColumn;
        var e = a.shortPeriod;
        var f = a.longPeriod;
        var g = getEnumerator(b.a.b(c, e));
        var h = getEnumerator(b.a.b(c, f));
        var i = 0;
        while (g.moveNext() && h.moveNext()) {
            var j = b.i(g.current - h.current);
            d.item(i, j);
            i++;
        }
        return true;
    };
    MovingAverageConvergenceDivergenceIndicatorStrategy.$t = markType(MovingAverageConvergenceDivergenceIndicatorStrategy, 'MovingAverageConvergenceDivergenceIndicatorStrategy', IndicatorCalculationStrategy.$);
    return MovingAverageConvergenceDivergenceIndicatorStrategy;
}(IndicatorCalculationStrategy));
export { MovingAverageConvergenceDivergenceIndicatorStrategy };
