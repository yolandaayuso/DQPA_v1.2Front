/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, IList$1_$type, Number_$type, markType } from "igniteui-react-core";
import { NotImplementedException } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
var FinancialValueList = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialValueList, _super);
    function FinancialValueList(a, b, c, d, e) {
        var _this = _super.call(this) || this;
        _this.d = null;
        _this.b = null;
        _this.a = null;
        _this.c = null;
        _this.e = null;
        _this.d = a;
        _this.b = b;
        _this.a = d;
        _this.c = c;
        _this.e = e;
        return _this;
    }
    FinancialValueList.prototype.indexOf = function (a) {
        throw new NotImplementedException(0);
    };
    FinancialValueList.prototype.insert = function (a, b) {
        throw new NotImplementedException(0);
    };
    FinancialValueList.prototype.removeAt = function (a) {
        throw new NotImplementedException(0);
    };
    FinancialValueList.prototype.item = function (a, b) {
        if (arguments.length === 2) {
            return b;
        }
        else {
            var b_1 = NaN;
            var c = NaN;
            var d = NaN;
            var e = NaN;
            var f = NaN;
            if (this.d != null && a >= 0 && a < this.d.count) {
                b_1 = this.d.item(a);
            }
            if (this.b != null && a >= 0 && a < this.b.count) {
                c = this.b.item(a);
            }
            if (this.c != null && a >= 0 && a < this.c.count) {
                d = this.c.item(a);
            }
            if (this.a != null && a >= 0 && a < this.a.count) {
                e = this.a.item(a);
            }
            if (this.e != null && a >= 0 && a < this.e.count) {
                f = this.e.item(a);
            }
            var g = isNaN_(b_1);
            var h = isNaN_(c);
            var i = isNaN_(d);
            var j = isNaN_(e);
            var k = isNaN_(f);
            if (!h && !i && !j) {
                return (c + d + e) / 3;
            }
            if (!h && !i) {
                return (c + d) / 2;
            }
            if (!g && !j) {
                return (b_1 + e) / 2;
            }
            if (!g) {
                return b_1;
            }
            if (!h) {
                return c;
            }
            if (!i) {
                return d;
            }
            if (!j) {
                return e;
            }
            return NaN;
        }
    };
    FinancialValueList.prototype.add = function (a) {
        throw new NotImplementedException(0);
    };
    FinancialValueList.prototype.clear = function () {
        throw new NotImplementedException(0);
    };
    FinancialValueList.prototype.contains = function (a) {
        throw new NotImplementedException(0);
    };
    FinancialValueList.prototype.copyTo = function (a, b) {
        throw new NotImplementedException(0);
    };
    Object.defineProperty(FinancialValueList.prototype, "count", {
        get: function () {
            var a = 0;
            var b = 0;
            var c = 0;
            var d = 0;
            var e = 0;
            if (this.d != null) {
                a = this.d.count;
            }
            if (this.b != null) {
                b = this.b.count;
            }
            if (this.c != null) {
                c = this.c.count;
            }
            if (this.a != null) {
                d = this.a.count;
            }
            if (this.e != null) {
                e = this.e.count;
            }
            var f = 0;
            f = Math.max(f, a);
            f = Math.max(f, b);
            f = Math.max(f, c);
            f = Math.max(f, d);
            f = Math.max(f, e);
            return f;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialValueList.prototype, "isReadOnly", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    FinancialValueList.prototype.remove = function (a) {
        throw new NotImplementedException(0);
    };
    FinancialValueList.prototype.getEnumerator = function () {
        throw new NotImplementedException(0);
    };
    FinancialValueList.prototype.getEnumeratorObject = function () {
        throw new NotImplementedException(0);
    };
    FinancialValueList.$t = markType(FinancialValueList, 'FinancialValueList', Base.$, [IList$1_$type.specialize(Number_$type)]);
    return FinancialValueList;
}(Base));
export { FinancialValueList };
