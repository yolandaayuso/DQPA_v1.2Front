import { __extends } from "tslib";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { AxisAngleLabelMode_$type } from "./AxisAngleLabelMode";
import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { ensureEnum } from "igniteui-react-core";
/**
 * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.
*
* `CategoryAngleAxis` represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories
*
* ```ts
* <IgrDataChart
* 	ref={this.onChartRef}
* 	dataSource={this.state.dataSource}
* 	width="100%"
* 	height="100%" >
*
*     <IgrCategoryAngleAxis name="angleAxis" label="Department" />
*     <IgrNumericRadiusAxis name="radiusAxis" />
*
* </IgrDataChart>
* ```
*/
var IgrCategoryAngleAxis = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrCategoryAngleAxis, _super);
    function IgrCategoryAngleAxis(props) {
        var _this = _super.call(this, props) || this;
        _this._actualIntervalChange = null;
        _this._actualIntervalChange_wrapped = null;
        return _this;
    }
    IgrCategoryAngleAxis.prototype.createImplementation = function () {
        return new CategoryAngleAxis();
    };
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "isAngular", {
        /**
         * Checks if the axis is of angular type
        */
        get: function () {
            return this.i.b9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "startAngleOffset", {
        /**
         * Indicates the angle in degress that the chart's 0th angle should be offset.
        *
        * Indicates the angle in degress that the chart's 0th angle should be offset.
        *
        * ```ts
        * <IgrDataChart
        *     dataSource={this.state.dataSource}   >
        *
        *     <IgrCategoryAngleAxis name="angleAxis" startAngleOffset ={30} />
        *     <IgrNumericRadiusAxis name="radiusAxis" />
        *
        * </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.ne;
        },
        set: function (v) {
            this.i.ne = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "labelMode", {
        /**
         * Indicates the mode axis labels will operate in.
        */
        get: function () {
            return this.i.ml;
        },
        set: function (v) {
            this.i.ml = ensureEnum(AxisAngleLabelMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "areGroupSizesUneven", {
        get: function () {
            return this.i.mv;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "interval", {
        /**
         * Gets or sets the frequency of displayed labels.
         * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
        *
        * Gets or sets the frequency of displayed labels.The set value is a factor that determines which labels will be hidden.
        * For example, an interval of 2 will display every other label.
        *
        * ```ts
        * <IgrDataChart
        *     dataSource={this.state.dataSource}   >
        *
        *     <IgrCategoryAngleAxis name="angleAxis" interval ={2} />
        *     <IgrNumericRadiusAxis name="radiusAxis" />
        *
        * </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.nb;
        },
        set: function (v) {
            this.i.nb = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "actualInterval", {
        /**
         * Gets the effective value for the current Interval.
        *
        * Gets the effective value for the current Interval.
        *
        * ```ts
        *
        * 	<IgrDataChart
        * 	ref={this.onChartRef}
        * 	dataSource={this.state.dataSource}
        * 	width="100%"
        * 	height="100%" >
        *
        *     <IgrCategoryAngleAxis name="angleAxis" label="Department" actualInterval={5} />
        *     <IgrNumericRadiusAxis name="radiusAxis" />
        *
        * </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.m3;
        },
        set: function (v) {
            this.i.m3 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "minorInterval", {
        /**
         * Gets or sets the frequency of displayed minor lines.
         * The set value is a factor that determines how the minor lines will be displayed.
        *
        * Gets or sets the frequency of displayed minor lines. The set value is a factor that determines how the minor lines will be displayed.
        *
        * ```ts
        *    <IgrDataChart
        * 	ref={this.onChartRef}
        * 	dataSource={this.state.dataSource}
        * 	width="100%"
        * 	height="100%" >
        *
        *     <IgrCategoryAngleAxis name="angleAxis" label="Department" minorInterval={5} />
        *     <IgrNumericRadiusAxis name="radiusAxis" />
        *
        * </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.nc;
        },
        set: function (v) {
            this.i.nc = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "actualMinorInterval", {
        /**
         * Gets the effective value for the current MinorInterval.
        *
        * Get the effective value for the current minorInterval.
        *
        * ```ts
        *    <IgrDataChart
        * 	ref={this.onChartRef}
        * 	dataSource={this.state.dataSource}
        * 	width="100%"
        * 	height="100%" >
        *
        *     <IgrCategoryAngleAxis name="angleAxis" label="Department" actualMinorInterval={5} />
        *     <IgrNumericRadiusAxis name="radiusAxis" />
        *
        * </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.m4;
        },
        set: function (v) {
            this.i.m4 = +v;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the scaled angle in radians from the raw axis value.
    
    * @param unscaledAngle  * The raw axis value.
    */
    IgrCategoryAngleAxis.prototype.getScaledAngle = function (unscaledAngle) {
        var iv = this.i.getScaledAngle(unscaledAngle);
        return (iv);
    };
    /**
     * Gets the raw axis value from the scaled angle in radians.
    
    */
    IgrCategoryAngleAxis.prototype.getUnscaledAngle = function (scaledAngle) {
        var iv = this.i.getUnscaledAngle(scaledAngle);
        return (iv);
    };
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "actualIntervalChange", {
        get: function () {
            return this._actualIntervalChange;
        },
        set: function (ev) {
            var _this = this;
            if (this._actualIntervalChange_wrapped !== null) {
                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualIntervalChange_wrapped);
                this._actualIntervalChange_wrapped = null;
                this._actualIntervalChange = null;
            }
            this._actualIntervalChange = ev;
            this._actualIntervalChange_wrapped = function (o, e) {
                var ext = _this.actualInterval;
                if (_this.beforeActualIntervalChange) {
                    _this.beforeActualIntervalChange(_this, ext);
                }
                if (_this._actualIntervalChange) {
                    _this._actualIntervalChange(_this, ext);
                }
            };
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualIntervalChange_wrapped);
        },
        enumerable: false,
        configurable: true
    });
    return IgrCategoryAngleAxis;
}(IgrCategoryAxisBase));
export { IgrCategoryAngleAxis };
