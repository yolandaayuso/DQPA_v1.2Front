import { __extends } from "tslib";
import { AxisAngleLabelMode_$type } from "./AxisAngleLabelMode";
import { IgrNumericAxisBase } from "./igr-numeric-axis-base";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { ensureEnum } from "igniteui-react-core";
/**
 * Represents a IgxDataChartComponent angle based axis for polar series.
*/
var IgrNumericAngleAxis = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrNumericAngleAxis, _super);
    function IgrNumericAngleAxis(props) {
        return _super.call(this, props) || this;
    }
    IgrNumericAngleAxis.prototype.createImplementation = function () {
        return new NumericAngleAxis();
    };
    Object.defineProperty(IgrNumericAngleAxis.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrNumericAngleAxis.prototype, "isAngular", {
        /**
         * Gets if the current axis is of angular axis type
        */
        get: function () {
            return this.i.b9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrNumericAngleAxis.prototype, "startAngleOffset", {
        /**
         * Indicates the angle in degress that the chart's 0th angle should be offset.
        */
        get: function () {
            return this.i.oc;
        },
        set: function (v) {
            this.i.oc = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrNumericAngleAxis.prototype, "labelMode", {
        /**
         * Indicates the mode axis labels will operate in.
        */
        get: function () {
            return this.i.n0;
        },
        set: function (v) {
            this.i.n0 = ensureEnum(AxisAngleLabelMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the scaled angle value in radians based on the raw input.
    
    * @param unscaledAngle  * The unscaled angle.
    */
    IgrNumericAngleAxis.prototype.getScaledAngle = function (unscaledAngle) {
        var iv = this.i.getScaledAngle(unscaledAngle);
        return (iv);
    };
    /**
     * Gets the raw axis value back from the angle that would be used on the chart.
    
    * @param scaledAngle  * The chart angle value.
    */
    IgrNumericAngleAxis.prototype.getUnscaledAngle = function (scaledAngle) {
        var iv = this.i.getUnscaledAngle(scaledAngle);
        return (iv);
    };
    return IgrNumericAngleAxis;
}(IgrNumericAxisBase));
export { IgrNumericAngleAxis };
