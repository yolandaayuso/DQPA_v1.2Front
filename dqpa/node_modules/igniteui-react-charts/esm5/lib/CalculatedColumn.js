/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, IEnumerable$1_$type, String_$type, Number_$type, markType, getEnumerator } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CalculatedColumn = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CalculatedColumn, _super);
    function CalculatedColumn(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this._valuesProvider = null;
        _this.c = null;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    var d = [];
                    for (var b = 1; b < _rest.length; b++) {
                        d[b - 1] = _rest[b];
                    }
                    _this._valuesProvider = c;
                    _this.c = new List$1(String_$type, 1, d);
                }
                break;
            case 1:
                {
                    var d = _rest[0];
                    var e = _rest[1];
                    _this._valuesProvider = d;
                    _this.c = new List$1(String_$type, 1, e);
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(CalculatedColumn.prototype, "basedOn", {
        get: function () {
            return this.c;
        },
        enumerable: false,
        configurable: true
    });
    CalculatedColumn.prototype.getEnumerator = function () {
        return getEnumerator(this._valuesProvider);
    };
    CalculatedColumn.prototype.getEnumeratorObject = function () {
        return getEnumerator(this._valuesProvider);
    };
    CalculatedColumn.$t = markType(CalculatedColumn, 'CalculatedColumn', Base.$, [IEnumerable$1_$type.specialize(Number_$type)]);
    return CalculatedColumn;
}(Base));
export { CalculatedColumn };
