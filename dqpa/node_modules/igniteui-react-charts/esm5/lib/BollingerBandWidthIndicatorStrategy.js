/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { String_$type, markType, getEnumerator } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var BollingerBandWidthIndicatorStrategy = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BollingerBandWidthIndicatorStrategy, _super);
    function BollingerBandWidthIndicatorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BollingerBandWidthIndicatorStrategy.prototype.b = function (a, b) {
        var c = new List$1(String_$type, 0);
        c.o(a.typicalColumn.basedOn);
        c.o(b.c.c);
        c.o(b.d.c);
        return c;
    };
    BollingerBandWidthIndicatorStrategy.prototype.a = function (a, b) {
        var c = getEnumerator(b.c.b(a.typicalColumn, a.period));
        var d = getEnumerator(b.d.b(a.typicalColumn, a.period));
        var e = a.multiplier;
        var f = a.indicatorColumn;
        var g = 0;
        while (c.moveNext() && d.moveNext()) {
            var h = d.current * e;
            var i = c.current + h;
            var j = c.current - h;
            var k = c.current;
            var l = b.i((i - j) / k);
            f.item(g, l);
            g++;
        }
        return true;
    };
    BollingerBandWidthIndicatorStrategy.$t = markType(BollingerBandWidthIndicatorStrategy, 'BollingerBandWidthIndicatorStrategy', IndicatorCalculationStrategy.$);
    return BollingerBandWidthIndicatorStrategy;
}(IndicatorCalculationStrategy));
export { BollingerBandWidthIndicatorStrategy };
