/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Frame } from "./Frame";
import { markType } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
var CategoryToolTipLayerFrame = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryToolTipLayerFrame, _super);
    function CategoryToolTipLayerFrame() {
        var _this = _super.call(this) || this;
        _this.f = 0;
        _this.k = 0;
        _this.h = 0;
        _this.g = 0;
        _this.j = 0;
        _this.i = 0;
        _this.k = NaN;
        _this.l = NaN;
        _this.g = NaN;
        _this.h = NaN;
        _this.j = NaN;
        _this.i = NaN;
        return _this;
    }
    Object.defineProperty(CategoryToolTipLayerFrame.prototype, "l", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
        },
        enumerable: false,
        configurable: true
    });
    CategoryToolTipLayerFrame.prototype.c = function (a, b, c) {
        var d = b;
        var e = c;
        if (isNaN_(d.k)) {
            this.k = e.k;
        }
        else {
            this.k = d.k + (e.k - d.k) * a;
        }
        if (isNaN_(d.l)) {
            this.l = e.l;
        }
        else {
            this.l = d.l + (e.l - d.l) * a;
        }
        if (isNaN_(d.g)) {
            this.g = e.g;
        }
        else {
            this.g = d.g + (e.g - d.g) * a;
        }
        if (isNaN_(d.h)) {
            this.h = e.h;
        }
        else {
            this.h = d.h + (e.h - d.h) * a;
        }
        if (isNaN_(d.j)) {
            this.j = e.j;
        }
        else {
            this.j = d.j + (e.j - d.j) * a;
        }
        if (isNaN_(d.i)) {
            this.i = e.k;
        }
        else {
            this.i = d.i + (e.i - d.i) * a;
        }
    };
    CategoryToolTipLayerFrame.$t = markType(CategoryToolTipLayerFrame, 'CategoryToolTipLayerFrame', Frame.$);
    return CategoryToolTipLayerFrame;
}(Frame));
export { CategoryToolTipLayerFrame };
