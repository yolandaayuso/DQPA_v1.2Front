/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { String_$type, markType, getEnumerator } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CommodityChannelIndexIndicatorStrategy = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CommodityChannelIndexIndicatorStrategy, _super);
    function CommodityChannelIndexIndicatorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommodityChannelIndexIndicatorStrategy.prototype.b = function (a, b) {
        var c = new List$1(String_$type, 0);
        c.o(a.typicalColumn.basedOn);
        c.o(b.c.c);
        return c;
    };
    CommodityChannelIndexIndicatorStrategy.prototype.a = function (a, b) {
        var c = a.period;
        var d = a.typicalColumn;
        var e = a.indicatorColumn;
        var f = getEnumerator(b.c.b(d, c));
        var g = getEnumerator(d);
        var h = new Array(c);
        for (var i = 0; i < c; i++) {
            h[i] = 0;
        }
        var j = 0;
        while (g.moveNext() && f.moveNext()) {
            h[j % c] = g.current;
            var k = 0;
            for (var l = 0; l < c; ++l) {
                k += Math.abs(f.current - h[l]);
            }
            k /= c;
            e.item(j, b.i((g.current - f.current) / (0.015 * k)));
            ++j;
        }
        return true;
    };
    CommodityChannelIndexIndicatorStrategy.$t = markType(CommodityChannelIndexIndicatorStrategy, 'CommodityChannelIndexIndicatorStrategy', IndicatorCalculationStrategy.$);
    return CommodityChannelIndexIndicatorStrategy;
}(IndicatorCalculationStrategy));
export { CommodityChannelIndexIndicatorStrategy };
