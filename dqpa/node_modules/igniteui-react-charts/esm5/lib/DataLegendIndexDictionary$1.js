/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Dictionary$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Number_$type, fromEnum, markType } from "igniteui-react-core";
/**
 * @hidden
 */
var DataLegendIndexDictionary$1 = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DataLegendIndexDictionary$1, _super);
    function DataLegendIndexDictionary$1($tValue) {
        var _this = _super.call(this, Number_$type, $tValue, 0) || this;
        _this.$tValue = null;
        _this.$tValue = $tValue;
        _this.$type = _this.$type.specialize(_this.$tValue);
        return _this;
    }
    DataLegendIndexDictionary$1.prototype.q = function (a, b) {
        if (this.containsKey(a)) {
            this.item(a, b);
        }
        else {
            this.addItem(a, b);
        }
    };
    DataLegendIndexDictionary$1.prototype.p = function (a) {
        var e_1, _a;
        var b = new List$1(this.$tValue, 0);
        try {
            for (var _b = __values(fromEnum(a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                b.add(this.item(c));
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return b.toArray();
    };
    DataLegendIndexDictionary$1.$t = markType(DataLegendIndexDictionary$1, 'DataLegendIndexDictionary$1', Dictionary$2.$.specialize(Number_$type, 0));
    return DataLegendIndexDictionary$1;
}(Dictionary$2));
export { DataLegendIndexDictionary$1 };
