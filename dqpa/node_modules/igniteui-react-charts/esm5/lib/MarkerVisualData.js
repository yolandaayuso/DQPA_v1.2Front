/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
import { RectData } from "igniteui-react-core";
/**
 * @hidden
 */
var MarkerVisualData = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(MarkerVisualData, _super);
    function MarkerVisualData() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._x = 0;
        _this._y = 0;
        _this._index = 0;
        _this._markerAppearance = null;
        _this._markerType = null;
        _this._contentTemplate = null;
        _this._isVisible = false;
        _this._bounds = null;
        return _this;
    }
    Object.defineProperty(MarkerVisualData.prototype, "x", {
        get: function () {
            return this._x;
        },
        set: function (a) {
            this._x = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MarkerVisualData.prototype, "y", {
        get: function () {
            return this._y;
        },
        set: function (a) {
            this._y = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MarkerVisualData.prototype, "index", {
        get: function () {
            return this._index;
        },
        set: function (a) {
            this._index = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MarkerVisualData.prototype, "markerAppearance", {
        get: function () {
            return this._markerAppearance;
        },
        set: function (a) {
            this._markerAppearance = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MarkerVisualData.prototype, "markerType", {
        get: function () {
            return this._markerType;
        },
        set: function (a) {
            this._markerType = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MarkerVisualData.prototype, "contentTemplate", {
        get: function () {
            return this._contentTemplate;
        },
        set: function (a) {
            this._contentTemplate = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MarkerVisualData.prototype, "isVisible", {
        get: function () {
            return this._isVisible;
        },
        set: function (a) {
            this._isVisible = a;
        },
        enumerable: false,
        configurable: true
    });
    MarkerVisualData.prototype.serialize = function () {
        var a = "{ x: " + this.x + ", y: " + this.y + ", index: " + this.index + ", markerAppearance: " + (this.markerAppearance != null ? this.markerAppearance.serialize() : "null") + ", markerType: \"" + this.markerType + "\", isVisible: " + (this.isVisible ? "true" : "false");
        if (this.bounds != null) {
            a += (", " + "bounds: { left: " + this.bounds.left + ", top:" + this.bounds.top + ", width:" + this.bounds.width + ", height: " + this.bounds.height + "}");
        }
        a += " }";
        return a;
    };
    MarkerVisualData.prototype.i = function (a) {
        this.x = (this.x - a.left) / a.width;
        this.y = (this.y - a.top) / a.height;
        if (this.bounds != null) {
            var b = (this.bounds.left - a.left) / a.width;
            var c = (this.bounds.top - a.top) / a.height;
            var d = ((this.bounds.left + this.bounds.width) - a.left) / a.width;
            var e = ((this.bounds.top + this.bounds.height) - a.top) / a.height;
            this.bounds = new RectData(b, c, d - b, e - c);
        }
    };
    Object.defineProperty(MarkerVisualData.prototype, "bounds", {
        get: function () {
            return this._bounds;
        },
        set: function (a) {
            this._bounds = a;
        },
        enumerable: false,
        configurable: true
    });
    MarkerVisualData.$t = markType(MarkerVisualData, 'MarkerVisualData');
    return MarkerVisualData;
}(Base));
export { MarkerVisualData };
