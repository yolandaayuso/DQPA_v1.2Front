/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
import { RectData } from "igniteui-react-core";
import { LabelAppearanceData } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
/**
 * @hidden
 */
var ChartTitleVisualData = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ChartTitleVisualData, _super);
    function ChartTitleVisualData() {
        var _this = _super.call(this) || this;
        _this._viewport = null;
        _this._textPlotArea = null;
        _this._appearance = null;
        _this.appearance = new LabelAppearanceData();
        return _this;
    }
    Object.defineProperty(ChartTitleVisualData.prototype, "width", {
        get: function () {
            return this.viewport.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartTitleVisualData.prototype, "height", {
        get: function () {
            return this.viewport.height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartTitleVisualData.prototype, "viewport", {
        get: function () {
            return this._viewport;
        },
        set: function (a) {
            this._viewport = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartTitleVisualData.prototype, "textPlotArea", {
        get: function () {
            return this._textPlotArea;
        },
        set: function (a) {
            this._textPlotArea = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartTitleVisualData.prototype, "appearance", {
        get: function () {
            return this._appearance;
        },
        set: function (a) {
            this._appearance = a;
        },
        enumerable: false,
        configurable: true
    });
    ChartTitleVisualData.prototype.serialize = function () {
        var a = new StringBuilder(0);
        a.u("{");
        a.u("viewport: " + this.viewport.serialize() + ", ");
        a.u("textPlotArea: " + this.textPlotArea.serialize() + ", ");
        a.u("appearance: " + this.appearance.serialize());
        a.u("}");
        return a.toString();
    };
    ChartTitleVisualData.prototype.h = function (a) {
        var b = (this.textPlotArea.left - a.left) / a.width;
        var c = (this.textPlotArea.top - a.top) / a.height;
        var d = this.textPlotArea.width / a.width;
        var e = this.textPlotArea.height / a.height;
        this.textPlotArea = new RectData(b, c, d, e);
    };
    ChartTitleVisualData.prototype.g = function () {
        var a = (this.textPlotArea.left - this.viewport.left) / this.viewport.width;
        var b = (this.textPlotArea.top - this.viewport.top) / this.viewport.height;
        var c = this.textPlotArea.width / this.viewport.width;
        var d = this.textPlotArea.height / this.viewport.height;
        this.textPlotArea = new RectData(a, b, c, d);
    };
    ChartTitleVisualData.prototype.j = function (a) {
        var b = this.textPlotArea.left * a.width;
        var c = this.textPlotArea.top * a.height;
        var d = this.textPlotArea.width * a.width;
        var e = this.textPlotArea.height * a.height;
        this.textPlotArea = new RectData(b, c, d, e);
    };
    ChartTitleVisualData.prototype.i = function () {
        var a = this.textPlotArea.left * this.viewport.width;
        var b = this.textPlotArea.top * this.viewport.height;
        var c = this.textPlotArea.width * this.viewport.width;
        var d = this.textPlotArea.height * this.viewport.height;
        this.textPlotArea = new RectData(a, b, c, d);
    };
    ChartTitleVisualData.$t = markType(ChartTitleVisualData, 'ChartTitleVisualData');
    return ChartTitleVisualData;
}(Base));
export { ChartTitleVisualData };
