import { __extends } from "tslib";
import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { CategoryHighlightLayer } from "./CategoryHighlightLayer";
import { ensureBool } from "igniteui-react-core";
/**
 * Represents an annotation layer that targets a category axis, or all category axes in the chart.
 * If the axis contains any series that are aligned between major gridlines of the axis (column, waterfall, etc) this will render a shape that fills the current category.
 * Otherwise it will render a band with an adjustable thickness at the closest gridline to the pointer position.
 * Setting UseIterpolation to true will cause the x position in the latter case to become affixed to the x position of the pointer.
*/
var IgrCategoryHighlightLayer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrCategoryHighlightLayer, _super);
    function IgrCategoryHighlightLayer(props) {
        return _super.call(this, props) || this;
    }
    IgrCategoryHighlightLayer.prototype.createImplementation = function () {
        return new CategoryHighlightLayer();
    };
    Object.defineProperty(IgrCategoryHighlightLayer.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryHighlightLayer.prototype, "isAnnotationHoverLayer", {
        /**
         * Gets whether the series is an annotation layer displayed only when hovering over the chart.
        */
        get: function () {
            return this.i.er;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryHighlightLayer.prototype, "targetAxis", {
        /**
         * Gets or sets the axis to target this annotation to. If null, this annotation targets all category axes simultaneously.
        */
        get: function () {
            var r = this.i.zx;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrCategoryAxisBase._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.zx = null : this.i.zx = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryHighlightLayer.prototype, "useInterpolation", {
        /**
         * Gets or sets whether to use value interpolation when drawing a line through the best value for the pointer position.
        */
        get: function () {
            return this.i.z0;
        },
        set: function (v) {
            this.i.z0 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCategoryHighlightLayer.prototype, "bandHighlightWidth", {
        /**
         * Gets or sets the width to use for the highlight region if drawing a band rather than filling a category.
        */
        get: function () {
            return this.i.z1;
        },
        set: function (v) {
            this.i.z1 = +v;
        },
        enumerable: false,
        configurable: true
    });
    IgrCategoryHighlightLayer.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetAxis && this.targetAxis.name && this.targetAxis.name == name) {
            return this.targetAxis;
        }
        return null;
    };
    IgrCategoryHighlightLayer.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.targetAxis && this.targetAxis._styling) {
            this.targetAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    return IgrCategoryHighlightLayer;
}(IgrAnnotationLayer));
export { IgrCategoryHighlightLayer };
