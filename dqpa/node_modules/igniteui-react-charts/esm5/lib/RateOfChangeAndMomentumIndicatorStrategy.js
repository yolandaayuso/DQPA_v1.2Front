/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { String_$type, fromEnum, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var RateOfChangeAndMomentumIndicatorStrategy = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RateOfChangeAndMomentumIndicatorStrategy, _super);
    function RateOfChangeAndMomentumIndicatorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RateOfChangeAndMomentumIndicatorStrategy.prototype.b = function (a, b) {
        var c = new List$1(String_$type, 0);
        c.add("CloseColumn");
        return c;
    };
    RateOfChangeAndMomentumIndicatorStrategy.prototype.a = function (a, b) {
        var e_1, _a;
        var c = a.closeColumn;
        var d = a.indicatorColumn;
        var e = a.period;
        var f = 0;
        var g = new Array(e);
        for (f = 0; f < e; f++) {
            g[f] = 0;
        }
        f = 0;
        try {
            for (var _b = __values(fromEnum(c)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var h = _c.value;
                var i = f % e;
                var j = b.i(100 * (h - g[i]) / g[i]);
                d.item(f, j);
                g[i] = h;
                ++f;
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    RateOfChangeAndMomentumIndicatorStrategy.$t = markType(RateOfChangeAndMomentumIndicatorStrategy, 'RateOfChangeAndMomentumIndicatorStrategy', IndicatorCalculationStrategy.$);
    return RateOfChangeAndMomentumIndicatorStrategy;
}(IndicatorCalculationStrategy));
export { RateOfChangeAndMomentumIndicatorStrategy };
