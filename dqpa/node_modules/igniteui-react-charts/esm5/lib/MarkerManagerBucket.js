/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, Number_$type, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var MarkerManagerBucket = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(MarkerManagerBucket, _super);
    function MarkerManagerBucket() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.b = null;
        _this.c = null;
        return _this;
    }
    Object.defineProperty(MarkerManagerBucket.prototype, "d", {
        get: function () {
            if (this.b == null) {
                this.b = new List$1(Number_$type, 0);
            }
            return this.b;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MarkerManagerBucket.prototype, "e", {
        get: function () {
            if (this.c == null) {
                this.c = new List$1(Number_$type, 0);
            }
            return this.c;
        },
        enumerable: false,
        configurable: true
    });
    MarkerManagerBucket.prototype.f = function (a) {
        if (this.e.count > 0) {
            var b = this.e._inner[this.e.count - 1];
            this.e.removeAt(this.e.count - 1);
            a = true;
            return {
                ret: b,
                p0: a
            };
        }
        var c = this.d._inner[this.d.count - 1];
        this.d.removeAt(this.d.count - 1);
        a = false;
        return {
            ret: c,
            p0: a
        };
    };
    Object.defineProperty(MarkerManagerBucket.prototype, "a", {
        get: function () {
            return this.d.count == 0 && this.e.count == 0;
        },
        enumerable: false,
        configurable: true
    });
    MarkerManagerBucket.$t = markType(MarkerManagerBucket, 'MarkerManagerBucket');
    return MarkerManagerBucket;
}(Base));
export { MarkerManagerBucket };
