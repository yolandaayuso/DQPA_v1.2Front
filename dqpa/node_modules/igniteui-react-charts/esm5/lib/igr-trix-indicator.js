import { __extends } from "tslib";
import { IgrStrategyBasedIndicator } from "./igr-strategy-based-indicator";
import { TRIXIndicator } from "./TRIXIndicator";
/**
 * Represents a IgxDataChartComponent TRIX indicator series.
 * Default required members: Close
*
* The `TRIXIndicator` class specify the series as Trix Indicator series.
*
* ```ts
*   <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*     <IgrCategoryXAxis name="xAxis" label="Date" />
*     <IgrNumericYAxis  name="yAxis" />
* <IgrTRIXIndicator
*     name="series1"
*     xAxisName="xAxis"
*     yAxisName="yAxis"
*     lowMemberPath="Low"
*     highMemberPath="High"
*     openMemberPath="Open"
*     closeMemberPath="Close"
*     volumeMemberPath="Volume" />
*  </IgrDataChart>
* ```
*
* ```ts
* let series = new IgrTRIXIndicator({name:"series"});
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.openMemberPath = "open";
* series.highMemberPath = "high";
* series.lowMemberPath = "low";
* series.closeMemberPath = "close";
* this.chart.series.add(series);
* ```
*/
var IgrTRIXIndicator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrTRIXIndicator, _super);
    function IgrTRIXIndicator(props) {
        return _super.call(this, props) || this;
    }
    IgrTRIXIndicator.prototype.createImplementation = function () {
        return new TRIXIndicator();
    };
    Object.defineProperty(IgrTRIXIndicator.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTRIXIndicator.prototype, "period", {
        /**
         * Gets or sets the moving average period for the current TRIXIndicator object.
         * The typical, and initial, value for TRIX periods is 15.
        *
        * The `Period` property is used for moving average period of the current TRIXIndicator object.
        *
        * ```ts
        *   <IgrDataChart
        *     dataSource={this.state.dataSource}
        *     width="700px"
        *     height="500px">
        *
        *
        *     <IgrCategoryXAxis name="xAxis" label="Date" />
        *     <IgrNumericYAxis  name="yAxis" />
        *
        *
        *     <IgrFinancialPriceSeries
        *     name="series2"
        *     xAxisName="xAxis"
        *     yAxisName="yAxis"
        *     displayType="Candlestick"
        *     lowMemberPath="Low"
        *     highMemberPath="High"
        *     openMemberPath="Open"
        *     closeMemberPath="Close"
        *     volumeMemberPath="Volume" />
        * <IgrTRIXIndicator
        *     name="series1"
        *     xAxisName="xAxis"
        *     yAxisName="yAxis"
        *     lowMemberPath="Low"
        *     highMemberPath="High"
        *     openMemberPath="Open"
        *     closeMemberPath="Close"
        *     volumeMemberPath="Volume"
        * 	period="7"  />
        *  </IgrDataChart>
        * ```
        *
        * ```ts
        * this.series.period = 30;
        * ```
        */
        get: function () {
            return this.i.acg;
        },
        set: function (v) {
            this.i.acg = +v;
        },
        enumerable: false,
        configurable: true
    });
    return IgrTRIXIndicator;
}(IgrStrategyBasedIndicator));
export { IgrTRIXIndicator };
