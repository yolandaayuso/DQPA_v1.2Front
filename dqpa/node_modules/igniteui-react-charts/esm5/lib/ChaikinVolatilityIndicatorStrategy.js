/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { String_$type, markType, getEnumerator } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var ChaikinVolatilityIndicatorStrategy = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ChaikinVolatilityIndicatorStrategy, _super);
    function ChaikinVolatilityIndicatorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChaikinVolatilityIndicatorStrategy.prototype.b = function (a, b) {
        var c = new List$1(String_$type, 0);
        c.add("HighColumn");
        c.add("LowColumn");
        c.o(b.a.c);
        return c;
    };
    ChaikinVolatilityIndicatorStrategy.prototype.a = function (a, b) {
        var c = b.j(function (d) { return a.highColumn.item(d) - a.lowColumn.item(d); }, a.count);
        var d = getEnumerator(b.a.b(c, a.period));
        var e = a.indicatorColumn;
        var f = new Array(a.period);
        for (var g = 0; g < a.period; g++) {
            f[g] = 0;
        }
        var h = 0;
        while (d.moveNext()) {
            var i = h % a.period;
            var j = b.i((d.current - f[i]) / (f[i] * 100));
            if (h < a.period) {
                e.item(h, 0);
            }
            else {
                e.item(h, j);
            }
            f[i] = d.current;
            h++;
        }
        return true;
    };
    ChaikinVolatilityIndicatorStrategy.$t = markType(ChaikinVolatilityIndicatorStrategy, 'ChaikinVolatilityIndicatorStrategy', IndicatorCalculationStrategy.$);
    return ChaikinVolatilityIndicatorStrategy;
}(IndicatorCalculationStrategy));
export { ChaikinVolatilityIndicatorStrategy };
