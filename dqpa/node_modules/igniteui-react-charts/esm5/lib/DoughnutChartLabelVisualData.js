/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
import { SizeData } from "igniteui-react-core";
import { PointData } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var DoughnutChartLabelVisualData = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DoughnutChartLabelVisualData, _super);
    function DoughnutChartLabelVisualData() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._labelValue = null;
        _this._labelSize = null;
        _this._labelPosition = null;
        return _this;
    }
    Object.defineProperty(DoughnutChartLabelVisualData.prototype, "labelValue", {
        get: function () {
            return this._labelValue;
        },
        set: function (a) {
            this._labelValue = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartLabelVisualData.prototype, "labelSize", {
        get: function () {
            return this._labelSize;
        },
        set: function (a) {
            this._labelSize = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoughnutChartLabelVisualData.prototype, "labelPosition", {
        get: function () {
            return this._labelPosition;
        },
        set: function (a) {
            this._labelPosition = a;
        },
        enumerable: false,
        configurable: true
    });
    DoughnutChartLabelVisualData.prototype.scaleByViewport = function (a) {
        this.labelPosition = new PointData((this.labelPosition.x - a.left) / a.width, (this.labelPosition.y - a.top) / a.height);
        this.labelSize = new SizeData((this.labelSize.width) / a.width, (this.labelSize.height) / a.height);
    };
    DoughnutChartLabelVisualData.prototype.serialize = function () {
        var a = "{ labelValue: '";
        a += this.labelValue == null ? stringEmpty() : this.labelValue;
        a += "', labelSize: { width: " + this.labelSize.width + ", height: " + this.labelSize.height + "}, labelPosition: { x: " + this.labelPosition.x + ", y: " + this.labelPosition.y + "}}";
        return a;
    };
    DoughnutChartLabelVisualData.$t = markType(DoughnutChartLabelVisualData, 'DoughnutChartLabelVisualData');
    return DoughnutChartLabelVisualData;
}(Base));
export { DoughnutChartLabelVisualData };
