/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, Number_$type, Point_$type, markType } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Random } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
/**
 * @hidden
 */
var CategoryTransitionSourceFramePreparer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryTransitionSourceFramePreparer, _super);
    function CategoryTransitionSourceFramePreparer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = new Random(0);
        return _this;
    }
    CategoryTransitionSourceFramePreparer.prototype.s = function (a, b, c, d, e, f, g, h, i, j, k, l) {
        b.ab = new Rect(0, 0, 0, 1, 1);
        b.f.clear();
        b.k.clear();
        b.n.clear();
        b.q.clear();
        b.i.clear();
        b.h.clear();
        b.g.clear();
        if (b.m != null) {
            b.m.clear();
        }
        var m = false;
        var n = false;
        var o = false;
        if (e != null) {
            o = e.b9;
        }
        if (f != null) {
            m = f.ch;
        }
        if (e != null) {
            n = e.ch;
        }
        var p = g;
        if (p == 0) {
            p = h;
        }
        var q = null;
        if (p == 20) {
            if (a.bn == null) {
                p = 1;
            }
            q = a.kv();
        }
        switch (p) {
            case 20:
                var r = k();
                this.x(q, b, c, r, d);
                break;
            case 1:
                var s = k();
                this.z(b, c, s, d, o);
                break;
            case 7:
                this.w(b, c, false, d, l);
                break;
            case 9:
                this.y(b, c, true, d, l);
                break;
            case 10:
                this.y(b, c, false, d, l);
                break;
            case 8:
                this.w(b, c, true, d, l);
                break;
            case 2:
                this.aa(b, c, false);
                break;
            case 3:
                this.aa(b, c, true);
                break;
            case 4:
                this.ab(b, c, true);
                break;
            case 5:
                this.ab(b, c, false);
                break;
            case 6:
                this.j(b, c);
                b.ab = new Rect(0, 0.5, 0.5, 0, 0);
                break;
            case 16:
                if (o) {
                    this.v(b, c, n, d, l);
                }
                else if (d) {
                    this.y(b, c, m, d, l);
                }
                else {
                    this.w(b, c, n, d, l);
                }
                break;
            case 17:
                if (o) {
                    this.u(b, c, !m, d, l);
                }
                else if (d) {
                    this.y(b, c, !m, d, l);
                }
                else {
                    this.w(b, c, !n, d, l);
                }
                break;
            case 18:
                if (o) {
                    var t = k();
                    this.z(b, c, t, d, o);
                }
                else if (d) {
                    this.w(b, c, n, d, l);
                }
                else {
                    this.y(b, c, m, d, l);
                }
                break;
            case 19:
                if (o) {
                    var u = 1;
                    this.z(b, c, u, d, o);
                }
                else if (d) {
                    this.w(b, c, !n, d, l);
                }
                else {
                    this.y(b, c, !m, d, l);
                }
                break;
            case 12:
                if (d) {
                    this.ab(b, c, m);
                }
                else {
                    this.aa(b, c, n);
                }
                break;
            case 13:
                if (d) {
                    this.ab(b, c, !m);
                }
                else {
                    this.aa(b, c, !n);
                }
                break;
            case 14:
                if (d) {
                    this.aa(b, c, n);
                }
                else {
                    this.ab(b, c, m);
                }
                break;
            case 15:
                if (d) {
                    this.aa(b, c, !n);
                }
                else {
                    this.ab(b, c, !m);
                }
                break;
            case 11:
                this.t(b, c);
                break;
        }
        if (i == 0) {
            i = j;
        }
        b.w();
        c.w();
        switch (i) {
            case 3:
                this.b(b.f.count, p, b.p, c.p, e, f, d, l);
                this.b(b.n.count, p, b.o, c.o, e, f, d, l);
                this.b(b.q.count, p, b.r, c.r, e, f, d, l);
                this.b(b.i.count, p, b.l, c.l, e, f, d, l);
                this.b(b.h.count, p, b.j, c.j, e, f, d, l);
                break;
            case 2:
                var v = k();
                this.d(b.f.count, v, p, b.f, c.f, b.p, c.p, e, f, d, l);
                this.f(b.n.count, v, p, b.n, c.n, b.o, c.o, e, f, d, l);
                this.f(b.q.count, v, p, b.q, c.q, b.r, c.r, e, f, d, l);
                this.f(b.i.count, v, p, b.i, c.i, b.l, c.l, e, f, d, l);
                this.e(b.h.count, v, p, b.h, c.h, b.j, c.j, e, f, d, l);
                break;
            case 4:
                this.c(b.f.count, p, b.p, c.p);
                this.c(b.n.count, p, b.o, c.o);
                this.c(b.q.count, p, b.r, c.r);
                this.c(b.i.count, p, b.l, c.l);
                this.c(b.h.count, p, b.j, c.j);
                break;
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.x = function (a, b, c, d, e) {
        if (a.m != null || b.m != null || c.m != null) {
            if (a.m == null) {
                a.m = new List$1(Number_$type, 0);
            }
            if (b.m == null) {
                b.m = new List$1(Number_$type, 0);
            }
            if (c.m == null) {
                c.m = new List$1(Number_$type, 0);
            }
            this.o(a.m, b.m, c.m, e, d, true);
        }
        this.m(a.f, b.f, c.f, e, d, true);
        this.o(a.k, b.k, c.k, e, d, true);
        this.r(a.n, b.n, c.n, e, d, true);
        this.r(a.q, b.q, c.q, e, d, true);
        this.r(a.i, b.i, c.i, e, d, true);
        this.o(a.h, b.h, c.h, e, d, true);
        this.o(a.g, b.g, c.g, e, d, true);
    };
    CategoryTransitionSourceFramePreparer.prototype.c = function (a, b, c, d) {
        if (a == 0) {
            return;
        }
        for (var e = 0; e < a; e++) {
            c.add(1 + this.a.nextDouble());
            d.add(1 + this.a.nextDouble());
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.d = function (a, b, c, d, e, f, g, h, i, j, k) {
        if (a == 0) {
            return;
        }
        var l = false;
        var m = i;
        if (j) {
            m = h;
        }
        if (m != null) {
            l = m.ch;
        }
        var n = k.bottom;
        var o = k.bottom;
        var p = k.top;
        if (j) {
            o = k.right;
            p = k.left;
        }
        if (l) {
            o = k.top;
            p = k.bottom;
            if (j) {
                o = k.left;
                p = k.right;
            }
        }
        b = Math.max(b, Math.min(p, o));
        b = Math.min(b, Math.max(p, o));
        n = 0;
        var q;
        for (var r = 0; r < a; r++) {
            q = e._inner[r];
            for (var s = 1; s < q.length; s++) {
                if (isNaN_(q[s]) || isInfinity(q[s])) {
                    continue;
                }
                n = Math.max(n, Math.abs(b - q[s]));
            }
        }
        var t;
        var u;
        var v;
        for (var w = 0; w < a; w++) {
            q = e._inner[w];
            t = Math.abs(q[1] - b);
            u = Math.abs(q[1] - b);
            for (var x = 1; x < q.length; x++) {
                if (isNaN_(q[x]) || isInfinity(q[x])) {
                    continue;
                }
                t = Math.max(Math.abs(q[x] - b), t);
                u = Math.min(Math.abs(q[x] - b), u);
            }
            var y = (t + u) / 2;
            if (isNaN_(y) || n == 0) {
                v = 1;
            }
            else {
                v = y / n;
            }
            f.add(2 - v);
            g.add(2 - v);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.f = function (a, b, c, d, e, f, g, h, i, j, k) {
        if (a == 0) {
            return;
        }
        var l = false;
        var m = i;
        if (j) {
            m = h;
        }
        if (m != null) {
            l = m.ch;
        }
        var n = k.bottom;
        var o = k.bottom;
        var p = k.top;
        if (j) {
            o = k.right;
            p = k.left;
        }
        if (l) {
            o = k.top;
            p = k.bottom;
            if (j) {
                o = k.left;
                p = k.right;
            }
        }
        b = Math.max(b, Math.min(p, o));
        b = Math.min(b, Math.max(p, o));
        n = 0;
        var q;
        for (var r = 0; r < a; r++) {
            q = e._inner[r];
            if (j) {
                if (isNaN_(q.x) || isInfinity(q.x)) {
                    continue;
                }
                n = Math.max(n, Math.abs(q.x - b));
            }
            else {
                if (isNaN_(q.y) || isInfinity(q.y)) {
                    continue;
                }
                n = Math.max(n, Math.abs(q.y - b));
            }
        }
        var s;
        for (var t = 0; t < a; t++) {
            q = e._inner[t];
            var u = void 0;
            if (j) {
                u = q.x;
            }
            else {
                u = q.y;
            }
            if (isNaN_(u) || isInfinity(u) || n == 0) {
                s = 1;
            }
            else {
                s = Math.abs(u - b) / n;
            }
            f.add(2 - s);
            g.add(2 - s);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.e = function (a, b, c, d, e, f, g, h, i, j, k) {
        if (a == 0) {
            return;
        }
        var l = false;
        var m = i;
        if (j) {
            m = h;
        }
        if (m != null) {
            l = m.ch;
        }
        var n = k.bottom;
        var o = k.bottom;
        var p = k.top;
        if (j) {
            o = k.right;
            p = k.left;
        }
        if (l) {
            o = k.top;
            p = k.bottom;
            if (j) {
                o = k.left;
                p = k.right;
            }
        }
        b = Math.max(b, Math.min(p, o));
        b = Math.min(b, Math.max(p, o));
        n = 0;
        var q;
        for (var r = 0; r < a; r++) {
            q = e._inner[r];
            if (isNaN_(q) || isInfinity(q)) {
                continue;
            }
            n = Math.max(n, Math.abs(q - b));
        }
        var s;
        for (var t = 0; t < a; t++) {
            q = e._inner[t];
            var u = void 0;
            u = q;
            if (n == 0 || isNaN_(u) || isInfinity(u)) {
                s = 1;
            }
            else {
                s = Math.abs(u - b) / n;
            }
            f.add(2 - s);
            g.add(2 - s);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.b = function (a, b, c, d, e, f, g, h) {
        if (a == 0) {
            return;
        }
        var i = e;
        if (g) {
            i = f;
        }
        var j = false;
        if (i != null) {
            j = i.ch;
        }
        var k;
        for (var l = 0; l < a; l++) {
            if (a == 1) {
                k = 1;
            }
            else {
                k = l / (a - 1);
            }
            k = 1 - k;
            c.add(1 + k);
            d.add(1 + k);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.t = function (a, b) {
        a.f.clear();
        a.k.clear();
        a.n.clear();
        a.q.clear();
        a.i.clear();
        a.h.clear();
        a.g.clear();
        if (a.m != null) {
            a.m.clear();
        }
        if (a.m != null || b.m != null) {
            if (a.m == null) {
                a.m = new List$1(Number_$type, 0);
            }
            if (b.m == null) {
                b.m = new List$1(Number_$type, 0);
            }
            this.h(a.m, b.m);
        }
        this.g(a.f, b.f);
        this.h(a.k, b.k);
        this.k(a.n, b.n);
        this.k(a.q, b.q);
        this.k(a.i, b.i);
        this.h(a.h, b.h);
        this.h(a.g, b.g);
        var c = a.f.count;
        var d = a.f;
        var e;
        var f;
        var g;
        var h;
        for (var i = 0; i < c; i++) {
            e = d._inner[i];
            f = e[1];
            g = e[1];
            for (var j = 2; j < e.length; j++) {
                f = Math.min(f, e[j]);
                g = Math.max(g, e[j]);
            }
            h = (f + g) / 2;
            for (var k = 1; k < e.length; k++) {
                e[k] = h;
            }
        }
        var l = a.h.count;
        var m = a.h;
        var n = a.g;
        for (var o = 0; o < l; o++) {
            m._inner[o] = 0;
            n._inner[o] = 0;
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.aa = function (a, b, c) {
        if (c) {
            this.j(a, b);
            a.ab = new Rect(0, 1, 0, 0, 1);
        }
        else {
            this.j(a, b);
            a.ab = new Rect(0, 0, 0, 0, 1);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.ab = function (a, b, c) {
        if (c) {
            this.j(a, b);
            a.ab = new Rect(0, 0, 0, 1, 0);
        }
        else {
            this.j(a, b);
            a.ab = new Rect(0, 0, 1, 1, 0);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.j = function (a, b) {
        a.f.clear();
        a.k.clear();
        a.n.clear();
        a.q.clear();
        a.i.clear();
        a.h.clear();
        a.g.clear();
        if (a.m != null) {
            a.m.clear();
        }
        if (a.m != null || b.m != null) {
            if (a.m == null) {
                a.m = new List$1(Number_$type, 0);
            }
            if (b.m == null) {
                b.m = new List$1(Number_$type, 0);
            }
            this.h(a.m, b.m);
        }
        this.g(a.f, b.f);
        this.h(a.k, b.k);
        this.k(a.n, b.n);
        this.k(a.q, b.q);
        this.k(a.i, b.i);
        this.h(a.h, b.h);
        this.h(a.g, b.g);
    };
    CategoryTransitionSourceFramePreparer.prototype.q = function (a, b, c, d, e) {
        var f = b.count;
        var g;
        var h;
        for (var i = 0; i < f; i++) {
            g = b._inner[i];
            if (e) {
                if (c) {
                    h = { $type: Point_$type, x: d, y: g.y };
                }
                else {
                    h = { $type: Point_$type, x: g.x, y: d };
                }
            }
            else {
                if (c) {
                    h = { $type: Point_$type, x: g.x, y: d };
                }
                else {
                    h = { $type: Point_$type, x: d, y: g.y };
                }
            }
            a.add(h);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.r = function (a, b, c, d, e, f) {
        var g = c.count;
        var h;
        var i;
        var j = a.count;
        for (var k = 0; k < g; k++) {
            h = c._inner[k];
            if (j > k) {
                h = a._inner[k];
            }
            if (f) {
                if (d) {
                    i = { $type: Point_$type, x: h.x, y: h.y };
                }
                else {
                    i = { $type: Point_$type, x: h.x, y: h.y };
                }
            }
            else {
                if (d) {
                    i = { $type: Point_$type, x: h.x, y: h.y };
                }
                else {
                    i = { $type: Point_$type, x: h.x, y: h.y };
                }
            }
            b.add(i);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.k = function (a, b) {
        var c = b.count;
        var d;
        var e;
        for (var f = 0; f < c; f++) {
            d = b._inner[f];
            e = { $type: Point_$type, x: d.x, y: d.y };
            a.add(e);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.g = function (a, b) {
        var c = b.count;
        var d = b;
        var e;
        var f;
        var g = a;
        for (var h = 0; h < c; h++) {
            f = d._inner[h];
            e = new Array(f.length);
            for (var i = 0; i < e.length; i++) {
                e[i] = f[i];
            }
            g.add(e);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.l = function (a, b, c, d, e) {
        var f = b.count;
        var g = b;
        var h;
        var i;
        var j = a;
        for (var k = 0; k < f; k++) {
            i = g._inner[k];
            h = new Array(i.length);
            if (e) {
                h[0] = i[0];
                for (var l = 1; l < h.length; l++) {
                    h[l] = d;
                }
            }
            else {
                h[0] = d;
                for (var m = 1; m < h.length; m++) {
                    h[m] = i[m];
                }
            }
            j.add(h);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.m = function (a, b, c, d, e, f) {
        var g = c.count;
        var h = c;
        var i;
        var j;
        var k;
        var l;
        var m = a.count;
        var n = b;
        for (var o = 0; o < g; o++) {
            j = h._inner[o];
            l = j;
            if (m > o) {
                j = a._inner[o];
            }
            i = new Array(j.length);
            if (f) {
                i[0] = l[0];
                for (var p = 1; p < i.length; p++) {
                    i[p] = j[p];
                }
            }
            else {
                i[0] = l[0];
                for (var q = 1; q < i.length; q++) {
                    i[q] = j[q];
                }
            }
            n.add(i);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.p = function (a, b) {
        var c = b.count;
        var d;
        for (var e = 0; e < c; e++) {
            d = b._inner[e];
            a.add(d);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.i = function (a, b) {
        var c = b.count;
        var d;
        for (var e = 0; e < c; e++) {
            d = b._inner[e];
            a.add(d);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.h = function (a, b) {
        var c = b.count;
        var d;
        for (var e = 0; e < c; e++) {
            d = b._inner[e];
            a.add(d);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.n = function (a, b, c, d, e) {
        var f = b.count;
        var g;
        for (var h = 0; h < f; h++) {
            g = b._inner[h];
            a.add(g);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.o = function (a, b, c, d, e, f) {
        var g = c.count;
        var h;
        var i = a.count;
        for (var j = 0; j < g; j++) {
            if (i > j) {
                h = a._inner[j];
            }
            else {
                h = c._inner[j];
            }
            b.add(h);
        }
    };
    CategoryTransitionSourceFramePreparer.prototype.w = function (a, b, c, d, e) {
        var f = e.right;
        if (!c) {
            f = e.left;
        }
        var g = false;
        if (d) {
            g = true;
        }
        if (a.m != null || b.m != null) {
            if (a.m == null) {
                a.m = new List$1(Number_$type, 0);
            }
            if (b.m == null) {
                b.m = new List$1(Number_$type, 0);
            }
            this.n(a.m, b.m, d, f, g);
        }
        this.l(a.f, b.f, d, f, g);
        this.n(a.k, b.k, d, f, g);
        this.q(a.n, b.n, d, f, g);
        this.q(a.q, b.q, d, f, g);
        this.q(a.i, b.i, d, f, g);
        this.n(a.h, b.h, d, f, g);
        this.n(a.g, b.g, d, f, g);
    };
    CategoryTransitionSourceFramePreparer.prototype.y = function (a, b, c, d, e) {
        var f = e.bottom;
        if (c) {
            f = e.top;
        }
        var g = true;
        if (d) {
            g = false;
        }
        if (a.m != null || b.m != null) {
            if (a.m == null) {
                a.m = new List$1(Number_$type, 0);
            }
            if (b.m == null) {
                b.m = new List$1(Number_$type, 0);
            }
            this.n(a.m, b.m, d, f, g);
        }
        this.l(a.f, b.f, d, f, g);
        this.n(a.k, b.k, d, f, g);
        this.q(a.n, b.n, d, f, g);
        this.q(a.q, b.q, d, f, g);
        this.q(a.i, b.i, d, f, g);
        this.n(a.h, b.h, d, f, g);
        this.n(a.g, b.g, d, f, g);
    };
    CategoryTransitionSourceFramePreparer.prototype.v = function (a, b, c, d, e) {
        var f = 0;
        var g = false;
        if (a.m != null || b.m != null) {
            if (a.m == null) {
                a.m = new List$1(Number_$type, 0);
            }
            if (b.m == null) {
                b.m = new List$1(Number_$type, 0);
            }
            this.n(a.m, b.m, d, f, g);
        }
        this.l(a.f, b.f, d, f, g);
        this.n(a.k, b.k, d, f, g);
        this.q(a.n, b.n, d, f, g);
        this.q(a.q, b.q, d, f, g);
        this.q(a.i, b.i, d, f, g);
        this.n(a.h, b.h, d, f, g);
        this.n(a.g, b.g, d, f, g);
    };
    CategoryTransitionSourceFramePreparer.prototype.u = function (a, b, c, d, e) {
        var f = Math.PI * 2;
        var g = false;
        if (a.m != null || b.m != null) {
            if (a.m == null) {
                a.m = new List$1(Number_$type, 0);
            }
            if (b.m == null) {
                b.m = new List$1(Number_$type, 0);
            }
            this.n(a.m, b.m, d, f, g);
        }
        this.l(a.f, b.f, d, f, g);
        this.n(a.k, b.k, d, f, g);
        this.q(a.n, b.n, d, f, g);
        this.q(a.q, b.q, d, f, g);
        this.q(a.i, b.i, d, f, g);
        this.n(a.h, b.h, d, f, g);
        this.n(a.g, b.g, d, f, g);
    };
    CategoryTransitionSourceFramePreparer.prototype.z = function (a, b, c, d, e) {
        if (a.m != null || b.m != null) {
            if (a.m == null) {
                a.m = new List$1(Number_$type, 0);
            }
            if (b.m == null) {
                b.m = new List$1(Number_$type, 0);
            }
            this.n(a.m, b.m, d, c, true);
        }
        this.l(a.f, b.f, d, c, true);
        if (e && a.f != null) {
            for (var f = 0; f < a.f.count; f++) {
                if (f < b.f.count) {
                    var g = a.f._inner[f];
                    var h = b.f._inner[f];
                    g[g.length - 1] = h[h.length - 1];
                }
            }
        }
        this.n(a.k, b.k, d, c, true);
        this.q(a.n, b.n, d, c, true);
        this.q(a.q, b.q, d, c, true);
        this.q(a.i, b.i, d, c, true);
        this.n(a.h, b.h, d, c, true);
        this.n(a.g, b.g, d, c, true);
    };
    CategoryTransitionSourceFramePreparer.$t = markType(CategoryTransitionSourceFramePreparer, 'CategoryTransitionSourceFramePreparer');
    return CategoryTransitionSourceFramePreparer;
}(Base));
export { CategoryTransitionSourceFramePreparer };
