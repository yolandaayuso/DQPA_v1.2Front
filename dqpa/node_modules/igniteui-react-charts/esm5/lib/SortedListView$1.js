/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __generator } from "tslib";
import { Base, IList$1_$type, toEnum, markType } from "igniteui-react-core";
import { NotImplementedException } from "igniteui-react-core";
/**
 * @hidden
 */
var SortedListView$1 = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SortedListView$1, _super);
    function SortedListView$1($t, a, b) {
        var _this = _super.call(this) || this;
        _this.$t = null;
        _this.c = null;
        _this.d = null;
        _this.$t = $t;
        _this.$type = _this.$type.specialize(_this.$t);
        _this.c = b;
        _this.d = a;
        return _this;
    }
    SortedListView$1.prototype.add = function (a) {
        throw new NotImplementedException(0);
    };
    SortedListView$1.prototype.clear = function () {
        throw new NotImplementedException(0);
    };
    SortedListView$1.prototype.contains = function (a) {
        return this.d.contains(a);
    };
    SortedListView$1.prototype.indexOf = function (a) {
        return this.c.indexOf(this.d.indexOf(a));
    };
    SortedListView$1.prototype.insert = function (a, b) {
        throw new NotImplementedException(0);
    };
    Object.defineProperty(SortedListView$1.prototype, "a", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SortedListView$1.prototype, "isReadOnly", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    SortedListView$1.prototype.remove = function (a) {
        throw new NotImplementedException(0);
    };
    SortedListView$1.prototype.removeAt = function (a) {
        throw new NotImplementedException(0);
    };
    SortedListView$1.prototype.item = function (a, b) {
        if (arguments.length === 2) {
            throw new NotImplementedException(0);
            return b;
        }
        else {
            return this.d.item(this.c.item(a));
        }
    };
    Object.defineProperty(SortedListView$1.prototype, "count", {
        get: function () {
            return this.d.count;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SortedListView$1.prototype, "b", {
        get: function () {
            throw new NotImplementedException(0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SortedListView$1.prototype, "e", {
        get: function () {
            throw new NotImplementedException(0);
        },
        enumerable: false,
        configurable: true
    });
    SortedListView$1.prototype.getEnumeratorObject = function () {
        return this.getEnumerator();
    };
    SortedListView$1.prototype._getEnumerator = function () {
        var a;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    a = 0;
                    _a.label = 1;
                case 1:
                    if (!(a < this.count))
                        return [3 /*break*/, 4];
                    return [4 /*yield*/, this.item(a)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    a++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    SortedListView$1.prototype.getEnumerator = function () {
        var _this = this;
        return toEnum(function () { return _this._getEnumerator(); }).getEnumerator();
    };
    SortedListView$1.prototype.copyTo = function (a, b) {
        throw new NotImplementedException(0);
    };
    SortedListView$1.$t = markType(SortedListView$1, 'SortedListView$1', Base.$, [IList$1_$type.specialize(0)]);
    return SortedListView$1;
}(Base));
export { SortedListView$1 };
