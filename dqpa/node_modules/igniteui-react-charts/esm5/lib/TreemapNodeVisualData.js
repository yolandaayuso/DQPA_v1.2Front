/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
/**
 * @hidden
 */
var TreemapNodeVisualData = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapNodeVisualData, _super);
    function TreemapNodeVisualData() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.d = null;
        _this.b = null;
        _this.c = null;
        _this.a = null;
        return _this;
    }
    TreemapNodeVisualData.prototype.f = function (a) {
        if (this.d != null) {
            this.d.scaleByViewport(a);
        }
        if (this.b != null) {
            this.b.scaleByViewport(a);
        }
        if (this.a != null) {
            this.a.scaleByViewport(a);
        }
        if (this.c != null) {
            this.c.scaleByViewport(a);
        }
    };
    TreemapNodeVisualData.prototype.e = function () {
        var a = new StringBuilder(0);
        var b = true;
        a.u("{");
        if (this.d != null) {
            if (b) {
                b = false;
            }
            else {
                a.l(", ");
            }
            a.l("nodeRect: ");
            a.l(this.d.serialize());
        }
        if (this.b != null) {
            if (b) {
                b = false;
            }
            else {
                a.l(", ");
            }
            a.l("headerRect: ");
            a.l(this.b.serialize());
        }
        if (this.a != null) {
            if (b) {
                b = false;
            }
            else {
                a.l(", ");
            }
            a.l("label: ");
            a.l(this.a.serialize());
        }
        if (this.c != null) {
            if (b) {
                b = false;
            }
            else {
                a.l(", ");
            }
            a.l("highlightRect: ");
            a.l(this.c.serialize());
        }
        a.u("");
        a.u("}");
        return a.toString();
    };
    TreemapNodeVisualData.$t = markType(TreemapNodeVisualData, 'TreemapNodeVisualData');
    return TreemapNodeVisualData;
}(Base));
export { TreemapNodeVisualData };
