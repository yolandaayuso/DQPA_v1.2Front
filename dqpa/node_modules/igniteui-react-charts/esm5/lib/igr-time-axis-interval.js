import { __extends, __values } from "tslib";
/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as React from 'react';
import { TimeAxisIntervalType_$type } from "./TimeAxisIntervalType";
import { TimeAxisInterval } from "./TimeAxisInterval";
import { TypeRegistrar } from "igniteui-react-core";
import { NamePatcher, getModifiedProps, isValidProp, ensureEnum, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
var IgrTimeAxisInterval = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrTimeAxisInterval, _super);
    function IgrTimeAxisInterval(props) {
        var _this = _super.call(this, props) || this;
        _this._renderer = null;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        return _this;
    }
    Object.defineProperty(IgrTimeAxisInterval.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrTimeAxisInterval.prototype.onImplementationCreated = function () {
    };
    IgrTimeAxisInterval.prototype.componentDidMount = function () {
        var e_1, _a;
        try {
            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IgrTimeAxisInterval.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrTimeAxisInterval.prototype.render = function () {
        return null;
    };
    IgrTimeAxisInterval.prototype.createImplementation = function () {
        return new TimeAxisInterval();
    };
    IgrTimeAxisInterval.prototype._provideRenderer = function (renderer) {
        this._renderer = renderer;
    };
    IgrTimeAxisInterval._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    Object.defineProperty(IgrTimeAxisInterval.prototype, "range", {
        /**
     * The visible axis range at which to apply this interval.
    *
    * Use `Range` property for the visible axis range at which to apply this interval.
    */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTimeAxisInterval.prototype, "interval", {
        /**
         * The interval, expressed as a multiple of IntervalType.
        *
        * Use the `Interval` property expressed as a multiple of IntervalType.
        *
        * ```ts
        *   <IgrDataChart
        *     dataSource={this.state.dataSource}
        *     width="700px"
        *     height="500px">
        *     <IgrOrdinalTimeXAxis name="xAxis"
        * 	label="Date"
        * 	dateTimeMemberPath="Date" />
        *  </IgrDataChart>
        * ```
        *
        * ```ts
        * this.timeXAxis = new IgrTimeXAxis({name: "timeXAxis"});
        * this.timeXAxis.title = "Time X Axis";
        * this.timeXAxis.dataSource = this.financialData;
        * this.timeXAxis.dateTimeMemberPath = "Time";
        * this.timeXAxis.intervals={2};
        * ```
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTimeAxisInterval.prototype, "intervalType", {
        /**
         * The unit of time for this interval.
        *
        * The `IntervalType` is the unit of time for this interval.
        */
        get: function () {
            return this.i.b;
        },
        set: function (v) {
            this.i.b = ensureEnum(TimeAxisIntervalType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    IgrTimeAxisInterval.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    Object.defineProperty(IgrTimeAxisInterval.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgrTimeAxisInterval.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrTimeAxisInterval.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("TimeAxisInterval");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    return IgrTimeAxisInterval;
}(React.Component));
export { IgrTimeAxisInterval };
