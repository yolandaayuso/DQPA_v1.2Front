/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ConfigurationMessage } from "./ConfigurationMessage";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
var PropertyChangedMessage = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(PropertyChangedMessage, _super);
    function PropertyChangedMessage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.f = null;
        _this.c = null;
        _this.b = null;
        return _this;
    }
    Object.defineProperty(PropertyChangedMessage.prototype, "g", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChangedMessage.prototype, "e", {
        get: function () {
            return this.c;
        },
        set: function (a) {
            this.c = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChangedMessage.prototype, "d", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    PropertyChangedMessage.prototype.toString = function () {
        var a = "null";
        var b = "null";
        if (this.e != null) {
            a = this.e.toString();
        }
        if (this.d != null) {
            b = this.d.toString();
        }
        return "PropertyChangedMessage[" + this.g.toString() + ", " + a + ", " + b + "]";
    };
    PropertyChangedMessage.$t = markType(PropertyChangedMessage, 'PropertyChangedMessage', ConfigurationMessage.$);
    return PropertyChangedMessage;
}(ConfigurationMessage));
export { PropertyChangedMessage };
