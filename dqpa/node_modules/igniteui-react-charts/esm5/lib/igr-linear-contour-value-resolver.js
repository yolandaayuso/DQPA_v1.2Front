import { __extends } from "tslib";
import { IgrContourValueResolver } from "./igr-contour-value-resolver";
import { LinearContourValueResolver } from "./LinearContourValueResolver";
/**
 * ContourValueResolver class which resolves contour lines to be distributed at linear intervals from the data minimum to the data maximum.
*/
var IgrLinearContourValueResolver = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrLinearContourValueResolver, _super);
    function IgrLinearContourValueResolver(props) {
        return _super.call(this, props) || this;
    }
    IgrLinearContourValueResolver.prototype.createImplementation = function () {
        return new LinearContourValueResolver();
    };
    Object.defineProperty(IgrLinearContourValueResolver.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrLinearContourValueResolver.prototype, "valueCount", {
        /**
         * Gets or sets how many contour values to return.
        */
        get: function () {
            return this.i.valueCount;
        },
        set: function (v) {
            this.i.valueCount = +v;
        },
        enumerable: false,
        configurable: true
    });
    return IgrLinearContourValueResolver;
}(IgrContourValueResolver));
export { IgrLinearContourValueResolver };
