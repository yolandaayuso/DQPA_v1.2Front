import { __extends } from "tslib";
import { IgrStrategyBasedIndicator } from "./igr-strategy-based-indicator";
/**
 * Financial indicator base class for doing calculating an itemwize indicator.
 * An itemwise indicator's individual values don't depend on any other values in the
 * collection so can always be independently recalculated. Also, because of this, the
 * base class handles all the looping logic and inheritors only need to provide the
 * actual calculation.
*/
var IgrItemwiseStrategyBasedIndicator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrItemwiseStrategyBasedIndicator, _super);
    function IgrItemwiseStrategyBasedIndicator(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrItemwiseStrategyBasedIndicator.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * This is a marker method to distinguish this from a public api perspective on some platforms compared to the base strategy based indicators.
    
    */
    IgrItemwiseStrategyBasedIndicator.prototype.resolveIsItemwise = function () {
        var iv = this.i.aci();
        return (iv);
    };
    return IgrItemwiseStrategyBasedIndicator;
}(IgrStrategyBasedIndicator));
export { IgrItemwiseStrategyBasedIndicator };
