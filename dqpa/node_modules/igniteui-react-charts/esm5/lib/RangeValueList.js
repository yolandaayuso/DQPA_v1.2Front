/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, IList$1_$type, Number_$type, markType } from "igniteui-react-core";
import { NotImplementedException } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
var RangeValueList = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RangeValueList, _super);
    function RangeValueList(a, b) {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.b = null;
        _this.a = a;
        _this.b = b;
        return _this;
    }
    RangeValueList.prototype.indexOf = function (a) {
        throw new NotImplementedException(0);
    };
    RangeValueList.prototype.insert = function (a, b) {
        throw new NotImplementedException(0);
    };
    RangeValueList.prototype.removeAt = function (a) {
        throw new NotImplementedException(0);
    };
    RangeValueList.prototype.item = function (a, b) {
        if (arguments.length === 2) {
            return b;
        }
        else {
            var b_1 = NaN;
            var c = NaN;
            if (this.a != null && a >= 0 && a < this.a.count) {
                b_1 = this.a.item(a);
            }
            if (this.b != null && a >= 0 && a < this.b.count) {
                c = this.b.item(a);
            }
            var d = isNaN_(b_1);
            var e = isNaN_(c);
            if (!d && !e) {
                return (b_1 + c) / 2;
            }
            if (!d) {
                return b_1;
            }
            if (!e) {
                return c;
            }
            return NaN;
        }
    };
    RangeValueList.prototype.add = function (a) {
        throw new NotImplementedException(0);
    };
    RangeValueList.prototype.clear = function () {
        throw new NotImplementedException(0);
    };
    RangeValueList.prototype.contains = function (a) {
        throw new NotImplementedException(0);
    };
    RangeValueList.prototype.copyTo = function (a, b) {
        throw new NotImplementedException(0);
    };
    Object.defineProperty(RangeValueList.prototype, "count", {
        get: function () {
            var a = 0;
            var b = 0;
            if (this.a != null) {
                a = this.a.count;
            }
            if (this.b != null) {
                b = this.b.count;
            }
            var c = 0;
            c = Math.max(c, a);
            c = Math.max(c, b);
            return c;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeValueList.prototype, "isReadOnly", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    RangeValueList.prototype.remove = function (a) {
        throw new NotImplementedException(0);
    };
    RangeValueList.prototype.getEnumerator = function () {
        throw new NotImplementedException(0);
    };
    RangeValueList.prototype.getEnumeratorObject = function () {
        throw new NotImplementedException(0);
    };
    RangeValueList.$t = markType(RangeValueList, 'RangeValueList', Base.$, [IList$1_$type.specialize(Number_$type)]);
    return RangeValueList;
}(Base));
export { RangeValueList };
