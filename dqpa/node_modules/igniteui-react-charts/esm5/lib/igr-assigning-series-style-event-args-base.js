import { IgrHighlightingInfo } from "igniteui-react-core";
import { TypeRegistrar } from "igniteui-react-core";
import { brushToString, stringToBrush, ensureBool } from "igniteui-react-core";
/**
 * Represents event arguments base class for the AssigningCategoryStyleEventArgsBase
*/
var IgrAssigningSeriesStyleEventArgsBase = /** @class */ /*@__PURE__*/ (function () {
    function IgrAssigningSeriesStyleEventArgsBase() {
        this.mounted = false;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    IgrAssigningSeriesStyleEventArgsBase.prototype.createImplementation = function () {
        return null;
    };
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: false,
        configurable: true
    });
    IgrAssigningSeriesStyleEventArgsBase._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgrAssigningSeriesStyleEventArgsBase.prototype.onImplementationCreated = function () {
    };
    IgrAssigningSeriesStyleEventArgsBase.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    };
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "startIndex", {
        /**
         * Gets the start index
        */
        get: function () {
            return this.i.z;
        },
        set: function (v) {
            this.i.z = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "endIndex", {
        /**
         * Gets the end index
        */
        get: function () {
            return this.i.y;
        },
        set: function (v) {
            this.i.y = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "startDate", {
        /**
         * Gets the start date, if applicable
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            this.i.j = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "endDate", {
        /**
         * Gets the end date, if applicable
        */
        get: function () {
            return this.i.i;
        },
        set: function (v) {
            this.i.i = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "getItems", {
        /**
         * Gets a function that will return the items associated with this event.
        */
        get: function () {
            return this.i.a;
        },
        set: function (v) {
            this.i.a = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "fill", {
        /**
         * Gets or sets fill brush to use for the current item.
        */
        get: function () {
            return brushToString(this.i.aa);
        },
        set: function (v) {
            this.i.aa = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "stroke", {
        /**
         * Gets or sets stroke to use for the current item.
        */
        get: function () {
            return brushToString(this.i.ab);
        },
        set: function (v) {
            this.i.ab = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "opacity", {
        /**
         * Gets or sets opacity to use for the current item.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "fadeOpacity", {
        /**
         * Gets or sets opacity to use for the current item.
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "highlightingInfo", {
        /**
         * Gets or sets highlighting info
        */
        get: function () {
            var r = this.i.c;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrHighlightingInfo();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.c = null : this.i.c = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "selectionHighlightingInfo", {
        /**
         * Gets or sets selection highlighting info
        */
        get: function () {
            var r = this.i.d;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrHighlightingInfo();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.d = null : this.i.d = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "focusHighlightingInfo", {
        /**
         * Gets or sets focus highlighting info
        */
        get: function () {
            var r = this.i.b;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrHighlightingInfo();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.b = null : this.i.b = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "maxAllSeriesHighlightingProgress", {
        /**
         * Gets the max highlighting progress from all series.
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "sumAllSeriesHighlightingProgress", {
        /**
         * Gets the sum of highlighting progress from all series.
        */
        get: function () {
            return this.i.q;
        },
        set: function (v) {
            this.i.q = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "maxAllSeriesSelectionHighlightingProgress", {
        /**
         * Gets the max selection highlighting progress from all series.
        */
        get: function () {
            return this.i.n;
        },
        set: function (v) {
            this.i.n = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "sumAllSeriesSelectionHighlightingProgress", {
        /**
         * Gets the sum of selection highlighting progress from all series.
        */
        get: function () {
            return this.i.r;
        },
        set: function (v) {
            this.i.r = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "maxAllSeriesFocusHighlightingProgress", {
        /**
         * Gets the max focus highlighting progress from all series.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "sumAllSeriesFocusHighlightingProgress", {
        /**
         * Gets the sum of focus highlighting progress from all series.
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "totalAllSeriesHighlightingProgress", {
        /**
         * Gets the average of highlighting progress from all the series.
        */
        get: function () {
            return this.i.u;
        },
        set: function (v) {
            this.i.u = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "totalAllSeriesHighWaterMark", {
        /**
         * Gets the high water mark highlighting progress.
        */
        get: function () {
            return this.i.v;
        },
        set: function (v) {
            this.i.v = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "totalAllSeriesFocusHighWaterMark", {
        /**
         * Gets the high water mark focus highlighting progress.
        */
        get: function () {
            return this.i.t;
        },
        set: function (v) {
            this.i.t = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "totalAllSeriesSelectionHighWaterMark", {
        /**
         * Gets the high water mark selection highlighting progress.
        */
        get: function () {
            return this.i.x;
        },
        set: function (v) {
            this.i.x = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "totalAllSeriesSelectionHighlightingProgress", {
        /**
         * Gets the average of selection highlighting progress from all the series.
        */
        get: function () {
            return this.i.w;
        },
        set: function (v) {
            this.i.w = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "totalAllSeriesFocusHighlightingProgress", {
        /**
         * Gets the average of selection highlighting progress from all the series.
        */
        get: function () {
            return this.i.s;
        },
        set: function (v) {
            this.i.s = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "highlightingHandled", {
        /**
         * Gets or sets if highlighting was handled by this event handler, and whether internal highlighting logic should be skipped.
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "hasDateRange", {
        /**
         * Gets if this event has a valid date range
        */
        get: function () {
            return this.i.e;
        },
        set: function (v) {
            this.i.e = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "isNegativeShape", {
        /**
         * Gets if the current shape is identified as a negative shape if this series supports discrete negative shapes.
        */
        get: function () {
            return this.i.g;
        },
        set: function (v) {
            this.i.g = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAssigningSeriesStyleEventArgsBase.prototype, "isThumbnail", {
        /**
         * Gets if the current event is being raised for the thumbnail image.
        */
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrAssigningSeriesStyleEventArgsBase.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.highlightingInfo && this.highlightingInfo.name && this.highlightingInfo.name == name) {
            return this.highlightingInfo;
        }
        if (this.selectionHighlightingInfo && this.selectionHighlightingInfo.name && this.selectionHighlightingInfo.name == name) {
            return this.selectionHighlightingInfo;
        }
        if (this.focusHighlightingInfo && this.focusHighlightingInfo.name && this.focusHighlightingInfo.name == name) {
            return this.focusHighlightingInfo;
        }
        return null;
    };
    return IgrAssigningSeriesStyleEventArgsBase;
}());
export { IgrAssigningSeriesStyleEventArgsBase };
