/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, typeCast, delegateCombine, delegateRemove, markType } from "igniteui-react-core";
import { IAnnotationLayerProxy_$type } from "./IAnnotationLayerProxy";
import { CrosshairLayer } from "./CrosshairLayer";
import { ValueLayer } from "./ValueLayer";
import { CalloutLayer } from "./CalloutLayer";
import { FinalValueLayer } from "./FinalValueLayer";
import { DataToolTipLayer } from "./DataToolTipLayer";
import { DoubleCollection } from "igniteui-react-core";
/**
 * @hidden
 */
var AnnotationLayerProxy = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AnnotationLayerProxy, _super);
    function AnnotationLayerProxy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._container = null;
        return _this;
    }
    Object.defineProperty(AnnotationLayerProxy.prototype, "container", {
        get: function () {
            return this._container;
        },
        set: function (a) {
            this._container = a;
        },
        enumerable: false,
        configurable: true
    });
    AnnotationLayerProxy.prototype.matchesType = function (a) {
        if (!a.es) {
            return false;
        }
        return true;
    };
    AnnotationLayerProxy.prototype.createCrosshairLayer = function () {
        var a = new CrosshairLayer();
        var b = this.container.getExternal(a, null, null);
        return a;
    };
    AnnotationLayerProxy.prototype.createValueLayer = function () {
        var a = new ValueLayer();
        var b = this.container.getExternal(a, null, null);
        return a;
    };
    AnnotationLayerProxy.prototype.createCalloutLayer = function () {
        var a = new CalloutLayer();
        var b = this.container.getExternal(a, null, null);
        return a;
    };
    AnnotationLayerProxy.prototype.createFinalValueLayer = function () {
        var a = new FinalValueLayer();
        var b = this.container.getExternal(a, null, null);
        return a;
    };
    AnnotationLayerProxy.prototype.setCrosshairHorizontalLineVisibility = function (a, b) {
        a.aco = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairVerticalLineVisibility = function (a, b) {
        a.acp = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairHorizontalLineStroke = function (a, b) {
        a.acc = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairVerticalLineStroke = function (a, b) {
        a.acd = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairXAxisForeground = function (a, b) {
        a.acg = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairYAxisForeground = function (a, b) {
        a.acj = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairXAxisBackground = function (a, b) {
        a.ace = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairYAxisBackground = function (a, b) {
        a.ach = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairYAxisPrecision = function (a, b) {
        a.aal = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairXAxisPrecision = function (a, b) {
        a.aak = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairOnAxesEnabled = function (a, b) {
        a.z3 = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairUseInterpolation = function (a, b) {
        a.z5 = b;
    };
    AnnotationLayerProxy.prototype.setCrosshairThickness = function (a, b) {
        a.jp = b;
    };
    AnnotationLayerProxy.prototype.isCrosshairLayer = function (a) {
        return typeCast(CrosshairLayer.$, a) !== null;
    };
    AnnotationLayerProxy.prototype.setFinalValuePrecision = function (a, b) {
        a.aaa = b;
    };
    AnnotationLayerProxy.prototype.setFinalValueBackground = function (a, b) {
        a.aa4 = b;
    };
    AnnotationLayerProxy.prototype.setFinalValueForeground = function (a, b) {
        a.aa6 = b;
    };
    AnnotationLayerProxy.prototype.setContentMemberPath = function (a, b) {
        a.acx = b;
    };
    AnnotationLayerProxy.prototype.setCalloutsAllowedPositions = function (a, b) {
        a.aaa = b;
    };
    AnnotationLayerProxy.prototype.setLabelMemberPath = function (a, b) {
        a.adb = b;
    };
    AnnotationLayerProxy.prototype.setXMemberPath = function (a, b) {
        a.adr = b;
    };
    AnnotationLayerProxy.prototype.setYMemberPath = function (a, b) {
        a.adu = b;
    };
    AnnotationLayerProxy.prototype.setTargetSeries = function (a, b) {
        if (typeCast(CalloutLayer.$, a) !== null) {
            a.aaf = b;
        }
        else {
            a.z3 = b;
        }
    };
    AnnotationLayerProxy.prototype.setCollisionChannel = function (a, b) {
        a.acu = b;
    };
    AnnotationLayerProxy.prototype.setIsAutoCalloutBehaviorEnabled = function (a, b) {
        a.aa5 = b;
    };
    AnnotationLayerProxy.prototype.setGreedyCollisionMode = function (a, b) {
        a.z5 = b ? 2 : 0;
    };
    AnnotationLayerProxy.prototype.setCollisionMode = function (a, b) {
        a.z5 = b;
    };
    AnnotationLayerProxy.prototype.setUseItemColorForFill = function (a, b) {
        a.abc = b;
    };
    AnnotationLayerProxy.prototype.setUseItemColorForOutline = function (a, b) {
        a.abd = b;
    };
    AnnotationLayerProxy.prototype.setCalloutStrokeThickness = function (a, b) {
        a.abz = b;
    };
    AnnotationLayerProxy.prototype.setUseAutoContrastingLabelColors = function (a, b) {
        a.aba = b;
    };
    AnnotationLayerProxy.prototype.setCalloutBackground = function (a, b) {
        a.afm = b;
    };
    AnnotationLayerProxy.prototype.setCalloutTextStyle = function (a, b) {
        if (b == null) {
            return;
        }
        var c = a;
        c.adh = b.fontString;
    };
    AnnotationLayerProxy.prototype.setAutoCalloutLabelPrecision = function (a, b) {
        a.ab2 = b;
    };
    AnnotationLayerProxy.prototype.setCalloutLightColor = function (a, b) {
        a.afp = b;
    };
    AnnotationLayerProxy.prototype.setCalloutDarkColor = function (a, b) {
        a.afn = b;
    };
    AnnotationLayerProxy.prototype.setCalloutOutline = function (a, b) {
        a.afq = b;
    };
    AnnotationLayerProxy.prototype.setCalloutLeaderBrush = function (a, b) {
        a.afo = b;
    };
    AnnotationLayerProxy.prototype.setCalloutTextColor = function (a, b) {
        a.afr = b;
    };
    AnnotationLayerProxy.prototype.setShouldTruncateOnBoundaryCollisions = function (a, b) {
        a.aa9 = b;
    };
    AnnotationLayerProxy.prototype.setUseDedicatedLanes = function (a, b) {
        a.z3 = b ? 2 : 0;
    };
    AnnotationLayerProxy.prototype.isCalloutLayer = function (a) {
        if (typeCast(CalloutLayer.$, a) !== null) {
            return true;
        }
        return false;
    };
    AnnotationLayerProxy.prototype.isDataToolTipLayer = function (a) {
        if (typeCast(DataToolTipLayer.$, a) !== null) {
            return true;
        }
        return false;
    };
    AnnotationLayerProxy.prototype.isFinalValueLayer = function (a) {
        if (typeCast(FinalValueLayer.$, a) !== null) {
            return true;
        }
        return false;
    };
    AnnotationLayerProxy.prototype.addCalloutStyleUpdating = function (a, b) {
        var c = a;
        c.calloutStyleUpdating = delegateCombine(c.calloutStyleUpdating, b);
    };
    AnnotationLayerProxy.prototype.removeCalloutStyleUpdating = function (a, b) {
        var c = a;
        c.calloutStyleUpdating = delegateRemove(c.calloutStyleUpdating, b);
    };
    AnnotationLayerProxy.prototype.addCalloutRenderStyleUpdating = function (a, b) {
        var c = a;
        c.calloutRenderStyleUpdating = delegateCombine(c.calloutRenderStyleUpdating, b);
    };
    AnnotationLayerProxy.prototype.removeCalloutRenderStyleUpdating = function (a, b) {
        var c = a;
        c.calloutRenderStyleUpdating = delegateRemove(c.calloutRenderStyleUpdating, b);
    };
    AnnotationLayerProxy.prototype.setCalloutStyleUpdatingEventEnabled = function (a, b) {
        a.aa8 = b;
    };
    AnnotationLayerProxy.prototype.setUseValueForAutoCalloutLabels = function (a, b) {
        a.abf = b;
    };
    AnnotationLayerProxy.prototype.setCalloutRenderStyleUpdatingEventEnabled = function (a, b) {
        a.aa7 = b;
    };
    AnnotationLayerProxy.prototype.updateDataToolTipPropertyByName = function (a, b, c) {
        a.afk(b, c);
    };
    AnnotationLayerProxy.prototype.getIsAutoCalloutBehaviorEnabled = function (a) {
        return a.aa5;
    };
    AnnotationLayerProxy.prototype.setValueMode = function (a, b) {
        a.z5 = b;
    };
    AnnotationLayerProxy.prototype.setUseLegend = function (a, b) {
        a.xl = b;
    };
    AnnotationLayerProxy.prototype.setTitle = function (a, b) {
        a.title = b;
    };
    AnnotationLayerProxy.prototype.setLegendItemBadgeShape = function (a, b) {
        a.legendItemBadgeShape = b;
    };
    AnnotationLayerProxy.prototype.setValueAxisAnnotationEnabled = function (a, b) {
        a.z7 = b;
    };
    AnnotationLayerProxy.prototype.getValueMode = function (a) {
        return a.z5;
    };
    AnnotationLayerProxy.prototype.isValueLayer = function (a) {
        return typeCast(ValueLayer.$, a) !== null;
    };
    AnnotationLayerProxy.prototype.setBrush = function (a, b) {
        a.vf = b;
    };
    AnnotationLayerProxy.prototype.setDashArray = function (a, b) {
        var c = new DoubleCollection();
        for (var d = 0; d < b.length; d++) {
            c.add(b[d]);
        }
        a.v2 = c;
    };
    AnnotationLayerProxy.$t = markType(AnnotationLayerProxy, 'AnnotationLayerProxy', Base.$, [IAnnotationLayerProxy_$type]);
    return AnnotationLayerProxy;
}(Base));
export { AnnotationLayerProxy };
