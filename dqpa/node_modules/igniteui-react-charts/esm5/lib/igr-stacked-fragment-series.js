import { __extends, __values } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { IgrPropertyUpdatedEventArgs } from "igniteui-react-core";
import { StackedFragmentSeries } from "./StackedFragmentSeries";
import { fromDoubleCollection, toDoubleCollection, getModifiedProps, isValidProp, brushToString, stringToBrush, ensureBool, colorToString, stringToColor, ensureEnum, toSpinal, initializePropertiesFromCss, NamePatcher, fromPoint, toPoint, fromRect } from "igniteui-react-core";
import { TypeRegistrar } from "igniteui-react-core";
import { SeriesOutlineMode_$type } from './SeriesOutlineMode';
import { LegendItemBadgeMode_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { CategoryTransitionInMode_$type } from './CategoryTransitionInMode';
import { TransitionInSpeedType_$type } from './TransitionInSpeedType';
import { PenLineCap_$type } from "igniteui-react-core";
import { SeriesHighlightedValuesDisplayMode_$type } from "igniteui-react-core";
/**
 * Represents a non-visual child of StackedSeriesBase.
*/
var IgrStackedFragmentSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrStackedFragmentSeries, _super);
    function IgrStackedFragmentSeries(props) {
        var _this = _super.call(this, props) || this;
        _this.mounted = false;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._propertyUpdated = null;
        _this._propertyUpdated_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        return _this;
    }
    IgrStackedFragmentSeries.prototype.createImplementation = function () {
        return new StackedFragmentSeries();
    };
    IgrStackedFragmentSeries.prototype.onImplementationCreated = function () {
    };
    IgrStackedFragmentSeries.prototype.componentDidMount = function () {
        var e_1, _a;
        try {
            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IgrStackedFragmentSeries.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrStackedFragmentSeries.prototype.render = function () {
        return null;
    };
    IgrStackedFragmentSeries.prototype.provideRenderer = function (renderer) {
        this._renderer = renderer;
        this.i.visualSeriesLink.provideRenderer(renderer);
    };
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: false,
        configurable: true
    });
    IgrStackedFragmentSeries._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "dataSource", {
        /**
     * Gets or sets the ItemsSource property for the current series object. Normally you will want to provide data to the parent series instead.
     * But if you have data as individual columns, it can be assigned here. The data must be aligned and have the same number of items for each fragment.
    */
        get: function () {
            return this.i.itemsSource;
        },
        set: function (v) {
            this.i.itemsSource = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "highlightedDataSource", {
        /**
         * Gets or sets the HighlightedItemsSource property for the current series object.
        */
        get: function () {
            return this.i.highlightedItemsSource;
        },
        set: function (v) {
            this.i.highlightedItemsSource = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "brush", {
        /**
         * Gets or sets the brush of the stacked fragment.
        */
        get: function () {
            return brushToString(this.i.kz);
        },
        set: function (v) {
            this.i.kz = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualBrush", {
        /**
         * Gets the actual brush used by the series.
        */
        get: function () {
            return brushToString(this.i.ku);
        },
        set: function (v) {
            this.i.ku = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "dashArray", {
        /**
         * Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that
         * is used to outline the current series object.
        */
        get: function () {
            return fromDoubleCollection(this.i.k8);
        },
        set: function (v) {
            this.i.k8 = toDoubleCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "isDropShadowEnabled", {
        /**
         * Gets or sets whether drop shadow should be enabled for this series.
        */
        get: function () {
            return this.i.au;
        },
        set: function (v) {
            this.i.au = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualIsDropShadowEnabled", {
        /**
         * Gets whether drop shadow is actually enabled for this series.
        */
        get: function () {
            return this.i.al;
        },
        set: function (v) {
            this.i.al = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "shadowBlur", {
        /**
         * Gets or sets the shadow blur.
         * This property is ignored when
         * StackedFragmentSeries.UseSingleShadow is set to true.
        */
        get: function () {
            return this.i.b1;
        },
        set: function (v) {
            this.i.b1 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualShadowBlur", {
        /**
         * Gets the actual shadow blur used by the series.
        */
        get: function () {
            return this.i.bi;
        },
        set: function (v) {
            this.i.bi = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "shadowColor", {
        /**
         * Gets or sets the drop shadow color.
        */
        get: function () {
            return colorToString(this.i.k6);
        },
        set: function (v) {
            this.i.k6 = stringToColor(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualShadowColor", {
        /**
         * Gets actual the drop shadow color used by the series.
        */
        get: function () {
            return colorToString(this.i.k5);
        },
        set: function (v) {
            this.i.k5 = stringToColor(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "useSingleShadow", {
        /**
         * Gets or sets whether drop shadow is applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
         * When this property is set to true, no
         * StackedFragmentSeries.ShadowBlur is applied.
        */
        get: function () {
            return this.i.a4;
        },
        set: function (v) {
            this.i.a4 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualUseSingleShadow", {
        /**
         * Gets whether drop shadow is actually applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
        */
        get: function () {
            return this.i.ar;
        },
        set: function (v) {
            this.i.ar = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "shadowOffsetX", {
        /**
         * Gets or sets the drop shadow x-offset.
        */
        get: function () {
            return this.i.b2;
        },
        set: function (v) {
            this.i.b2 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualShadowOffsetX", {
        /**
         * Gets the actual drop shadow x-offset applied to the series.
        */
        get: function () {
            return this.i.bj;
        },
        set: function (v) {
            this.i.bj = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "shadowOffsetY", {
        /**
         * Gets or sets the drop shadow y-offset.
        */
        get: function () {
            return this.i.b3;
        },
        set: function (v) {
            this.i.b3 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualShadowOffsetY", {
        /**
         * Gets the actual drop shadow y-offset applied to the series.
        */
        get: function () {
            return this.i.bk;
        },
        set: function (v) {
            this.i.bk = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "lineCap", {
        /**
         * The style of the end points of any lines or polylines representing this series.
         * Not every series type has a line at which it would be appropriate to display an end cap, so this property does not affect every series type.  LineSeries, for example, is affected by EndCap, but ColumnSeries is not.
        */
        get: function () {
            return this.i.lc;
        },
        set: function (v) {
            this.i.lc = ensureEnum(PenLineCap_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualLineCap", {
        /**
         * Gets the actual end cap used by the series.
        */
        get: function () {
            return this.i.la;
        },
        set: function (v) {
            this.i.la = ensureEnum(PenLineCap_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "legendItemBadgeTemplate", {
        /**
         * Gets or sets the LegendItemBadgeTemplate property.
         * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
         * the series object itself.
        */
        get: function () {
            return this.i.hq;
        },
        set: function (v) {
            this.i.hq = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualLegendItemBadgeTemplate", {
        /**
         * Gets the actual legend item badge template used by the series.
        */
        get: function () {
            return this.i.hn;
        },
        set: function (v) {
            this.i.hn = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "legendItemTemplate", {
        /**
         * Gets or sets the LegendItemTemplate property.
         * The legend item control content is created according to the LegendItemTemplate on-demand by
         * the series object itself.
        */
        get: function () {
            return this.i.hr;
        },
        set: function (v) {
            this.i.hr = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualLegendItemTemplate", {
        /**
         * Gets the actual legend item template used by the series.
        */
        get: function () {
            return this.i.ho;
        },
        set: function (v) {
            this.i.ho = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "legendItemVisibility", {
        /**
         * Gets or sets the legend item visibility for the current series object.
        */
        get: function () {
            return this.i.lu;
        },
        set: function (v) {
            this.i.lu = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualLegendItemVisibility", {
        /**
         * Gets the actual visibility of the legend items in the series.
        */
        get: function () {
            return this.i.ls;
        },
        set: function (v) {
            this.i.ls = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "legendItemBadgeShape", {
        /**
         * Gets or sets the type of legend badge representing the current series in a legend.
         * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on the series
        */
        get: function () {
            return this.i.r;
        },
        set: function (v) {
            this.i.r = ensureEnum(LegendItemBadgeShape_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "legendItemBadgeMode", {
        /**
         * Gets or sets the mode of legend badge representing the current series in a legend.
         * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on the series
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = ensureEnum(LegendItemBadgeMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualLegendItemBadgeShape", {
        /**
         * Gets the actual LegendItemBadgeShape of the series.
        */
        get: function () {
            return this.i.q;
        },
        set: function (v) {
            this.i.q = ensureEnum(LegendItemBadgeShape_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualLegendItemBadgeMode", {
        /**
         * Gets the actual LegendItemBadgeMode of the series.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = ensureEnum(LegendItemBadgeMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.k0);
        },
        set: function (v) {
            this.i.k0 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualMarkerBrush", {
        /**
         * Gets the actual marker brush of the series.
        */
        get: function () {
            return brushToString(this.i.kv);
        },
        set: function (v) {
            this.i.kv = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.k1);
        },
        set: function (v) {
            this.i.k1 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualMarkerOutline", {
        /**
         * Gets the actual marker outline of the series.
        */
        get: function () {
            return brushToString(this.i.kw);
        },
        set: function (v) {
            this.i.kw = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.hs;
        },
        set: function (v) {
            this.i.hs = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualMarkerTemplate", {
        /**
         * Gets the actual marker template used by the series.
        */
        get: function () {
            return this.i.hp;
        },
        set: function (v) {
            this.i.hp = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.x;
        },
        set: function (v) {
            this.i.x = ensureEnum(MarkerType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualMarkerType", {
        /**
         * Gets the actual marker type set used in the series.
        */
        get: function () {
            return this.i.w;
        },
        set: function (v) {
            this.i.w = ensureEnum(MarkerType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "markerFillMode", {
        /**
         * Gets or sets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
        */
        get: function () {
            return this.i.t;
        },
        set: function (v) {
            this.i.t = ensureEnum(MarkerFillMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualMarkerFillMode", {
        /**
         * Gets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
        */
        get: function () {
            return this.i.s;
        },
        set: function (v) {
            this.i.s = ensureEnum(MarkerFillMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "markerOutlineMode", {
        /**
         * Gets or sets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
        */
        get: function () {
            return this.i.v;
        },
        set: function (v) {
            this.i.v = ensureEnum(MarkerOutlineMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualMarkerOutlineMode", {
        /**
         * Gets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
        */
        get: function () {
            return this.i.u;
        },
        set: function (v) {
            this.i.u = ensureEnum(MarkerOutlineMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "name", {
        /**
         * Gets or sets the Name of the stacked fragment.
        */
        get: function () {
            return this.i.e0;
        },
        set: function (v) {
            this.i.e0 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "opacity", {
        /**
         * Gets or sets the Opacity of the stacked fragment.
        */
        get: function () {
            return this.i.by;
        },
        set: function (v) {
            this.i.by = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualOpacity", {
        /**
         * Gets the series opacity.
        */
        get: function () {
            return this.i.bf;
        },
        set: function (v) {
            this.i.bf = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "outline", {
        /**
         * Gets or sets the brush to use for the outline of the series.
         * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.
        */
        get: function () {
            return brushToString(this.i.k3);
        },
        set: function (v) {
            this.i.k3 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualOutline", {
        /**
         * Gets the series outline.
        */
        get: function () {
            return brushToString(this.i.ky);
        },
        set: function (v) {
            this.i.ky = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "areaFillOpacity", {
        /**
         * Gets or sets the AreaFillOpacity of the stacked fragment. This property only applies for area-like series.
        */
        get: function () {
            return this.i.bm;
        },
        set: function (v) {
            this.i.bm = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualAreaFillOpacity", {
        /**
         * Gets the series ActualAreaFillOpacity.  This property only applies for area-like series.
        */
        get: function () {
            return this.i.bb;
        },
        set: function (v) {
            this.i.bb = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "markerFillOpacity", {
        /**
         * Gets or sets the opacity to use for the marker fills.
        */
        get: function () {
            return this.i.bw;
        },
        set: function (v) {
            this.i.bw = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualMarkerFillOpacity", {
        /**
         * Gets the actual opacity to use for hte marker fills.
        */
        get: function () {
            return this.i.bd;
        },
        set: function (v) {
            this.i.bd = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "outlineMode", {
        /**
         * Gets or sets the outline mode to use for the fragment.
        */
        get: function () {
            return this.i.ab;
        },
        set: function (v) {
            this.i.ab = ensureEnum(SeriesOutlineMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualOutlineMode", {
        /**
         * Gets the actual outline mode to use for the fragment.
        */
        get: function () {
            return this.i.aa;
        },
        set: function (v) {
            this.i.aa = ensureEnum(SeriesOutlineMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "highlightingFadeOpacity", {
        /**
         * Gets or sets the target opacity to fade to for fade style highlighting.
        */
        get: function () {
            return this.i.bv;
        },
        set: function (v) {
            this.i.bv = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualHighlightingFadeOpacity", {
        /**
         * Gets the actual target opacity to fade to for fade style highlighting.
        */
        get: function () {
            return this.i.bc;
        },
        set: function (v) {
            this.i.bc = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualHighlightedValuesDisplayMode", {
        /**
         * Gets the actual mode for displaying highlighted values.
        */
        get: function () {
            return this.i.z;
        },
        set: function (v) {
            this.i.z = ensureEnum(SeriesHighlightedValuesDisplayMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
        */
        get: function () {
            return this.i.bz;
        },
        set: function (v) {
            this.i.bz = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualRadiusX", {
        /**
         * Gets the actual corner radius of the series
        */
        get: function () {
            return this.i.bg;
        },
        set: function (v) {
            this.i.bg = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualIsSplineShapePartOfRange", {
        /**
         * Gets whether the spline part is considered to be part of the range
        */
        get: function () {
            return this.i.an;
        },
        set: function (v) {
            this.i.an = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "isSplineShapePartOfRange", {
        /**
         * Gets or sets whether to include the spline shape in the axis range requested of the axis.
        */
        get: function () {
            return this.i.aw;
        },
        set: function (v) {
            this.i.aw = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
        */
        get: function () {
            return this.i.b0;
        },
        set: function (v) {
            this.i.b0 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualRadiusY", {
        /**
         * Gets the actual corner radius of the series
        */
        get: function () {
            return this.i.bh;
        },
        set: function (v) {
            this.i.bh = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "thickness", {
        /**
         * Gets or sets the width of the current series object's line thickness.
        */
        get: function () {
            return this.i.b4;
        },
        set: function (v) {
            this.i.b4 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualThickness", {
        /**
         * Gets or sets the thickness of this stacked fragment.
        */
        get: function () {
            return this.i.bl;
        },
        set: function (v) {
            this.i.bl = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "markerThickness", {
        /**
         * Gets or sets the width of the current series object's marker thickness.
        */
        get: function () {
            return this.i.bx;
        },
        set: function (v) {
            this.i.bx = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualMarkerThickness", {
        /**
         * Gets actual marker thickness of this stacked fragment.
        */
        get: function () {
            return this.i.be;
        },
        set: function (v) {
            this.i.be = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "title", {
        /**
         * Gets or sets the Title property.
         * The legend item control is created according to the Title on-demand by
         * the series object itself.
        */
        get: function () {
            return this.i.cj;
        },
        set: function (v) {
            this.i.cj = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "transitionEasingFunction", {
        /**
         * Gets or sets the EasingFunction used to morph the current series.
        */
        get: function () {
            return this.i.ai;
        },
        set: function (v) {
            this.i.ai = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "transitionDuration", {
        /**
         * Gets or sets the duration of the current series's morph.
        */
        get: function () {
            return this.i.cd;
        },
        set: function (v) {
            this.i.cd = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "transitionInDuration", {
        /**
         * Gets or sets the duration of the current series's transition in morph.
        */
        get: function () {
            return this.i.ce;
        },
        set: function (v) {
            this.i.ce = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "transitionInEasingFunction", {
        /**
         * Gets or sets the EasingFunction used to morph the current series during the initial transition.
        */
        get: function () {
            return this.i.aj;
        },
        set: function (v) {
            this.i.aj = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "transitionInMode", {
        /**
         * Gets or sets the method by which to animate the data into the chart when the chart data source is swapped.
         * Note: Transitions are not currently supported for stacked series.
        */
        get: function () {
            return this.i.n;
        },
        set: function (v) {
            this.i.n = ensureEnum(CategoryTransitionInMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "isTransitionInEnabled", {
        /**
         * Gets or sets whether the series should transition into the plot area when a new data source is assigned.
         * Note: Transitions are not currently supported for stacked series.
        */
        get: function () {
            return this.i.ax;
        },
        set: function (v) {
            this.i.ax = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "transitionInSpeedType", {
        /**
         * Gets or sets the duration of the current series's transition in morph.
        */
        get: function () {
            return this.i.ae;
        },
        set: function (v) {
            this.i.ae = ensureEnum(TransitionInSpeedType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualIsTransitionInEnabled", {
        /**
         * Gets the the resolved value of whether transition in is enabled.
        */
        get: function () {
            return this.i.ao;
        },
        set: function (v) {
            this.i.ao = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualTransitionInDuration", {
        /**
         * Gets the resolved transition in duration
        */
        get: function () {
            return this.i.b7;
        },
        set: function (v) {
            this.i.b7 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualTransitionInMode", {
        /**
         * Gets the series transition easing function.
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = ensureEnum(CategoryTransitionInMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualTransitionInSpeedType", {
        /**
         * Gets the series transition easing function.
        */
        get: function () {
            return this.i.ad;
        },
        set: function (v) {
            this.i.ad = ensureEnum(TransitionInSpeedType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualTransitionInEasingFunction", {
        /**
         * Gets the series transition easing function.
        */
        get: function () {
            return this.i.ah;
        },
        set: function (v) {
            this.i.ah = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualTransitionEasingFunction", {
        /**
         * Gets the series transition easing function.
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            this.i.ag = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualTransitionDuration", {
        /**
         * Gets the series transition duration.
        */
        get: function () {
            return this.i.b6;
        },
        set: function (v) {
            this.i.b6 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "valueMemberPath", {
        /**
         * Gets or sets the value mapping property for the current series object.
        */
        get: function () {
            return this.i.ft;
        },
        set: function (v) {
            this.i.ft = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "valueMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series value in the Data Legend.
        */
        get: function () {
            return this.i.fp;
        },
        set: function (v) {
            this.i.fp = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "valueMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series value in the Data Legend.
        */
        get: function () {
            return this.i.fr;
        },
        set: function (v) {
            this.i.fr = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualValueMemberAsLegendLabel", {
        /**
         * Gets the label displayed before series value in the Data Legend.
        */
        get: function () {
            return this.i.d0;
        },
        set: function (v) {
            this.i.d0 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualValueMemberAsLegendUnit", {
        /**
         * Gets the unit displayed after series value in the Data Legend.
        */
        get: function () {
            return this.i.d2;
        },
        set: function (v) {
            this.i.d2 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "dataLegendGroup", {
        /**
         * Gets or sets a name used for grouping multiple fragment series in the Data Legend
         * If not set, series will be grouped by series family, e.g. "Stacked Series"
        */
        get: function () {
            return this.i.d9;
        },
        set: function (v) {
            this.i.d9 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "highlightedValuesDataLegendGroup", {
        /**
         * Gets or sets a name used for grouping highlighted series in the Data Legend
         * If not set, series will default to main series' HighlightedValuesDataLegendGroup, e.g. "Stacked Highlight"
        */
        get: function () {
            return this.i.ed;
        },
        set: function (v) {
            this.i.ed = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualDataLegendGroup", {
        /**
         * Gets the label displayed before series value in the Data Legend.
        */
        get: function () {
            return this.i.cp;
        },
        set: function (v) {
            this.i.cp = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualHighlightedValuesDataLegendGroup", {
        /**
         * Gets the label displayed before series value in the Data Legend.
        */
        get: function () {
            return this.i.cr;
        },
        set: function (v) {
            this.i.cr = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "visibility", {
        /**
         * Gets or sets the Visibility of the stacked fragment.
        */
        get: function () {
            return this.i.lv;
        },
        set: function (v) {
            this.i.lv = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "actualVisibility", {
        /**
         * Gets the actual visibility of the stacked fragment.
        */
        get: function () {
            return this.i.lt;
        },
        set: function (v) {
            this.i.lt = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "parentOrLocalBrush", {
        /**
         * Gets the resolved brush used between the local series and the parent series.
        */
        get: function () {
            return brushToString(this.i.k4);
        },
        set: function (v) {
            this.i.k4 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrStackedFragmentSeries.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgrStackedFragmentSeries.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrStackedFragmentSeries.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("StackedFragmentSeries");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
 * Gets the item index associated with the specified world position

*/
    IgrStackedFragmentSeries.prototype.getItemIndex = function (world) {
        var iv = this.i.b8(toPoint(world));
        return (iv);
    };
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    IgrStackedFragmentSeries.prototype.getItem = function (world) {
        var iv = this.i.ch(toPoint(world));
        return (iv);
    };
    IgrStackedFragmentSeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {
        var iv = this.i.cb(toPoint(world), skipUnknowns);
        return (iv);
    };
    IgrStackedFragmentSeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {
        var iv = this.i.ca(toPoint(world), skipUnknowns);
        return (iv);
    };
    IgrStackedFragmentSeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.bt(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    };
    IgrStackedFragmentSeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.li(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    };
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    */
    IgrStackedFragmentSeries.prototype.getSeriesValueBoundingBox = function (world) {
        var iv = this.i.lm(toPoint(world));
        return fromRect(iv);
    };
    /**
     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinates for which to get a value marker bounding box for
    */
    IgrStackedFragmentSeries.prototype.getSeriesValueMarkerBoundingBox = function (world) {
        var iv = this.i.lo(toPoint(world));
        return fromRect(iv);
    };
    IgrStackedFragmentSeries.prototype.getSeriesHighValue = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.bp(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    };
    IgrStackedFragmentSeries.prototype.getSeriesHighValuePosition = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.le(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    };
    IgrStackedFragmentSeries.prototype.getSeriesLowValue = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.br(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    };
    IgrStackedFragmentSeries.prototype.getSeriesLowValuePosition = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.lg(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    };
    IgrStackedFragmentSeries.prototype.getSeriesValuePositionFromSeriesPixel = function (mouse, useInterpolation, skipUnknowns) {
        var iv = this.i.lj(toPoint(mouse), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    };
    IgrStackedFragmentSeries.prototype.getSeriesValueFromSeriesPixel = function (mouse, useInterpolation, skipUnknowns) {
        var iv = this.i.bu(toPoint(mouse), useInterpolation, skipUnknowns);
        return (iv);
    };
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    IgrStackedFragmentSeries.prototype.getItemSpan = function () {
        var iv = this.i.bo();
        return (iv);
    };
    /**
     * Converts a point from coordinates within the series plot area to a world position within axis space.
    
    * @param seriesPoint  * The pixel location within the plot area of the series.
    */
    IgrStackedFragmentSeries.prototype.toWorldPosition = function (seriesPoint) {
        var iv = this.i.lk(toPoint(seriesPoint));
        return fromPoint(iv);
    };
    /**
     * Converts a point from world coordinates to coordinates within the viewport of the series.
    
    * @param world  * The world position from which to convert.
    */
    IgrStackedFragmentSeries.prototype.fromWorldPosition = function (world) {
        var iv = this.i.ld(toPoint(world));
        return fromPoint(iv);
    };
    /**
     * Requests that the provided item should be brought into view if possible.
    
    * @param item  * The item to attempt to bring into view.
    */
    IgrStackedFragmentSeries.prototype.scrollIntoView = function (item) {
        var iv = this.i.a0(item);
        return (iv);
    };
    /**
     * Gets the effective viewport, adjusted to account for margins and other factors.
    
    */
    IgrStackedFragmentSeries.prototype.getEffectiveViewport = function () {
        var iv = this.i.ll();
        return fromRect(iv);
    };
    /**
     * Notifies the series that a visual property has changed, requiring a visual update.
    
    */
    IgrStackedFragmentSeries.prototype.notifyVisualPropertiesChanged = function () {
        this.i.fx();
    };
    /**
     * Simulates a pointer hover over the series surface.
    
    * @param point  * The pointer position relative to the series viewport over which to hover.
    */
    IgrStackedFragmentSeries.prototype.simulateHover = function (point) {
        this.i.f2(toPoint(point));
    };
    /**
     * Moves the cursor point to the provided world position. Some series may react to the current cursor position.
    
    * @param point  * The cursor point, in world coordinates.
    */
    IgrStackedFragmentSeries.prototype.moveCursorPoint = function (point) {
        this.i.fw(toPoint(point));
    };
    IgrStackedFragmentSeries.prototype.replayTransitionIn = function () {
        this.i.f1();
    };
    Object.defineProperty(IgrStackedFragmentSeries.prototype, "propertyUpdated", {
        /**
         * Event raised when a property (including "effective" and non-dependency property) value changes.
        */
        get: function () {
            return this._propertyUpdated;
        },
        set: function (ev) {
            var _this = this;
            if (this._propertyUpdated_wrapped !== null) {
                this.i.propertyUpdated = delegateRemove(this.i.propertyUpdated, this._propertyUpdated_wrapped);
                this._propertyUpdated_wrapped = null;
                this._propertyUpdated = null;
            }
            this._propertyUpdated = ev;
            this._propertyUpdated_wrapped = function (o, e) {
                var outerArgs = new IgrPropertyUpdatedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforePropertyUpdated) {
                    _this.beforePropertyUpdated(_this, outerArgs);
                }
                if (_this._propertyUpdated) {
                    _this._propertyUpdated(_this, outerArgs);
                }
            };
            this.i.propertyUpdated = delegateCombine(this.i.propertyUpdated, this._propertyUpdated_wrapped);
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrStackedFragmentSeries;
}(React.Component));
export { IgrStackedFragmentSeries };
