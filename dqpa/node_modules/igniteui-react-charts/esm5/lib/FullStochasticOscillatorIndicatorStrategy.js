/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { PercentKCalculationStrategy } from "./PercentKCalculationStrategy";
import { String_$type, fromEnum, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var FullStochasticOscillatorIndicatorStrategy = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FullStochasticOscillatorIndicatorStrategy, _super);
    function FullStochasticOscillatorIndicatorStrategy() {
        var _this = _super.call(this) || this;
        _this.c = null;
        _this.c = new PercentKCalculationStrategy();
        return _this;
    }
    FullStochasticOscillatorIndicatorStrategy.prototype.b = function (a, b) {
        var c = new List$1(String_$type, 0);
        c.o(this.c.b(a, b));
        c.o(b.a.c);
        return c;
    };
    FullStochasticOscillatorIndicatorStrategy.prototype.a = function (a, b) {
        var e_1, _a;
        var c = this.c.c(a, b);
        var d = b.a.b(c, a.shortPeriod);
        var e = 0;
        try {
            for (var _b = __values(fromEnum(d)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var f = _c.value;
                a.indicatorColumn.item(e, f);
                e++;
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    FullStochasticOscillatorIndicatorStrategy.$t = markType(FullStochasticOscillatorIndicatorStrategy, 'FullStochasticOscillatorIndicatorStrategy', IndicatorCalculationStrategy.$);
    return FullStochasticOscillatorIndicatorStrategy;
}(IndicatorCalculationStrategy));
export { FullStochasticOscillatorIndicatorStrategy };
