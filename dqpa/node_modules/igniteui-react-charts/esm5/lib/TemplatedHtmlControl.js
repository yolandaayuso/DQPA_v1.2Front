/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
import { DomWrapper_$type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var TemplatedHtmlControl = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TemplatedHtmlControl, _super);
    function TemplatedHtmlControl(a, b, c) {
        var _this = _super.call(this) || this;
        _this.j = null;
        _this.i = null;
        _this.e = null;
        _this.d = null;
        _this.i = TemplatedHtmlControl.h(b, a, c);
        _this.j = a;
        return _this;
    }
    TemplatedHtmlControl.f = function (a, b) {
        for (var c = 0; c < a.getChildCount(); c++) {
            var d = a.getChildAt(c);
            if (d.getNativeElement() != null) {
                var ele_ = d.getNativeElement();
                if (b.toUpperCase() == (ele_.nodeName).toUpperCase()) {
                    return d;
                }
                var e = TemplatedHtmlControl.f(d, b);
                if (e != null) {
                    return e;
                }
            }
        }
        return null;
    };
    TemplatedHtmlControl.a = function (a, b) {
        var c = new List$1(DomWrapper_$type, 0);
        for (var d = 0; d < a.getChildCount(); d++) {
            var e = a.getChildAt(d);
            if (e.getNativeElement() != null) {
                var ele_ = e.getNativeElement();
                if (b.toUpperCase() == (ele_.nodeName).toUpperCase()) {
                    c.add(e);
                }
                var f = TemplatedHtmlControl.a(e, b);
                if (f != null) {
                    c.o(f);
                }
            }
        }
        return c;
    };
    TemplatedHtmlControl.h = function (a, b, c) {
        return a;
    };
    Object.defineProperty(TemplatedHtmlControl.prototype, "g", {
        get: function () {
            if (this.e == null && this.d != null) {
                return this.d.rootWrapper;
            }
            return this.e;
        },
        set: function (a) {
            this.e = a;
        },
        enumerable: false,
        configurable: true
    });
    TemplatedHtmlControl.prototype.l = function (a) {
        if (a == null) {
            if (this.g != null) {
                this.g.remove();
            }
            return;
        }
        this.d = a;
    };
    TemplatedHtmlControl.c = function (a) {
        return null;
    };
    TemplatedHtmlControl.n = function (a, b, c, d) {
        TemplatedHtmlControl.m(a, d.b1(b), c);
    };
    TemplatedHtmlControl.m = function (a, b, c) {
        if (c == null) {
            return;
        }
        var d = c.querySelector(a);
        if (d == null) {
            return;
        }
        d.setText(b);
    };
    TemplatedHtmlControl.prototype.b = function () {
        if (this.d == null || this.d.rootWrapper == null) {
            return NaN;
        }
        var a = this.d.rootWrapper.getOffset();
        return this.d.rootWrapper.width() + (a == null ? 0 : a.left);
    };
    TemplatedHtmlControl.prototype.k = function () {
        if (this.d == null || this.d.rootWrapper == null) {
            return;
        }
        this.d.rootWrapper.hide();
    };
    TemplatedHtmlControl.$t = markType(TemplatedHtmlControl, 'TemplatedHtmlControl');
    return TemplatedHtmlControl;
}(Base));
export { TemplatedHtmlControl };
