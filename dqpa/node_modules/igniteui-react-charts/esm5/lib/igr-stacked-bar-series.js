import { __extends } from "tslib";
import { IgrVerticalStackedSeriesBase } from "./igr-vertical-stacked-series-base";
import { StackedBarSeries } from "./StackedBarSeries";
import { toPoint } from "igniteui-react-core";
/**
 * Represents a IgxDataChartComponent stacked bar series.
*/
var IgrStackedBarSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrStackedBarSeries, _super);
    function IgrStackedBarSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrStackedBarSeries.prototype.createImplementation = function () {
        return new StackedBarSeries();
    };
    Object.defineProperty(IgrStackedBarSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedBarSeries.prototype, "isBar", {
        /**
         * Gets whether the current series shows a bar shape.
        */
        get: function () {
            return this.i.ex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedBarSeries.prototype, "isMarkerlessDisplayPreferred", {
        /**
         * Overridden by derived series classes to indicate when marker-less display is preferred or not.
        */
        get: function () {
            return this.i.fl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedBarSeries.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.
        */
        get: function () {
            return this.i.ab3;
        },
        set: function (v) {
            this.i.ab3 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrStackedBarSeries.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.
        */
        get: function () {
            return this.i.ab4;
        },
        set: function (v) {
            this.i.ab4 = +v;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    IgrStackedBarSeries.prototype.scrollIntoView = function (item) {
        var iv = this.i.gd(item);
        return (iv);
    };
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    IgrStackedBarSeries.prototype.getItemIndex = function (world) {
        var iv = this.i.j3(toPoint(world));
        return (iv);
    };
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    IgrStackedBarSeries.prototype.getItem = function (world) {
        var iv = this.i.kn(toPoint(world));
        return (iv);
    };
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    IgrStackedBarSeries.prototype.getItemSpan = function () {
        var iv = this.i.iw();
        return (iv);
    };
    return IgrStackedBarSeries;
}(IgrVerticalStackedSeriesBase));
export { IgrStackedBarSeries };
