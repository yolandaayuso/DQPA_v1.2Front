/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { String_$type, markType, getEnumerator } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var TRIXIndicatorStrategy = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TRIXIndicatorStrategy, _super);
    function TRIXIndicatorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TRIXIndicatorStrategy.prototype.b = function (a, b) {
        var c = new List$1(String_$type, 0);
        c.add("CloseColumn");
        c.o(b.a.c);
        return c;
    };
    TRIXIndicatorStrategy.prototype.a = function (a, b) {
        var c = b.a.b(a.closeColumn, a.period);
        var d = b.a.b(c, a.period);
        var e = getEnumerator(b.a.b(d, a.period));
        var f = a.indicatorColumn;
        if (f.count > 0) {
            f.item(0, 0);
        }
        var g = 1;
        e.moveNext();
        var h = e.current;
        while (e.moveNext()) {
            f.item(g, b.i((e.current - h) / h));
            h = e.current;
            g++;
        }
        return true;
    };
    TRIXIndicatorStrategy.$t = markType(TRIXIndicatorStrategy, 'TRIXIndicatorStrategy', IndicatorCalculationStrategy.$);
    return TRIXIndicatorStrategy;
}(IndicatorCalculationStrategy));
export { TRIXIndicatorStrategy };
