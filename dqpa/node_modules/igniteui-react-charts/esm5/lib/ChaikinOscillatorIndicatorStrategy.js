/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { IndicatorCalculationStrategy } from "./IndicatorCalculationStrategy";
import { AccumulationDistributionIndicatorStrategy } from "./AccumulationDistributionIndicatorStrategy";
import { String_$type, markType, getEnumerator } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var ChaikinOscillatorIndicatorStrategy = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ChaikinOscillatorIndicatorStrategy, _super);
    function ChaikinOscillatorIndicatorStrategy() {
        var _this = _super.call(this) || this;
        _this.c = null;
        _this.c = new AccumulationDistributionIndicatorStrategy();
        return _this;
    }
    ChaikinOscillatorIndicatorStrategy.prototype.b = function (a, b) {
        var c = new List$1(String_$type, 0);
        c.o(this.c.b(a, b));
        c.o(b.a.c);
        return c;
    };
    ChaikinOscillatorIndicatorStrategy.prototype.a = function (a, b) {
        var c = a.indicatorColumn;
        var d = this.c.c(a, b);
        var e = getEnumerator(b.a.b(d, a.shortPeriod));
        var f = getEnumerator(b.a.b(d, a.longPeriod));
        var g = 0;
        while (e.moveNext() && f.moveNext()) {
            var h = e.current - f.current;
            c.item(g, h);
            g++;
        }
        return true;
    };
    ChaikinOscillatorIndicatorStrategy.$t = markType(ChaikinOscillatorIndicatorStrategy, 'ChaikinOscillatorIndicatorStrategy', IndicatorCalculationStrategy.$);
    return ChaikinOscillatorIndicatorStrategy;
}(IndicatorCalculationStrategy));
export { ChaikinOscillatorIndicatorStrategy };
