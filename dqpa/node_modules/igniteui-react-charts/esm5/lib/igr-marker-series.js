import { __extends } from "tslib";
import { MarkerType_$type } from "./MarkerType";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { IgrSeries } from "./igr-series";
import { ensureBool, ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
/**
 * Represents the base class for series containing markers.
*
* MarkerSeries represents the base class for series containing markers.
*
* Example:
*
* ```ts
*  <IgrDataChart
*     dataSource={this.state.dataSource} >
*
*     <IgrCategoryXAxis name="xAxis" />
*     <IgrNumericYAxis name="yAxis" />
*
*     <IgrColumnSeries
*      name="series1"
*     xAxisName="xAxis"
* 	yAxisName="yAxis"
* 	valueMemberPath="Value" />
*  </IgrDataChart>
* ```
*
* ```ts
* this.series = new IgrMarkerSeries({name: "series"});
* this.series.xAxis = this.categoryXAxis;
* this.series.yAxis = this.numericYAxis;
* this.series.xAxisName = "timeXAxis";
* this.series.yAxisName = "numericYAxis";
* this.series.volumeMemberPath="Volume";
* ```
*/
var IgrMarkerSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrMarkerSeries, _super);
    function IgrMarkerSeries(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrMarkerSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "hasMarkers", {
        /**
         * Returns whether the current series supports visual markers.
        *
        * `HasMarkers` property is overriden, it returns whether the current series supports visual markers. You can use it like this:
        *
        * ```ts
        *  let gotMarkers: boolean = this.series.hasMarkers;
        * ```
        */
        get: function () {
            return this.i.hasMarkers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "hasVisibleMarkers", {
        get: function () {
            return this.i.el;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * This property is ignored when the MarkerTemplate property is set
        *
        * `MarkerType` property gets or sets the marker type for the current series object. For example, you can set it like this:
        *
        * ```ts
        * this.series.markerType = "circle";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource} >
        *
        *     <IgrCategoryXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrColumnSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        * 	markerType = "circle"/>
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.xa;
        },
        set: function (v) {
            this.i.xa = ensureEnum(MarkerType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "actualMarkerType", {
        /**
         * Represents the resolved marker type for the series.
        */
        get: function () {
            return this.i.w8;
        },
        set: function (v) {
            this.i.w8 = ensureEnum(MarkerType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "isCustomMarkerCircular", {
        /**
         * Gets or sets whether the marker for the current series object should be treated as circular.
        */
        get: function () {
            return this.i.xd;
        },
        set: function (v) {
            this.i.xd = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "effectiveIsMarkerCircular", {
        /**
         * Gets whether the markers for the current series are in circular shape
        */
        get: function () {
            return this.i.xc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "markerOutlineMode", {
        /**
         * Gets or sets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
        */
        get: function () {
            return this.i.w4;
        },
        set: function (v) {
            this.i.w4 = ensureEnum(MarkerOutlineMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "markerFillMode", {
        /**
         * Gets or sets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
        */
        get: function () {
            return this.i.w0;
        },
        set: function (v) {
            this.i.w0 = ensureEnum(MarkerFillMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        *
        * `MarkerTemplate` property gets or sets the MarkerTemplate for the current series object. For example, you can use it like this:
        */
        get: function () {
            return this.i.x2;
        },
        set: function (v) {
            this.i.x2 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.xj;
        },
        set: function (v) {
            this.i.xj = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "actualMarkerTemplate", {
        /**
         * Gets the effective marker template for the current series object.
        *
        * `ActualMarkerTemplate` property gets the effective marker template for the current series object. You can use it like this:
        */
        get: function () {
            return this.i.x0;
        },
        set: function (v) {
            this.i.x0 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        *
        * `MarkerBrush` property gets or sets the brush that specifies how the current series object's marker interiors are painted. You can use it like this:
        *
        * ```ts
        * this.series.markerBrush = "red";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource} >
        *
        *     <IgrCategoryXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrColumnSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        * 	markerBrush = "blue" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return brushToString(this.i.yj);
        },
        set: function (v) {
            this.i.yj = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "actualMarkerBrush", {
        /**
         * Gets the effective marker brush for the current series object.
        *
        * `ActualMarkerBrush` property gets the effective marker brush for the current series object. For example, you can use it like this:
        *
        * ```ts
        *  let effectiveMarkerBrush: string = this.series.actualMarkerBrush;
        *
        * ```
        */
        get: function () {
            return brushToString(this.i.yh);
        },
        set: function (v) {
            this.i.yh = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        *
        * `MarkerOutline` property gets or sets the brush that specifies how the current series object's marker outlines are painted. You can use it like this:
        *
        * ```ts
        * this.series.markerOutline = "red";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource} >
        *
        *     <IgrCategoryXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrColumnSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        * 	markerOutline = "blue" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return brushToString(this.i.yk);
        },
        set: function (v) {
            this.i.yk = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMarkerSeries.prototype, "actualMarkerOutline", {
        /**
         * Gets the effective marker outline for the current series object.
        *
        *     `ActualMarkerOutline` property gets the effective marker outline for the current series object. You can use it like this:
        *
        * ```ts
        *  let effectiveMarkerOutline: string = this.series.actualMarkerOutline;
        *
        * ```
        */
        get: function () {
            return brushToString(this.i.yi);
        },
        set: function (v) {
            this.i.yi = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    return IgrMarkerSeries;
}(IgrSeries));
export { IgrMarkerSeries };
