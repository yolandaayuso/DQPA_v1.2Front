/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, fromEnum, markType } from "igniteui-react-core";
/**
 * @hidden
 */
var IndicatorPane = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IndicatorPane, _super);
    function IndicatorPane() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.c = null;
        _this.d = null;
        _this.a = null;
        return _this;
    }
    IndicatorPane.prototype.h = function (a) {
        this.c = a;
        if (this.c == null) {
            return;
        }
        this.d = this.c.createElement("div");
        this.d.setStyleProperty("height", "100%");
        this.d.setStyleProperty("width", "100%");
        this.d.setStyleProperty("display", "grid");
        this.d.setStyleProperty("display", "-ms-grid");
        this.d.setStyleProperty("-ms-grid-columns", "100%");
        this.c.append(this.d);
        this.i();
    };
    IndicatorPane.prototype.i = function () {
        if (this.d == null) {
            return;
        }
        this.d.removeChildren();
        if (this.b == null) {
            return;
        }
        var a = "";
        for (var b = 0; b < this.b.count; b++) {
            var c = this.b._inner[b];
            var d = this.c.createElement("div");
            d.setStyleProperty("grid-row", (b + 1).toString());
            d.setStyleProperty("grid-column", (1).toString());
            d.setStyleProperty("-ms-grid-row", (b + 1).toString());
            d.setStyleProperty("-ms-grid-column", (1).toString());
            this.d.append(d);
            var e = this.c.getSubRenderer(d);
            c.c9.b4(e);
            a += " 1fr";
        }
        a = a.trim();
        this.d.setStyleProperty("-ms-grid-rows", a);
    };
    Object.defineProperty(IndicatorPane.prototype, "b", {
        get: function () {
            return this.a;
        },
        set: function (a) {
            var b = this.b;
            if (a != b) {
                this.a = a;
                this.g("IndicatorCharts", b, this.b);
            }
        },
        enumerable: false,
        configurable: true
    });
    IndicatorPane.prototype.g = function (a, b, c) {
        switch (a) {
            case "IndicatorCharts":
                this.i();
                break;
        }
    };
    IndicatorPane.prototype.f = function () {
        var e_1, _a;
        if (this.b == null || this.c == null) {
            return;
        }
        try {
            for (var _b = __values(fromEnum(this.b)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var a = _c.value;
                a.notifyContainerResized();
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IndicatorPane.$t = markType(IndicatorPane, 'IndicatorPane');
    return IndicatorPane;
}(Base));
export { IndicatorPane };
