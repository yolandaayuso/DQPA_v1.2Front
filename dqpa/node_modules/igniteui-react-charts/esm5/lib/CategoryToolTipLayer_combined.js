/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { AnnotationLayer } from "./AnnotationLayer";
import { Axis } from "./Axis";
import { DependencyProperty } from "igniteui-react-core";
import { CategoryTooltipLayerPosition_$type } from "./CategoryTooltipLayerPosition";
import { Series } from "./Series";
import { CategoryToolTipLayerFrame } from "./CategoryToolTipLayerFrame";
import { Base, enumGetBox, typeCast, fromEnum, Point_$type, markType, markDep, String_$type } from "igniteui-react-core";
import { CategoryTooltipSeriesInfo } from "./CategoryTooltipSeriesInfo";
import { XamDataChart } from "./XamDataChart";
import { List$1 } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
/**
 * @hidden
 */
var CategoryToolTipLayer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryToolTipLayer, _super);
    function CategoryToolTipLayer() {
        var _this = _super.call(this) || this;
        var a = new CategoryToolTipLayerFrame();
        var b = new CategoryToolTipLayerFrame();
        var c = new CategoryToolTipLayerFrame();
        _this.xc = a;
        _this.xb = b;
        _this.xd = c;
        _this.ab = CategoryToolTipLayer.$;
        return _this;
    }
    CategoryToolTipLayer.prototype.bj = function () {
        return new CategoryToolTipLayer();
    };
    CategoryToolTipLayer.prototype.get_er = function () {
        return true;
    };
    CategoryToolTipLayer.prototype.cs = function () {
        return new CategoryToolTipLayerView(this);
    };
    CategoryToolTipLayer.prototype.q1 = function (a) {
        _super.prototype.q1.call(this, a);
        this.zz = a;
    };
    CategoryToolTipLayer.prototype.get_e2 = function () {
        return true;
    };
    CategoryToolTipLayer.prototype.q9 = function (a, b, c, d) {
        _super.prototype.q9.call(this, a, b, c, d);
        switch (b) {
            case CategoryToolTipLayer.$$p[0]:
                this.rr(true);
                break;
            case CategoryToolTipLayer.$$p[2]:
                this.rr(true);
                break;
            case CategoryToolTipLayer.$$p[1]:
                this.rr(true);
                break;
            case "SeriesViewer":
                this.zz.ci();
                break;
        }
    };
    CategoryToolTipLayer.prototype.yo = function (a, b) {
        if (this.zx == a) {
            if (!this.a1.c) {
                this.rr(b);
            }
        }
    };
    CategoryToolTipLayer.prototype.yp = function (a, b) {
        if (!this.a1.c) {
            this.rr(b);
        }
    };
    CategoryToolTipLayer.prototype.yr = function (a, b) {
        var e_1, _a, e_2, _b;
        _super.prototype.yr.call(this, a, b);
        var c = a;
        var d = this.z1;
        c.l = NaN;
        c.k = NaN;
        c.g = NaN;
        c.h = NaN;
        c.k = NaN;
        c.l = NaN;
        if (isNaN_(this.zu.x) && isNaN_(this.zu.y)) {
            this.zz.cg(this.zz.cd());
            return;
        }
        if (this.zx != null) {
            var e = this.zx;
            if (e == null || !e.cb || e.b9) {
                return;
            }
            if (!e.co()) {
                return;
            }
            var f = e;
            var g = this.z0(f.df, d);
            this.z6(g, c, d);
        }
        else {
            if (typeCast(XamDataChart.$, this.db) !== null) {
                var h = this.db;
                var i = true;
                var j = false;
                var k = new List$1(Series.$, 0);
                try {
                    for (var _c = __values(fromEnum(h.axes)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var l = _d.value;
                        if (l.cb && !l.b9) {
                            if (!l.co()) {
                                continue;
                            }
                            if (i) {
                                i = false;
                                j = l.cp;
                            }
                            else {
                                if (l.cp != j) {
                                    continue;
                                }
                            }
                            try {
                                for (var _e = (e_2 = void 0, __values(fromEnum(l.df))), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    var m = _f.value;
                                    k.add(m);
                                }
                            }
                            catch (e_2_1) {
                                e_2 = { error: e_2_1 };
                            }
                            finally {
                                try {
                                    if (_f && !_f.done && (_b = _e.return))
                                        _b.call(_e);
                                }
                                finally {
                                    if (e_2)
                                        throw e_2.error;
                                }
                            }
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return))
                            _a.call(_c);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                var n = this.z0(k, d);
                this.z6(n, c, d);
            }
        }
    };
    CategoryToolTipLayer.prototype.z0 = function (a, b) {
        var c = 1.7976931348623157E+308;
        var d = -1.7976931348623157E+308;
        var e = new List$1(DataContext.$, 0);
        var f = new List$1(Base.$, 0);
        var g = false;
        var h = true;
        for (var i = 0; i < a.count; i++) {
            var j = a.item(i);
            if (!j.e6 && !j.ey) {
                continue;
            }
            if (j.isStacked) {
                continue;
            }
            var k = j;
            if (!k.categoryAxis.co()) {
                continue;
            }
            if (h) {
                g = j.isVertical;
            }
            else {
                if (g != j.isVertical) {
                    continue;
                }
            }
            var l = this.yk(j);
            if (!l.c) {
                continue;
            }
            var m = j.wc(l.d, b, false);
            if (g) {
                if (!isNaN_(m.y)) {
                    c = Math.min(c, m.y);
                    d = Math.max(d, m.y);
                }
            }
            else {
                if (!isNaN_(m.x)) {
                    c = Math.min(c, m.x);
                    d = Math.max(d, m.x);
                }
            }
            var n = this.z2(j);
            if (n == null) {
                continue;
            }
            var o = null;
            var p = j.kn(this.zu);
            if (j.e3 && p != null) {
                o = j.a3(p);
            }
            else {
                o = new DataContext();
                o.item = p;
                o.series = j;
            }
            e.add(o);
            f.add1(n);
        }
        var q = 0;
        var r = 0;
        if (g) {
            r = (c + d) / 2;
            q = this.ws.right;
            if (this.zy == 2 || this.zy == 1) {
                q = this.ws.left;
            }
            if (r < 0 || r > this.ws.bottom) {
                r = NaN;
            }
        }
        else {
            q = (c + d) / 2;
            r = this.ws.top;
            if (this.zy == 2 || this.zy == 1) {
                r = this.ws.bottom;
            }
            if (q < 0 || q > this.ws.right) {
                q = NaN;
            }
        }
        var s = new CategoryTooltipSeriesInfo();
        s.c = { $type: Point_$type, x: q, y: r };
        s.a = e;
        s.b = f;
        return s;
    };
    CategoryToolTipLayer.prototype.p7 = function () {
        this.zu = { $type: Point_$type, x: NaN, y: NaN };
        this.cv.ar();
    };
    CategoryToolTipLayer.prototype.z6 = function (a, b, c) {
        var d = a.c;
        var e = a.a;
        var f = a.b;
        d = this.zz.cj(d);
        var g = 0;
        var h = this.cv.bx;
        var i = this.zz.cd();
        this.zz.cf();
        var j = false;
        if (e.count == 0) {
            this.cv.ar();
            return;
        }
        var k = false;
        for (var l = 0; l < e.count; l++) {
            var m = e._inner[l].series;
            j = m.isVertical;
            var n = e._inner[l];
            var o = f._inner[l];
            if (this.zz.ca(m, o, n)) {
                k = true;
            }
            g++;
        }
        if (!k) {
            this.zz.cg(i);
            return;
        }
        var p = this.zz.ck(i);
        var q = 0;
        var r = 0;
        var s = 0;
        var t = 0;
        var u = false;
        var v = false;
        var w = this.zy;
        if (w == 2 || w == 3) {
            v = true;
        }
        if (w == 2 || w == 1) {
            u = true;
        }
        var x = this.zz.cl();
        if (j) {
            if (!u && !v && d.x + (p.width + DeviceUtils.g(10)) > x.width) {
                v = true;
            }
            if (u && !v && d.x - (p.width + DeviceUtils.g(10)) < 0) {
                v = true;
            }
        }
        else {
            if (!u && !v && d.y - (p.height + 10) < 0) {
                v = true;
            }
            if (u && !v && d.y + (p.height + 10) > x.height) {
                v = true;
            }
        }
        var y = DeviceUtils.g(10);
        var z = DeviceUtils.g(5);
        if (!u) {
            if (!j) {
                z = p.height + y;
            }
            if (v) {
                if (j) {
                    z = z + p.width + y;
                }
                else {
                    z = 0;
                }
            }
        }
        else {
            if (j) {
                z = p.width + y;
                if (v) {
                    z = 0;
                }
            }
            else {
                z = DeviceUtils.g(5);
                if (v) {
                    z = z + p.height + y;
                }
            }
        }
        if (j) {
            r = 0 - (y + DeviceUtils.g(5));
            if (u) {
                r = (r * -1) + p.width;
            }
            q = p.height / 2;
            t = d.y - p.height / 2;
            s = d.x - z;
        }
        else {
            q = p.height + DeviceUtils.g(10) + DeviceUtils.g(5);
            if (u) {
                q = 0 - (y + DeviceUtils.g(5));
            }
            r = p.width / 2;
            s = d.x - p.width / 2;
            t = d.y - z;
        }
        if (j) {
            if (t < 0) {
                q -= 0 - t;
                t = 0;
            }
            if (t + p.height > x.height) {
                q += (t + p.height) - x.height;
                t = x.height - p.height;
            }
        }
        else {
            if (s < 0) {
                r -= 0 - s;
                s = 0;
            }
            if (s + p.width > x.width) {
                r += (s + p.width) - x.width;
                s = x.width - p.width;
            }
        }
        b.k = s;
        b.l = t;
        b.g = r;
        b.h = q;
        b.j = p.width;
        b.i = p.height;
    };
    CategoryToolTipLayer.prototype.z2 = function (a) {
        return a.toolTip;
    };
    CategoryToolTipLayer.prototype.yu = function (a, b) {
        _super.prototype.yu.call(this, a, b);
        var c = a;
        var d = b.bx.left;
        var e = b.bx.right;
        var f = b.bx.top;
        var g = b.bx.bottom;
        var h = this.zz.cd();
        if (isNaN_(c.k) || isNaN_(c.l) || isNaN_(c.g) || isNaN_(c.h)) {
            this.zz.cg(h);
            return;
        }
        var i = c.k;
        var j = c.l;
        var k = c.g;
        var l = c.h;
        if (h != null) {
            this.zz.ch(h, i, j, k, l);
        }
    };
    CategoryToolTipLayer.prototype.ga = function () {
        return true;
    };
    CategoryToolTipLayer.$t = markType(CategoryToolTipLayer, 'CategoryToolTipLayer', AnnotationLayer.$);
    CategoryToolTipLayer.$$p = markDep(DependencyProperty, PropertyMetadata, CategoryToolTipLayer, 'raisePropertyChanged', ['TargetAxis:zx:z7', [Axis.$, null], 'ToolTipPosition:zy:z8', [CategoryTooltipLayerPosition_$type, enumGetBox(CategoryTooltipLayerPosition_$type, 0)], 'UseInterpolation:z1:z9', [0, false]]);
    return CategoryToolTipLayer;
}(AnnotationLayer));
export { CategoryToolTipLayer };
/**
 * @hidden
 */
var CategoryToolTipLayerView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryToolTipLayerView, _super);
    function CategoryToolTipLayerView(a) {
        var _this = _super.call(this, a) || this;
        _this.b7 = null;
        _this.b8 = null;
        _this._tooltips = null;
        _this.cb = null;
        _this.b9 = false;
        _this._htmlTest = null;
        _this.b7 = a;
        _this.htmlTest = /^[^<]*(<[\w\W]+>)[^>]*$/;
        return _this;
    }
    CategoryToolTipLayerView.prototype.cd = function () {
        if (this.b8 == null) {
            this.b8 = new PointerTooltip();
            this.b8.bw(this.e.jz);
            this.b8.ap = this.e.db.c9.k;
            this._tooltips = this.e.jz.createElement("div");
            this.cb = this.e.jz.createElement("div");
            this.b8._visibility = 0;
        }
        return this.b8;
    };
    CategoryToolTipLayerView.prototype.au = function () {
        _super.prototype.au.call(this);
        if (this.b8 != null) {
            this.b8._visibility = 1;
        }
    };
    CategoryToolTipLayerView.prototype.ak = function () {
        _super.prototype.ak.call(this);
        if (this.b8 != null) {
            this.b8.br();
            this.b8 = null;
        }
    };
    Object.defineProperty(CategoryToolTipLayerView.prototype, "htmlTest", {
        get: function () {
            return this._htmlTest;
        },
        set: function (a) {
            this._htmlTest = a;
        },
        enumerable: false,
        configurable: true
    });
    CategoryToolTipLayerView.prototype.ca = function (a, b, c) {
        if (a.k2 == "default") {
            a.k2 = a.cv.getDefaultTooltipTemplate();
        }
        var template_ = a.k2;
        var context_ = c;
        if (a.toolTip == null) {
            return false;
        }
        var tooltip_ = a.toolTip;
        if ((tooltip_.updateToolTip)) {
            tooltip_._inPointer = true;
            tooltip_.updateToolTip(context_, true);
            tooltip_.setStyleProperty('position', 'relative');
            tooltip_.setStyleProperty('left', '');
            tooltip_.setStyleProperty('top', '');
            tooltip_.remove();
        }
        this._tooltips.append(a.toolTip);
        return true;
    };
    CategoryToolTipLayerView.prototype.ck = function (a) {
        var b = a;
        b.content = this._tooltips;
        var c = new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
        b.cy = 1;
        var d = b.cx(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
        b.cy = 0;
        return d;
    };
    CategoryToolTipLayerView.prototype.cj = function (a) {
        var b = 0;
        var c = 0;
        if (this.e.db != null) {
            var d = this.e.db.vx();
            b += d.x;
            c += d.y;
        }
        return { $type: Point_$type, x: b + a.x, y: c + a.y };
    };
    CategoryToolTipLayerView.prototype.ch = function (a, b, c, d, e) {
        var f = a;
        var g = f.content;
        f.cs = { $type: Point_$type, x: d, y: e };
        f._visibility = 0;
        f.n = b;
        f.o = c;
    };
    CategoryToolTipLayerView.prototype.cl = function () {
        var a = (window.innerWidth);
        var b = (window.innerHeight);
        return new Size(1, a, b);
    };
    CategoryToolTipLayerView.prototype.cg = function (a) {
        this._tooltips.removeChildren();
        this.cb.removeChildren();
        this.b8._visibility = 1;
    };
    CategoryToolTipLayerView.prototype.cf = function () {
        if (this._tooltips != null) {
            this._tooltips.removeChildren();
        }
    };
    CategoryToolTipLayerView.prototype.ci = function () {
    };
    CategoryToolTipLayerView.prototype.a8 = function (a, b) {
        _super.prototype.a8.call(this, a, b);
        if (b) {
            return;
        }
        var c = null;
        if (this.e.db != null) {
            c = this.e.db.c9.j.i();
        }
        var d = 0;
        var e = 0;
        var f = this.e.db;
        if (f != null) {
            var g = f.c9.j.b8();
            d += g.x;
            e += g.y;
        }
        if (this.b8 != null) {
            this.b8.aq = c;
            this.b8.by(this.b8.n, this.b8.o);
        }
    };
    CategoryToolTipLayerView.prototype.an = function (a) {
        _super.prototype.an.call(this, a);
        var b = this.b8;
        var c = 0;
        var d = 0;
        if (this.e.db != null) {
            var e = this.e.db.vx();
            c += e.x;
            d += e.y;
        }
        var f = b.a5();
        var g = b.n - c;
        var h = b.o - d;
        var i = new List$1(String_$type, 0);
        var j = this._tooltips.getChildCount();
        for (var k = 0; k < j; k++) {
            var indexliteral_ = k.toString();
            var l = this._tooltips.getChildAt(k).getText();
            var m = l.toString();
            i.add(m);
        }
        this.e.bc.addPointerTooltipData(a, f, g, h, i);
    };
    CategoryToolTipLayerView.$t = markType(CategoryToolTipLayerView, 'CategoryToolTipLayerView', AnnotationLayerView.$);
    return CategoryToolTipLayerView;
}(AnnotationLayerView));
export { CategoryToolTipLayerView };
