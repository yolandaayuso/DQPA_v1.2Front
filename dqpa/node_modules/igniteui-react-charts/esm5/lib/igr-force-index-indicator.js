import { __extends } from "tslib";
import { IgrStrategyBasedIndicator } from "./igr-strategy-based-indicator";
import { ForceIndexIndicator } from "./ForceIndexIndicator";
/**
 * Represents a IgxDataChartComponent Force Index indicator series.
 * Default required members: Close, Volume
*
* The `ForceIndexIndicator` represents a IgxDataChartComponent Force Index indicator series.
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*
*
*     <IgrCategoryXAxis name="xAxis" label="Date" />
*     <IgrNumericYAxis  name="yAxis" />
*
*
*     <IgrForceIndexIndicator
*     name="series2"
*     xAxisName="xAxis"
*     yAxisName="yAxis"
*     displayType="Candlestick"
*     lowMemberPath="Low"
*     highMemberPath="High"
*     openMemberPath="Open"
*     closeMemberPath="Close"
*     volumeMemberPath="Volume" />
*  </IgrDataChart>
* ```
*
* ```ts
* this.financialSeries = new IgrForceIndexIndicator({name: "financialSeries"});
* this.financialSeries.dataSource = this.financialData;
* this.financialSeries.xAxis = this.timeXAxis;
* this.financialSeries.yAxis = this.numericYAxis;
* this.financialSeries.xAxisName = "timeXAxis";
* this.financialSeries.yAxisName = "numericYAxis";
* this.financialSeries.highMemberPath="High"
* this.financialSeries.lowMemberPath="Low"
* this.financialSeries.closeMemberPath="Close"
* this.financialSeries.openMemberPath="Open"
* this.financialSeries.volumeMemberPath="Volume"
* ```
*/
var IgrForceIndexIndicator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrForceIndexIndicator, _super);
    function IgrForceIndexIndicator(props) {
        return _super.call(this, props) || this;
    }
    IgrForceIndexIndicator.prototype.createImplementation = function () {
        return new ForceIndexIndicator();
    };
    Object.defineProperty(IgrForceIndexIndicator.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrForceIndexIndicator.prototype, "defaultDisplayType", {
        /**
         * Gets default display type for the current Financial Indicator
        */
        get: function () {
            return this.i.aa2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrForceIndexIndicator.prototype, "period", {
        /**
         * Gets or sets the moving average period for the current AverageTrueRangeSeries object.
         * The typical, and initial, value for ForceIndiex periods is 0.
        *
        * You can use the `period` property to get the moving average period of the current FullStochasticOscillatorIndicator object
        *
        * ```ts
        * <IgrDataChart
        *     dataSource={this.state.dataSource}
        *     width="700px"
        *     height="500px">
        *
        *
        *     <IgrCategoryXAxis name="xAxis" label="Date" />
        *     <IgrNumericYAxis  name="yAxis" />
        *
        *
        *     <IgrForceIndexIndicator
        *     name="series2"
        *     xAxisName="xAxis"
        *     yAxisName="yAxis"
        *     displayType="Candlestick"
        *     lowMemberPath="Low"
        *     highMemberPath="High"
        *     openMemberPath="Open"
        *     closeMemberPath="Close"
        *     volumeMemberPath="Volume"
        * 	period= {30} />
        *  </IgrDataChart>
        * ```
        *
        * ```ts
        * this.series.period = 30;
        * ```
        */
        get: function () {
            return this.i.acg;
        },
        set: function (v) {
            this.i.acg = +v;
        },
        enumerable: false,
        configurable: true
    });
    return IgrForceIndexIndicator;
}(IgrStrategyBasedIndicator));
export { IgrForceIndexIndicator };
