/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { SeriesVisualData } from "./SeriesVisualData";
import { SeriesVisualDataList } from "./SeriesVisualDataList";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
var StackedSeriesVisualData = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(StackedSeriesVisualData, _super);
    function StackedSeriesVisualData() {
        var _this = _super.call(this) || this;
        _this._fragmentSeries = null;
        _this.fragmentSeries = new SeriesVisualDataList();
        return _this;
    }
    Object.defineProperty(StackedSeriesVisualData.prototype, "fragmentSeries", {
        get: function () {
            return this._fragmentSeries;
        },
        set: function (a) {
            this._fragmentSeries = a;
        },
        enumerable: false,
        configurable: true
    });
    StackedSeriesVisualData.prototype.n = function () {
        _super.prototype.n.call(this);
        for (var a = 0; a < this.fragmentSeries.count; a++) {
            this.fragmentSeries._inner[a].n();
        }
    };
    StackedSeriesVisualData.prototype.o = function (a) {
        _super.prototype.o.call(this, a);
        if (this.fragmentSeries != null && this.fragmentSeries.count > 0) {
            a.u(",");
            a.u("fragmentSeries: [");
            for (var b = 0; b < this.fragmentSeries.count; b++) {
                if (b > 0) {
                    a.u(",");
                }
                a.l(this.fragmentSeries._inner[b].serialize());
            }
            a.u("]");
        }
    };
    StackedSeriesVisualData.$t = markType(StackedSeriesVisualData, 'StackedSeriesVisualData', SeriesVisualData.$);
    return StackedSeriesVisualData;
}(SeriesVisualData));
export { StackedSeriesVisualData };
