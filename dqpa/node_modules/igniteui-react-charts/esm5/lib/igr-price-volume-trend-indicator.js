import { __extends } from "tslib";
import { IgrStrategyBasedIndicator } from "./igr-strategy-based-indicator";
import { PriceVolumeTrendIndicator } from "./PriceVolumeTrendIndicator";
/**
 * Represents a IgxDataChartComponent Price Volume Trend Indicator series.
 * Default required members: Volume, Close
*
* You can use the `PriceVolumeTrendIndicator` to measure money flow by adding or subtracting a portion of the daily volume.
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*
*     <IgrCategoryXAxis name="xAxis" label="Date" />
*     <IgrNumericYAxis  name="yAxis" />
*    <IgrPriceVolumeTrendIndicator
*     name="series1"
*     xAxisName="xAxis"
*     yAxisName="yAxis"
*     lowMemberPath="Low"
*     highMemberPath="High"
*     openMemberPath="Open"
*     closeMemberPath="Close"
*     volumeMemberPath="Volume" />
*  </IgrDataChart>
* ```
*
* ```ts
* let series = new IgrPriceVolumeTrendIndicator({name:"series1"});
* series.xAxisName = this.xAxis;
* series.yAxisName = this.yAxis;
* series.xAxis = this.categoryXAxis;
* series.yAxis = this.numericYAxis;
* series.openMemberPath = "open";
* series.highMemberPath = "high";
* series.lowMemberPath = "low";
* series.closeMemberPath = "close";
* series.volumeMemberPath="Volume" ;
* ```
*/
var IgrPriceVolumeTrendIndicator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrPriceVolumeTrendIndicator, _super);
    function IgrPriceVolumeTrendIndicator(props) {
        return _super.call(this, props) || this;
    }
    IgrPriceVolumeTrendIndicator.prototype.createImplementation = function () {
        return new PriceVolumeTrendIndicator();
    };
    Object.defineProperty(IgrPriceVolumeTrendIndicator.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    return IgrPriceVolumeTrendIndicator;
}(IgrStrategyBasedIndicator));
export { IgrPriceVolumeTrendIndicator };
