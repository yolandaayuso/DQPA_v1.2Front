/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { StrategyBasedIndicator } from "./StrategyBasedIndicator";
import { CustomIndicatorStrategy } from "./CustomIndicatorStrategy";
import { String_$type, fromEnum, markType } from "igniteui-react-core";
import { FinancialEventArgs } from "./FinancialEventArgs";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CustomIndicator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CustomIndicator, _super);
    function CustomIndicator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ach = null;
        _this.acg = null;
        return _this;
    }
    CustomIndicator.prototype.bj = function () {
        return new CustomIndicator();
    };
    CustomIndicator.prototype.get_abv = function () {
        return new CustomIndicatorStrategy();
    };
    Object.defineProperty(CustomIndicator.prototype, "abv", {
        get: function () {
            return this.get_abv();
        },
        enumerable: false,
        configurable: true
    });
    CustomIndicator.prototype.get_ab8 = function () {
        return CustomIndicator.$;
    };
    Object.defineProperty(CustomIndicator.prototype, "ab8", {
        get: function () {
            return this.get_ab8();
        },
        enumerable: false,
        configurable: true
    });
    CustomIndicator.prototype.aa7 = function (a, b) {
        var e_1, _a;
        var c = this.xj(a, b);
        var d = this.xk(c);
        var e = new List$1(String_$type, 0);
        if (this.basedOnColumns != null) {
            var f = new FinancialEventArgs(c.calculateFrom, c.calculateCount, c, d, this);
            this.basedOnColumns(this, f);
            if (f.basedOn != null) {
                try {
                    for (var _b = __values(fromEnum(f.basedOn)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var g = _c.value;
                        e.add(g);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            }
        }
        return e;
    };
    Object.defineProperty(CustomIndicator.prototype, "indicator", {
        get: function () {
            return this.ach;
        },
        set: function (a) {
            this.ach = a;
            this.abf();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CustomIndicator.prototype, "basedOnColumns", {
        get: function () {
            return this.acg;
        },
        set: function (a) {
            this.acg = a;
        },
        enumerable: false,
        configurable: true
    });
    CustomIndicator.prototype.aa4 = function (a, b) {
        _super.prototype.aa4.call(this, a, b);
        if (this.indicator != null) {
            var c = this.xj(a, b);
            if (b == 0) {
                return false;
            }
            if (!this.yf(this.aa7(a, b))) {
                return false;
            }
            this.indicator(this, new FinancialEventArgs(a, b, c, this.xk(c), this));
            if (this.abx(c) && this.xp != null) {
                this.xp.c1();
            }
            return true;
        }
        return false;
    };
    CustomIndicator.$t = markType(CustomIndicator, 'CustomIndicator', StrategyBasedIndicator.$);
    return CustomIndicator;
}(StrategyBasedIndicator));
export { CustomIndicator };
