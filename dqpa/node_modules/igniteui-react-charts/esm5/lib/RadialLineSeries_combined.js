/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { AnchoredRadialSeries } from "./AnchoredRadialSeries";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Array_$type, runOn, enumGetBox, markType, markDep } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { ChartSelection } from "./ChartSelection";
import { PropertyMetadata } from "igniteui-react-core";
import { AnchoredRadialSeriesView } from "./AnchoredRadialSeriesView";
import { Defaults } from "./Defaults";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
var RadialLineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RadialLineSeries, _super);
    function RadialLineSeries() {
        var _this = _super.call(this) || this;
        _this.ab = RadialLineSeries.$;
        return _this;
    }
    RadialLineSeries.prototype.bj = function () {
        return new RadialLineSeries();
    };
    RadialLineSeries.prototype.get_fk = function () {
        return true;
    };
    RadialLineSeries.prototype.cs = function () {
        return new RadialLineSeriesView(this);
    };
    RadialLineSeries.prototype.q1 = function (a) {
        _super.prototype.q1.call(this, a);
        this.adp = a;
    };
    RadialLineSeries.prototype.ac = function () {
        _super.prototype.ac.call(this);
    };
    RadialLineSeries.prototype.preferredCategoryMode = function (a) {
        return 0;
    };
    RadialLineSeries.prototype.zy = function () {
        return true;
    };
    RadialLineSeries.prototype.o5 = function (a, b) {
        _super.prototype.o5.call(this, a, b);
        var c = b;
        c.c6();
    };
    RadialLineSeries.prototype.abc = function (a, b) {
        _super.prototype.abc.call(this, a, b);
        var c = b.by;
        var d = b.bx;
        var e = b.getEffectiveViewport();
        var f = a.f;
        var g = f.count;
        var h = new List$1(Array_$type, 2, g);
        var i = 0;
        for (var j = 0; j < g; j++) {
            var k = new Array(4);
            h.add(k);
            k[0] = this.y8.d(a.f._inner[j][0], a.f._inner[j][1], c, d, e);
            k[1] = this.y8.e(a.f._inner[j][0], a.f._inner[j][1], c, d, e);
            k[2] = this.y8.d(a.f._inner[j][0], a.f._inner[j][2], c, d, e);
            var l = a.f._inner[j][2];
            k[3] = this.y8.e(a.f._inner[j][0], l, c, d, e);
            if (l > i) {
                i = l;
            }
        }
        var m = this.getEffectiveViewport1(b);
        this.zg.a2(this, this.zx(), runOn(this, this.yn), this.z6(b), this.z7(b));
        var n = false;
        var o = this.zg.b;
        if (o != null) {
            n = true;
        }
        if (n) {
            var p = new ScalerParams(0, b.by, b.bx, this.yz.ch, m);
            this.ac5(f, -1, this.ab8.count, this.yz, p, b.q);
        }
        var q = b;
        var r = q.df;
        var s = q.dg;
        var t = q.de;
        this.zg.ad(r, true, false, true, false);
        this.zg.ad(s, true, false, true, false);
        this.zg.ad(t, false, true, false, false);
        t._opacity = 0.75 * this.zg.j;
        q.c7(g, h, false, this.adq, this.ab1(h, g - 1, b), q.cx.b, this.id);
    };
    RadialLineSeries.prototype.q9 = function (a, b, c, d) {
        _super.prototype.q9.call(this, a, b, c, d);
        switch (b) {
            case RadialLineSeries.$$p[0]:
                this.rr(false);
                this.ql();
                break;
        }
    };
    RadialLineSeries.prototype.get_ace = function () {
        return true;
    };
    RadialLineSeries.prototype.ak = function (a, b) {
        var c = new List$1(ChartSelection.$, 0);
        this.p4(a, c, b);
        return c.toArray();
    };
    RadialLineSeries.prototype.p4 = function (a, b, c) {
        this.ac2(a, b, c, this.y0);
    };
    RadialLineSeries.$t = markType(RadialLineSeries, 'RadialLineSeries', AnchoredRadialSeries.$);
    RadialLineSeries.$$p = markDep(DependencyProperty, PropertyMetadata, RadialLineSeries, 'raisePropertyChanged', ['UnknownValuePlotting:adq:ads', [UnknownValuePlotting_$type, enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return RadialLineSeries;
}(AnchoredRadialSeries));
export { RadialLineSeries };
/**
 * @hidden
 */
var RadialLineSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RadialLineSeriesView, _super);
    function RadialLineSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.c5 = null;
        _this.dc = new Path();
        _this.db = new Path();
        _this.dd = new Path();
        _this.c9 = new Path();
        _this.c8 = new Path();
        _this.da = new Path();
        _this.c5 = a;
        return _this;
    }
    RadialLineSeriesView.prototype.au = function () {
        _super.prototype.au.call(this);
        if (!this.q) {
            this.b4.xa = Defaults.e;
        }
    };
    Object.defineProperty(RadialLineSeriesView.prototype, "df", {
        get: function () {
            return this.dc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialLineSeriesView.prototype, "dg", {
        get: function () {
            return this.dd;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialLineSeriesView.prototype, "de", {
        get: function () {
            return this.db;
        },
        enumerable: false,
        configurable: true
    });
    RadialLineSeriesView.prototype.c6 = function () {
        this.dc.an = null;
        this.db.an = null;
        this.dd.an = null;
        this.c9.an = null;
        this.c8.an = null;
        this.da.an = null;
        this.as();
    };
    RadialLineSeriesView.prototype.c7 = function (a, b, c, d, e, f, g) {
        this.c1.ab3.m(this.dc, this.db, this.dd, a, b, c, d, e, f, g);
        this.as();
    };
    RadialLineSeriesView.prototype.bd = function () {
        _super.prototype.bd.call(this);
    };
    RadialLineSeriesView.prototype.be = function () {
        _super.prototype.be.call(this);
        var a = this.br();
        this.c8.an = this.db.an;
        this.c9.an = this.dc.an;
        this.da.an = this.dd.an;
        this.c9._stroke = a;
        this.c9.ad = this.e.ie + 3;
        this.da._stroke = a;
        this.da.ad = this.e.ie + 3;
        this.c8._fill = a;
        this.c8._opacity = 1;
    };
    RadialLineSeriesView.prototype.a8 = function (a, b) {
        _super.prototype.a8.call(this, a, b);
        if (a.d) {
            if (b) {
                a.t(this.c8);
                a.t(this.c9);
                a.t(this.da);
            }
            else {
                a.t(this.db);
                a.t(this.dc);
                a.t(this.dd);
            }
        }
    };
    RadialLineSeriesView.prototype.an = function (a) {
        _super.prototype.an.call(this, a);
        this.e.bc.exportPathData(a, this.dc, "lowerShape", ["Lower", "Main"]);
        this.e.bc.exportPathData(a, this.dd, "upperShape", ["Upper"]);
        this.e.bc.exportPathData(a, this.db, "translucentShape", ["Translucent"]);
    };
    RadialLineSeriesView.prototype.af = function () {
        var a = new Color();
        a.colorString = "rgba(95,95,95,0.5)";
        this.e.v1 = a;
        this.e.jm = 3;
        this.e.jn = 1;
        this.e.jo = 4;
        this.e.hc = false;
    };
    RadialLineSeriesView.$t = markType(RadialLineSeriesView, 'RadialLineSeriesView', AnchoredRadialSeriesView.$);
    return RadialLineSeriesView;
}(AnchoredRadialSeriesView));
export { RadialLineSeriesView };
