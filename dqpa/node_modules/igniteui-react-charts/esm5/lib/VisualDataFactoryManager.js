/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
import { DVContainer } from "igniteui-react-core";
import { IDataChartVisualDataManager_$type } from "./IDataChartVisualDataManager";
import { DataChartVisualDataManager } from "./DataChartVisualDataManager";
import { IAxisVisualDataManager_$type } from "./IAxisVisualDataManager";
import { ISeriesVisualDataManager_$type } from "./ISeriesVisualDataManager";
import { AxisVisualDataManager } from "./AxisVisualDataManager";
import { SeriesVisualDataManager } from "./SeriesVisualDataManager";
/**
 * @hidden
 */
var VisualDataFactoryManager = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(VisualDataFactoryManager, _super);
    function VisualDataFactoryManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VisualDataFactoryManager.register = function () {
        if (!VisualDataFactoryManager.a) {
            DVContainer.instance.registerFactory(IDataChartVisualDataManager_$type, function () { return new DataChartVisualDataManager(); });
            DVContainer.instance.registerFactory(IAxisVisualDataManager_$type, function () { return new AxisVisualDataManager(); });
            DVContainer.instance.registerFactory(ISeriesVisualDataManager_$type, function () { return new SeriesVisualDataManager(); });
            VisualDataFactoryManager.a = true;
        }
    };
    VisualDataFactoryManager.$t = markType(VisualDataFactoryManager, 'VisualDataFactoryManager');
    VisualDataFactoryManager.a = false;
    return VisualDataFactoryManager;
}(Base));
export { VisualDataFactoryManager };
