/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, fromEnum, markType } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
/**
 * @hidden
 */
var ArcVisualData = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ArcVisualData, _super);
    function ArcVisualData() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = null;
        _this.b = null;
        return _this;
    }
    ArcVisualData.prototype.d = function (a) {
        var e_1, _a;
        try {
            for (var _b = __values(fromEnum(this.a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                b.scaleByViewport(a);
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    ArcVisualData.prototype.c = function () {
        var a = new StringBuilder(0);
        var b = true;
        a.u("{");
        if (this.b != null) {
            if (b) {
                b = false;
            }
            else {
                a.l(", ");
            }
            a.l("leaderLine: ");
            a.u(this.b.serialize());
        }
        if (this.a != null) {
            if (b) {
                b = false;
            }
            else {
                a.l(", ");
            }
            a.u("slices: [");
            for (var c = 0; c < this.a.count; c++) {
                if (c != 0) {
                    a.l(", ");
                }
                a.l(this.a._inner[c].serialize());
            }
        }
        a.u("]}");
        return a.toString();
    };
    ArcVisualData.$t = markType(ArcVisualData, 'ArcVisualData');
    return ArcVisualData;
}(Base));
export { ArcVisualData };
