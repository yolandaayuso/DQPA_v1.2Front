/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { CategoryTrendLineManagerBase } from "./CategoryTrendLineManagerBase";
import { Point_$type, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { TrendFitCalculator } from "./TrendFitCalculator";
import { TrendAverageCalculator } from "./TrendAverageCalculator";
/**
 * @hidden
 */
var SortingTrendLineManager = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SortingTrendLineManager, _super);
    function SortingTrendLineManager(a, b) {
        var _this = _super.call(this) || this;
        _this.h = null;
        _this.i = null;
        _this.h = a;
        _this.i = b;
        return _this;
    }
    SortingTrendLineManager.prototype.get_g$a = function () {
        return 1;
    };
    SortingTrendLineManager.prototype.prepareLineCore = function (a, b, c, d, e, f, g) {
        var _this = this;
        var h = g.c;
        var i = g.b;
        var j = new List$1(Point_$type, 0);
        if (b == 0) {
            this.a = null;
            this.d.clear();
            return;
        }
        if (this.c(b)) {
            this.d.clear();
            this.a = TrendFitCalculator.a(j, b, g, this.a, c.count, function (k) {
                var l = _this.h(k);
                l = (l - h) / (i - h);
                return l;
            }, function (k) { return c.item(k); }, function (k) {
                var l = (k * (i - h)) + h;
                return e(l);
            }, f, 0, 1);
        }
        if (this.b(b)) {
            this.a = null;
            TrendAverageCalculator.b(b, this.d, c, d);
            for (var k = g.f; k <= g.g; k += 1) {
                var l = k * g.e;
                var m = this.h(l);
                if (l >= 0 && l < this.d.count) {
                    var n = e(m);
                    var o = f(this.d._inner[l]);
                    j.add({ $type: Point_$type, x: n + g.a, y: o });
                }
            }
        }
        this.e(j, g, a);
    };
    SortingTrendLineManager.$t = markType(SortingTrendLineManager, 'SortingTrendLineManager', CategoryTrendLineManagerBase.$);
    return SortingTrendLineManager;
}(CategoryTrendLineManagerBase));
export { SortingTrendLineManager };
