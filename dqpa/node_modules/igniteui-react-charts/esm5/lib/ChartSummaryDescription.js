/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, runOn, delegateRemove, delegateCombine, markType } from "igniteui-react-core";
import { MinSummaryCalculator } from "igniteui-react-core";
import { MaxSummaryCalculator } from "igniteui-react-core";
import { SumSummaryCalculator } from "igniteui-react-core";
import { AverageSummaryCalculator } from "igniteui-react-core";
import { CountSummaryCalculator } from "igniteui-react-core";
/**
 * @hidden
 */
var ChartSummaryDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ChartSummaryDescription, _super);
    function ChartSummaryDescription(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.j = false;
        _this.a = 0;
        _this.m = null;
        _this.b = 0;
        _this.n = null;
        _this.e = null;
        _this.l = null;
        _this.provideCalculator = null;
        _this.g = null;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    _this.p = c;
                    _this.c = 4;
                }
                break;
            case 2:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this.p = c;
                    _this.c = d;
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(ChartSummaryDescription.prototype, "p", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartSummaryDescription.prototype, "c", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
            switch (this.b) {
                case 0:
                    this.f = new MinSummaryCalculator();
                    break;
                case 1:
                    this.f = new MaxSummaryCalculator();
                    break;
                case 2:
                    this.f = new SumSummaryCalculator();
                    break;
                case 3:
                    this.f = new AverageSummaryCalculator();
                    break;
                case 4:
                    this.f = new CountSummaryCalculator();
                    break;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartSummaryDescription.prototype, "f", {
        get: function () {
            return this.e;
        },
        set: function (a) {
            this.e = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartSummaryDescription.prototype, "o", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
        },
        enumerable: false,
        configurable: true
    });
    ChartSummaryDescription.prototype.equals = function (a) {
        var b = a;
        if (b == null) {
            return _super.prototype.equals.call(this, a);
        }
        return b.p == this.p && b.c == this.c;
    };
    ChartSummaryDescription.prototype.getHashCode = function () {
        return Base.getHashCodeStatic(this.p) * 17 + this.c;
    };
    Object.defineProperty(ChartSummaryDescription.prototype, "h", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            var b = this.g;
            if (b != null) {
                b.provideCalculator = delegateRemove(b.provideCalculator, runOn(this, this.q));
            }
            this.g = a;
            if (this.g != null) {
                var c = this.g;
                c.provideCalculator = delegateCombine(c.provideCalculator, runOn(this, this.q));
            }
        },
        enumerable: false,
        configurable: true
    });
    ChartSummaryDescription.prototype.q = function (a, b) {
        if (this.provideCalculator != null) {
            this.provideCalculator(this, b);
            this.f = b.a;
        }
    };
    ChartSummaryDescription.$t = markType(ChartSummaryDescription, 'ChartSummaryDescription');
    return ChartSummaryDescription;
}(Base));
export { ChartSummaryDescription };
